diff --git a/node_modules/@graphql-mesh/utils/esm/defaultImportFn.js b/node_modules/@graphql-mesh/utils/esm/defaultImportFn.js
index a58e0ab..b5ff289 100644
--- a/node_modules/@graphql-mesh/utils/esm/defaultImportFn.js
+++ b/node_modules/@graphql-mesh/utils/esm/defaultImportFn.js
@@ -1,32 +1,4 @@
-import { path as pathModule } from '@graphql-mesh/cross-helpers';
 async function defaultImportFn(path) {
-    let module = await import(/* @vite-ignore */ path)
-        .catch(e => {
-        if (e.code === 'ERR_REQUIRE_ESM') {
-            // eslint-disable-next-line no-new-func
-            return new Function(`return import(${JSON.stringify(path)})`)();
-        }
-        throw e;
-    })
-        .catch(e => {
-        if (pathModule.isAbsolute(path) && !path.endsWith('.js') && !path.endsWith('.ts')) {
-            return defaultImportFn(`${path}.ts`);
-        }
-        throw e;
-    });
-    if (module.default != null) {
-        module = module.default;
-    }
-    if (typeof module === 'object' && module != null) {
-        const prototypeOfObject = Object.getPrototypeOf(module);
-        if (prototypeOfObject == null || prototypeOfObject === Object.prototype) {
-            const normalizedVal = {};
-            for (const key in module) {
-                normalizedVal[key] = module[key];
-            }
-            return normalizedVal;
-        }
-    }
-    return module;
+    return import(path);
 }
 export { defaultImportFn };
diff --git a/node_modules/@graphql-mesh/utils/esm/resolve-additional-resolvers.js b/node_modules/@graphql-mesh/utils/esm/resolve-additional-resolvers.js
index 089ebc3..d83167f 100644
--- a/node_modules/@graphql-mesh/utils/esm/resolve-additional-resolvers.js
+++ b/node_modules/@graphql-mesh/utils/esm/resolve-additional-resolvers.js
@@ -131,7 +131,7 @@ export function resolveAdditionalResolversWithoutImport(additionalResolver, pubs
                         return pubsub.asyncIterator(topic);
                     }, (root, args, context, info) => {
                         // eslint-disable-next-line no-new-func
-                        return additionalResolver.filterBy ? new Function(`return ${additionalResolver.filterBy}`)() : true;
+                        return additionalResolver.filterBy ? additionalResolver.filterBy : true;
                     }),
                     resolve: (payload) => {
                         if (baseOptions.valuesFromResults) {
@@ -247,7 +247,7 @@ export function resolveAdditionalResolvers(baseDir, additionalResolvers, importF
                                 return pubsub.asyncIterator(topic);
                             }, (root, args, context, info) => {
                                 // eslint-disable-next-line no-new-func
-                                return additionalResolver.filterBy ? new Function(`return ${additionalResolver.filterBy}`)() : true;
+                                return additionalResolver.filterBy ? additionalResolver.filterBy : true;
                             }),
                             resolve: (payload) => {
                                 if (baseOptions.valuesFromResults) {
