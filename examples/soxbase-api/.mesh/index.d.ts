import { GraphQLResolveInfo, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';
import { DocumentNode } from 'graphql';
export declare type Maybe<T> = T | null;
export declare type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export declare type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export declare type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export declare type RequireFields<T, K extends keyof T> = {
    [X in Exclude<keyof T, K>]?: T[X];
} & {
    [P in K]-?: NonNullable<T[P]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export declare type Scalars = {
    ID: string;
    String: string;
    Boolean: boolean;
    Int: number;
    Float: number;
    Date: Date;
    DateTime: Date;
    Hex: any;
    Json: any;
    Long: any;
    RGBAHue: any;
    RGBATransparency: any;
    RichTextAST: any;
};
export declare type Query = {
    /** Retrieve multiple productpages */
    productpages: Array<Product>;
    /** Retrieve a single footer */
    footer?: Maybe<Footer>;
    /** Retrieve a single usps */
    usps?: Maybe<Usps>;
    /** Retrieve multiple pages */
    pages: Array<Page>;
    /** Retrieve multiple pages using the Relay connection interface */
    pagesConnection: PageConnection;
    /** Get a list of available store views and their config information. */
    availableStores?: Maybe<Array<Maybe<StoreConfig>>>;
    /** Returns information about shopping cart */
    cart?: Maybe<Cart>;
    categories?: Maybe<CategoryResult>;
    /**
     * The category query searches for categories that match the criteria specified in the search and filter attributes.
     * @deprecated Use 'categoryList' query instead of 'category' query
     */
    category?: Maybe<CategoryTree>;
    /** Returns an array of categories based on the specified filters. */
    categoryList?: Maybe<Array<Maybe<CategoryTree>>>;
    /** The Checkout Agreements information */
    checkoutAgreements?: Maybe<Array<Maybe<CheckoutAgreement>>>;
    /** The CMS block query returns information about CMS blocks */
    cmsBlocks?: Maybe<CmsBlocks>;
    /** The CMS page query returns information about a CMS page */
    cmsPage?: Maybe<CmsPage>;
    /** Return products that have been added to the specified compare list */
    compareList?: Maybe<CompareList>;
    /** The countries query provides information for all countries. */
    countries?: Maybe<Array<Maybe<Country>>>;
    /** The countries query provides information for a single country. */
    country?: Maybe<Country>;
    /** The currency query returns information about store currency. */
    currency?: Maybe<Currency>;
    /** The customAttributeMetadata query returns the attribute type, given an attribute code and entity type */
    customAttributeMetadata?: Maybe<CustomAttributeMetadata>;
    /** The customer query returns information about a customer account */
    customer?: Maybe<Customer>;
    /** Returns information about the customer shopping cart */
    customerCart: Cart;
    /** The query returns the contents of a customer's downloadable products */
    customerDownloadableProducts?: Maybe<CustomerDownloadableProducts>;
    /** @deprecated Use orders from customer instead */
    customerOrders?: Maybe<CustomerOrders>;
    /** Return a list of customer payment tokens */
    customerPaymentTokens?: Maybe<CustomerPaymentTokens>;
    /** Retrieve secure PayPal url for Payments Pro Hosted Solution transaction. */
    getHostedProUrl?: Maybe<HostedProUrl>;
    /** Retrieve payment credentials for transaction. Use this query for Payflow Link and Payments Advanced payment methods. */
    getPayflowLinkToken?: Maybe<PayflowLinkToken>;
    isEmailAvailable?: Maybe<IsEmailAvailableOutput>;
    mollieCustomerOrder?: Maybe<CustomerOrder>;
    molliePaymentMethods?: Maybe<MolliePaymentMethodsOutput>;
    /** The pickup locations query searches for locations that match the search request requirements. */
    pickupLocations?: Maybe<PickupLocations>;
    /** Retrieves metadata required by clients to render the Reviews section. */
    productReviewRatingsMetadata: ProductReviewRatingsMetadata;
    /** The products query searches for products that match the criteria specified in the search and filter attributes. */
    products?: Maybe<Products>;
    /** The store config query */
    storeConfig?: Maybe<StoreConfig>;
    /** The urlResolver query returns the relative URL for a specified product, category or CMS page, using as input a url_key appended by the url_suffix, if one exists */
    urlResolver?: Maybe<EntityUrl>;
    /**
     * The wishlist query returns the contents of a customer's wish list
     * @deprecated Moved under `Customer` `wishlist`
     */
    wishlist?: Maybe<WishlistOutput>;
};
export declare type QueryproductpagesArgs = {
    where?: Maybe<ProductWhereInput>;
    orderBy?: Maybe<ProductOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    stage?: Stage;
    locales?: Array<Locale>;
};
export declare type QueryfooterArgs = {
    where: FooterWhereUniqueInput;
    stage?: Stage;
    locales?: Array<Locale>;
};
export declare type QueryuspsArgs = {
    where: UspsWhereUniqueInput;
    stage?: Stage;
    locales?: Array<Locale>;
};
export declare type QuerypagesArgs = {
    where?: Maybe<PageWhereInput>;
    orderBy?: Maybe<PageOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    stage?: Stage;
    locales?: Array<Locale>;
};
export declare type QuerypagesConnectionArgs = {
    where?: Maybe<PageWhereInput>;
    orderBy?: Maybe<PageOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    stage?: Stage;
    locales?: Array<Locale>;
};
export declare type QueryavailableStoresArgs = {
    useCurrentGroup?: Maybe<Scalars['Boolean']>;
};
export declare type QuerycartArgs = {
    cart_id: Scalars['String'];
};
export declare type QuerycategoriesArgs = {
    filters?: Maybe<CategoryFilterInput>;
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
};
export declare type QuerycategoryArgs = {
    id?: Maybe<Scalars['Int']>;
};
export declare type QuerycategoryListArgs = {
    filters?: Maybe<CategoryFilterInput>;
};
export declare type QuerycmsBlocksArgs = {
    identifiers?: Maybe<Array<Maybe<Scalars['String']>>>;
};
export declare type QuerycmsPageArgs = {
    id?: Maybe<Scalars['Int']>;
    identifier?: Maybe<Scalars['String']>;
};
export declare type QuerycompareListArgs = {
    uid: Scalars['ID'];
};
export declare type QuerycountryArgs = {
    id?: Maybe<Scalars['String']>;
};
export declare type QuerycustomAttributeMetadataArgs = {
    attributes: Array<AttributeInput>;
};
export declare type QuerygetHostedProUrlArgs = {
    input: HostedProUrlInput;
};
export declare type QuerygetPayflowLinkTokenArgs = {
    input: PayflowLinkTokenInput;
};
export declare type QueryisEmailAvailableArgs = {
    email: Scalars['String'];
};
export declare type QuerymollieCustomerOrderArgs = {
    hash?: Maybe<Scalars['String']>;
};
export declare type QuerymolliePaymentMethodsArgs = {
    input?: Maybe<MolliePaymentMethodsInput>;
};
export declare type QuerypickupLocationsArgs = {
    area?: Maybe<AreaInput>;
    filters?: Maybe<PickupLocationFilterInput>;
    sort?: Maybe<PickupLocationSortInput>;
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
    productsInfo?: Maybe<Array<Maybe<ProductInfoInput>>>;
};
export declare type QueryproductsArgs = {
    search?: Maybe<Scalars['String']>;
    filter?: Maybe<ProductAttributeFilterInput>;
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
    sort?: Maybe<ProductAttributeSortInput>;
};
export declare type QueryurlResolverArgs = {
    url: Scalars['String'];
};
export declare type Aggregate = {
    count: Scalars['Int'];
};
/** Asset system model */
export declare type Asset = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<Asset>;
    /** Get the document in other stages */
    documentInStages: Array<Asset>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** The file handle */
    handle: Scalars['String'];
    /** The file name */
    fileName: Scalars['String'];
    /** The height of the file */
    height?: Maybe<Scalars['Float']>;
    /** The file width */
    width?: Maybe<Scalars['Float']>;
    /** The file size */
    size?: Maybe<Scalars['Float']>;
    /** The mime type of the file */
    mimeType?: Maybe<Scalars['String']>;
    alt?: Maybe<Scalars['String']>;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    assetRowHeroBanner: Array<RowHeroBanner>;
    rowSpecialBannerAsset: Array<RowSpecialBanner>;
    assetRowProductBackstory: Array<RowProductBackstory>;
    assetPage: Array<Page>;
    assetPageLink: Array<PageLink>;
    /** List of Asset versions */
    history: Array<Version>;
    /** Get the url for the asset with provided transformations applied. */
    url: Scalars['String'];
};
/** Asset system model */
export declare type AssetlocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
/** Asset system model */
export declare type AssetdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
/** Asset system model */
export declare type AssetcreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
/** Asset system model */
export declare type AssetupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
/** Asset system model */
export declare type AssetpublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
/** Asset system model */
export declare type AssetcreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
/** Asset system model */
export declare type AssetupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
/** Asset system model */
export declare type AssetpublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
/** Asset system model */
export declare type AssetassetRowHeroBannerArgs = {
    where?: Maybe<RowHeroBannerWhereInput>;
    orderBy?: Maybe<RowHeroBannerOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
/** Asset system model */
export declare type AssetrowSpecialBannerAssetArgs = {
    where?: Maybe<RowSpecialBannerWhereInput>;
    orderBy?: Maybe<RowSpecialBannerOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
/** Asset system model */
export declare type AssetassetRowProductBackstoryArgs = {
    where?: Maybe<RowProductBackstoryWhereInput>;
    orderBy?: Maybe<RowProductBackstoryOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
/** Asset system model */
export declare type AssetassetPageArgs = {
    where?: Maybe<PageWhereInput>;
    orderBy?: Maybe<PageOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
/** Asset system model */
export declare type AssetassetPageLinkArgs = {
    where?: Maybe<PageLinkWhereInput>;
    orderBy?: Maybe<PageLinkOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
/** Asset system model */
export declare type AssethistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
/** Asset system model */
export declare type AsseturlArgs = {
    transformation?: Maybe<AssetTransformationInput>;
};
export declare type AssetConnectInput = {
    /** Document to connect */
    where: AssetWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type AssetConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<AssetEdge>;
    aggregate: Aggregate;
};
export declare type AssetCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    handle: Scalars['String'];
    fileName: Scalars['String'];
    height?: Maybe<Scalars['Float']>;
    width?: Maybe<Scalars['Float']>;
    size?: Maybe<Scalars['Float']>;
    mimeType?: Maybe<Scalars['String']>;
    /** alt input for default locale (en) */
    alt?: Maybe<Scalars['String']>;
    assetRowHeroBanner?: Maybe<RowHeroBannerCreateManyInlineInput>;
    rowSpecialBannerAsset?: Maybe<RowSpecialBannerCreateManyInlineInput>;
    assetRowProductBackstory?: Maybe<RowProductBackstoryCreateManyInlineInput>;
    assetPage?: Maybe<PageCreateManyInlineInput>;
    assetPageLink?: Maybe<PageLinkCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<AssetCreateLocalizationsInput>;
};
export declare type AssetCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    handle: Scalars['String'];
    fileName: Scalars['String'];
    height?: Maybe<Scalars['Float']>;
    width?: Maybe<Scalars['Float']>;
    size?: Maybe<Scalars['Float']>;
    mimeType?: Maybe<Scalars['String']>;
    alt?: Maybe<Scalars['String']>;
};
export declare type AssetCreateLocalizationInput = {
    /** Localization input */
    data: AssetCreateLocalizationDataInput;
    locale: Locale;
};
export declare type AssetCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<AssetCreateLocalizationInput>>;
};
export declare type AssetCreateManyInlineInput = {
    /** Create and connect multiple existing Asset documents */
    create?: Maybe<Array<AssetCreateInput>>;
    /** Connect multiple existing Asset documents */
    connect?: Maybe<Array<AssetWhereUniqueInput>>;
};
export declare type AssetCreateOneInlineInput = {
    /** Create and connect one Asset document */
    create?: Maybe<AssetCreateInput>;
    /** Connect one existing Asset document */
    connect?: Maybe<AssetWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type AssetEdge = {
    /** The item at the end of the edge. */
    node: Asset;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type AssetManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<AssetWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<AssetWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<AssetWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    assetRowHeroBanner_every?: Maybe<RowHeroBannerWhereInput>;
    assetRowHeroBanner_some?: Maybe<RowHeroBannerWhereInput>;
    assetRowHeroBanner_none?: Maybe<RowHeroBannerWhereInput>;
    rowSpecialBannerAsset_every?: Maybe<RowSpecialBannerWhereInput>;
    rowSpecialBannerAsset_some?: Maybe<RowSpecialBannerWhereInput>;
    rowSpecialBannerAsset_none?: Maybe<RowSpecialBannerWhereInput>;
    assetRowProductBackstory_every?: Maybe<RowProductBackstoryWhereInput>;
    assetRowProductBackstory_some?: Maybe<RowProductBackstoryWhereInput>;
    assetRowProductBackstory_none?: Maybe<RowProductBackstoryWhereInput>;
    assetPage_every?: Maybe<PageWhereInput>;
    assetPage_some?: Maybe<PageWhereInput>;
    assetPage_none?: Maybe<PageWhereInput>;
    assetPageLink_every?: Maybe<PageLinkWhereInput>;
    assetPageLink_some?: Maybe<PageLinkWhereInput>;
    assetPageLink_none?: Maybe<PageLinkWhereInput>;
};
export declare enum AssetOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    handle_ASC = "handle_ASC",
    handle_DESC = "handle_DESC",
    fileName_ASC = "fileName_ASC",
    fileName_DESC = "fileName_DESC",
    height_ASC = "height_ASC",
    height_DESC = "height_DESC",
    width_ASC = "width_ASC",
    width_DESC = "width_DESC",
    size_ASC = "size_ASC",
    size_DESC = "size_DESC",
    mimeType_ASC = "mimeType_ASC",
    mimeType_DESC = "mimeType_DESC",
    alt_ASC = "alt_ASC",
    alt_DESC = "alt_DESC"
}
/** Transformations for Assets */
export declare type AssetTransformationInput = {
    image?: Maybe<ImageTransformationInput>;
    document?: Maybe<DocumentTransformationInput>;
    /** Pass true if you want to validate the passed transformation parameters */
    validateOptions?: Maybe<Scalars['Boolean']>;
};
export declare type AssetUpdateInput = {
    handle?: Maybe<Scalars['String']>;
    fileName?: Maybe<Scalars['String']>;
    height?: Maybe<Scalars['Float']>;
    width?: Maybe<Scalars['Float']>;
    size?: Maybe<Scalars['Float']>;
    mimeType?: Maybe<Scalars['String']>;
    /** alt input for default locale (en) */
    alt?: Maybe<Scalars['String']>;
    assetRowHeroBanner?: Maybe<RowHeroBannerUpdateManyInlineInput>;
    rowSpecialBannerAsset?: Maybe<RowSpecialBannerUpdateManyInlineInput>;
    assetRowProductBackstory?: Maybe<RowProductBackstoryUpdateManyInlineInput>;
    assetPage?: Maybe<PageUpdateManyInlineInput>;
    assetPageLink?: Maybe<PageLinkUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<AssetUpdateLocalizationsInput>;
};
export declare type AssetUpdateLocalizationDataInput = {
    handle?: Maybe<Scalars['String']>;
    fileName?: Maybe<Scalars['String']>;
    height?: Maybe<Scalars['Float']>;
    width?: Maybe<Scalars['Float']>;
    size?: Maybe<Scalars['Float']>;
    mimeType?: Maybe<Scalars['String']>;
    alt?: Maybe<Scalars['String']>;
};
export declare type AssetUpdateLocalizationInput = {
    data: AssetUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type AssetUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<AssetCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<AssetUpdateLocalizationInput>>;
    upsert?: Maybe<Array<AssetUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type AssetUpdateManyInlineInput = {
    /** Create and connect multiple Asset documents */
    create?: Maybe<Array<AssetCreateInput>>;
    /** Connect multiple existing Asset documents */
    connect?: Maybe<Array<AssetConnectInput>>;
    /** Override currently-connected documents with multiple existing Asset documents */
    set?: Maybe<Array<AssetWhereUniqueInput>>;
    /** Update multiple Asset documents */
    update?: Maybe<Array<AssetUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple Asset documents */
    upsert?: Maybe<Array<AssetUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple Asset documents */
    disconnect?: Maybe<Array<AssetWhereUniqueInput>>;
    /** Delete multiple Asset documents */
    delete?: Maybe<Array<AssetWhereUniqueInput>>;
};
export declare type AssetUpdateManyInput = {
    fileName?: Maybe<Scalars['String']>;
    height?: Maybe<Scalars['Float']>;
    width?: Maybe<Scalars['Float']>;
    size?: Maybe<Scalars['Float']>;
    mimeType?: Maybe<Scalars['String']>;
    /** alt input for default locale (en) */
    alt?: Maybe<Scalars['String']>;
    /** Optional updates to localizations */
    localizations?: Maybe<AssetUpdateManyLocalizationsInput>;
};
export declare type AssetUpdateManyLocalizationDataInput = {
    fileName?: Maybe<Scalars['String']>;
    height?: Maybe<Scalars['Float']>;
    width?: Maybe<Scalars['Float']>;
    size?: Maybe<Scalars['Float']>;
    mimeType?: Maybe<Scalars['String']>;
    alt?: Maybe<Scalars['String']>;
};
export declare type AssetUpdateManyLocalizationInput = {
    data: AssetUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type AssetUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<AssetUpdateManyLocalizationInput>>;
};
export declare type AssetUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: AssetWhereInput;
    /** Update many input */
    data: AssetUpdateManyInput;
};
export declare type AssetUpdateOneInlineInput = {
    /** Create and connect one Asset document */
    create?: Maybe<AssetCreateInput>;
    /** Update single Asset document */
    update?: Maybe<AssetUpdateWithNestedWhereUniqueInput>;
    /** Upsert single Asset document */
    upsert?: Maybe<AssetUpsertWithNestedWhereUniqueInput>;
    /** Connect existing Asset document */
    connect?: Maybe<AssetWhereUniqueInput>;
    /** Disconnect currently connected Asset document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected Asset document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type AssetUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: AssetWhereUniqueInput;
    /** Document to update */
    data: AssetUpdateInput;
};
export declare type AssetUpsertInput = {
    /** Create document if it didn't exist */
    create: AssetCreateInput;
    /** Update document if it exists */
    update: AssetUpdateInput;
};
export declare type AssetUpsertLocalizationInput = {
    update: AssetUpdateLocalizationDataInput;
    create: AssetCreateLocalizationDataInput;
    locale: Locale;
};
export declare type AssetUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: AssetWhereUniqueInput;
    /** Upsert data */
    data: AssetUpsertInput;
};
/** Identifies documents */
export declare type AssetWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<AssetWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<AssetWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<AssetWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    handle?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    handle_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    handle_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    handle_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    handle_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    handle_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    handle_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    handle_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    handle_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    handle_not_ends_with?: Maybe<Scalars['String']>;
    fileName?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    fileName_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    fileName_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    fileName_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    fileName_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    fileName_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    fileName_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    fileName_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    fileName_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    fileName_not_ends_with?: Maybe<Scalars['String']>;
    height?: Maybe<Scalars['Float']>;
    /** All values that are not equal to given value. */
    height_not?: Maybe<Scalars['Float']>;
    /** All values that are contained in given list. */
    height_in?: Maybe<Array<Scalars['Float']>>;
    /** All values that are not contained in given list. */
    height_not_in?: Maybe<Array<Scalars['Float']>>;
    /** All values less than the given value. */
    height_lt?: Maybe<Scalars['Float']>;
    /** All values less than or equal the given value. */
    height_lte?: Maybe<Scalars['Float']>;
    /** All values greater than the given value. */
    height_gt?: Maybe<Scalars['Float']>;
    /** All values greater than or equal the given value. */
    height_gte?: Maybe<Scalars['Float']>;
    width?: Maybe<Scalars['Float']>;
    /** All values that are not equal to given value. */
    width_not?: Maybe<Scalars['Float']>;
    /** All values that are contained in given list. */
    width_in?: Maybe<Array<Scalars['Float']>>;
    /** All values that are not contained in given list. */
    width_not_in?: Maybe<Array<Scalars['Float']>>;
    /** All values less than the given value. */
    width_lt?: Maybe<Scalars['Float']>;
    /** All values less than or equal the given value. */
    width_lte?: Maybe<Scalars['Float']>;
    /** All values greater than the given value. */
    width_gt?: Maybe<Scalars['Float']>;
    /** All values greater than or equal the given value. */
    width_gte?: Maybe<Scalars['Float']>;
    size?: Maybe<Scalars['Float']>;
    /** All values that are not equal to given value. */
    size_not?: Maybe<Scalars['Float']>;
    /** All values that are contained in given list. */
    size_in?: Maybe<Array<Scalars['Float']>>;
    /** All values that are not contained in given list. */
    size_not_in?: Maybe<Array<Scalars['Float']>>;
    /** All values less than the given value. */
    size_lt?: Maybe<Scalars['Float']>;
    /** All values less than or equal the given value. */
    size_lte?: Maybe<Scalars['Float']>;
    /** All values greater than the given value. */
    size_gt?: Maybe<Scalars['Float']>;
    /** All values greater than or equal the given value. */
    size_gte?: Maybe<Scalars['Float']>;
    mimeType?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    mimeType_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    mimeType_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    mimeType_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    mimeType_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    mimeType_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    mimeType_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    mimeType_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    mimeType_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    mimeType_not_ends_with?: Maybe<Scalars['String']>;
    alt?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    alt_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    alt_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    alt_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    alt_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    alt_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    alt_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    alt_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    alt_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    alt_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    assetRowHeroBanner_every?: Maybe<RowHeroBannerWhereInput>;
    assetRowHeroBanner_some?: Maybe<RowHeroBannerWhereInput>;
    assetRowHeroBanner_none?: Maybe<RowHeroBannerWhereInput>;
    rowSpecialBannerAsset_every?: Maybe<RowSpecialBannerWhereInput>;
    rowSpecialBannerAsset_some?: Maybe<RowSpecialBannerWhereInput>;
    rowSpecialBannerAsset_none?: Maybe<RowSpecialBannerWhereInput>;
    assetRowProductBackstory_every?: Maybe<RowProductBackstoryWhereInput>;
    assetRowProductBackstory_some?: Maybe<RowProductBackstoryWhereInput>;
    assetRowProductBackstory_none?: Maybe<RowProductBackstoryWhereInput>;
    assetPage_every?: Maybe<PageWhereInput>;
    assetPage_some?: Maybe<PageWhereInput>;
    assetPage_none?: Maybe<PageWhereInput>;
    assetPageLink_every?: Maybe<PageLinkWhereInput>;
    assetPageLink_some?: Maybe<PageLinkWhereInput>;
    assetPageLink_none?: Maybe<PageLinkWhereInput>;
};
/** References Asset record uniquely */
export declare type AssetWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
};
export declare type BatchPayload = {
    /** The number of nodes that have been affected by the Batch operation. */
    count: Scalars['Long'];
};
/** Representing a color value comprising of HEX, RGBA and css color values */
export declare type Color = {
    hex: Scalars['Hex'];
    rgba: RGBA;
    css: Scalars['String'];
};
/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */
export declare type ColorInput = {
    hex?: Maybe<Scalars['Hex']>;
    rgba?: Maybe<RGBAInput>;
};
export declare type ConnectPositionInput = {
    /** Connect document after specified document */
    after?: Maybe<Scalars['ID']>;
    /** Connect document before specified document */
    before?: Maybe<Scalars['ID']>;
    /** Connect document at first position */
    start?: Maybe<Scalars['Boolean']>;
    /** Connect document at last position */
    end?: Maybe<Scalars['Boolean']>;
};
export declare enum DocumentFileTypes {
    jpg = "jpg",
    odp = "odp",
    ods = "ods",
    odt = "odt",
    png = "png",
    svg = "svg",
    txt = "txt",
    webp = "webp",
    docx = "docx",
    pdf = "pdf",
    html = "html",
    doc = "doc",
    xlsx = "xlsx",
    xls = "xls",
    pptx = "pptx",
    ppt = "ppt"
}
export declare type DocumentOutputInput = {
    /**
     * Transforms a document into a desired file type.
     * See this matrix for format support:
     *
     * PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
     * DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
     * DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
     * ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
     * XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
     * XLSX:	jpg, pdf, ods, png, svg, xls, and webp
     * ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
     * PPT:	jpg, odp, pdf, png, svg, pptx, and webp
     * PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
     * ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
     * BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
     * GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
     * JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
     * PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
     * WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
     * TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
     * AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
     * PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
     * SVG:	jpg, odp, ods, odt, pdf, png, and webp
     * HTML:	jpg, odt, pdf, svg, txt, and webp
     * TXT:	jpg, html, odt, pdf, svg, and webp
     */
    format?: Maybe<DocumentFileTypes>;
};
/** Transformations for Documents */
export declare type DocumentTransformationInput = {
    /** Changes the output for the file. */
    output?: Maybe<DocumentOutputInput>;
};
export declare type DocumentVersion = {
    id: Scalars['ID'];
    stage: Stage;
    revision: Scalars['Int'];
    createdAt: Scalars['DateTime'];
    data?: Maybe<Scalars['Json']>;
};
export declare type Footer = Node & {
    /** System stage field */
    stage: Stage;
    /** Get the document in other stages */
    documentInStages: Array<Footer>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    copyright?: Maybe<Scalars['String']>;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    socialLinks: Array<PageLink>;
    legalLinks: Array<PageLink>;
    /** List of Footer versions */
    history: Array<Version>;
};
export declare type FooterdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type FootercreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type FooterupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type FooterpublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type FootersocialLinksArgs = {
    where?: Maybe<PageLinkWhereInput>;
    orderBy?: Maybe<PageLinkOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type FooterlegalLinksArgs = {
    where?: Maybe<PageLinkWhereInput>;
    orderBy?: Maybe<PageLinkOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type FooterhistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type FooterConnectInput = {
    /** Document to connect */
    where: FooterWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type FooterConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<FooterEdge>;
    aggregate: Aggregate;
};
export declare type FooterCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    copyright?: Maybe<Scalars['String']>;
    socialLinks?: Maybe<PageLinkCreateManyInlineInput>;
    legalLinks?: Maybe<PageLinkCreateManyInlineInput>;
};
export declare type FooterCreateManyInlineInput = {
    /** Create and connect multiple existing Footer documents */
    create?: Maybe<Array<FooterCreateInput>>;
    /** Connect multiple existing Footer documents */
    connect?: Maybe<Array<FooterWhereUniqueInput>>;
};
export declare type FooterCreateOneInlineInput = {
    /** Create and connect one Footer document */
    create?: Maybe<FooterCreateInput>;
    /** Connect one existing Footer document */
    connect?: Maybe<FooterWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type FooterEdge = {
    /** The item at the end of the edge. */
    node: Footer;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type FooterManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<FooterWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<FooterWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<FooterWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    copyright?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    copyright_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    copyright_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    copyright_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    copyright_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    copyright_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    copyright_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    copyright_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    copyright_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    copyright_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    socialLinks_every?: Maybe<PageLinkWhereInput>;
    socialLinks_some?: Maybe<PageLinkWhereInput>;
    socialLinks_none?: Maybe<PageLinkWhereInput>;
    legalLinks_every?: Maybe<PageLinkWhereInput>;
    legalLinks_some?: Maybe<PageLinkWhereInput>;
    legalLinks_none?: Maybe<PageLinkWhereInput>;
};
export declare enum FooterOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC",
    copyright_ASC = "copyright_ASC",
    copyright_DESC = "copyright_DESC"
}
export declare type FooterUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    copyright?: Maybe<Scalars['String']>;
    socialLinks?: Maybe<PageLinkUpdateManyInlineInput>;
    legalLinks?: Maybe<PageLinkUpdateManyInlineInput>;
};
export declare type FooterUpdateManyInlineInput = {
    /** Create and connect multiple Footer documents */
    create?: Maybe<Array<FooterCreateInput>>;
    /** Connect multiple existing Footer documents */
    connect?: Maybe<Array<FooterConnectInput>>;
    /** Override currently-connected documents with multiple existing Footer documents */
    set?: Maybe<Array<FooterWhereUniqueInput>>;
    /** Update multiple Footer documents */
    update?: Maybe<Array<FooterUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple Footer documents */
    upsert?: Maybe<Array<FooterUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple Footer documents */
    disconnect?: Maybe<Array<FooterWhereUniqueInput>>;
    /** Delete multiple Footer documents */
    delete?: Maybe<Array<FooterWhereUniqueInput>>;
};
export declare type FooterUpdateManyInput = {
    copyright?: Maybe<Scalars['String']>;
};
export declare type FooterUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: FooterWhereInput;
    /** Update many input */
    data: FooterUpdateManyInput;
};
export declare type FooterUpdateOneInlineInput = {
    /** Create and connect one Footer document */
    create?: Maybe<FooterCreateInput>;
    /** Update single Footer document */
    update?: Maybe<FooterUpdateWithNestedWhereUniqueInput>;
    /** Upsert single Footer document */
    upsert?: Maybe<FooterUpsertWithNestedWhereUniqueInput>;
    /** Connect existing Footer document */
    connect?: Maybe<FooterWhereUniqueInput>;
    /** Disconnect currently connected Footer document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected Footer document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type FooterUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: FooterWhereUniqueInput;
    /** Document to update */
    data: FooterUpdateInput;
};
export declare type FooterUpsertInput = {
    /** Create document if it didn't exist */
    create: FooterCreateInput;
    /** Update document if it exists */
    update: FooterUpdateInput;
};
export declare type FooterUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: FooterWhereUniqueInput;
    /** Upsert data */
    data: FooterUpsertInput;
};
/** Identifies documents */
export declare type FooterWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<FooterWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<FooterWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<FooterWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    copyright?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    copyright_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    copyright_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    copyright_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    copyright_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    copyright_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    copyright_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    copyright_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    copyright_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    copyright_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    socialLinks_every?: Maybe<PageLinkWhereInput>;
    socialLinks_some?: Maybe<PageLinkWhereInput>;
    socialLinks_none?: Maybe<PageLinkWhereInput>;
    legalLinks_every?: Maybe<PageLinkWhereInput>;
    legalLinks_some?: Maybe<PageLinkWhereInput>;
    legalLinks_none?: Maybe<PageLinkWhereInput>;
};
/** References Footer record uniquely */
export declare type FooterWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare enum ImageFit {
    /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
    clip = "clip",
    /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
    crop = "crop",
    /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
    scale = "scale",
    /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
    max = "max"
}
export declare type ImageResizeInput = {
    /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
    width?: Maybe<Scalars['Int']>;
    /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
    height?: Maybe<Scalars['Int']>;
    /** The default value for the fit parameter is fit:clip. */
    fit?: Maybe<ImageFit>;
};
/** Transformations for Images */
export declare type ImageTransformationInput = {
    /** Resizes the image */
    resize?: Maybe<ImageResizeInput>;
};
/** Locale system enumeration */
export declare enum Locale {
    /** System locale */
    en = "en"
}
/** Representing a geolocation point with latitude and longitude */
export declare type Location = {
    latitude: Scalars['Float'];
    longitude: Scalars['Float'];
    distance: Scalars['Float'];
};
/** Representing a geolocation point with latitude and longitude */
export declare type LocationdistanceArgs = {
    from: LocationInput;
};
/** Input for a geolocation point with latitude and longitude */
export declare type LocationInput = {
    latitude: Scalars['Float'];
    longitude: Scalars['Float'];
};
export declare type MagentoCategory = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<MagentoCategory>;
    /** Get the document in other stages */
    documentInStages: Array<MagentoCategory>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    url: Scalars['String'];
    category?: Maybe<Scalars['String']>;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    rowProductGrids: Array<RowProductGrid>;
    /** List of MagentoCategory versions */
    history: Array<Version>;
};
export declare type MagentoCategorylocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type MagentoCategorydocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type MagentoCategorycreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type MagentoCategoryupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type MagentoCategorypublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type MagentoCategorycreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type MagentoCategoryupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type MagentoCategorypublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type MagentoCategoryrowProductGridsArgs = {
    where?: Maybe<RowProductGridWhereInput>;
    orderBy?: Maybe<RowProductGridOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type MagentoCategoryhistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type MagentoCategoryConnectInput = {
    /** Document to connect */
    where: MagentoCategoryWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type MagentoCategoryConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<MagentoCategoryEdge>;
    aggregate: Aggregate;
};
export declare type MagentoCategoryCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** url input for default locale (en) */
    url: Scalars['String'];
    category?: Maybe<Scalars['String']>;
    rowProductGrids?: Maybe<RowProductGridCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<MagentoCategoryCreateLocalizationsInput>;
};
export declare type MagentoCategoryCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    url: Scalars['String'];
};
export declare type MagentoCategoryCreateLocalizationInput = {
    /** Localization input */
    data: MagentoCategoryCreateLocalizationDataInput;
    locale: Locale;
};
export declare type MagentoCategoryCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<MagentoCategoryCreateLocalizationInput>>;
};
export declare type MagentoCategoryCreateManyInlineInput = {
    /** Create and connect multiple existing MagentoCategory documents */
    create?: Maybe<Array<MagentoCategoryCreateInput>>;
    /** Connect multiple existing MagentoCategory documents */
    connect?: Maybe<Array<MagentoCategoryWhereUniqueInput>>;
};
export declare type MagentoCategoryCreateOneInlineInput = {
    /** Create and connect one MagentoCategory document */
    create?: Maybe<MagentoCategoryCreateInput>;
    /** Connect one existing MagentoCategory document */
    connect?: Maybe<MagentoCategoryWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type MagentoCategoryEdge = {
    /** The item at the end of the edge. */
    node: MagentoCategory;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type MagentoCategoryManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<MagentoCategoryWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<MagentoCategoryWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<MagentoCategoryWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    category?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    category_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    category_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    category_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    category_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    category_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    category_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    category_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    category_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    category_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    rowProductGrids_every?: Maybe<RowProductGridWhereInput>;
    rowProductGrids_some?: Maybe<RowProductGridWhereInput>;
    rowProductGrids_none?: Maybe<RowProductGridWhereInput>;
};
export declare enum MagentoCategoryOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    url_ASC = "url_ASC",
    url_DESC = "url_DESC",
    category_ASC = "category_ASC",
    category_DESC = "category_DESC"
}
export declare type MagentoCategoryUpdateInput = {
    /** url input for default locale (en) */
    url?: Maybe<Scalars['String']>;
    category?: Maybe<Scalars['String']>;
    rowProductGrids?: Maybe<RowProductGridUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<MagentoCategoryUpdateLocalizationsInput>;
};
export declare type MagentoCategoryUpdateLocalizationDataInput = {
    url?: Maybe<Scalars['String']>;
};
export declare type MagentoCategoryUpdateLocalizationInput = {
    data: MagentoCategoryUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type MagentoCategoryUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<MagentoCategoryCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<MagentoCategoryUpdateLocalizationInput>>;
    upsert?: Maybe<Array<MagentoCategoryUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type MagentoCategoryUpdateManyInlineInput = {
    /** Create and connect multiple MagentoCategory documents */
    create?: Maybe<Array<MagentoCategoryCreateInput>>;
    /** Connect multiple existing MagentoCategory documents */
    connect?: Maybe<Array<MagentoCategoryConnectInput>>;
    /** Override currently-connected documents with multiple existing MagentoCategory documents */
    set?: Maybe<Array<MagentoCategoryWhereUniqueInput>>;
    /** Update multiple MagentoCategory documents */
    update?: Maybe<Array<MagentoCategoryUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple MagentoCategory documents */
    upsert?: Maybe<Array<MagentoCategoryUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple MagentoCategory documents */
    disconnect?: Maybe<Array<MagentoCategoryWhereUniqueInput>>;
    /** Delete multiple MagentoCategory documents */
    delete?: Maybe<Array<MagentoCategoryWhereUniqueInput>>;
};
export declare type MagentoCategoryUpdateManyInput = {
    category?: Maybe<Scalars['String']>;
};
export declare type MagentoCategoryUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: MagentoCategoryWhereInput;
    /** Update many input */
    data: MagentoCategoryUpdateManyInput;
};
export declare type MagentoCategoryUpdateOneInlineInput = {
    /** Create and connect one MagentoCategory document */
    create?: Maybe<MagentoCategoryCreateInput>;
    /** Update single MagentoCategory document */
    update?: Maybe<MagentoCategoryUpdateWithNestedWhereUniqueInput>;
    /** Upsert single MagentoCategory document */
    upsert?: Maybe<MagentoCategoryUpsertWithNestedWhereUniqueInput>;
    /** Connect existing MagentoCategory document */
    connect?: Maybe<MagentoCategoryWhereUniqueInput>;
    /** Disconnect currently connected MagentoCategory document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected MagentoCategory document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type MagentoCategoryUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: MagentoCategoryWhereUniqueInput;
    /** Document to update */
    data: MagentoCategoryUpdateInput;
};
export declare type MagentoCategoryUpsertInput = {
    /** Create document if it didn't exist */
    create: MagentoCategoryCreateInput;
    /** Update document if it exists */
    update: MagentoCategoryUpdateInput;
};
export declare type MagentoCategoryUpsertLocalizationInput = {
    update: MagentoCategoryUpdateLocalizationDataInput;
    create: MagentoCategoryCreateLocalizationDataInput;
    locale: Locale;
};
export declare type MagentoCategoryUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: MagentoCategoryWhereUniqueInput;
    /** Upsert data */
    data: MagentoCategoryUpsertInput;
};
/** Identifies documents */
export declare type MagentoCategoryWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<MagentoCategoryWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<MagentoCategoryWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<MagentoCategoryWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    url?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    url_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    url_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    url_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    url_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    url_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    url_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    url_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    url_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    url_not_ends_with?: Maybe<Scalars['String']>;
    category?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    category_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    category_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    category_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    category_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    category_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    category_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    category_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    category_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    category_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    rowProductGrids_every?: Maybe<RowProductGridWhereInput>;
    rowProductGrids_some?: Maybe<RowProductGridWhereInput>;
    rowProductGrids_none?: Maybe<RowProductGridWhereInput>;
};
/** References MagentoCategory record uniquely */
export declare type MagentoCategoryWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
};
export declare enum MetaRobots {
    INDEX_FOLLOW = "INDEX_FOLLOW",
    INDEX_NOFOLLOW = "INDEX_NOFOLLOW",
    NOINDEX_FOLLOW = "NOINDEX_FOLLOW",
    NOINDEX_NOFOLLOW = "NOINDEX_NOFOLLOW"
}
/** An object with an ID */
export declare type Node = {
    /** The id of the object. */
    id: Scalars['ID'];
    /** The Stage of an object */
    stage: Stage;
};
export declare type Page = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<Page>;
    /** Get the document in other stages */
    documentInStages: Array<Page>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    url: Scalars['String'];
    title?: Maybe<Scalars['String']>;
    metaTitle: Scalars['String'];
    metaDescription: Scalars['String'];
    date?: Maybe<Scalars['DateTime']>;
    author?: Maybe<Scalars['String']>;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    rowButtonLinkLists: Array<RowButtonLinkList>;
    /** 9:6 for general usage */
    asset?: Maybe<Asset>;
    childPages: Array<Page>;
    relatedPages: Array<Page>;
    metaRobots: MetaRobots;
    content: Array<PageContent>;
    /** List of Page versions */
    history: Array<Version>;
};
export declare type PagelocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type PagedocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type PagecreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type PageupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type PagepublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type PagecreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type PageupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type PagepublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type PagerowButtonLinkListsArgs = {
    where?: Maybe<RowButtonLinkListWhereInput>;
    orderBy?: Maybe<RowButtonLinkListOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type PageassetArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type PagechildPagesArgs = {
    where?: Maybe<PageWhereInput>;
    orderBy?: Maybe<PageOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type PagerelatedPagesArgs = {
    where?: Maybe<PageWhereInput>;
    orderBy?: Maybe<PageOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type PagecontentArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type PagehistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type PageConnectInput = {
    /** Document to connect */
    where: PageWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type PageConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<PageEdge>;
    aggregate: Aggregate;
};
export declare type PageContent = RowBlogContent | RowButtonLinkList | RowColumnOne | RowColumnThree | RowColumnTwo | RowContentLinks | RowHeroBanner | RowProductBackstory | RowProductGrid | RowQuote | RowServiceOptions | RowSpecialBanner | RowSwipeableGrid;
export declare type PageContentConnectInput = {
    RowSpecialBanner?: Maybe<RowSpecialBannerConnectInput>;
    RowColumnOne?: Maybe<RowColumnOneConnectInput>;
    RowColumnTwo?: Maybe<RowColumnTwoConnectInput>;
    RowColumnThree?: Maybe<RowColumnThreeConnectInput>;
    RowQuote?: Maybe<RowQuoteConnectInput>;
    RowHeroBanner?: Maybe<RowHeroBannerConnectInput>;
    RowProductGrid?: Maybe<RowProductGridConnectInput>;
    RowSwipeableGrid?: Maybe<RowSwipeableGridConnectInput>;
    RowProductBackstory?: Maybe<RowProductBackstoryConnectInput>;
    RowButtonLinkList?: Maybe<RowButtonLinkListConnectInput>;
    RowServiceOptions?: Maybe<RowServiceOptionsConnectInput>;
    RowBlogContent?: Maybe<RowBlogContentConnectInput>;
    RowContentLinks?: Maybe<RowContentLinksConnectInput>;
};
export declare type PageContentCreateInput = {
    RowSpecialBanner?: Maybe<RowSpecialBannerCreateInput>;
    RowColumnOne?: Maybe<RowColumnOneCreateInput>;
    RowColumnTwo?: Maybe<RowColumnTwoCreateInput>;
    RowColumnThree?: Maybe<RowColumnThreeCreateInput>;
    RowQuote?: Maybe<RowQuoteCreateInput>;
    RowHeroBanner?: Maybe<RowHeroBannerCreateInput>;
    RowProductGrid?: Maybe<RowProductGridCreateInput>;
    RowSwipeableGrid?: Maybe<RowSwipeableGridCreateInput>;
    RowProductBackstory?: Maybe<RowProductBackstoryCreateInput>;
    RowButtonLinkList?: Maybe<RowButtonLinkListCreateInput>;
    RowServiceOptions?: Maybe<RowServiceOptionsCreateInput>;
    RowBlogContent?: Maybe<RowBlogContentCreateInput>;
    RowContentLinks?: Maybe<RowContentLinksCreateInput>;
};
export declare type PageContentCreateManyInlineInput = {
    /** Create and connect multiple existing PageContent documents */
    create?: Maybe<Array<PageContentCreateInput>>;
    /** Connect multiple existing PageContent documents */
    connect?: Maybe<Array<PageContentWhereUniqueInput>>;
};
export declare type PageContentCreateOneInlineInput = {
    /** Create and connect one PageContent document */
    create?: Maybe<PageContentCreateInput>;
    /** Connect one existing PageContent document */
    connect?: Maybe<PageContentWhereUniqueInput>;
};
export declare type PageContentUpdateInput = {
    RowSpecialBanner?: Maybe<RowSpecialBannerUpdateInput>;
    RowColumnOne?: Maybe<RowColumnOneUpdateInput>;
    RowColumnTwo?: Maybe<RowColumnTwoUpdateInput>;
    RowColumnThree?: Maybe<RowColumnThreeUpdateInput>;
    RowQuote?: Maybe<RowQuoteUpdateInput>;
    RowHeroBanner?: Maybe<RowHeroBannerUpdateInput>;
    RowProductGrid?: Maybe<RowProductGridUpdateInput>;
    RowSwipeableGrid?: Maybe<RowSwipeableGridUpdateInput>;
    RowProductBackstory?: Maybe<RowProductBackstoryUpdateInput>;
    RowButtonLinkList?: Maybe<RowButtonLinkListUpdateInput>;
    RowServiceOptions?: Maybe<RowServiceOptionsUpdateInput>;
    RowBlogContent?: Maybe<RowBlogContentUpdateInput>;
    RowContentLinks?: Maybe<RowContentLinksUpdateInput>;
};
export declare type PageContentUpdateManyInlineInput = {
    /** Create and connect multiple PageContent documents */
    create?: Maybe<Array<PageContentCreateInput>>;
    /** Connect multiple existing PageContent documents */
    connect?: Maybe<Array<PageContentConnectInput>>;
    /** Override currently-connected documents with multiple existing PageContent documents */
    set?: Maybe<Array<PageContentWhereUniqueInput>>;
    /** Update multiple PageContent documents */
    update?: Maybe<Array<PageContentUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple PageContent documents */
    upsert?: Maybe<Array<PageContentUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple PageContent documents */
    disconnect?: Maybe<Array<PageContentWhereUniqueInput>>;
    /** Delete multiple PageContent documents */
    delete?: Maybe<Array<PageContentWhereUniqueInput>>;
};
export declare type PageContentUpdateManyWithNestedWhereInput = {
    RowSpecialBanner?: Maybe<RowSpecialBannerUpdateManyWithNestedWhereInput>;
    RowColumnOne?: Maybe<RowColumnOneUpdateManyWithNestedWhereInput>;
    RowColumnTwo?: Maybe<RowColumnTwoUpdateManyWithNestedWhereInput>;
    RowColumnThree?: Maybe<RowColumnThreeUpdateManyWithNestedWhereInput>;
    RowQuote?: Maybe<RowQuoteUpdateManyWithNestedWhereInput>;
    RowHeroBanner?: Maybe<RowHeroBannerUpdateManyWithNestedWhereInput>;
    RowProductGrid?: Maybe<RowProductGridUpdateManyWithNestedWhereInput>;
    RowSwipeableGrid?: Maybe<RowSwipeableGridUpdateManyWithNestedWhereInput>;
    RowProductBackstory?: Maybe<RowProductBackstoryUpdateManyWithNestedWhereInput>;
    RowButtonLinkList?: Maybe<RowButtonLinkListUpdateManyWithNestedWhereInput>;
    RowServiceOptions?: Maybe<RowServiceOptionsUpdateManyWithNestedWhereInput>;
    RowBlogContent?: Maybe<RowBlogContentUpdateManyWithNestedWhereInput>;
    RowContentLinks?: Maybe<RowContentLinksUpdateManyWithNestedWhereInput>;
};
export declare type PageContentUpdateOneInlineInput = {
    /** Create and connect one PageContent document */
    create?: Maybe<PageContentCreateInput>;
    /** Update single PageContent document */
    update?: Maybe<PageContentUpdateWithNestedWhereUniqueInput>;
    /** Upsert single PageContent document */
    upsert?: Maybe<PageContentUpsertWithNestedWhereUniqueInput>;
    /** Connect existing PageContent document */
    connect?: Maybe<PageContentWhereUniqueInput>;
    /** Disconnect currently connected PageContent document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected PageContent document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type PageContentUpdateWithNestedWhereUniqueInput = {
    RowSpecialBanner?: Maybe<RowSpecialBannerUpdateWithNestedWhereUniqueInput>;
    RowColumnOne?: Maybe<RowColumnOneUpdateWithNestedWhereUniqueInput>;
    RowColumnTwo?: Maybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>;
    RowColumnThree?: Maybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>;
    RowQuote?: Maybe<RowQuoteUpdateWithNestedWhereUniqueInput>;
    RowHeroBanner?: Maybe<RowHeroBannerUpdateWithNestedWhereUniqueInput>;
    RowProductGrid?: Maybe<RowProductGridUpdateWithNestedWhereUniqueInput>;
    RowSwipeableGrid?: Maybe<RowSwipeableGridUpdateWithNestedWhereUniqueInput>;
    RowProductBackstory?: Maybe<RowProductBackstoryUpdateWithNestedWhereUniqueInput>;
    RowButtonLinkList?: Maybe<RowButtonLinkListUpdateWithNestedWhereUniqueInput>;
    RowServiceOptions?: Maybe<RowServiceOptionsUpdateWithNestedWhereUniqueInput>;
    RowBlogContent?: Maybe<RowBlogContentUpdateWithNestedWhereUniqueInput>;
    RowContentLinks?: Maybe<RowContentLinksUpdateWithNestedWhereUniqueInput>;
};
export declare type PageContentUpsertWithNestedWhereUniqueInput = {
    RowSpecialBanner?: Maybe<RowSpecialBannerUpsertWithNestedWhereUniqueInput>;
    RowColumnOne?: Maybe<RowColumnOneUpsertWithNestedWhereUniqueInput>;
    RowColumnTwo?: Maybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>;
    RowColumnThree?: Maybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>;
    RowQuote?: Maybe<RowQuoteUpsertWithNestedWhereUniqueInput>;
    RowHeroBanner?: Maybe<RowHeroBannerUpsertWithNestedWhereUniqueInput>;
    RowProductGrid?: Maybe<RowProductGridUpsertWithNestedWhereUniqueInput>;
    RowSwipeableGrid?: Maybe<RowSwipeableGridUpsertWithNestedWhereUniqueInput>;
    RowProductBackstory?: Maybe<RowProductBackstoryUpsertWithNestedWhereUniqueInput>;
    RowButtonLinkList?: Maybe<RowButtonLinkListUpsertWithNestedWhereUniqueInput>;
    RowServiceOptions?: Maybe<RowServiceOptionsUpsertWithNestedWhereUniqueInput>;
    RowBlogContent?: Maybe<RowBlogContentUpsertWithNestedWhereUniqueInput>;
    RowContentLinks?: Maybe<RowContentLinksUpsertWithNestedWhereUniqueInput>;
};
export declare type PageContentWhereInput = {
    RowSpecialBanner?: Maybe<RowSpecialBannerWhereInput>;
    RowColumnOne?: Maybe<RowColumnOneWhereInput>;
    RowColumnTwo?: Maybe<RowColumnTwoWhereInput>;
    RowColumnThree?: Maybe<RowColumnThreeWhereInput>;
    RowQuote?: Maybe<RowQuoteWhereInput>;
    RowHeroBanner?: Maybe<RowHeroBannerWhereInput>;
    RowProductGrid?: Maybe<RowProductGridWhereInput>;
    RowSwipeableGrid?: Maybe<RowSwipeableGridWhereInput>;
    RowProductBackstory?: Maybe<RowProductBackstoryWhereInput>;
    RowButtonLinkList?: Maybe<RowButtonLinkListWhereInput>;
    RowServiceOptions?: Maybe<RowServiceOptionsWhereInput>;
    RowBlogContent?: Maybe<RowBlogContentWhereInput>;
    RowContentLinks?: Maybe<RowContentLinksWhereInput>;
};
export declare type PageContentWhereUniqueInput = {
    RowSpecialBanner?: Maybe<RowSpecialBannerWhereUniqueInput>;
    RowColumnOne?: Maybe<RowColumnOneWhereUniqueInput>;
    RowColumnTwo?: Maybe<RowColumnTwoWhereUniqueInput>;
    RowColumnThree?: Maybe<RowColumnThreeWhereUniqueInput>;
    RowQuote?: Maybe<RowQuoteWhereUniqueInput>;
    RowHeroBanner?: Maybe<RowHeroBannerWhereUniqueInput>;
    RowProductGrid?: Maybe<RowProductGridWhereUniqueInput>;
    RowSwipeableGrid?: Maybe<RowSwipeableGridWhereUniqueInput>;
    RowProductBackstory?: Maybe<RowProductBackstoryWhereUniqueInput>;
    RowButtonLinkList?: Maybe<RowButtonLinkListWhereUniqueInput>;
    RowServiceOptions?: Maybe<RowServiceOptionsWhereUniqueInput>;
    RowBlogContent?: Maybe<RowBlogContentWhereUniqueInput>;
    RowContentLinks?: Maybe<RowContentLinksWhereUniqueInput>;
};
export declare type PageCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** url input for default locale (en) */
    url: Scalars['String'];
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** metaTitle input for default locale (en) */
    metaTitle: Scalars['String'];
    /** metaDescription input for default locale (en) */
    metaDescription: Scalars['String'];
    date?: Maybe<Scalars['DateTime']>;
    /** author input for default locale (en) */
    author?: Maybe<Scalars['String']>;
    rowButtonLinkLists?: Maybe<RowButtonLinkListCreateManyInlineInput>;
    asset?: Maybe<AssetCreateOneInlineInput>;
    childPages?: Maybe<PageCreateManyInlineInput>;
    relatedPages?: Maybe<PageCreateManyInlineInput>;
    /** metaRobots input for default locale (en) */
    metaRobots: MetaRobots;
    content?: Maybe<PageContentCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<PageCreateLocalizationsInput>;
};
export declare type PageCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    url: Scalars['String'];
    title?: Maybe<Scalars['String']>;
    metaTitle: Scalars['String'];
    metaDescription: Scalars['String'];
    author?: Maybe<Scalars['String']>;
    metaRobots: MetaRobots;
};
export declare type PageCreateLocalizationInput = {
    /** Localization input */
    data: PageCreateLocalizationDataInput;
    locale: Locale;
};
export declare type PageCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<PageCreateLocalizationInput>>;
};
export declare type PageCreateManyInlineInput = {
    /** Create and connect multiple existing Page documents */
    create?: Maybe<Array<PageCreateInput>>;
    /** Connect multiple existing Page documents */
    connect?: Maybe<Array<PageWhereUniqueInput>>;
};
export declare type PageCreateOneInlineInput = {
    /** Create and connect one Page document */
    create?: Maybe<PageCreateInput>;
    /** Connect one existing Page document */
    connect?: Maybe<PageWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type PageEdge = {
    /** The item at the end of the edge. */
    node: Page;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Information about pagination in a connection. */
export declare type PageInfo = {
    /** When paginating forwards, are there more items? */
    hasNextPage: Scalars['Boolean'];
    /** When paginating backwards, are there more items? */
    hasPreviousPage: Scalars['Boolean'];
    /** When paginating backwards, the cursor to continue. */
    startCursor?: Maybe<Scalars['String']>;
    /** When paginating forwards, the cursor to continue. */
    endCursor?: Maybe<Scalars['String']>;
    /** Number of items in the current page. */
    pageSize?: Maybe<Scalars['Int']>;
};
export declare type PageLink = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<PageLink>;
    /** Get the document in other stages */
    documentInStages: Array<PageLink>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    title: Scalars['String'];
    description?: Maybe<RichText>;
    url: Scalars['String'];
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    rowHeroBanners: Array<RowHeroBanner>;
    rowProductGrids: Array<RowProductGrid>;
    rowSpecialBanners: Array<RowSpecialBanner>;
    footerSocialLinks: Array<Footer>;
    footerLegalLinks: Array<Footer>;
    rowServiceOptionsMultiple: Array<RowServiceOptions>;
    rowContentLinks?: Maybe<RowContentLinks>;
    asset?: Maybe<Asset>;
    uspsMultiple: Array<Usps>;
    /** List of PageLink versions */
    history: Array<Version>;
};
export declare type PageLinklocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type PageLinkdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type PageLinkcreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type PageLinkupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type PageLinkpublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type PageLinkcreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type PageLinkupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type PageLinkpublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type PageLinkrowHeroBannersArgs = {
    where?: Maybe<RowHeroBannerWhereInput>;
    orderBy?: Maybe<RowHeroBannerOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type PageLinkrowProductGridsArgs = {
    where?: Maybe<RowProductGridWhereInput>;
    orderBy?: Maybe<RowProductGridOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type PageLinkrowSpecialBannersArgs = {
    where?: Maybe<RowSpecialBannerWhereInput>;
    orderBy?: Maybe<RowSpecialBannerOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type PageLinkfooterSocialLinksArgs = {
    where?: Maybe<FooterWhereInput>;
    orderBy?: Maybe<FooterOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type PageLinkfooterLegalLinksArgs = {
    where?: Maybe<FooterWhereInput>;
    orderBy?: Maybe<FooterOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type PageLinkrowServiceOptionsMultipleArgs = {
    where?: Maybe<RowServiceOptionsWhereInput>;
    orderBy?: Maybe<RowServiceOptionsOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type PageLinkrowContentLinksArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type PageLinkassetArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type PageLinkuspsMultipleArgs = {
    where?: Maybe<UspsWhereInput>;
    orderBy?: Maybe<UspsOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type PageLinkhistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type PageLinkConnectInput = {
    /** Document to connect */
    where: PageLinkWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type PageLinkConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<PageLinkEdge>;
    aggregate: Aggregate;
};
export declare type PageLinkCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** title input for default locale (en) */
    title: Scalars['String'];
    /** description input for default locale (en) */
    description?: Maybe<Scalars['RichTextAST']>;
    /** url input for default locale (en) */
    url: Scalars['String'];
    rowHeroBanners?: Maybe<RowHeroBannerCreateManyInlineInput>;
    rowProductGrids?: Maybe<RowProductGridCreateManyInlineInput>;
    rowSpecialBanners?: Maybe<RowSpecialBannerCreateManyInlineInput>;
    footerSocialLinks?: Maybe<FooterCreateManyInlineInput>;
    footerLegalLinks?: Maybe<FooterCreateManyInlineInput>;
    rowServiceOptionsMultiple?: Maybe<RowServiceOptionsCreateManyInlineInput>;
    rowContentLinks?: Maybe<RowContentLinksCreateOneInlineInput>;
    asset?: Maybe<AssetCreateOneInlineInput>;
    uspsMultiple?: Maybe<UspsCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<PageLinkCreateLocalizationsInput>;
};
export declare type PageLinkCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    title: Scalars['String'];
    description?: Maybe<Scalars['RichTextAST']>;
    url: Scalars['String'];
};
export declare type PageLinkCreateLocalizationInput = {
    /** Localization input */
    data: PageLinkCreateLocalizationDataInput;
    locale: Locale;
};
export declare type PageLinkCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<PageLinkCreateLocalizationInput>>;
};
export declare type PageLinkCreateManyInlineInput = {
    /** Create and connect multiple existing PageLink documents */
    create?: Maybe<Array<PageLinkCreateInput>>;
    /** Connect multiple existing PageLink documents */
    connect?: Maybe<Array<PageLinkWhereUniqueInput>>;
};
export declare type PageLinkCreateOneInlineInput = {
    /** Create and connect one PageLink document */
    create?: Maybe<PageLinkCreateInput>;
    /** Connect one existing PageLink document */
    connect?: Maybe<PageLinkWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type PageLinkEdge = {
    /** The item at the end of the edge. */
    node: PageLink;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type PageLinkManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<PageLinkWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<PageLinkWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<PageLinkWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    rowHeroBanners_every?: Maybe<RowHeroBannerWhereInput>;
    rowHeroBanners_some?: Maybe<RowHeroBannerWhereInput>;
    rowHeroBanners_none?: Maybe<RowHeroBannerWhereInput>;
    rowProductGrids_every?: Maybe<RowProductGridWhereInput>;
    rowProductGrids_some?: Maybe<RowProductGridWhereInput>;
    rowProductGrids_none?: Maybe<RowProductGridWhereInput>;
    rowSpecialBanners_every?: Maybe<RowSpecialBannerWhereInput>;
    rowSpecialBanners_some?: Maybe<RowSpecialBannerWhereInput>;
    rowSpecialBanners_none?: Maybe<RowSpecialBannerWhereInput>;
    footerSocialLinks_every?: Maybe<FooterWhereInput>;
    footerSocialLinks_some?: Maybe<FooterWhereInput>;
    footerSocialLinks_none?: Maybe<FooterWhereInput>;
    footerLegalLinks_every?: Maybe<FooterWhereInput>;
    footerLegalLinks_some?: Maybe<FooterWhereInput>;
    footerLegalLinks_none?: Maybe<FooterWhereInput>;
    rowServiceOptionsMultiple_every?: Maybe<RowServiceOptionsWhereInput>;
    rowServiceOptionsMultiple_some?: Maybe<RowServiceOptionsWhereInput>;
    rowServiceOptionsMultiple_none?: Maybe<RowServiceOptionsWhereInput>;
    rowContentLinks?: Maybe<RowContentLinksWhereInput>;
    asset?: Maybe<AssetWhereInput>;
    uspsMultiple_every?: Maybe<UspsWhereInput>;
    uspsMultiple_some?: Maybe<UspsWhereInput>;
    uspsMultiple_none?: Maybe<UspsWhereInput>;
};
export declare enum PageLinkOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    title_ASC = "title_ASC",
    title_DESC = "title_DESC",
    url_ASC = "url_ASC",
    url_DESC = "url_DESC"
}
export declare type PageLinkUpdateInput = {
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** description input for default locale (en) */
    description?: Maybe<Scalars['RichTextAST']>;
    /** url input for default locale (en) */
    url?: Maybe<Scalars['String']>;
    rowHeroBanners?: Maybe<RowHeroBannerUpdateManyInlineInput>;
    rowProductGrids?: Maybe<RowProductGridUpdateManyInlineInput>;
    rowSpecialBanners?: Maybe<RowSpecialBannerUpdateManyInlineInput>;
    footerSocialLinks?: Maybe<FooterUpdateManyInlineInput>;
    footerLegalLinks?: Maybe<FooterUpdateManyInlineInput>;
    rowServiceOptionsMultiple?: Maybe<RowServiceOptionsUpdateManyInlineInput>;
    rowContentLinks?: Maybe<RowContentLinksUpdateOneInlineInput>;
    asset?: Maybe<AssetUpdateOneInlineInput>;
    uspsMultiple?: Maybe<UspsUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<PageLinkUpdateLocalizationsInput>;
};
export declare type PageLinkUpdateLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['RichTextAST']>;
    url?: Maybe<Scalars['String']>;
};
export declare type PageLinkUpdateLocalizationInput = {
    data: PageLinkUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type PageLinkUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<PageLinkCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<PageLinkUpdateLocalizationInput>>;
    upsert?: Maybe<Array<PageLinkUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type PageLinkUpdateManyInlineInput = {
    /** Create and connect multiple PageLink documents */
    create?: Maybe<Array<PageLinkCreateInput>>;
    /** Connect multiple existing PageLink documents */
    connect?: Maybe<Array<PageLinkConnectInput>>;
    /** Override currently-connected documents with multiple existing PageLink documents */
    set?: Maybe<Array<PageLinkWhereUniqueInput>>;
    /** Update multiple PageLink documents */
    update?: Maybe<Array<PageLinkUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple PageLink documents */
    upsert?: Maybe<Array<PageLinkUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple PageLink documents */
    disconnect?: Maybe<Array<PageLinkWhereUniqueInput>>;
    /** Delete multiple PageLink documents */
    delete?: Maybe<Array<PageLinkWhereUniqueInput>>;
};
export declare type PageLinkUpdateManyInput = {
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** description input for default locale (en) */
    description?: Maybe<Scalars['RichTextAST']>;
    /** url input for default locale (en) */
    url?: Maybe<Scalars['String']>;
    /** Optional updates to localizations */
    localizations?: Maybe<PageLinkUpdateManyLocalizationsInput>;
};
export declare type PageLinkUpdateManyLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['RichTextAST']>;
    url?: Maybe<Scalars['String']>;
};
export declare type PageLinkUpdateManyLocalizationInput = {
    data: PageLinkUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type PageLinkUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<PageLinkUpdateManyLocalizationInput>>;
};
export declare type PageLinkUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: PageLinkWhereInput;
    /** Update many input */
    data: PageLinkUpdateManyInput;
};
export declare type PageLinkUpdateOneInlineInput = {
    /** Create and connect one PageLink document */
    create?: Maybe<PageLinkCreateInput>;
    /** Update single PageLink document */
    update?: Maybe<PageLinkUpdateWithNestedWhereUniqueInput>;
    /** Upsert single PageLink document */
    upsert?: Maybe<PageLinkUpsertWithNestedWhereUniqueInput>;
    /** Connect existing PageLink document */
    connect?: Maybe<PageLinkWhereUniqueInput>;
    /** Disconnect currently connected PageLink document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected PageLink document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type PageLinkUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: PageLinkWhereUniqueInput;
    /** Document to update */
    data: PageLinkUpdateInput;
};
export declare type PageLinkUpsertInput = {
    /** Create document if it didn't exist */
    create: PageLinkCreateInput;
    /** Update document if it exists */
    update: PageLinkUpdateInput;
};
export declare type PageLinkUpsertLocalizationInput = {
    update: PageLinkUpdateLocalizationDataInput;
    create: PageLinkCreateLocalizationDataInput;
    locale: Locale;
};
export declare type PageLinkUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: PageLinkWhereUniqueInput;
    /** Upsert data */
    data: PageLinkUpsertInput;
};
/** Identifies documents */
export declare type PageLinkWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<PageLinkWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<PageLinkWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<PageLinkWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    title?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    title_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    title_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    title_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    title_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    title_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    title_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    title_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    title_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    title_not_ends_with?: Maybe<Scalars['String']>;
    url?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    url_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    url_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    url_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    url_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    url_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    url_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    url_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    url_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    url_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    rowHeroBanners_every?: Maybe<RowHeroBannerWhereInput>;
    rowHeroBanners_some?: Maybe<RowHeroBannerWhereInput>;
    rowHeroBanners_none?: Maybe<RowHeroBannerWhereInput>;
    rowProductGrids_every?: Maybe<RowProductGridWhereInput>;
    rowProductGrids_some?: Maybe<RowProductGridWhereInput>;
    rowProductGrids_none?: Maybe<RowProductGridWhereInput>;
    rowSpecialBanners_every?: Maybe<RowSpecialBannerWhereInput>;
    rowSpecialBanners_some?: Maybe<RowSpecialBannerWhereInput>;
    rowSpecialBanners_none?: Maybe<RowSpecialBannerWhereInput>;
    footerSocialLinks_every?: Maybe<FooterWhereInput>;
    footerSocialLinks_some?: Maybe<FooterWhereInput>;
    footerSocialLinks_none?: Maybe<FooterWhereInput>;
    footerLegalLinks_every?: Maybe<FooterWhereInput>;
    footerLegalLinks_some?: Maybe<FooterWhereInput>;
    footerLegalLinks_none?: Maybe<FooterWhereInput>;
    rowServiceOptionsMultiple_every?: Maybe<RowServiceOptionsWhereInput>;
    rowServiceOptionsMultiple_some?: Maybe<RowServiceOptionsWhereInput>;
    rowServiceOptionsMultiple_none?: Maybe<RowServiceOptionsWhereInput>;
    rowContentLinks?: Maybe<RowContentLinksWhereInput>;
    asset?: Maybe<AssetWhereInput>;
    uspsMultiple_every?: Maybe<UspsWhereInput>;
    uspsMultiple_some?: Maybe<UspsWhereInput>;
    uspsMultiple_none?: Maybe<UspsWhereInput>;
};
/** References PageLink record uniquely */
export declare type PageLinkWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
};
/** Identifies documents */
export declare type PageManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<PageWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<PageWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<PageWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    date?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    date_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    date_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    date_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    date_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    date_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    date_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    date_gte?: Maybe<Scalars['DateTime']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    rowButtonLinkLists_every?: Maybe<RowButtonLinkListWhereInput>;
    rowButtonLinkLists_some?: Maybe<RowButtonLinkListWhereInput>;
    rowButtonLinkLists_none?: Maybe<RowButtonLinkListWhereInput>;
    asset?: Maybe<AssetWhereInput>;
    childPages_every?: Maybe<PageWhereInput>;
    childPages_some?: Maybe<PageWhereInput>;
    childPages_none?: Maybe<PageWhereInput>;
    relatedPages_every?: Maybe<PageWhereInput>;
    relatedPages_some?: Maybe<PageWhereInput>;
    relatedPages_none?: Maybe<PageWhereInput>;
};
export declare enum PageOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    url_ASC = "url_ASC",
    url_DESC = "url_DESC",
    title_ASC = "title_ASC",
    title_DESC = "title_DESC",
    metaTitle_ASC = "metaTitle_ASC",
    metaTitle_DESC = "metaTitle_DESC",
    metaDescription_ASC = "metaDescription_ASC",
    metaDescription_DESC = "metaDescription_DESC",
    date_ASC = "date_ASC",
    date_DESC = "date_DESC",
    author_ASC = "author_ASC",
    author_DESC = "author_DESC",
    metaRobots_ASC = "metaRobots_ASC",
    metaRobots_DESC = "metaRobots_DESC"
}
export declare type PageUpdateInput = {
    /** url input for default locale (en) */
    url?: Maybe<Scalars['String']>;
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** metaTitle input for default locale (en) */
    metaTitle?: Maybe<Scalars['String']>;
    /** metaDescription input for default locale (en) */
    metaDescription?: Maybe<Scalars['String']>;
    date?: Maybe<Scalars['DateTime']>;
    /** author input for default locale (en) */
    author?: Maybe<Scalars['String']>;
    rowButtonLinkLists?: Maybe<RowButtonLinkListUpdateManyInlineInput>;
    asset?: Maybe<AssetUpdateOneInlineInput>;
    childPages?: Maybe<PageUpdateManyInlineInput>;
    relatedPages?: Maybe<PageUpdateManyInlineInput>;
    /** metaRobots input for default locale (en) */
    metaRobots?: Maybe<MetaRobots>;
    content?: Maybe<PageContentUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<PageUpdateLocalizationsInput>;
};
export declare type PageUpdateLocalizationDataInput = {
    url?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    metaTitle?: Maybe<Scalars['String']>;
    metaDescription?: Maybe<Scalars['String']>;
    author?: Maybe<Scalars['String']>;
    metaRobots?: Maybe<MetaRobots>;
};
export declare type PageUpdateLocalizationInput = {
    data: PageUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type PageUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<PageCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<PageUpdateLocalizationInput>>;
    upsert?: Maybe<Array<PageUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type PageUpdateManyInlineInput = {
    /** Create and connect multiple Page documents */
    create?: Maybe<Array<PageCreateInput>>;
    /** Connect multiple existing Page documents */
    connect?: Maybe<Array<PageConnectInput>>;
    /** Override currently-connected documents with multiple existing Page documents */
    set?: Maybe<Array<PageWhereUniqueInput>>;
    /** Update multiple Page documents */
    update?: Maybe<Array<PageUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple Page documents */
    upsert?: Maybe<Array<PageUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple Page documents */
    disconnect?: Maybe<Array<PageWhereUniqueInput>>;
    /** Delete multiple Page documents */
    delete?: Maybe<Array<PageWhereUniqueInput>>;
};
export declare type PageUpdateManyInput = {
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** metaTitle input for default locale (en) */
    metaTitle?: Maybe<Scalars['String']>;
    /** metaDescription input for default locale (en) */
    metaDescription?: Maybe<Scalars['String']>;
    date?: Maybe<Scalars['DateTime']>;
    /** author input for default locale (en) */
    author?: Maybe<Scalars['String']>;
    /** metaRobots input for default locale (en) */
    metaRobots?: Maybe<MetaRobots>;
    /** Optional updates to localizations */
    localizations?: Maybe<PageUpdateManyLocalizationsInput>;
};
export declare type PageUpdateManyLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
    metaTitle?: Maybe<Scalars['String']>;
    metaDescription?: Maybe<Scalars['String']>;
    author?: Maybe<Scalars['String']>;
    metaRobots?: Maybe<MetaRobots>;
};
export declare type PageUpdateManyLocalizationInput = {
    data: PageUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type PageUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<PageUpdateManyLocalizationInput>>;
};
export declare type PageUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: PageWhereInput;
    /** Update many input */
    data: PageUpdateManyInput;
};
export declare type PageUpdateOneInlineInput = {
    /** Create and connect one Page document */
    create?: Maybe<PageCreateInput>;
    /** Update single Page document */
    update?: Maybe<PageUpdateWithNestedWhereUniqueInput>;
    /** Upsert single Page document */
    upsert?: Maybe<PageUpsertWithNestedWhereUniqueInput>;
    /** Connect existing Page document */
    connect?: Maybe<PageWhereUniqueInput>;
    /** Disconnect currently connected Page document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected Page document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type PageUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: PageWhereUniqueInput;
    /** Document to update */
    data: PageUpdateInput;
};
export declare type PageUpsertInput = {
    /** Create document if it didn't exist */
    create: PageCreateInput;
    /** Update document if it exists */
    update: PageUpdateInput;
};
export declare type PageUpsertLocalizationInput = {
    update: PageUpdateLocalizationDataInput;
    create: PageCreateLocalizationDataInput;
    locale: Locale;
};
export declare type PageUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: PageWhereUniqueInput;
    /** Upsert data */
    data: PageUpsertInput;
};
/** Identifies documents */
export declare type PageWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<PageWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<PageWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<PageWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    url?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    url_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    url_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    url_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    url_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    url_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    url_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    url_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    url_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    url_not_ends_with?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    title_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    title_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    title_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    title_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    title_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    title_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    title_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    title_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    title_not_ends_with?: Maybe<Scalars['String']>;
    metaTitle?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    metaTitle_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    metaTitle_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    metaTitle_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    metaTitle_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    metaTitle_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    metaTitle_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    metaTitle_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    metaTitle_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    metaTitle_not_ends_with?: Maybe<Scalars['String']>;
    metaDescription?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    metaDescription_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    metaDescription_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    metaDescription_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    metaDescription_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    metaDescription_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    metaDescription_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    metaDescription_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    metaDescription_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    metaDescription_not_ends_with?: Maybe<Scalars['String']>;
    date?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    date_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    date_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    date_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    date_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    date_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    date_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    date_gte?: Maybe<Scalars['DateTime']>;
    author?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    author_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    author_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    author_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    author_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    author_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    author_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    author_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    author_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    author_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    rowButtonLinkLists_every?: Maybe<RowButtonLinkListWhereInput>;
    rowButtonLinkLists_some?: Maybe<RowButtonLinkListWhereInput>;
    rowButtonLinkLists_none?: Maybe<RowButtonLinkListWhereInput>;
    asset?: Maybe<AssetWhereInput>;
    childPages_every?: Maybe<PageWhereInput>;
    childPages_some?: Maybe<PageWhereInput>;
    childPages_none?: Maybe<PageWhereInput>;
    relatedPages_every?: Maybe<PageWhereInput>;
    relatedPages_some?: Maybe<PageWhereInput>;
    relatedPages_none?: Maybe<PageWhereInput>;
    metaRobots?: Maybe<MetaRobots>;
    /** All values that are not equal to given value. */
    metaRobots_not?: Maybe<MetaRobots>;
    /** All values that are contained in given list. */
    metaRobots_in?: Maybe<Array<MetaRobots>>;
    /** All values that are not contained in given list. */
    metaRobots_not_in?: Maybe<Array<MetaRobots>>;
};
/** References Page record uniquely */
export declare type PageWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
};
export declare type Product = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<Product>;
    /** Get the document in other stages */
    documentInStages: Array<Product>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    url: Scalars['String'];
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    content: Array<ProductContent>;
    /** List of Product versions */
    history: Array<Version>;
};
export declare type ProductlocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type ProductdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type ProductcreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type ProductupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type ProductpublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type ProductcreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type ProductupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type ProductpublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type ProductcontentArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type ProducthistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type ProductConnectInput = {
    /** Document to connect */
    where: ProductWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type ProductConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<ProductEdge>;
    aggregate: Aggregate;
};
export declare type ProductContent = RowColumnOne | RowColumnThree | RowColumnTwo | RowContentLinks | RowProductFeature | RowProductFeatureBoxed | RowProductRelated | RowProductReviews | RowProductSpecs | RowProductUpsells | RowQuote | RowSpecialBanner;
export declare type ProductContentConnectInput = {
    RowColumnOne?: Maybe<RowColumnOneConnectInput>;
    RowColumnTwo?: Maybe<RowColumnTwoConnectInput>;
    RowColumnThree?: Maybe<RowColumnThreeConnectInput>;
    RowProductFeature?: Maybe<RowProductFeatureConnectInput>;
    RowSpecialBanner?: Maybe<RowSpecialBannerConnectInput>;
    RowQuote?: Maybe<RowQuoteConnectInput>;
    RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedConnectInput>;
    RowContentLinks?: Maybe<RowContentLinksConnectInput>;
    RowProductReviews?: Maybe<RowProductReviewsConnectInput>;
    RowProductRelated?: Maybe<RowProductRelatedConnectInput>;
    RowProductUpsells?: Maybe<RowProductUpsellsConnectInput>;
    RowProductSpecs?: Maybe<RowProductSpecsConnectInput>;
};
export declare type ProductContentCreateInput = {
    RowColumnOne?: Maybe<RowColumnOneCreateInput>;
    RowColumnTwo?: Maybe<RowColumnTwoCreateInput>;
    RowColumnThree?: Maybe<RowColumnThreeCreateInput>;
    RowProductFeature?: Maybe<RowProductFeatureCreateInput>;
    RowSpecialBanner?: Maybe<RowSpecialBannerCreateInput>;
    RowQuote?: Maybe<RowQuoteCreateInput>;
    RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedCreateInput>;
    RowContentLinks?: Maybe<RowContentLinksCreateInput>;
    RowProductReviews?: Maybe<RowProductReviewsCreateInput>;
    RowProductRelated?: Maybe<RowProductRelatedCreateInput>;
    RowProductUpsells?: Maybe<RowProductUpsellsCreateInput>;
    RowProductSpecs?: Maybe<RowProductSpecsCreateInput>;
};
export declare type ProductContentCreateManyInlineInput = {
    /** Create and connect multiple existing ProductContent documents */
    create?: Maybe<Array<ProductContentCreateInput>>;
    /** Connect multiple existing ProductContent documents */
    connect?: Maybe<Array<ProductContentWhereUniqueInput>>;
};
export declare type ProductContentCreateOneInlineInput = {
    /** Create and connect one ProductContent document */
    create?: Maybe<ProductContentCreateInput>;
    /** Connect one existing ProductContent document */
    connect?: Maybe<ProductContentWhereUniqueInput>;
};
export declare type ProductContentUpdateInput = {
    RowColumnOne?: Maybe<RowColumnOneUpdateInput>;
    RowColumnTwo?: Maybe<RowColumnTwoUpdateInput>;
    RowColumnThree?: Maybe<RowColumnThreeUpdateInput>;
    RowProductFeature?: Maybe<RowProductFeatureUpdateInput>;
    RowSpecialBanner?: Maybe<RowSpecialBannerUpdateInput>;
    RowQuote?: Maybe<RowQuoteUpdateInput>;
    RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedUpdateInput>;
    RowContentLinks?: Maybe<RowContentLinksUpdateInput>;
    RowProductReviews?: Maybe<RowProductReviewsUpdateInput>;
    RowProductRelated?: Maybe<RowProductRelatedUpdateInput>;
    RowProductUpsells?: Maybe<RowProductUpsellsUpdateInput>;
    RowProductSpecs?: Maybe<RowProductSpecsUpdateInput>;
};
export declare type ProductContentUpdateManyInlineInput = {
    /** Create and connect multiple ProductContent documents */
    create?: Maybe<Array<ProductContentCreateInput>>;
    /** Connect multiple existing ProductContent documents */
    connect?: Maybe<Array<ProductContentConnectInput>>;
    /** Override currently-connected documents with multiple existing ProductContent documents */
    set?: Maybe<Array<ProductContentWhereUniqueInput>>;
    /** Update multiple ProductContent documents */
    update?: Maybe<Array<ProductContentUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple ProductContent documents */
    upsert?: Maybe<Array<ProductContentUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple ProductContent documents */
    disconnect?: Maybe<Array<ProductContentWhereUniqueInput>>;
    /** Delete multiple ProductContent documents */
    delete?: Maybe<Array<ProductContentWhereUniqueInput>>;
};
export declare type ProductContentUpdateManyWithNestedWhereInput = {
    RowColumnOne?: Maybe<RowColumnOneUpdateManyWithNestedWhereInput>;
    RowColumnTwo?: Maybe<RowColumnTwoUpdateManyWithNestedWhereInput>;
    RowColumnThree?: Maybe<RowColumnThreeUpdateManyWithNestedWhereInput>;
    RowProductFeature?: Maybe<RowProductFeatureUpdateManyWithNestedWhereInput>;
    RowSpecialBanner?: Maybe<RowSpecialBannerUpdateManyWithNestedWhereInput>;
    RowQuote?: Maybe<RowQuoteUpdateManyWithNestedWhereInput>;
    RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedUpdateManyWithNestedWhereInput>;
    RowContentLinks?: Maybe<RowContentLinksUpdateManyWithNestedWhereInput>;
    RowProductReviews?: Maybe<RowProductReviewsUpdateManyWithNestedWhereInput>;
    RowProductRelated?: Maybe<RowProductRelatedUpdateManyWithNestedWhereInput>;
    RowProductUpsells?: Maybe<RowProductUpsellsUpdateManyWithNestedWhereInput>;
    RowProductSpecs?: Maybe<RowProductSpecsUpdateManyWithNestedWhereInput>;
};
export declare type ProductContentUpdateOneInlineInput = {
    /** Create and connect one ProductContent document */
    create?: Maybe<ProductContentCreateInput>;
    /** Update single ProductContent document */
    update?: Maybe<ProductContentUpdateWithNestedWhereUniqueInput>;
    /** Upsert single ProductContent document */
    upsert?: Maybe<ProductContentUpsertWithNestedWhereUniqueInput>;
    /** Connect existing ProductContent document */
    connect?: Maybe<ProductContentWhereUniqueInput>;
    /** Disconnect currently connected ProductContent document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected ProductContent document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type ProductContentUpdateWithNestedWhereUniqueInput = {
    RowColumnOne?: Maybe<RowColumnOneUpdateWithNestedWhereUniqueInput>;
    RowColumnTwo?: Maybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>;
    RowColumnThree?: Maybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>;
    RowProductFeature?: Maybe<RowProductFeatureUpdateWithNestedWhereUniqueInput>;
    RowSpecialBanner?: Maybe<RowSpecialBannerUpdateWithNestedWhereUniqueInput>;
    RowQuote?: Maybe<RowQuoteUpdateWithNestedWhereUniqueInput>;
    RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedUpdateWithNestedWhereUniqueInput>;
    RowContentLinks?: Maybe<RowContentLinksUpdateWithNestedWhereUniqueInput>;
    RowProductReviews?: Maybe<RowProductReviewsUpdateWithNestedWhereUniqueInput>;
    RowProductRelated?: Maybe<RowProductRelatedUpdateWithNestedWhereUniqueInput>;
    RowProductUpsells?: Maybe<RowProductUpsellsUpdateWithNestedWhereUniqueInput>;
    RowProductSpecs?: Maybe<RowProductSpecsUpdateWithNestedWhereUniqueInput>;
};
export declare type ProductContentUpsertWithNestedWhereUniqueInput = {
    RowColumnOne?: Maybe<RowColumnOneUpsertWithNestedWhereUniqueInput>;
    RowColumnTwo?: Maybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>;
    RowColumnThree?: Maybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>;
    RowProductFeature?: Maybe<RowProductFeatureUpsertWithNestedWhereUniqueInput>;
    RowSpecialBanner?: Maybe<RowSpecialBannerUpsertWithNestedWhereUniqueInput>;
    RowQuote?: Maybe<RowQuoteUpsertWithNestedWhereUniqueInput>;
    RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedUpsertWithNestedWhereUniqueInput>;
    RowContentLinks?: Maybe<RowContentLinksUpsertWithNestedWhereUniqueInput>;
    RowProductReviews?: Maybe<RowProductReviewsUpsertWithNestedWhereUniqueInput>;
    RowProductRelated?: Maybe<RowProductRelatedUpsertWithNestedWhereUniqueInput>;
    RowProductUpsells?: Maybe<RowProductUpsellsUpsertWithNestedWhereUniqueInput>;
    RowProductSpecs?: Maybe<RowProductSpecsUpsertWithNestedWhereUniqueInput>;
};
export declare type ProductContentWhereInput = {
    RowColumnOne?: Maybe<RowColumnOneWhereInput>;
    RowColumnTwo?: Maybe<RowColumnTwoWhereInput>;
    RowColumnThree?: Maybe<RowColumnThreeWhereInput>;
    RowProductFeature?: Maybe<RowProductFeatureWhereInput>;
    RowSpecialBanner?: Maybe<RowSpecialBannerWhereInput>;
    RowQuote?: Maybe<RowQuoteWhereInput>;
    RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedWhereInput>;
    RowContentLinks?: Maybe<RowContentLinksWhereInput>;
    RowProductReviews?: Maybe<RowProductReviewsWhereInput>;
    RowProductRelated?: Maybe<RowProductRelatedWhereInput>;
    RowProductUpsells?: Maybe<RowProductUpsellsWhereInput>;
    RowProductSpecs?: Maybe<RowProductSpecsWhereInput>;
};
export declare type ProductContentWhereUniqueInput = {
    RowColumnOne?: Maybe<RowColumnOneWhereUniqueInput>;
    RowColumnTwo?: Maybe<RowColumnTwoWhereUniqueInput>;
    RowColumnThree?: Maybe<RowColumnThreeWhereUniqueInput>;
    RowProductFeature?: Maybe<RowProductFeatureWhereUniqueInput>;
    RowSpecialBanner?: Maybe<RowSpecialBannerWhereUniqueInput>;
    RowQuote?: Maybe<RowQuoteWhereUniqueInput>;
    RowProductFeatureBoxed?: Maybe<RowProductFeatureBoxedWhereUniqueInput>;
    RowContentLinks?: Maybe<RowContentLinksWhereUniqueInput>;
    RowProductReviews?: Maybe<RowProductReviewsWhereUniqueInput>;
    RowProductRelated?: Maybe<RowProductRelatedWhereUniqueInput>;
    RowProductUpsells?: Maybe<RowProductUpsellsWhereUniqueInput>;
    RowProductSpecs?: Maybe<RowProductSpecsWhereUniqueInput>;
};
export declare type ProductCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** url input for default locale (en) */
    url: Scalars['String'];
    content?: Maybe<ProductContentCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<ProductCreateLocalizationsInput>;
};
export declare type ProductCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    url: Scalars['String'];
};
export declare type ProductCreateLocalizationInput = {
    /** Localization input */
    data: ProductCreateLocalizationDataInput;
    locale: Locale;
};
export declare type ProductCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<ProductCreateLocalizationInput>>;
};
export declare type ProductCreateManyInlineInput = {
    /** Create and connect multiple existing Product documents */
    create?: Maybe<Array<ProductCreateInput>>;
    /** Connect multiple existing Product documents */
    connect?: Maybe<Array<ProductWhereUniqueInput>>;
};
export declare type ProductCreateOneInlineInput = {
    /** Create and connect one Product document */
    create?: Maybe<ProductCreateInput>;
    /** Connect one existing Product document */
    connect?: Maybe<ProductWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type ProductEdge = {
    /** The item at the end of the edge. */
    node: Product;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type ProductManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<ProductWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<ProductWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<ProductWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
};
export declare enum ProductOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    url_ASC = "url_ASC",
    url_DESC = "url_DESC"
}
export declare type ProductUpdateInput = {
    /** url input for default locale (en) */
    url?: Maybe<Scalars['String']>;
    content?: Maybe<ProductContentUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<ProductUpdateLocalizationsInput>;
};
export declare type ProductUpdateLocalizationDataInput = {
    url?: Maybe<Scalars['String']>;
};
export declare type ProductUpdateLocalizationInput = {
    data: ProductUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type ProductUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<ProductCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<ProductUpdateLocalizationInput>>;
    upsert?: Maybe<Array<ProductUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type ProductUpdateManyInlineInput = {
    /** Create and connect multiple Product documents */
    create?: Maybe<Array<ProductCreateInput>>;
    /** Connect multiple existing Product documents */
    connect?: Maybe<Array<ProductConnectInput>>;
    /** Override currently-connected documents with multiple existing Product documents */
    set?: Maybe<Array<ProductWhereUniqueInput>>;
    /** Update multiple Product documents */
    update?: Maybe<Array<ProductUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple Product documents */
    upsert?: Maybe<Array<ProductUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple Product documents */
    disconnect?: Maybe<Array<ProductWhereUniqueInput>>;
    /** Delete multiple Product documents */
    delete?: Maybe<Array<ProductWhereUniqueInput>>;
};
export declare type ProductUpdateManyInput = {
    /** No fields in updateMany data input */
    _?: Maybe<Scalars['String']>;
};
export declare type ProductUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: ProductWhereInput;
    /** Update many input */
    data: ProductUpdateManyInput;
};
export declare type ProductUpdateOneInlineInput = {
    /** Create and connect one Product document */
    create?: Maybe<ProductCreateInput>;
    /** Update single Product document */
    update?: Maybe<ProductUpdateWithNestedWhereUniqueInput>;
    /** Upsert single Product document */
    upsert?: Maybe<ProductUpsertWithNestedWhereUniqueInput>;
    /** Connect existing Product document */
    connect?: Maybe<ProductWhereUniqueInput>;
    /** Disconnect currently connected Product document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected Product document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type ProductUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: ProductWhereUniqueInput;
    /** Document to update */
    data: ProductUpdateInput;
};
export declare type ProductUpsertInput = {
    /** Create document if it didn't exist */
    create: ProductCreateInput;
    /** Update document if it exists */
    update: ProductUpdateInput;
};
export declare type ProductUpsertLocalizationInput = {
    update: ProductUpdateLocalizationDataInput;
    create: ProductCreateLocalizationDataInput;
    locale: Locale;
};
export declare type ProductUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: ProductWhereUniqueInput;
    /** Upsert data */
    data: ProductUpsertInput;
};
/** Identifies documents */
export declare type ProductWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<ProductWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<ProductWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<ProductWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    url?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    url_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    url_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    url_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    url_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    url_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    url_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    url_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    url_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    url_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
};
/** References Product record uniquely */
export declare type ProductWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
};
export declare type PublishLocaleInput = {
    /** Locales to publish */
    locale: Locale;
    /** Stages to publish selected locales to */
    stages: Array<Stage>;
};
/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export declare type RGBA = {
    r: Scalars['RGBAHue'];
    g: Scalars['RGBAHue'];
    b: Scalars['RGBAHue'];
    a: Scalars['RGBATransparency'];
};
/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export declare type RGBAInput = {
    r: Scalars['RGBAHue'];
    g: Scalars['RGBAHue'];
    b: Scalars['RGBAHue'];
    a: Scalars['RGBATransparency'];
};
/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export declare type RichText = {
    /** Returns AST representation */
    raw: Scalars['RichTextAST'];
    /** Returns HTMl representation */
    html: Scalars['String'];
    /** Returns Markdown representation */
    markdown: Scalars['String'];
    /** Returns plain-text contents of RichText */
    text: Scalars['String'];
};
export declare type RowBlogContent = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowBlogContent>;
    /** Get the document in other stages */
    documentInStages: Array<RowBlogContent>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    content?: Maybe<RichText>;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    pages: Array<Page>;
    /** List of RowBlogContent versions */
    history: Array<Version>;
};
export declare type RowBlogContentlocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowBlogContentdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowBlogContentcreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowBlogContentupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowBlogContentpublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowBlogContentcreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowBlogContentupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowBlogContentpublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowBlogContentpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowBlogContenthistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowBlogContentConnectInput = {
    /** Document to connect */
    where: RowBlogContentWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowBlogContentConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowBlogContentEdge>;
    aggregate: Aggregate;
};
export declare type RowBlogContentCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** content input for default locale (en) */
    content?: Maybe<Scalars['RichTextAST']>;
    pages?: Maybe<PageCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowBlogContentCreateLocalizationsInput>;
};
export declare type RowBlogContentCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    content?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowBlogContentCreateLocalizationInput = {
    /** Localization input */
    data: RowBlogContentCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowBlogContentCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowBlogContentCreateLocalizationInput>>;
};
export declare type RowBlogContentCreateManyInlineInput = {
    /** Create and connect multiple existing RowBlogContent documents */
    create?: Maybe<Array<RowBlogContentCreateInput>>;
    /** Connect multiple existing RowBlogContent documents */
    connect?: Maybe<Array<RowBlogContentWhereUniqueInput>>;
};
export declare type RowBlogContentCreateOneInlineInput = {
    /** Create and connect one RowBlogContent document */
    create?: Maybe<RowBlogContentCreateInput>;
    /** Connect one existing RowBlogContent document */
    connect?: Maybe<RowBlogContentWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowBlogContentEdge = {
    /** The item at the end of the edge. */
    node: RowBlogContent;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowBlogContentManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowBlogContentWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowBlogContentWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowBlogContentWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
export declare enum RowBlogContentOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC"
}
export declare type RowBlogContentUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** content input for default locale (en) */
    content?: Maybe<Scalars['RichTextAST']>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowBlogContentUpdateLocalizationsInput>;
};
export declare type RowBlogContentUpdateLocalizationDataInput = {
    content?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowBlogContentUpdateLocalizationInput = {
    data: RowBlogContentUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowBlogContentUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowBlogContentCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowBlogContentUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowBlogContentUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowBlogContentUpdateManyInlineInput = {
    /** Create and connect multiple RowBlogContent documents */
    create?: Maybe<Array<RowBlogContentCreateInput>>;
    /** Connect multiple existing RowBlogContent documents */
    connect?: Maybe<Array<RowBlogContentConnectInput>>;
    /** Override currently-connected documents with multiple existing RowBlogContent documents */
    set?: Maybe<Array<RowBlogContentWhereUniqueInput>>;
    /** Update multiple RowBlogContent documents */
    update?: Maybe<Array<RowBlogContentUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowBlogContent documents */
    upsert?: Maybe<Array<RowBlogContentUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowBlogContent documents */
    disconnect?: Maybe<Array<RowBlogContentWhereUniqueInput>>;
    /** Delete multiple RowBlogContent documents */
    delete?: Maybe<Array<RowBlogContentWhereUniqueInput>>;
};
export declare type RowBlogContentUpdateManyInput = {
    /** content input for default locale (en) */
    content?: Maybe<Scalars['RichTextAST']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowBlogContentUpdateManyLocalizationsInput>;
};
export declare type RowBlogContentUpdateManyLocalizationDataInput = {
    content?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowBlogContentUpdateManyLocalizationInput = {
    data: RowBlogContentUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowBlogContentUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowBlogContentUpdateManyLocalizationInput>>;
};
export declare type RowBlogContentUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowBlogContentWhereInput;
    /** Update many input */
    data: RowBlogContentUpdateManyInput;
};
export declare type RowBlogContentUpdateOneInlineInput = {
    /** Create and connect one RowBlogContent document */
    create?: Maybe<RowBlogContentCreateInput>;
    /** Update single RowBlogContent document */
    update?: Maybe<RowBlogContentUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowBlogContent document */
    upsert?: Maybe<RowBlogContentUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowBlogContent document */
    connect?: Maybe<RowBlogContentWhereUniqueInput>;
    /** Disconnect currently connected RowBlogContent document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowBlogContent document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowBlogContentUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowBlogContentWhereUniqueInput;
    /** Document to update */
    data: RowBlogContentUpdateInput;
};
export declare type RowBlogContentUpsertInput = {
    /** Create document if it didn't exist */
    create: RowBlogContentCreateInput;
    /** Update document if it exists */
    update: RowBlogContentUpdateInput;
};
export declare type RowBlogContentUpsertLocalizationInput = {
    update: RowBlogContentUpdateLocalizationDataInput;
    create: RowBlogContentCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowBlogContentUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowBlogContentWhereUniqueInput;
    /** Upsert data */
    data: RowBlogContentUpsertInput;
};
/** Identifies documents */
export declare type RowBlogContentWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowBlogContentWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowBlogContentWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowBlogContentWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
/** References RowBlogContent record uniquely */
export declare type RowBlogContentWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowButtonLinkList = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowButtonLinkList>;
    /** Get the document in other stages */
    documentInStages: Array<RowButtonLinkList>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    title: Scalars['String'];
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    links: Array<Page>;
    pages: Array<Page>;
    /** List of RowButtonLinkList versions */
    history: Array<Version>;
};
export declare type RowButtonLinkListlocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowButtonLinkListdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowButtonLinkListcreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowButtonLinkListupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowButtonLinkListpublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowButtonLinkListcreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowButtonLinkListupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowButtonLinkListpublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowButtonLinkListlinksArgs = {
    where?: Maybe<PageWhereInput>;
    orderBy?: Maybe<PageOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowButtonLinkListpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowButtonLinkListhistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowButtonLinkListConnectInput = {
    /** Document to connect */
    where: RowButtonLinkListWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowButtonLinkListConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowButtonLinkListEdge>;
    aggregate: Aggregate;
};
export declare type RowButtonLinkListCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** title input for default locale (en) */
    title: Scalars['String'];
    links?: Maybe<PageCreateManyInlineInput>;
    pages?: Maybe<PageCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowButtonLinkListCreateLocalizationsInput>;
};
export declare type RowButtonLinkListCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    title: Scalars['String'];
};
export declare type RowButtonLinkListCreateLocalizationInput = {
    /** Localization input */
    data: RowButtonLinkListCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowButtonLinkListCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowButtonLinkListCreateLocalizationInput>>;
};
export declare type RowButtonLinkListCreateManyInlineInput = {
    /** Create and connect multiple existing RowButtonLinkList documents */
    create?: Maybe<Array<RowButtonLinkListCreateInput>>;
    /** Connect multiple existing RowButtonLinkList documents */
    connect?: Maybe<Array<RowButtonLinkListWhereUniqueInput>>;
};
export declare type RowButtonLinkListCreateOneInlineInput = {
    /** Create and connect one RowButtonLinkList document */
    create?: Maybe<RowButtonLinkListCreateInput>;
    /** Connect one existing RowButtonLinkList document */
    connect?: Maybe<RowButtonLinkListWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowButtonLinkListEdge = {
    /** The item at the end of the edge. */
    node: RowButtonLinkList;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowButtonLinkListManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowButtonLinkListWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowButtonLinkListWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowButtonLinkListWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    links_every?: Maybe<PageWhereInput>;
    links_some?: Maybe<PageWhereInput>;
    links_none?: Maybe<PageWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
export declare enum RowButtonLinkListOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC",
    title_ASC = "title_ASC",
    title_DESC = "title_DESC"
}
export declare type RowButtonLinkListUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    links?: Maybe<PageUpdateManyInlineInput>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowButtonLinkListUpdateLocalizationsInput>;
};
export declare type RowButtonLinkListUpdateLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowButtonLinkListUpdateLocalizationInput = {
    data: RowButtonLinkListUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowButtonLinkListUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowButtonLinkListCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowButtonLinkListUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowButtonLinkListUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowButtonLinkListUpdateManyInlineInput = {
    /** Create and connect multiple RowButtonLinkList documents */
    create?: Maybe<Array<RowButtonLinkListCreateInput>>;
    /** Connect multiple existing RowButtonLinkList documents */
    connect?: Maybe<Array<RowButtonLinkListConnectInput>>;
    /** Override currently-connected documents with multiple existing RowButtonLinkList documents */
    set?: Maybe<Array<RowButtonLinkListWhereUniqueInput>>;
    /** Update multiple RowButtonLinkList documents */
    update?: Maybe<Array<RowButtonLinkListUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowButtonLinkList documents */
    upsert?: Maybe<Array<RowButtonLinkListUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowButtonLinkList documents */
    disconnect?: Maybe<Array<RowButtonLinkListWhereUniqueInput>>;
    /** Delete multiple RowButtonLinkList documents */
    delete?: Maybe<Array<RowButtonLinkListWhereUniqueInput>>;
};
export declare type RowButtonLinkListUpdateManyInput = {
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowButtonLinkListUpdateManyLocalizationsInput>;
};
export declare type RowButtonLinkListUpdateManyLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowButtonLinkListUpdateManyLocalizationInput = {
    data: RowButtonLinkListUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowButtonLinkListUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowButtonLinkListUpdateManyLocalizationInput>>;
};
export declare type RowButtonLinkListUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowButtonLinkListWhereInput;
    /** Update many input */
    data: RowButtonLinkListUpdateManyInput;
};
export declare type RowButtonLinkListUpdateOneInlineInput = {
    /** Create and connect one RowButtonLinkList document */
    create?: Maybe<RowButtonLinkListCreateInput>;
    /** Update single RowButtonLinkList document */
    update?: Maybe<RowButtonLinkListUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowButtonLinkList document */
    upsert?: Maybe<RowButtonLinkListUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowButtonLinkList document */
    connect?: Maybe<RowButtonLinkListWhereUniqueInput>;
    /** Disconnect currently connected RowButtonLinkList document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowButtonLinkList document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowButtonLinkListUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowButtonLinkListWhereUniqueInput;
    /** Document to update */
    data: RowButtonLinkListUpdateInput;
};
export declare type RowButtonLinkListUpsertInput = {
    /** Create document if it didn't exist */
    create: RowButtonLinkListCreateInput;
    /** Update document if it exists */
    update: RowButtonLinkListUpdateInput;
};
export declare type RowButtonLinkListUpsertLocalizationInput = {
    update: RowButtonLinkListUpdateLocalizationDataInput;
    create: RowButtonLinkListCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowButtonLinkListUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowButtonLinkListWhereUniqueInput;
    /** Upsert data */
    data: RowButtonLinkListUpsertInput;
};
/** Identifies documents */
export declare type RowButtonLinkListWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowButtonLinkListWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowButtonLinkListWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowButtonLinkListWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    title_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    title_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    title_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    title_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    title_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    title_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    title_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    title_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    title_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    links_every?: Maybe<PageWhereInput>;
    links_some?: Maybe<PageWhereInput>;
    links_none?: Maybe<PageWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
/** References RowButtonLinkList record uniquely */
export declare type RowButtonLinkListWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowColumnOne = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowColumnOne>;
    /** Get the document in other stages */
    documentInStages: Array<RowColumnOne>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    colOne: RichText;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    productpages: Array<Product>;
    pages: Array<Page>;
    /** List of RowColumnOne versions */
    history: Array<Version>;
};
export declare type RowColumnOnelocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowColumnOnedocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowColumnOnecreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowColumnOneupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowColumnOnepublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowColumnOnecreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnOneupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnOnepublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnOneproductpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnOnepagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnOnehistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowColumnOneConnectInput = {
    /** Document to connect */
    where: RowColumnOneWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowColumnOneConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowColumnOneEdge>;
    aggregate: Aggregate;
};
export declare type RowColumnOneCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** colOne input for default locale (en) */
    colOne: Scalars['RichTextAST'];
    productpages?: Maybe<ProductCreateManyInlineInput>;
    pages?: Maybe<PageCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowColumnOneCreateLocalizationsInput>;
};
export declare type RowColumnOneCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    colOne: Scalars['RichTextAST'];
};
export declare type RowColumnOneCreateLocalizationInput = {
    /** Localization input */
    data: RowColumnOneCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowColumnOneCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowColumnOneCreateLocalizationInput>>;
};
export declare type RowColumnOneCreateManyInlineInput = {
    /** Create and connect multiple existing RowColumnOne documents */
    create?: Maybe<Array<RowColumnOneCreateInput>>;
    /** Connect multiple existing RowColumnOne documents */
    connect?: Maybe<Array<RowColumnOneWhereUniqueInput>>;
};
export declare type RowColumnOneCreateOneInlineInput = {
    /** Create and connect one RowColumnOne document */
    create?: Maybe<RowColumnOneCreateInput>;
    /** Connect one existing RowColumnOne document */
    connect?: Maybe<RowColumnOneWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowColumnOneEdge = {
    /** The item at the end of the edge. */
    node: RowColumnOne;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowColumnOneManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowColumnOneWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowColumnOneWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowColumnOneWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
export declare enum RowColumnOneOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC"
}
export declare type RowColumnOneUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** colOne input for default locale (en) */
    colOne?: Maybe<Scalars['RichTextAST']>;
    productpages?: Maybe<ProductUpdateManyInlineInput>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowColumnOneUpdateLocalizationsInput>;
};
export declare type RowColumnOneUpdateLocalizationDataInput = {
    colOne?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowColumnOneUpdateLocalizationInput = {
    data: RowColumnOneUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowColumnOneUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowColumnOneCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowColumnOneUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowColumnOneUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowColumnOneUpdateManyInlineInput = {
    /** Create and connect multiple RowColumnOne documents */
    create?: Maybe<Array<RowColumnOneCreateInput>>;
    /** Connect multiple existing RowColumnOne documents */
    connect?: Maybe<Array<RowColumnOneConnectInput>>;
    /** Override currently-connected documents with multiple existing RowColumnOne documents */
    set?: Maybe<Array<RowColumnOneWhereUniqueInput>>;
    /** Update multiple RowColumnOne documents */
    update?: Maybe<Array<RowColumnOneUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowColumnOne documents */
    upsert?: Maybe<Array<RowColumnOneUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowColumnOne documents */
    disconnect?: Maybe<Array<RowColumnOneWhereUniqueInput>>;
    /** Delete multiple RowColumnOne documents */
    delete?: Maybe<Array<RowColumnOneWhereUniqueInput>>;
};
export declare type RowColumnOneUpdateManyInput = {
    /** colOne input for default locale (en) */
    colOne?: Maybe<Scalars['RichTextAST']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowColumnOneUpdateManyLocalizationsInput>;
};
export declare type RowColumnOneUpdateManyLocalizationDataInput = {
    colOne?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowColumnOneUpdateManyLocalizationInput = {
    data: RowColumnOneUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowColumnOneUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowColumnOneUpdateManyLocalizationInput>>;
};
export declare type RowColumnOneUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowColumnOneWhereInput;
    /** Update many input */
    data: RowColumnOneUpdateManyInput;
};
export declare type RowColumnOneUpdateOneInlineInput = {
    /** Create and connect one RowColumnOne document */
    create?: Maybe<RowColumnOneCreateInput>;
    /** Update single RowColumnOne document */
    update?: Maybe<RowColumnOneUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowColumnOne document */
    upsert?: Maybe<RowColumnOneUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowColumnOne document */
    connect?: Maybe<RowColumnOneWhereUniqueInput>;
    /** Disconnect currently connected RowColumnOne document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowColumnOne document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowColumnOneUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowColumnOneWhereUniqueInput;
    /** Document to update */
    data: RowColumnOneUpdateInput;
};
export declare type RowColumnOneUpsertInput = {
    /** Create document if it didn't exist */
    create: RowColumnOneCreateInput;
    /** Update document if it exists */
    update: RowColumnOneUpdateInput;
};
export declare type RowColumnOneUpsertLocalizationInput = {
    update: RowColumnOneUpdateLocalizationDataInput;
    create: RowColumnOneCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowColumnOneUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowColumnOneWhereUniqueInput;
    /** Upsert data */
    data: RowColumnOneUpsertInput;
};
/** Identifies documents */
export declare type RowColumnOneWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowColumnOneWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowColumnOneWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowColumnOneWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
/** References RowColumnOne record uniquely */
export declare type RowColumnOneWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowColumnThree = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowColumnThree>;
    /** Get the document in other stages */
    documentInStages: Array<RowColumnThree>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    colOne: RichText;
    colTwo: RichText;
    colThree: RichText;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    pages: Array<Page>;
    productpages: Array<Product>;
    /** List of RowColumnThree versions */
    history: Array<Version>;
};
export declare type RowColumnThreelocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowColumnThreedocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowColumnThreecreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowColumnThreeupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowColumnThreepublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowColumnThreecreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnThreeupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnThreepublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnThreepagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnThreeproductpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnThreehistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowColumnThreeConnectInput = {
    /** Document to connect */
    where: RowColumnThreeWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowColumnThreeConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowColumnThreeEdge>;
    aggregate: Aggregate;
};
export declare type RowColumnThreeCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** colOne input for default locale (en) */
    colOne: Scalars['RichTextAST'];
    /** colTwo input for default locale (en) */
    colTwo: Scalars['RichTextAST'];
    /** colThree input for default locale (en) */
    colThree: Scalars['RichTextAST'];
    pages?: Maybe<PageCreateManyInlineInput>;
    productpages?: Maybe<ProductCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowColumnThreeCreateLocalizationsInput>;
};
export declare type RowColumnThreeCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    colOne: Scalars['RichTextAST'];
    colTwo: Scalars['RichTextAST'];
    colThree: Scalars['RichTextAST'];
};
export declare type RowColumnThreeCreateLocalizationInput = {
    /** Localization input */
    data: RowColumnThreeCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowColumnThreeCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowColumnThreeCreateLocalizationInput>>;
};
export declare type RowColumnThreeCreateManyInlineInput = {
    /** Create and connect multiple existing RowColumnThree documents */
    create?: Maybe<Array<RowColumnThreeCreateInput>>;
    /** Connect multiple existing RowColumnThree documents */
    connect?: Maybe<Array<RowColumnThreeWhereUniqueInput>>;
};
export declare type RowColumnThreeCreateOneInlineInput = {
    /** Create and connect one RowColumnThree document */
    create?: Maybe<RowColumnThreeCreateInput>;
    /** Connect one existing RowColumnThree document */
    connect?: Maybe<RowColumnThreeWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowColumnThreeEdge = {
    /** The item at the end of the edge. */
    node: RowColumnThree;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowColumnThreeManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowColumnThreeWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowColumnThreeWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowColumnThreeWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
export declare enum RowColumnThreeOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC"
}
export declare type RowColumnThreeUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** colOne input for default locale (en) */
    colOne?: Maybe<Scalars['RichTextAST']>;
    /** colTwo input for default locale (en) */
    colTwo?: Maybe<Scalars['RichTextAST']>;
    /** colThree input for default locale (en) */
    colThree?: Maybe<Scalars['RichTextAST']>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    productpages?: Maybe<ProductUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowColumnThreeUpdateLocalizationsInput>;
};
export declare type RowColumnThreeUpdateLocalizationDataInput = {
    colOne?: Maybe<Scalars['RichTextAST']>;
    colTwo?: Maybe<Scalars['RichTextAST']>;
    colThree?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowColumnThreeUpdateLocalizationInput = {
    data: RowColumnThreeUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowColumnThreeUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowColumnThreeCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowColumnThreeUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowColumnThreeUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowColumnThreeUpdateManyInlineInput = {
    /** Create and connect multiple RowColumnThree documents */
    create?: Maybe<Array<RowColumnThreeCreateInput>>;
    /** Connect multiple existing RowColumnThree documents */
    connect?: Maybe<Array<RowColumnThreeConnectInput>>;
    /** Override currently-connected documents with multiple existing RowColumnThree documents */
    set?: Maybe<Array<RowColumnThreeWhereUniqueInput>>;
    /** Update multiple RowColumnThree documents */
    update?: Maybe<Array<RowColumnThreeUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowColumnThree documents */
    upsert?: Maybe<Array<RowColumnThreeUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowColumnThree documents */
    disconnect?: Maybe<Array<RowColumnThreeWhereUniqueInput>>;
    /** Delete multiple RowColumnThree documents */
    delete?: Maybe<Array<RowColumnThreeWhereUniqueInput>>;
};
export declare type RowColumnThreeUpdateManyInput = {
    /** colOne input for default locale (en) */
    colOne?: Maybe<Scalars['RichTextAST']>;
    /** colTwo input for default locale (en) */
    colTwo?: Maybe<Scalars['RichTextAST']>;
    /** colThree input for default locale (en) */
    colThree?: Maybe<Scalars['RichTextAST']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowColumnThreeUpdateManyLocalizationsInput>;
};
export declare type RowColumnThreeUpdateManyLocalizationDataInput = {
    colOne?: Maybe<Scalars['RichTextAST']>;
    colTwo?: Maybe<Scalars['RichTextAST']>;
    colThree?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowColumnThreeUpdateManyLocalizationInput = {
    data: RowColumnThreeUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowColumnThreeUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowColumnThreeUpdateManyLocalizationInput>>;
};
export declare type RowColumnThreeUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowColumnThreeWhereInput;
    /** Update many input */
    data: RowColumnThreeUpdateManyInput;
};
export declare type RowColumnThreeUpdateOneInlineInput = {
    /** Create and connect one RowColumnThree document */
    create?: Maybe<RowColumnThreeCreateInput>;
    /** Update single RowColumnThree document */
    update?: Maybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowColumnThree document */
    upsert?: Maybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowColumnThree document */
    connect?: Maybe<RowColumnThreeWhereUniqueInput>;
    /** Disconnect currently connected RowColumnThree document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowColumnThree document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowColumnThreeUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowColumnThreeWhereUniqueInput;
    /** Document to update */
    data: RowColumnThreeUpdateInput;
};
export declare type RowColumnThreeUpsertInput = {
    /** Create document if it didn't exist */
    create: RowColumnThreeCreateInput;
    /** Update document if it exists */
    update: RowColumnThreeUpdateInput;
};
export declare type RowColumnThreeUpsertLocalizationInput = {
    update: RowColumnThreeUpdateLocalizationDataInput;
    create: RowColumnThreeCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowColumnThreeUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowColumnThreeWhereUniqueInput;
    /** Upsert data */
    data: RowColumnThreeUpsertInput;
};
/** Identifies documents */
export declare type RowColumnThreeWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowColumnThreeWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowColumnThreeWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowColumnThreeWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
/** References RowColumnThree record uniquely */
export declare type RowColumnThreeWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowColumnTwo = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowColumnTwo>;
    /** Get the document in other stages */
    documentInStages: Array<RowColumnTwo>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    colOne: RichText;
    colTwo: RichText;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    pages: Array<Page>;
    productpages: Array<Product>;
    /** List of RowColumnTwo versions */
    history: Array<Version>;
};
export declare type RowColumnTwolocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowColumnTwodocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowColumnTwocreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowColumnTwoupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowColumnTwopublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowColumnTwocreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnTwoupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnTwopublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnTwopagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnTwoproductpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowColumnTwohistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowColumnTwoConnectInput = {
    /** Document to connect */
    where: RowColumnTwoWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowColumnTwoConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowColumnTwoEdge>;
    aggregate: Aggregate;
};
export declare type RowColumnTwoCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** colOne input for default locale (en) */
    colOne: Scalars['RichTextAST'];
    /** colTwo input for default locale (en) */
    colTwo: Scalars['RichTextAST'];
    pages?: Maybe<PageCreateManyInlineInput>;
    productpages?: Maybe<ProductCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowColumnTwoCreateLocalizationsInput>;
};
export declare type RowColumnTwoCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    colOne: Scalars['RichTextAST'];
    colTwo: Scalars['RichTextAST'];
};
export declare type RowColumnTwoCreateLocalizationInput = {
    /** Localization input */
    data: RowColumnTwoCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowColumnTwoCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowColumnTwoCreateLocalizationInput>>;
};
export declare type RowColumnTwoCreateManyInlineInput = {
    /** Create and connect multiple existing RowColumnTwo documents */
    create?: Maybe<Array<RowColumnTwoCreateInput>>;
    /** Connect multiple existing RowColumnTwo documents */
    connect?: Maybe<Array<RowColumnTwoWhereUniqueInput>>;
};
export declare type RowColumnTwoCreateOneInlineInput = {
    /** Create and connect one RowColumnTwo document */
    create?: Maybe<RowColumnTwoCreateInput>;
    /** Connect one existing RowColumnTwo document */
    connect?: Maybe<RowColumnTwoWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowColumnTwoEdge = {
    /** The item at the end of the edge. */
    node: RowColumnTwo;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowColumnTwoManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowColumnTwoWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowColumnTwoWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowColumnTwoWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
export declare enum RowColumnTwoOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC"
}
export declare type RowColumnTwoUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** colOne input for default locale (en) */
    colOne?: Maybe<Scalars['RichTextAST']>;
    /** colTwo input for default locale (en) */
    colTwo?: Maybe<Scalars['RichTextAST']>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    productpages?: Maybe<ProductUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowColumnTwoUpdateLocalizationsInput>;
};
export declare type RowColumnTwoUpdateLocalizationDataInput = {
    colOne?: Maybe<Scalars['RichTextAST']>;
    colTwo?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowColumnTwoUpdateLocalizationInput = {
    data: RowColumnTwoUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowColumnTwoUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowColumnTwoCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowColumnTwoUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowColumnTwoUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowColumnTwoUpdateManyInlineInput = {
    /** Create and connect multiple RowColumnTwo documents */
    create?: Maybe<Array<RowColumnTwoCreateInput>>;
    /** Connect multiple existing RowColumnTwo documents */
    connect?: Maybe<Array<RowColumnTwoConnectInput>>;
    /** Override currently-connected documents with multiple existing RowColumnTwo documents */
    set?: Maybe<Array<RowColumnTwoWhereUniqueInput>>;
    /** Update multiple RowColumnTwo documents */
    update?: Maybe<Array<RowColumnTwoUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowColumnTwo documents */
    upsert?: Maybe<Array<RowColumnTwoUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowColumnTwo documents */
    disconnect?: Maybe<Array<RowColumnTwoWhereUniqueInput>>;
    /** Delete multiple RowColumnTwo documents */
    delete?: Maybe<Array<RowColumnTwoWhereUniqueInput>>;
};
export declare type RowColumnTwoUpdateManyInput = {
    /** colOne input for default locale (en) */
    colOne?: Maybe<Scalars['RichTextAST']>;
    /** colTwo input for default locale (en) */
    colTwo?: Maybe<Scalars['RichTextAST']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowColumnTwoUpdateManyLocalizationsInput>;
};
export declare type RowColumnTwoUpdateManyLocalizationDataInput = {
    colOne?: Maybe<Scalars['RichTextAST']>;
    colTwo?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowColumnTwoUpdateManyLocalizationInput = {
    data: RowColumnTwoUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowColumnTwoUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowColumnTwoUpdateManyLocalizationInput>>;
};
export declare type RowColumnTwoUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowColumnTwoWhereInput;
    /** Update many input */
    data: RowColumnTwoUpdateManyInput;
};
export declare type RowColumnTwoUpdateOneInlineInput = {
    /** Create and connect one RowColumnTwo document */
    create?: Maybe<RowColumnTwoCreateInput>;
    /** Update single RowColumnTwo document */
    update?: Maybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowColumnTwo document */
    upsert?: Maybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowColumnTwo document */
    connect?: Maybe<RowColumnTwoWhereUniqueInput>;
    /** Disconnect currently connected RowColumnTwo document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowColumnTwo document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowColumnTwoUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowColumnTwoWhereUniqueInput;
    /** Document to update */
    data: RowColumnTwoUpdateInput;
};
export declare type RowColumnTwoUpsertInput = {
    /** Create document if it didn't exist */
    create: RowColumnTwoCreateInput;
    /** Update document if it exists */
    update: RowColumnTwoUpdateInput;
};
export declare type RowColumnTwoUpsertLocalizationInput = {
    update: RowColumnTwoUpdateLocalizationDataInput;
    create: RowColumnTwoCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowColumnTwoUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowColumnTwoWhereUniqueInput;
    /** Upsert data */
    data: RowColumnTwoUpsertInput;
};
/** Identifies documents */
export declare type RowColumnTwoWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowColumnTwoWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowColumnTwoWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowColumnTwoWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
/** References RowColumnTwo record uniquely */
export declare type RowColumnTwoWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowContentLinks = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowContentLinks>;
    /** Get the document in other stages */
    documentInStages: Array<RowContentLinks>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    title: Scalars['String'];
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    contentLinks: Array<PageLink>;
    pages: Array<Page>;
    productpages: Array<Product>;
    /** List of RowContentLinks versions */
    history: Array<Version>;
};
export declare type RowContentLinkslocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowContentLinksdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowContentLinkscreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowContentLinksupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowContentLinkspublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowContentLinkscreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowContentLinksupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowContentLinkspublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowContentLinkscontentLinksArgs = {
    where?: Maybe<PageLinkWhereInput>;
    orderBy?: Maybe<PageLinkOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowContentLinkspagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowContentLinksproductpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowContentLinkshistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowContentLinksConnectInput = {
    /** Document to connect */
    where: RowContentLinksWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowContentLinksConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowContentLinksEdge>;
    aggregate: Aggregate;
};
export declare type RowContentLinksCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** title input for default locale (en) */
    title: Scalars['String'];
    contentLinks?: Maybe<PageLinkCreateManyInlineInput>;
    pages?: Maybe<PageCreateManyInlineInput>;
    productpages?: Maybe<ProductCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowContentLinksCreateLocalizationsInput>;
};
export declare type RowContentLinksCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    title: Scalars['String'];
};
export declare type RowContentLinksCreateLocalizationInput = {
    /** Localization input */
    data: RowContentLinksCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowContentLinksCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowContentLinksCreateLocalizationInput>>;
};
export declare type RowContentLinksCreateManyInlineInput = {
    /** Create and connect multiple existing RowContentLinks documents */
    create?: Maybe<Array<RowContentLinksCreateInput>>;
    /** Connect multiple existing RowContentLinks documents */
    connect?: Maybe<Array<RowContentLinksWhereUniqueInput>>;
};
export declare type RowContentLinksCreateOneInlineInput = {
    /** Create and connect one RowContentLinks document */
    create?: Maybe<RowContentLinksCreateInput>;
    /** Connect one existing RowContentLinks document */
    connect?: Maybe<RowContentLinksWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowContentLinksEdge = {
    /** The item at the end of the edge. */
    node: RowContentLinks;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowContentLinksManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowContentLinksWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowContentLinksWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowContentLinksWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    contentLinks_every?: Maybe<PageLinkWhereInput>;
    contentLinks_some?: Maybe<PageLinkWhereInput>;
    contentLinks_none?: Maybe<PageLinkWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
export declare enum RowContentLinksOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC",
    title_ASC = "title_ASC",
    title_DESC = "title_DESC"
}
export declare type RowContentLinksUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    contentLinks?: Maybe<PageLinkUpdateManyInlineInput>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    productpages?: Maybe<ProductUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowContentLinksUpdateLocalizationsInput>;
};
export declare type RowContentLinksUpdateLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowContentLinksUpdateLocalizationInput = {
    data: RowContentLinksUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowContentLinksUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowContentLinksCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowContentLinksUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowContentLinksUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowContentLinksUpdateManyInlineInput = {
    /** Create and connect multiple RowContentLinks documents */
    create?: Maybe<Array<RowContentLinksCreateInput>>;
    /** Connect multiple existing RowContentLinks documents */
    connect?: Maybe<Array<RowContentLinksConnectInput>>;
    /** Override currently-connected documents with multiple existing RowContentLinks documents */
    set?: Maybe<Array<RowContentLinksWhereUniqueInput>>;
    /** Update multiple RowContentLinks documents */
    update?: Maybe<Array<RowContentLinksUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowContentLinks documents */
    upsert?: Maybe<Array<RowContentLinksUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowContentLinks documents */
    disconnect?: Maybe<Array<RowContentLinksWhereUniqueInput>>;
    /** Delete multiple RowContentLinks documents */
    delete?: Maybe<Array<RowContentLinksWhereUniqueInput>>;
};
export declare type RowContentLinksUpdateManyInput = {
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowContentLinksUpdateManyLocalizationsInput>;
};
export declare type RowContentLinksUpdateManyLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowContentLinksUpdateManyLocalizationInput = {
    data: RowContentLinksUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowContentLinksUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowContentLinksUpdateManyLocalizationInput>>;
};
export declare type RowContentLinksUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowContentLinksWhereInput;
    /** Update many input */
    data: RowContentLinksUpdateManyInput;
};
export declare type RowContentLinksUpdateOneInlineInput = {
    /** Create and connect one RowContentLinks document */
    create?: Maybe<RowContentLinksCreateInput>;
    /** Update single RowContentLinks document */
    update?: Maybe<RowContentLinksUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowContentLinks document */
    upsert?: Maybe<RowContentLinksUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowContentLinks document */
    connect?: Maybe<RowContentLinksWhereUniqueInput>;
    /** Disconnect currently connected RowContentLinks document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowContentLinks document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowContentLinksUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowContentLinksWhereUniqueInput;
    /** Document to update */
    data: RowContentLinksUpdateInput;
};
export declare type RowContentLinksUpsertInput = {
    /** Create document if it didn't exist */
    create: RowContentLinksCreateInput;
    /** Update document if it exists */
    update: RowContentLinksUpdateInput;
};
export declare type RowContentLinksUpsertLocalizationInput = {
    update: RowContentLinksUpdateLocalizationDataInput;
    create: RowContentLinksCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowContentLinksUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowContentLinksWhereUniqueInput;
    /** Upsert data */
    data: RowContentLinksUpsertInput;
};
/** Identifies documents */
export declare type RowContentLinksWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowContentLinksWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowContentLinksWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowContentLinksWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    title_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    title_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    title_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    title_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    title_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    title_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    title_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    title_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    title_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    contentLinks_every?: Maybe<PageLinkWhereInput>;
    contentLinks_some?: Maybe<PageLinkWhereInput>;
    contentLinks_none?: Maybe<PageLinkWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
/** References RowContentLinks record uniquely */
export declare type RowContentLinksWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowHeroBanner = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowHeroBanner>;
    /** Get the document in other stages */
    documentInStages: Array<RowHeroBanner>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    copy: RichText;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    /** Video, landscape */
    asset: Asset;
    pageLinks: Array<PageLink>;
    pages: Array<Page>;
    /** List of RowHeroBanner versions */
    history: Array<Version>;
};
export declare type RowHeroBannerlocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowHeroBannerdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowHeroBannercreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowHeroBannerupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowHeroBannerpublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowHeroBannercreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowHeroBannerupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowHeroBannerpublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowHeroBannerassetArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowHeroBannerpageLinksArgs = {
    where?: Maybe<PageLinkWhereInput>;
    orderBy?: Maybe<PageLinkOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowHeroBannerpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowHeroBannerhistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowHeroBannerConnectInput = {
    /** Document to connect */
    where: RowHeroBannerWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowHeroBannerConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowHeroBannerEdge>;
    aggregate: Aggregate;
};
export declare type RowHeroBannerCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** copy input for default locale (en) */
    copy: Scalars['RichTextAST'];
    asset: AssetCreateOneInlineInput;
    pageLinks?: Maybe<PageLinkCreateManyInlineInput>;
    pages?: Maybe<PageCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowHeroBannerCreateLocalizationsInput>;
};
export declare type RowHeroBannerCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    copy: Scalars['RichTextAST'];
};
export declare type RowHeroBannerCreateLocalizationInput = {
    /** Localization input */
    data: RowHeroBannerCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowHeroBannerCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowHeroBannerCreateLocalizationInput>>;
};
export declare type RowHeroBannerCreateManyInlineInput = {
    /** Create and connect multiple existing RowHeroBanner documents */
    create?: Maybe<Array<RowHeroBannerCreateInput>>;
    /** Connect multiple existing RowHeroBanner documents */
    connect?: Maybe<Array<RowHeroBannerWhereUniqueInput>>;
};
export declare type RowHeroBannerCreateOneInlineInput = {
    /** Create and connect one RowHeroBanner document */
    create?: Maybe<RowHeroBannerCreateInput>;
    /** Connect one existing RowHeroBanner document */
    connect?: Maybe<RowHeroBannerWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowHeroBannerEdge = {
    /** The item at the end of the edge. */
    node: RowHeroBanner;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowHeroBannerManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowHeroBannerWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowHeroBannerWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowHeroBannerWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    asset?: Maybe<AssetWhereInput>;
    pageLinks_every?: Maybe<PageLinkWhereInput>;
    pageLinks_some?: Maybe<PageLinkWhereInput>;
    pageLinks_none?: Maybe<PageLinkWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
export declare enum RowHeroBannerOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC"
}
export declare type RowHeroBannerUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** copy input for default locale (en) */
    copy?: Maybe<Scalars['RichTextAST']>;
    asset?: Maybe<AssetUpdateOneInlineInput>;
    pageLinks?: Maybe<PageLinkUpdateManyInlineInput>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowHeroBannerUpdateLocalizationsInput>;
};
export declare type RowHeroBannerUpdateLocalizationDataInput = {
    copy?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowHeroBannerUpdateLocalizationInput = {
    data: RowHeroBannerUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowHeroBannerUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowHeroBannerCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowHeroBannerUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowHeroBannerUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowHeroBannerUpdateManyInlineInput = {
    /** Create and connect multiple RowHeroBanner documents */
    create?: Maybe<Array<RowHeroBannerCreateInput>>;
    /** Connect multiple existing RowHeroBanner documents */
    connect?: Maybe<Array<RowHeroBannerConnectInput>>;
    /** Override currently-connected documents with multiple existing RowHeroBanner documents */
    set?: Maybe<Array<RowHeroBannerWhereUniqueInput>>;
    /** Update multiple RowHeroBanner documents */
    update?: Maybe<Array<RowHeroBannerUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowHeroBanner documents */
    upsert?: Maybe<Array<RowHeroBannerUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowHeroBanner documents */
    disconnect?: Maybe<Array<RowHeroBannerWhereUniqueInput>>;
    /** Delete multiple RowHeroBanner documents */
    delete?: Maybe<Array<RowHeroBannerWhereUniqueInput>>;
};
export declare type RowHeroBannerUpdateManyInput = {
    /** copy input for default locale (en) */
    copy?: Maybe<Scalars['RichTextAST']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowHeroBannerUpdateManyLocalizationsInput>;
};
export declare type RowHeroBannerUpdateManyLocalizationDataInput = {
    copy?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowHeroBannerUpdateManyLocalizationInput = {
    data: RowHeroBannerUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowHeroBannerUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowHeroBannerUpdateManyLocalizationInput>>;
};
export declare type RowHeroBannerUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowHeroBannerWhereInput;
    /** Update many input */
    data: RowHeroBannerUpdateManyInput;
};
export declare type RowHeroBannerUpdateOneInlineInput = {
    /** Create and connect one RowHeroBanner document */
    create?: Maybe<RowHeroBannerCreateInput>;
    /** Update single RowHeroBanner document */
    update?: Maybe<RowHeroBannerUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowHeroBanner document */
    upsert?: Maybe<RowHeroBannerUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowHeroBanner document */
    connect?: Maybe<RowHeroBannerWhereUniqueInput>;
    /** Disconnect currently connected RowHeroBanner document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowHeroBanner document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowHeroBannerUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowHeroBannerWhereUniqueInput;
    /** Document to update */
    data: RowHeroBannerUpdateInput;
};
export declare type RowHeroBannerUpsertInput = {
    /** Create document if it didn't exist */
    create: RowHeroBannerCreateInput;
    /** Update document if it exists */
    update: RowHeroBannerUpdateInput;
};
export declare type RowHeroBannerUpsertLocalizationInput = {
    update: RowHeroBannerUpdateLocalizationDataInput;
    create: RowHeroBannerCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowHeroBannerUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowHeroBannerWhereUniqueInput;
    /** Upsert data */
    data: RowHeroBannerUpsertInput;
};
/** Identifies documents */
export declare type RowHeroBannerWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowHeroBannerWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowHeroBannerWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowHeroBannerWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    asset?: Maybe<AssetWhereInput>;
    pageLinks_every?: Maybe<PageLinkWhereInput>;
    pageLinks_some?: Maybe<PageLinkWhereInput>;
    pageLinks_none?: Maybe<PageLinkWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
/** References RowHeroBanner record uniquely */
export declare type RowHeroBannerWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowProductBackstory = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowProductBackstory>;
    /** Get the document in other stages */
    documentInStages: Array<RowProductBackstory>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    copy: RichText;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    /** Image, portrait (8:6) */
    asset: Asset;
    pages: Array<Page>;
    /** List of RowProductBackstory versions */
    history: Array<Version>;
};
export declare type RowProductBackstorylocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowProductBackstorydocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowProductBackstorycreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductBackstoryupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductBackstorypublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductBackstorycreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductBackstoryupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductBackstorypublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductBackstoryassetArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductBackstorypagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductBackstoryhistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowProductBackstoryConnectInput = {
    /** Document to connect */
    where: RowProductBackstoryWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowProductBackstoryConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowProductBackstoryEdge>;
    aggregate: Aggregate;
};
export declare type RowProductBackstoryCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** copy input for default locale (en) */
    copy: Scalars['RichTextAST'];
    asset: AssetCreateOneInlineInput;
    pages?: Maybe<PageCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowProductBackstoryCreateLocalizationsInput>;
};
export declare type RowProductBackstoryCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    copy: Scalars['RichTextAST'];
};
export declare type RowProductBackstoryCreateLocalizationInput = {
    /** Localization input */
    data: RowProductBackstoryCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductBackstoryCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowProductBackstoryCreateLocalizationInput>>;
};
export declare type RowProductBackstoryCreateManyInlineInput = {
    /** Create and connect multiple existing RowProductBackstory documents */
    create?: Maybe<Array<RowProductBackstoryCreateInput>>;
    /** Connect multiple existing RowProductBackstory documents */
    connect?: Maybe<Array<RowProductBackstoryWhereUniqueInput>>;
};
export declare type RowProductBackstoryCreateOneInlineInput = {
    /** Create and connect one RowProductBackstory document */
    create?: Maybe<RowProductBackstoryCreateInput>;
    /** Connect one existing RowProductBackstory document */
    connect?: Maybe<RowProductBackstoryWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowProductBackstoryEdge = {
    /** The item at the end of the edge. */
    node: RowProductBackstory;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowProductBackstoryManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductBackstoryWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductBackstoryWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductBackstoryWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    asset?: Maybe<AssetWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
export declare enum RowProductBackstoryOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC"
}
export declare type RowProductBackstoryUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** copy input for default locale (en) */
    copy?: Maybe<Scalars['RichTextAST']>;
    asset?: Maybe<AssetUpdateOneInlineInput>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowProductBackstoryUpdateLocalizationsInput>;
};
export declare type RowProductBackstoryUpdateLocalizationDataInput = {
    copy?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowProductBackstoryUpdateLocalizationInput = {
    data: RowProductBackstoryUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductBackstoryUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowProductBackstoryCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowProductBackstoryUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowProductBackstoryUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowProductBackstoryUpdateManyInlineInput = {
    /** Create and connect multiple RowProductBackstory documents */
    create?: Maybe<Array<RowProductBackstoryCreateInput>>;
    /** Connect multiple existing RowProductBackstory documents */
    connect?: Maybe<Array<RowProductBackstoryConnectInput>>;
    /** Override currently-connected documents with multiple existing RowProductBackstory documents */
    set?: Maybe<Array<RowProductBackstoryWhereUniqueInput>>;
    /** Update multiple RowProductBackstory documents */
    update?: Maybe<Array<RowProductBackstoryUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowProductBackstory documents */
    upsert?: Maybe<Array<RowProductBackstoryUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowProductBackstory documents */
    disconnect?: Maybe<Array<RowProductBackstoryWhereUniqueInput>>;
    /** Delete multiple RowProductBackstory documents */
    delete?: Maybe<Array<RowProductBackstoryWhereUniqueInput>>;
};
export declare type RowProductBackstoryUpdateManyInput = {
    /** copy input for default locale (en) */
    copy?: Maybe<Scalars['RichTextAST']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowProductBackstoryUpdateManyLocalizationsInput>;
};
export declare type RowProductBackstoryUpdateManyLocalizationDataInput = {
    copy?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowProductBackstoryUpdateManyLocalizationInput = {
    data: RowProductBackstoryUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductBackstoryUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowProductBackstoryUpdateManyLocalizationInput>>;
};
export declare type RowProductBackstoryUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowProductBackstoryWhereInput;
    /** Update many input */
    data: RowProductBackstoryUpdateManyInput;
};
export declare type RowProductBackstoryUpdateOneInlineInput = {
    /** Create and connect one RowProductBackstory document */
    create?: Maybe<RowProductBackstoryCreateInput>;
    /** Update single RowProductBackstory document */
    update?: Maybe<RowProductBackstoryUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowProductBackstory document */
    upsert?: Maybe<RowProductBackstoryUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowProductBackstory document */
    connect?: Maybe<RowProductBackstoryWhereUniqueInput>;
    /** Disconnect currently connected RowProductBackstory document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowProductBackstory document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowProductBackstoryUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductBackstoryWhereUniqueInput;
    /** Document to update */
    data: RowProductBackstoryUpdateInput;
};
export declare type RowProductBackstoryUpsertInput = {
    /** Create document if it didn't exist */
    create: RowProductBackstoryCreateInput;
    /** Update document if it exists */
    update: RowProductBackstoryUpdateInput;
};
export declare type RowProductBackstoryUpsertLocalizationInput = {
    update: RowProductBackstoryUpdateLocalizationDataInput;
    create: RowProductBackstoryCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductBackstoryUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductBackstoryWhereUniqueInput;
    /** Upsert data */
    data: RowProductBackstoryUpsertInput;
};
/** Identifies documents */
export declare type RowProductBackstoryWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductBackstoryWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductBackstoryWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductBackstoryWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    asset?: Maybe<AssetWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
/** References RowProductBackstory record uniquely */
export declare type RowProductBackstoryWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowProductFeature = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowProductFeature>;
    /** Get the document in other stages */
    documentInStages: Array<RowProductFeature>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    topic?: Maybe<Scalars['String']>;
    copy: RichText;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    productpages: Array<Product>;
    /** List of RowProductFeature versions */
    history: Array<Version>;
};
export declare type RowProductFeaturelocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowProductFeaturedocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowProductFeaturecreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductFeatureupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductFeaturepublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductFeaturecreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductFeatureupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductFeaturepublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductFeatureproductpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductFeaturehistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowProductFeatureBoxed = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowProductFeatureBoxed>;
    /** Get the document in other stages */
    documentInStages: Array<RowProductFeatureBoxed>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    topic?: Maybe<Scalars['String']>;
    copy: RichText;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    productpages: Array<Product>;
    /** List of RowProductFeatureBoxed versions */
    history: Array<Version>;
};
export declare type RowProductFeatureBoxedlocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowProductFeatureBoxeddocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowProductFeatureBoxedcreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductFeatureBoxedupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductFeatureBoxedpublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductFeatureBoxedcreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductFeatureBoxedupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductFeatureBoxedpublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductFeatureBoxedproductpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductFeatureBoxedhistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowProductFeatureBoxedConnectInput = {
    /** Document to connect */
    where: RowProductFeatureBoxedWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowProductFeatureBoxedConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowProductFeatureBoxedEdge>;
    aggregate: Aggregate;
};
export declare type RowProductFeatureBoxedCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** topic input for default locale (en) */
    topic?: Maybe<Scalars['String']>;
    /** copy input for default locale (en) */
    copy: Scalars['RichTextAST'];
    productpages?: Maybe<ProductCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowProductFeatureBoxedCreateLocalizationsInput>;
};
export declare type RowProductFeatureBoxedCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    topic?: Maybe<Scalars['String']>;
    copy: Scalars['RichTextAST'];
};
export declare type RowProductFeatureBoxedCreateLocalizationInput = {
    /** Localization input */
    data: RowProductFeatureBoxedCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductFeatureBoxedCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowProductFeatureBoxedCreateLocalizationInput>>;
};
export declare type RowProductFeatureBoxedCreateManyInlineInput = {
    /** Create and connect multiple existing RowProductFeatureBoxed documents */
    create?: Maybe<Array<RowProductFeatureBoxedCreateInput>>;
    /** Connect multiple existing RowProductFeatureBoxed documents */
    connect?: Maybe<Array<RowProductFeatureBoxedWhereUniqueInput>>;
};
export declare type RowProductFeatureBoxedCreateOneInlineInput = {
    /** Create and connect one RowProductFeatureBoxed document */
    create?: Maybe<RowProductFeatureBoxedCreateInput>;
    /** Connect one existing RowProductFeatureBoxed document */
    connect?: Maybe<RowProductFeatureBoxedWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowProductFeatureBoxedEdge = {
    /** The item at the end of the edge. */
    node: RowProductFeatureBoxed;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowProductFeatureBoxedManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductFeatureBoxedWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductFeatureBoxedWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductFeatureBoxedWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
export declare enum RowProductFeatureBoxedOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC",
    topic_ASC = "topic_ASC",
    topic_DESC = "topic_DESC"
}
export declare type RowProductFeatureBoxedUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** topic input for default locale (en) */
    topic?: Maybe<Scalars['String']>;
    /** copy input for default locale (en) */
    copy?: Maybe<Scalars['RichTextAST']>;
    productpages?: Maybe<ProductUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowProductFeatureBoxedUpdateLocalizationsInput>;
};
export declare type RowProductFeatureBoxedUpdateLocalizationDataInput = {
    topic?: Maybe<Scalars['String']>;
    copy?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowProductFeatureBoxedUpdateLocalizationInput = {
    data: RowProductFeatureBoxedUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductFeatureBoxedUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowProductFeatureBoxedCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowProductFeatureBoxedUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowProductFeatureBoxedUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowProductFeatureBoxedUpdateManyInlineInput = {
    /** Create and connect multiple RowProductFeatureBoxed documents */
    create?: Maybe<Array<RowProductFeatureBoxedCreateInput>>;
    /** Connect multiple existing RowProductFeatureBoxed documents */
    connect?: Maybe<Array<RowProductFeatureBoxedConnectInput>>;
    /** Override currently-connected documents with multiple existing RowProductFeatureBoxed documents */
    set?: Maybe<Array<RowProductFeatureBoxedWhereUniqueInput>>;
    /** Update multiple RowProductFeatureBoxed documents */
    update?: Maybe<Array<RowProductFeatureBoxedUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowProductFeatureBoxed documents */
    upsert?: Maybe<Array<RowProductFeatureBoxedUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowProductFeatureBoxed documents */
    disconnect?: Maybe<Array<RowProductFeatureBoxedWhereUniqueInput>>;
    /** Delete multiple RowProductFeatureBoxed documents */
    delete?: Maybe<Array<RowProductFeatureBoxedWhereUniqueInput>>;
};
export declare type RowProductFeatureBoxedUpdateManyInput = {
    /** topic input for default locale (en) */
    topic?: Maybe<Scalars['String']>;
    /** copy input for default locale (en) */
    copy?: Maybe<Scalars['RichTextAST']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowProductFeatureBoxedUpdateManyLocalizationsInput>;
};
export declare type RowProductFeatureBoxedUpdateManyLocalizationDataInput = {
    topic?: Maybe<Scalars['String']>;
    copy?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowProductFeatureBoxedUpdateManyLocalizationInput = {
    data: RowProductFeatureBoxedUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductFeatureBoxedUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowProductFeatureBoxedUpdateManyLocalizationInput>>;
};
export declare type RowProductFeatureBoxedUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowProductFeatureBoxedWhereInput;
    /** Update many input */
    data: RowProductFeatureBoxedUpdateManyInput;
};
export declare type RowProductFeatureBoxedUpdateOneInlineInput = {
    /** Create and connect one RowProductFeatureBoxed document */
    create?: Maybe<RowProductFeatureBoxedCreateInput>;
    /** Update single RowProductFeatureBoxed document */
    update?: Maybe<RowProductFeatureBoxedUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowProductFeatureBoxed document */
    upsert?: Maybe<RowProductFeatureBoxedUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowProductFeatureBoxed document */
    connect?: Maybe<RowProductFeatureBoxedWhereUniqueInput>;
    /** Disconnect currently connected RowProductFeatureBoxed document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowProductFeatureBoxed document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowProductFeatureBoxedUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductFeatureBoxedWhereUniqueInput;
    /** Document to update */
    data: RowProductFeatureBoxedUpdateInput;
};
export declare type RowProductFeatureBoxedUpsertInput = {
    /** Create document if it didn't exist */
    create: RowProductFeatureBoxedCreateInput;
    /** Update document if it exists */
    update: RowProductFeatureBoxedUpdateInput;
};
export declare type RowProductFeatureBoxedUpsertLocalizationInput = {
    update: RowProductFeatureBoxedUpdateLocalizationDataInput;
    create: RowProductFeatureBoxedCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductFeatureBoxedUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductFeatureBoxedWhereUniqueInput;
    /** Upsert data */
    data: RowProductFeatureBoxedUpsertInput;
};
/** Identifies documents */
export declare type RowProductFeatureBoxedWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductFeatureBoxedWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductFeatureBoxedWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductFeatureBoxedWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    topic?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    topic_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    topic_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    topic_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    topic_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    topic_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    topic_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    topic_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    topic_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    topic_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
/** References RowProductFeatureBoxed record uniquely */
export declare type RowProductFeatureBoxedWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowProductFeatureConnectInput = {
    /** Document to connect */
    where: RowProductFeatureWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowProductFeatureConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowProductFeatureEdge>;
    aggregate: Aggregate;
};
export declare type RowProductFeatureCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** topic input for default locale (en) */
    topic?: Maybe<Scalars['String']>;
    /** copy input for default locale (en) */
    copy: Scalars['RichTextAST'];
    productpages?: Maybe<ProductCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowProductFeatureCreateLocalizationsInput>;
};
export declare type RowProductFeatureCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    topic?: Maybe<Scalars['String']>;
    copy: Scalars['RichTextAST'];
};
export declare type RowProductFeatureCreateLocalizationInput = {
    /** Localization input */
    data: RowProductFeatureCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductFeatureCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowProductFeatureCreateLocalizationInput>>;
};
export declare type RowProductFeatureCreateManyInlineInput = {
    /** Create and connect multiple existing RowProductFeature documents */
    create?: Maybe<Array<RowProductFeatureCreateInput>>;
    /** Connect multiple existing RowProductFeature documents */
    connect?: Maybe<Array<RowProductFeatureWhereUniqueInput>>;
};
export declare type RowProductFeatureCreateOneInlineInput = {
    /** Create and connect one RowProductFeature document */
    create?: Maybe<RowProductFeatureCreateInput>;
    /** Connect one existing RowProductFeature document */
    connect?: Maybe<RowProductFeatureWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowProductFeatureEdge = {
    /** The item at the end of the edge. */
    node: RowProductFeature;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowProductFeatureManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductFeatureWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductFeatureWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductFeatureWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
export declare enum RowProductFeatureOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC",
    topic_ASC = "topic_ASC",
    topic_DESC = "topic_DESC"
}
export declare type RowProductFeatureUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** topic input for default locale (en) */
    topic?: Maybe<Scalars['String']>;
    /** copy input for default locale (en) */
    copy?: Maybe<Scalars['RichTextAST']>;
    productpages?: Maybe<ProductUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowProductFeatureUpdateLocalizationsInput>;
};
export declare type RowProductFeatureUpdateLocalizationDataInput = {
    topic?: Maybe<Scalars['String']>;
    copy?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowProductFeatureUpdateLocalizationInput = {
    data: RowProductFeatureUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductFeatureUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowProductFeatureCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowProductFeatureUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowProductFeatureUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowProductFeatureUpdateManyInlineInput = {
    /** Create and connect multiple RowProductFeature documents */
    create?: Maybe<Array<RowProductFeatureCreateInput>>;
    /** Connect multiple existing RowProductFeature documents */
    connect?: Maybe<Array<RowProductFeatureConnectInput>>;
    /** Override currently-connected documents with multiple existing RowProductFeature documents */
    set?: Maybe<Array<RowProductFeatureWhereUniqueInput>>;
    /** Update multiple RowProductFeature documents */
    update?: Maybe<Array<RowProductFeatureUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowProductFeature documents */
    upsert?: Maybe<Array<RowProductFeatureUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowProductFeature documents */
    disconnect?: Maybe<Array<RowProductFeatureWhereUniqueInput>>;
    /** Delete multiple RowProductFeature documents */
    delete?: Maybe<Array<RowProductFeatureWhereUniqueInput>>;
};
export declare type RowProductFeatureUpdateManyInput = {
    /** topic input for default locale (en) */
    topic?: Maybe<Scalars['String']>;
    /** copy input for default locale (en) */
    copy?: Maybe<Scalars['RichTextAST']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowProductFeatureUpdateManyLocalizationsInput>;
};
export declare type RowProductFeatureUpdateManyLocalizationDataInput = {
    topic?: Maybe<Scalars['String']>;
    copy?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowProductFeatureUpdateManyLocalizationInput = {
    data: RowProductFeatureUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductFeatureUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowProductFeatureUpdateManyLocalizationInput>>;
};
export declare type RowProductFeatureUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowProductFeatureWhereInput;
    /** Update many input */
    data: RowProductFeatureUpdateManyInput;
};
export declare type RowProductFeatureUpdateOneInlineInput = {
    /** Create and connect one RowProductFeature document */
    create?: Maybe<RowProductFeatureCreateInput>;
    /** Update single RowProductFeature document */
    update?: Maybe<RowProductFeatureUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowProductFeature document */
    upsert?: Maybe<RowProductFeatureUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowProductFeature document */
    connect?: Maybe<RowProductFeatureWhereUniqueInput>;
    /** Disconnect currently connected RowProductFeature document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowProductFeature document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowProductFeatureUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductFeatureWhereUniqueInput;
    /** Document to update */
    data: RowProductFeatureUpdateInput;
};
export declare type RowProductFeatureUpsertInput = {
    /** Create document if it didn't exist */
    create: RowProductFeatureCreateInput;
    /** Update document if it exists */
    update: RowProductFeatureUpdateInput;
};
export declare type RowProductFeatureUpsertLocalizationInput = {
    update: RowProductFeatureUpdateLocalizationDataInput;
    create: RowProductFeatureCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductFeatureUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductFeatureWhereUniqueInput;
    /** Upsert data */
    data: RowProductFeatureUpsertInput;
};
/** Identifies documents */
export declare type RowProductFeatureWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductFeatureWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductFeatureWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductFeatureWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    topic?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    topic_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    topic_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    topic_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    topic_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    topic_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    topic_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    topic_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    topic_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    topic_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
/** References RowProductFeature record uniquely */
export declare type RowProductFeatureWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowProductGrid = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowProductGrid>;
    /** Get the document in other stages */
    documentInStages: Array<RowProductGrid>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    title: Scalars['String'];
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    pageLinks: Array<PageLink>;
    magentoCategory?: Maybe<MagentoCategory>;
    pages: Array<Page>;
    /** List of RowProductGrid versions */
    history: Array<Version>;
};
export declare type RowProductGridlocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowProductGriddocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowProductGridcreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductGridupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductGridpublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductGridcreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductGridupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductGridpublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductGridpageLinksArgs = {
    where?: Maybe<PageLinkWhereInput>;
    orderBy?: Maybe<PageLinkOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductGridmagentoCategoryArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductGridpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductGridhistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowProductGridConnectInput = {
    /** Document to connect */
    where: RowProductGridWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowProductGridConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowProductGridEdge>;
    aggregate: Aggregate;
};
export declare type RowProductGridCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** title input for default locale (en) */
    title: Scalars['String'];
    pageLinks?: Maybe<PageLinkCreateManyInlineInput>;
    magentoCategory?: Maybe<MagentoCategoryCreateOneInlineInput>;
    pages?: Maybe<PageCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowProductGridCreateLocalizationsInput>;
};
export declare type RowProductGridCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    title: Scalars['String'];
};
export declare type RowProductGridCreateLocalizationInput = {
    /** Localization input */
    data: RowProductGridCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductGridCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowProductGridCreateLocalizationInput>>;
};
export declare type RowProductGridCreateManyInlineInput = {
    /** Create and connect multiple existing RowProductGrid documents */
    create?: Maybe<Array<RowProductGridCreateInput>>;
    /** Connect multiple existing RowProductGrid documents */
    connect?: Maybe<Array<RowProductGridWhereUniqueInput>>;
};
export declare type RowProductGridCreateOneInlineInput = {
    /** Create and connect one RowProductGrid document */
    create?: Maybe<RowProductGridCreateInput>;
    /** Connect one existing RowProductGrid document */
    connect?: Maybe<RowProductGridWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowProductGridEdge = {
    /** The item at the end of the edge. */
    node: RowProductGrid;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowProductGridManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductGridWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductGridWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductGridWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    pageLinks_every?: Maybe<PageLinkWhereInput>;
    pageLinks_some?: Maybe<PageLinkWhereInput>;
    pageLinks_none?: Maybe<PageLinkWhereInput>;
    magentoCategory?: Maybe<MagentoCategoryWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
export declare enum RowProductGridOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC",
    title_ASC = "title_ASC",
    title_DESC = "title_DESC"
}
export declare type RowProductGridUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    pageLinks?: Maybe<PageLinkUpdateManyInlineInput>;
    magentoCategory?: Maybe<MagentoCategoryUpdateOneInlineInput>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowProductGridUpdateLocalizationsInput>;
};
export declare type RowProductGridUpdateLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowProductGridUpdateLocalizationInput = {
    data: RowProductGridUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductGridUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowProductGridCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowProductGridUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowProductGridUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowProductGridUpdateManyInlineInput = {
    /** Create and connect multiple RowProductGrid documents */
    create?: Maybe<Array<RowProductGridCreateInput>>;
    /** Connect multiple existing RowProductGrid documents */
    connect?: Maybe<Array<RowProductGridConnectInput>>;
    /** Override currently-connected documents with multiple existing RowProductGrid documents */
    set?: Maybe<Array<RowProductGridWhereUniqueInput>>;
    /** Update multiple RowProductGrid documents */
    update?: Maybe<Array<RowProductGridUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowProductGrid documents */
    upsert?: Maybe<Array<RowProductGridUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowProductGrid documents */
    disconnect?: Maybe<Array<RowProductGridWhereUniqueInput>>;
    /** Delete multiple RowProductGrid documents */
    delete?: Maybe<Array<RowProductGridWhereUniqueInput>>;
};
export declare type RowProductGridUpdateManyInput = {
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowProductGridUpdateManyLocalizationsInput>;
};
export declare type RowProductGridUpdateManyLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowProductGridUpdateManyLocalizationInput = {
    data: RowProductGridUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductGridUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowProductGridUpdateManyLocalizationInput>>;
};
export declare type RowProductGridUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowProductGridWhereInput;
    /** Update many input */
    data: RowProductGridUpdateManyInput;
};
export declare type RowProductGridUpdateOneInlineInput = {
    /** Create and connect one RowProductGrid document */
    create?: Maybe<RowProductGridCreateInput>;
    /** Update single RowProductGrid document */
    update?: Maybe<RowProductGridUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowProductGrid document */
    upsert?: Maybe<RowProductGridUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowProductGrid document */
    connect?: Maybe<RowProductGridWhereUniqueInput>;
    /** Disconnect currently connected RowProductGrid document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowProductGrid document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowProductGridUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductGridWhereUniqueInput;
    /** Document to update */
    data: RowProductGridUpdateInput;
};
export declare type RowProductGridUpsertInput = {
    /** Create document if it didn't exist */
    create: RowProductGridCreateInput;
    /** Update document if it exists */
    update: RowProductGridUpdateInput;
};
export declare type RowProductGridUpsertLocalizationInput = {
    update: RowProductGridUpdateLocalizationDataInput;
    create: RowProductGridCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductGridUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductGridWhereUniqueInput;
    /** Upsert data */
    data: RowProductGridUpsertInput;
};
/** Identifies documents */
export declare type RowProductGridWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductGridWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductGridWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductGridWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    title_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    title_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    title_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    title_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    title_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    title_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    title_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    title_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    title_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    pageLinks_every?: Maybe<PageLinkWhereInput>;
    pageLinks_some?: Maybe<PageLinkWhereInput>;
    pageLinks_none?: Maybe<PageLinkWhereInput>;
    magentoCategory?: Maybe<MagentoCategoryWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
/** References RowProductGrid record uniquely */
export declare type RowProductGridWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowProductRelated = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowProductRelated>;
    /** Get the document in other stages */
    documentInStages: Array<RowProductRelated>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    title: Scalars['String'];
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    productpages: Array<Product>;
    /** List of RowProductRelated versions */
    history: Array<Version>;
};
export declare type RowProductRelatedlocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowProductRelateddocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowProductRelatedcreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductRelatedupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductRelatedpublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductRelatedcreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductRelatedupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductRelatedpublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductRelatedproductpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductRelatedhistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowProductRelatedConnectInput = {
    /** Document to connect */
    where: RowProductRelatedWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowProductRelatedConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowProductRelatedEdge>;
    aggregate: Aggregate;
};
export declare type RowProductRelatedCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** title input for default locale (en) */
    title: Scalars['String'];
    productpages?: Maybe<ProductCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowProductRelatedCreateLocalizationsInput>;
};
export declare type RowProductRelatedCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    title: Scalars['String'];
};
export declare type RowProductRelatedCreateLocalizationInput = {
    /** Localization input */
    data: RowProductRelatedCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductRelatedCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowProductRelatedCreateLocalizationInput>>;
};
export declare type RowProductRelatedCreateManyInlineInput = {
    /** Create and connect multiple existing RowProductRelated documents */
    create?: Maybe<Array<RowProductRelatedCreateInput>>;
    /** Connect multiple existing RowProductRelated documents */
    connect?: Maybe<Array<RowProductRelatedWhereUniqueInput>>;
};
export declare type RowProductRelatedCreateOneInlineInput = {
    /** Create and connect one RowProductRelated document */
    create?: Maybe<RowProductRelatedCreateInput>;
    /** Connect one existing RowProductRelated document */
    connect?: Maybe<RowProductRelatedWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowProductRelatedEdge = {
    /** The item at the end of the edge. */
    node: RowProductRelated;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowProductRelatedManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductRelatedWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductRelatedWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductRelatedWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
export declare enum RowProductRelatedOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC",
    title_ASC = "title_ASC",
    title_DESC = "title_DESC"
}
export declare type RowProductRelatedUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    productpages?: Maybe<ProductUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowProductRelatedUpdateLocalizationsInput>;
};
export declare type RowProductRelatedUpdateLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowProductRelatedUpdateLocalizationInput = {
    data: RowProductRelatedUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductRelatedUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowProductRelatedCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowProductRelatedUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowProductRelatedUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowProductRelatedUpdateManyInlineInput = {
    /** Create and connect multiple RowProductRelated documents */
    create?: Maybe<Array<RowProductRelatedCreateInput>>;
    /** Connect multiple existing RowProductRelated documents */
    connect?: Maybe<Array<RowProductRelatedConnectInput>>;
    /** Override currently-connected documents with multiple existing RowProductRelated documents */
    set?: Maybe<Array<RowProductRelatedWhereUniqueInput>>;
    /** Update multiple RowProductRelated documents */
    update?: Maybe<Array<RowProductRelatedUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowProductRelated documents */
    upsert?: Maybe<Array<RowProductRelatedUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowProductRelated documents */
    disconnect?: Maybe<Array<RowProductRelatedWhereUniqueInput>>;
    /** Delete multiple RowProductRelated documents */
    delete?: Maybe<Array<RowProductRelatedWhereUniqueInput>>;
};
export declare type RowProductRelatedUpdateManyInput = {
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowProductRelatedUpdateManyLocalizationsInput>;
};
export declare type RowProductRelatedUpdateManyLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowProductRelatedUpdateManyLocalizationInput = {
    data: RowProductRelatedUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductRelatedUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowProductRelatedUpdateManyLocalizationInput>>;
};
export declare type RowProductRelatedUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowProductRelatedWhereInput;
    /** Update many input */
    data: RowProductRelatedUpdateManyInput;
};
export declare type RowProductRelatedUpdateOneInlineInput = {
    /** Create and connect one RowProductRelated document */
    create?: Maybe<RowProductRelatedCreateInput>;
    /** Update single RowProductRelated document */
    update?: Maybe<RowProductRelatedUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowProductRelated document */
    upsert?: Maybe<RowProductRelatedUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowProductRelated document */
    connect?: Maybe<RowProductRelatedWhereUniqueInput>;
    /** Disconnect currently connected RowProductRelated document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowProductRelated document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowProductRelatedUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductRelatedWhereUniqueInput;
    /** Document to update */
    data: RowProductRelatedUpdateInput;
};
export declare type RowProductRelatedUpsertInput = {
    /** Create document if it didn't exist */
    create: RowProductRelatedCreateInput;
    /** Update document if it exists */
    update: RowProductRelatedUpdateInput;
};
export declare type RowProductRelatedUpsertLocalizationInput = {
    update: RowProductRelatedUpdateLocalizationDataInput;
    create: RowProductRelatedCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductRelatedUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductRelatedWhereUniqueInput;
    /** Upsert data */
    data: RowProductRelatedUpsertInput;
};
/** Identifies documents */
export declare type RowProductRelatedWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductRelatedWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductRelatedWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductRelatedWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    title_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    title_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    title_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    title_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    title_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    title_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    title_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    title_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    title_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
/** References RowProductRelated record uniquely */
export declare type RowProductRelatedWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowProductReviews = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowProductReviews>;
    /** Get the document in other stages */
    documentInStages: Array<RowProductReviews>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    title: Scalars['String'];
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    productpages: Array<Product>;
    /** List of RowProductReviews versions */
    history: Array<Version>;
};
export declare type RowProductReviewslocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowProductReviewsdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowProductReviewscreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductReviewsupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductReviewspublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductReviewscreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductReviewsupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductReviewspublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductReviewsproductpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductReviewshistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowProductReviewsConnectInput = {
    /** Document to connect */
    where: RowProductReviewsWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowProductReviewsConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowProductReviewsEdge>;
    aggregate: Aggregate;
};
export declare type RowProductReviewsCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** title input for default locale (en) */
    title: Scalars['String'];
    productpages?: Maybe<ProductCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowProductReviewsCreateLocalizationsInput>;
};
export declare type RowProductReviewsCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    title: Scalars['String'];
};
export declare type RowProductReviewsCreateLocalizationInput = {
    /** Localization input */
    data: RowProductReviewsCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductReviewsCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowProductReviewsCreateLocalizationInput>>;
};
export declare type RowProductReviewsCreateManyInlineInput = {
    /** Create and connect multiple existing RowProductReviews documents */
    create?: Maybe<Array<RowProductReviewsCreateInput>>;
    /** Connect multiple existing RowProductReviews documents */
    connect?: Maybe<Array<RowProductReviewsWhereUniqueInput>>;
};
export declare type RowProductReviewsCreateOneInlineInput = {
    /** Create and connect one RowProductReviews document */
    create?: Maybe<RowProductReviewsCreateInput>;
    /** Connect one existing RowProductReviews document */
    connect?: Maybe<RowProductReviewsWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowProductReviewsEdge = {
    /** The item at the end of the edge. */
    node: RowProductReviews;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowProductReviewsManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductReviewsWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductReviewsWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductReviewsWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
export declare enum RowProductReviewsOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC",
    title_ASC = "title_ASC",
    title_DESC = "title_DESC"
}
export declare type RowProductReviewsUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    productpages?: Maybe<ProductUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowProductReviewsUpdateLocalizationsInput>;
};
export declare type RowProductReviewsUpdateLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowProductReviewsUpdateLocalizationInput = {
    data: RowProductReviewsUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductReviewsUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowProductReviewsCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowProductReviewsUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowProductReviewsUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowProductReviewsUpdateManyInlineInput = {
    /** Create and connect multiple RowProductReviews documents */
    create?: Maybe<Array<RowProductReviewsCreateInput>>;
    /** Connect multiple existing RowProductReviews documents */
    connect?: Maybe<Array<RowProductReviewsConnectInput>>;
    /** Override currently-connected documents with multiple existing RowProductReviews documents */
    set?: Maybe<Array<RowProductReviewsWhereUniqueInput>>;
    /** Update multiple RowProductReviews documents */
    update?: Maybe<Array<RowProductReviewsUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowProductReviews documents */
    upsert?: Maybe<Array<RowProductReviewsUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowProductReviews documents */
    disconnect?: Maybe<Array<RowProductReviewsWhereUniqueInput>>;
    /** Delete multiple RowProductReviews documents */
    delete?: Maybe<Array<RowProductReviewsWhereUniqueInput>>;
};
export declare type RowProductReviewsUpdateManyInput = {
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowProductReviewsUpdateManyLocalizationsInput>;
};
export declare type RowProductReviewsUpdateManyLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowProductReviewsUpdateManyLocalizationInput = {
    data: RowProductReviewsUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductReviewsUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowProductReviewsUpdateManyLocalizationInput>>;
};
export declare type RowProductReviewsUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowProductReviewsWhereInput;
    /** Update many input */
    data: RowProductReviewsUpdateManyInput;
};
export declare type RowProductReviewsUpdateOneInlineInput = {
    /** Create and connect one RowProductReviews document */
    create?: Maybe<RowProductReviewsCreateInput>;
    /** Update single RowProductReviews document */
    update?: Maybe<RowProductReviewsUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowProductReviews document */
    upsert?: Maybe<RowProductReviewsUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowProductReviews document */
    connect?: Maybe<RowProductReviewsWhereUniqueInput>;
    /** Disconnect currently connected RowProductReviews document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowProductReviews document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowProductReviewsUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductReviewsWhereUniqueInput;
    /** Document to update */
    data: RowProductReviewsUpdateInput;
};
export declare type RowProductReviewsUpsertInput = {
    /** Create document if it didn't exist */
    create: RowProductReviewsCreateInput;
    /** Update document if it exists */
    update: RowProductReviewsUpdateInput;
};
export declare type RowProductReviewsUpsertLocalizationInput = {
    update: RowProductReviewsUpdateLocalizationDataInput;
    create: RowProductReviewsCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductReviewsUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductReviewsWhereUniqueInput;
    /** Upsert data */
    data: RowProductReviewsUpsertInput;
};
/** Identifies documents */
export declare type RowProductReviewsWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductReviewsWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductReviewsWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductReviewsWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    title_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    title_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    title_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    title_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    title_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    title_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    title_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    title_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    title_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
/** References RowProductReviews record uniquely */
export declare type RowProductReviewsWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowProductSpecs = Node & {
    /** System stage field */
    stage: Stage;
    /** Get the document in other stages */
    documentInStages: Array<RowProductSpecs>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    productpages: Array<Product>;
    /** List of RowProductSpecs versions */
    history: Array<Version>;
};
export declare type RowProductSpecsdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowProductSpecscreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductSpecsupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductSpecspublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductSpecsproductpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductSpecshistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowProductSpecsConnectInput = {
    /** Document to connect */
    where: RowProductSpecsWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowProductSpecsConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowProductSpecsEdge>;
    aggregate: Aggregate;
};
export declare type RowProductSpecsCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    productpages?: Maybe<ProductCreateManyInlineInput>;
};
export declare type RowProductSpecsCreateManyInlineInput = {
    /** Create and connect multiple existing RowProductSpecs documents */
    create?: Maybe<Array<RowProductSpecsCreateInput>>;
    /** Connect multiple existing RowProductSpecs documents */
    connect?: Maybe<Array<RowProductSpecsWhereUniqueInput>>;
};
export declare type RowProductSpecsCreateOneInlineInput = {
    /** Create and connect one RowProductSpecs document */
    create?: Maybe<RowProductSpecsCreateInput>;
    /** Connect one existing RowProductSpecs document */
    connect?: Maybe<RowProductSpecsWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowProductSpecsEdge = {
    /** The item at the end of the edge. */
    node: RowProductSpecs;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowProductSpecsManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductSpecsWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductSpecsWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductSpecsWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
export declare enum RowProductSpecsOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC"
}
export declare type RowProductSpecsUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    productpages?: Maybe<ProductUpdateManyInlineInput>;
};
export declare type RowProductSpecsUpdateManyInlineInput = {
    /** Create and connect multiple RowProductSpecs documents */
    create?: Maybe<Array<RowProductSpecsCreateInput>>;
    /** Connect multiple existing RowProductSpecs documents */
    connect?: Maybe<Array<RowProductSpecsConnectInput>>;
    /** Override currently-connected documents with multiple existing RowProductSpecs documents */
    set?: Maybe<Array<RowProductSpecsWhereUniqueInput>>;
    /** Update multiple RowProductSpecs documents */
    update?: Maybe<Array<RowProductSpecsUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowProductSpecs documents */
    upsert?: Maybe<Array<RowProductSpecsUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowProductSpecs documents */
    disconnect?: Maybe<Array<RowProductSpecsWhereUniqueInput>>;
    /** Delete multiple RowProductSpecs documents */
    delete?: Maybe<Array<RowProductSpecsWhereUniqueInput>>;
};
export declare type RowProductSpecsUpdateManyInput = {
    /** No fields in updateMany data input */
    _?: Maybe<Scalars['String']>;
};
export declare type RowProductSpecsUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowProductSpecsWhereInput;
    /** Update many input */
    data: RowProductSpecsUpdateManyInput;
};
export declare type RowProductSpecsUpdateOneInlineInput = {
    /** Create and connect one RowProductSpecs document */
    create?: Maybe<RowProductSpecsCreateInput>;
    /** Update single RowProductSpecs document */
    update?: Maybe<RowProductSpecsUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowProductSpecs document */
    upsert?: Maybe<RowProductSpecsUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowProductSpecs document */
    connect?: Maybe<RowProductSpecsWhereUniqueInput>;
    /** Disconnect currently connected RowProductSpecs document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowProductSpecs document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowProductSpecsUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductSpecsWhereUniqueInput;
    /** Document to update */
    data: RowProductSpecsUpdateInput;
};
export declare type RowProductSpecsUpsertInput = {
    /** Create document if it didn't exist */
    create: RowProductSpecsCreateInput;
    /** Update document if it exists */
    update: RowProductSpecsUpdateInput;
};
export declare type RowProductSpecsUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductSpecsWhereUniqueInput;
    /** Upsert data */
    data: RowProductSpecsUpsertInput;
};
/** Identifies documents */
export declare type RowProductSpecsWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductSpecsWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductSpecsWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductSpecsWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
/** References RowProductSpecs record uniquely */
export declare type RowProductSpecsWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowProductUpsells = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowProductUpsells>;
    /** Get the document in other stages */
    documentInStages: Array<RowProductUpsells>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    title: Scalars['String'];
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    productpages: Array<Product>;
    /** List of RowProductUpsells versions */
    history: Array<Version>;
};
export declare type RowProductUpsellslocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowProductUpsellsdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowProductUpsellscreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductUpsellsupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductUpsellspublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowProductUpsellscreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductUpsellsupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductUpsellspublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductUpsellsproductpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowProductUpsellshistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowProductUpsellsConnectInput = {
    /** Document to connect */
    where: RowProductUpsellsWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowProductUpsellsConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowProductUpsellsEdge>;
    aggregate: Aggregate;
};
export declare type RowProductUpsellsCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** title input for default locale (en) */
    title: Scalars['String'];
    productpages?: Maybe<ProductCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowProductUpsellsCreateLocalizationsInput>;
};
export declare type RowProductUpsellsCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    title: Scalars['String'];
};
export declare type RowProductUpsellsCreateLocalizationInput = {
    /** Localization input */
    data: RowProductUpsellsCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductUpsellsCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowProductUpsellsCreateLocalizationInput>>;
};
export declare type RowProductUpsellsCreateManyInlineInput = {
    /** Create and connect multiple existing RowProductUpsells documents */
    create?: Maybe<Array<RowProductUpsellsCreateInput>>;
    /** Connect multiple existing RowProductUpsells documents */
    connect?: Maybe<Array<RowProductUpsellsWhereUniqueInput>>;
};
export declare type RowProductUpsellsCreateOneInlineInput = {
    /** Create and connect one RowProductUpsells document */
    create?: Maybe<RowProductUpsellsCreateInput>;
    /** Connect one existing RowProductUpsells document */
    connect?: Maybe<RowProductUpsellsWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowProductUpsellsEdge = {
    /** The item at the end of the edge. */
    node: RowProductUpsells;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowProductUpsellsManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductUpsellsWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductUpsellsWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductUpsellsWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
export declare enum RowProductUpsellsOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC",
    title_ASC = "title_ASC",
    title_DESC = "title_DESC"
}
export declare type RowProductUpsellsUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    productpages?: Maybe<ProductUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowProductUpsellsUpdateLocalizationsInput>;
};
export declare type RowProductUpsellsUpdateLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowProductUpsellsUpdateLocalizationInput = {
    data: RowProductUpsellsUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductUpsellsUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowProductUpsellsCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowProductUpsellsUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowProductUpsellsUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowProductUpsellsUpdateManyInlineInput = {
    /** Create and connect multiple RowProductUpsells documents */
    create?: Maybe<Array<RowProductUpsellsCreateInput>>;
    /** Connect multiple existing RowProductUpsells documents */
    connect?: Maybe<Array<RowProductUpsellsConnectInput>>;
    /** Override currently-connected documents with multiple existing RowProductUpsells documents */
    set?: Maybe<Array<RowProductUpsellsWhereUniqueInput>>;
    /** Update multiple RowProductUpsells documents */
    update?: Maybe<Array<RowProductUpsellsUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowProductUpsells documents */
    upsert?: Maybe<Array<RowProductUpsellsUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowProductUpsells documents */
    disconnect?: Maybe<Array<RowProductUpsellsWhereUniqueInput>>;
    /** Delete multiple RowProductUpsells documents */
    delete?: Maybe<Array<RowProductUpsellsWhereUniqueInput>>;
};
export declare type RowProductUpsellsUpdateManyInput = {
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowProductUpsellsUpdateManyLocalizationsInput>;
};
export declare type RowProductUpsellsUpdateManyLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowProductUpsellsUpdateManyLocalizationInput = {
    data: RowProductUpsellsUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductUpsellsUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowProductUpsellsUpdateManyLocalizationInput>>;
};
export declare type RowProductUpsellsUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowProductUpsellsWhereInput;
    /** Update many input */
    data: RowProductUpsellsUpdateManyInput;
};
export declare type RowProductUpsellsUpdateOneInlineInput = {
    /** Create and connect one RowProductUpsells document */
    create?: Maybe<RowProductUpsellsCreateInput>;
    /** Update single RowProductUpsells document */
    update?: Maybe<RowProductUpsellsUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowProductUpsells document */
    upsert?: Maybe<RowProductUpsellsUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowProductUpsells document */
    connect?: Maybe<RowProductUpsellsWhereUniqueInput>;
    /** Disconnect currently connected RowProductUpsells document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowProductUpsells document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowProductUpsellsUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductUpsellsWhereUniqueInput;
    /** Document to update */
    data: RowProductUpsellsUpdateInput;
};
export declare type RowProductUpsellsUpsertInput = {
    /** Create document if it didn't exist */
    create: RowProductUpsellsCreateInput;
    /** Update document if it exists */
    update: RowProductUpsellsUpdateInput;
};
export declare type RowProductUpsellsUpsertLocalizationInput = {
    update: RowProductUpsellsUpdateLocalizationDataInput;
    create: RowProductUpsellsCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowProductUpsellsUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowProductUpsellsWhereUniqueInput;
    /** Upsert data */
    data: RowProductUpsellsUpsertInput;
};
/** Identifies documents */
export declare type RowProductUpsellsWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowProductUpsellsWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowProductUpsellsWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowProductUpsellsWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    title_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    title_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    title_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    title_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    title_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    title_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    title_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    title_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    title_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
/** References RowProductUpsells record uniquely */
export declare type RowProductUpsellsWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowQuote = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowQuote>;
    /** Get the document in other stages */
    documentInStages: Array<RowQuote>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    quote: RichText;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    pages: Array<Page>;
    productpages: Array<Product>;
    /** List of RowQuote versions */
    history: Array<Version>;
};
export declare type RowQuotelocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowQuotedocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowQuotecreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowQuoteupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowQuotepublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowQuotecreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowQuoteupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowQuotepublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowQuotepagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowQuoteproductpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowQuotehistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowQuoteConnectInput = {
    /** Document to connect */
    where: RowQuoteWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowQuoteConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowQuoteEdge>;
    aggregate: Aggregate;
};
export declare type RowQuoteCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** quote input for default locale (en) */
    quote: Scalars['RichTextAST'];
    pages?: Maybe<PageCreateManyInlineInput>;
    productpages?: Maybe<ProductCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowQuoteCreateLocalizationsInput>;
};
export declare type RowQuoteCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    quote: Scalars['RichTextAST'];
};
export declare type RowQuoteCreateLocalizationInput = {
    /** Localization input */
    data: RowQuoteCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowQuoteCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowQuoteCreateLocalizationInput>>;
};
export declare type RowQuoteCreateManyInlineInput = {
    /** Create and connect multiple existing RowQuote documents */
    create?: Maybe<Array<RowQuoteCreateInput>>;
    /** Connect multiple existing RowQuote documents */
    connect?: Maybe<Array<RowQuoteWhereUniqueInput>>;
};
export declare type RowQuoteCreateOneInlineInput = {
    /** Create and connect one RowQuote document */
    create?: Maybe<RowQuoteCreateInput>;
    /** Connect one existing RowQuote document */
    connect?: Maybe<RowQuoteWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowQuoteEdge = {
    /** The item at the end of the edge. */
    node: RowQuote;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowQuoteManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowQuoteWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowQuoteWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowQuoteWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
export declare enum RowQuoteOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC"
}
export declare type RowQuoteUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** quote input for default locale (en) */
    quote?: Maybe<Scalars['RichTextAST']>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    productpages?: Maybe<ProductUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowQuoteUpdateLocalizationsInput>;
};
export declare type RowQuoteUpdateLocalizationDataInput = {
    quote?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowQuoteUpdateLocalizationInput = {
    data: RowQuoteUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowQuoteUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowQuoteCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowQuoteUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowQuoteUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowQuoteUpdateManyInlineInput = {
    /** Create and connect multiple RowQuote documents */
    create?: Maybe<Array<RowQuoteCreateInput>>;
    /** Connect multiple existing RowQuote documents */
    connect?: Maybe<Array<RowQuoteConnectInput>>;
    /** Override currently-connected documents with multiple existing RowQuote documents */
    set?: Maybe<Array<RowQuoteWhereUniqueInput>>;
    /** Update multiple RowQuote documents */
    update?: Maybe<Array<RowQuoteUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowQuote documents */
    upsert?: Maybe<Array<RowQuoteUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowQuote documents */
    disconnect?: Maybe<Array<RowQuoteWhereUniqueInput>>;
    /** Delete multiple RowQuote documents */
    delete?: Maybe<Array<RowQuoteWhereUniqueInput>>;
};
export declare type RowQuoteUpdateManyInput = {
    /** quote input for default locale (en) */
    quote?: Maybe<Scalars['RichTextAST']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowQuoteUpdateManyLocalizationsInput>;
};
export declare type RowQuoteUpdateManyLocalizationDataInput = {
    quote?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowQuoteUpdateManyLocalizationInput = {
    data: RowQuoteUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowQuoteUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowQuoteUpdateManyLocalizationInput>>;
};
export declare type RowQuoteUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowQuoteWhereInput;
    /** Update many input */
    data: RowQuoteUpdateManyInput;
};
export declare type RowQuoteUpdateOneInlineInput = {
    /** Create and connect one RowQuote document */
    create?: Maybe<RowQuoteCreateInput>;
    /** Update single RowQuote document */
    update?: Maybe<RowQuoteUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowQuote document */
    upsert?: Maybe<RowQuoteUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowQuote document */
    connect?: Maybe<RowQuoteWhereUniqueInput>;
    /** Disconnect currently connected RowQuote document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowQuote document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowQuoteUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowQuoteWhereUniqueInput;
    /** Document to update */
    data: RowQuoteUpdateInput;
};
export declare type RowQuoteUpsertInput = {
    /** Create document if it didn't exist */
    create: RowQuoteCreateInput;
    /** Update document if it exists */
    update: RowQuoteUpdateInput;
};
export declare type RowQuoteUpsertLocalizationInput = {
    update: RowQuoteUpdateLocalizationDataInput;
    create: RowQuoteCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowQuoteUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowQuoteWhereUniqueInput;
    /** Upsert data */
    data: RowQuoteUpsertInput;
};
/** Identifies documents */
export declare type RowQuoteWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowQuoteWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowQuoteWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowQuoteWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
/** References RowQuote record uniquely */
export declare type RowQuoteWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowServiceOptions = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowServiceOptions>;
    /** Get the document in other stages */
    documentInStages: Array<RowServiceOptions>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    title: Scalars['String'];
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    serviceOptions: Array<PageLink>;
    pages: Array<Page>;
    /** List of RowServiceOptions versions */
    history: Array<Version>;
};
export declare type RowServiceOptionslocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowServiceOptionsdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowServiceOptionscreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowServiceOptionsupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowServiceOptionspublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowServiceOptionscreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowServiceOptionsupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowServiceOptionspublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowServiceOptionsserviceOptionsArgs = {
    where?: Maybe<PageLinkWhereInput>;
    orderBy?: Maybe<PageLinkOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowServiceOptionspagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowServiceOptionshistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowServiceOptionsConnectInput = {
    /** Document to connect */
    where: RowServiceOptionsWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowServiceOptionsConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowServiceOptionsEdge>;
    aggregate: Aggregate;
};
export declare type RowServiceOptionsCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** title input for default locale (en) */
    title: Scalars['String'];
    serviceOptions?: Maybe<PageLinkCreateManyInlineInput>;
    pages?: Maybe<PageCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowServiceOptionsCreateLocalizationsInput>;
};
export declare type RowServiceOptionsCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    title: Scalars['String'];
};
export declare type RowServiceOptionsCreateLocalizationInput = {
    /** Localization input */
    data: RowServiceOptionsCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowServiceOptionsCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowServiceOptionsCreateLocalizationInput>>;
};
export declare type RowServiceOptionsCreateManyInlineInput = {
    /** Create and connect multiple existing RowServiceOptions documents */
    create?: Maybe<Array<RowServiceOptionsCreateInput>>;
    /** Connect multiple existing RowServiceOptions documents */
    connect?: Maybe<Array<RowServiceOptionsWhereUniqueInput>>;
};
export declare type RowServiceOptionsCreateOneInlineInput = {
    /** Create and connect one RowServiceOptions document */
    create?: Maybe<RowServiceOptionsCreateInput>;
    /** Connect one existing RowServiceOptions document */
    connect?: Maybe<RowServiceOptionsWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowServiceOptionsEdge = {
    /** The item at the end of the edge. */
    node: RowServiceOptions;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowServiceOptionsManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowServiceOptionsWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowServiceOptionsWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowServiceOptionsWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    serviceOptions_every?: Maybe<PageLinkWhereInput>;
    serviceOptions_some?: Maybe<PageLinkWhereInput>;
    serviceOptions_none?: Maybe<PageLinkWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
export declare enum RowServiceOptionsOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC",
    title_ASC = "title_ASC",
    title_DESC = "title_DESC"
}
export declare type RowServiceOptionsUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    serviceOptions?: Maybe<PageLinkUpdateManyInlineInput>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowServiceOptionsUpdateLocalizationsInput>;
};
export declare type RowServiceOptionsUpdateLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowServiceOptionsUpdateLocalizationInput = {
    data: RowServiceOptionsUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowServiceOptionsUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowServiceOptionsCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowServiceOptionsUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowServiceOptionsUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowServiceOptionsUpdateManyInlineInput = {
    /** Create and connect multiple RowServiceOptions documents */
    create?: Maybe<Array<RowServiceOptionsCreateInput>>;
    /** Connect multiple existing RowServiceOptions documents */
    connect?: Maybe<Array<RowServiceOptionsConnectInput>>;
    /** Override currently-connected documents with multiple existing RowServiceOptions documents */
    set?: Maybe<Array<RowServiceOptionsWhereUniqueInput>>;
    /** Update multiple RowServiceOptions documents */
    update?: Maybe<Array<RowServiceOptionsUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowServiceOptions documents */
    upsert?: Maybe<Array<RowServiceOptionsUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowServiceOptions documents */
    disconnect?: Maybe<Array<RowServiceOptionsWhereUniqueInput>>;
    /** Delete multiple RowServiceOptions documents */
    delete?: Maybe<Array<RowServiceOptionsWhereUniqueInput>>;
};
export declare type RowServiceOptionsUpdateManyInput = {
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowServiceOptionsUpdateManyLocalizationsInput>;
};
export declare type RowServiceOptionsUpdateManyLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowServiceOptionsUpdateManyLocalizationInput = {
    data: RowServiceOptionsUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowServiceOptionsUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowServiceOptionsUpdateManyLocalizationInput>>;
};
export declare type RowServiceOptionsUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowServiceOptionsWhereInput;
    /** Update many input */
    data: RowServiceOptionsUpdateManyInput;
};
export declare type RowServiceOptionsUpdateOneInlineInput = {
    /** Create and connect one RowServiceOptions document */
    create?: Maybe<RowServiceOptionsCreateInput>;
    /** Update single RowServiceOptions document */
    update?: Maybe<RowServiceOptionsUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowServiceOptions document */
    upsert?: Maybe<RowServiceOptionsUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowServiceOptions document */
    connect?: Maybe<RowServiceOptionsWhereUniqueInput>;
    /** Disconnect currently connected RowServiceOptions document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowServiceOptions document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowServiceOptionsUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowServiceOptionsWhereUniqueInput;
    /** Document to update */
    data: RowServiceOptionsUpdateInput;
};
export declare type RowServiceOptionsUpsertInput = {
    /** Create document if it didn't exist */
    create: RowServiceOptionsCreateInput;
    /** Update document if it exists */
    update: RowServiceOptionsUpdateInput;
};
export declare type RowServiceOptionsUpsertLocalizationInput = {
    update: RowServiceOptionsUpdateLocalizationDataInput;
    create: RowServiceOptionsCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowServiceOptionsUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowServiceOptionsWhereUniqueInput;
    /** Upsert data */
    data: RowServiceOptionsUpsertInput;
};
/** Identifies documents */
export declare type RowServiceOptionsWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowServiceOptionsWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowServiceOptionsWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowServiceOptionsWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    title_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    title_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    title_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    title_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    title_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    title_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    title_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    title_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    title_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    serviceOptions_every?: Maybe<PageLinkWhereInput>;
    serviceOptions_some?: Maybe<PageLinkWhereInput>;
    serviceOptions_none?: Maybe<PageLinkWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
/** References RowServiceOptions record uniquely */
export declare type RowServiceOptionsWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowSpecialBanner = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowSpecialBanner>;
    /** Get the document in other stages */
    documentInStages: Array<RowSpecialBanner>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    topic?: Maybe<Scalars['String']>;
    copy: RichText;
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    asset: Asset;
    pageLinks: Array<PageLink>;
    pages: Array<Page>;
    productpages: Array<Product>;
    /** List of RowSpecialBanner versions */
    history: Array<Version>;
};
export declare type RowSpecialBannerlocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowSpecialBannerdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowSpecialBannercreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowSpecialBannerupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowSpecialBannerpublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowSpecialBannercreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowSpecialBannerupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowSpecialBannerpublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowSpecialBannerassetArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowSpecialBannerpageLinksArgs = {
    where?: Maybe<PageLinkWhereInput>;
    orderBy?: Maybe<PageLinkOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowSpecialBannerpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowSpecialBannerproductpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowSpecialBannerhistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowSpecialBannerConnectInput = {
    /** Document to connect */
    where: RowSpecialBannerWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowSpecialBannerConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowSpecialBannerEdge>;
    aggregate: Aggregate;
};
export declare type RowSpecialBannerCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** topic input for default locale (en) */
    topic?: Maybe<Scalars['String']>;
    /** copy input for default locale (en) */
    copy: Scalars['RichTextAST'];
    asset: AssetCreateOneInlineInput;
    pageLinks?: Maybe<PageLinkCreateManyInlineInput>;
    pages?: Maybe<PageCreateManyInlineInput>;
    productpages?: Maybe<ProductCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowSpecialBannerCreateLocalizationsInput>;
};
export declare type RowSpecialBannerCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    topic?: Maybe<Scalars['String']>;
    copy: Scalars['RichTextAST'];
};
export declare type RowSpecialBannerCreateLocalizationInput = {
    /** Localization input */
    data: RowSpecialBannerCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowSpecialBannerCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowSpecialBannerCreateLocalizationInput>>;
};
export declare type RowSpecialBannerCreateManyInlineInput = {
    /** Create and connect multiple existing RowSpecialBanner documents */
    create?: Maybe<Array<RowSpecialBannerCreateInput>>;
    /** Connect multiple existing RowSpecialBanner documents */
    connect?: Maybe<Array<RowSpecialBannerWhereUniqueInput>>;
};
export declare type RowSpecialBannerCreateOneInlineInput = {
    /** Create and connect one RowSpecialBanner document */
    create?: Maybe<RowSpecialBannerCreateInput>;
    /** Connect one existing RowSpecialBanner document */
    connect?: Maybe<RowSpecialBannerWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowSpecialBannerEdge = {
    /** The item at the end of the edge. */
    node: RowSpecialBanner;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowSpecialBannerManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowSpecialBannerWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowSpecialBannerWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowSpecialBannerWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    asset?: Maybe<AssetWhereInput>;
    pageLinks_every?: Maybe<PageLinkWhereInput>;
    pageLinks_some?: Maybe<PageLinkWhereInput>;
    pageLinks_none?: Maybe<PageLinkWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
export declare enum RowSpecialBannerOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC",
    topic_ASC = "topic_ASC",
    topic_DESC = "topic_DESC"
}
export declare type RowSpecialBannerUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** topic input for default locale (en) */
    topic?: Maybe<Scalars['String']>;
    /** copy input for default locale (en) */
    copy?: Maybe<Scalars['RichTextAST']>;
    asset?: Maybe<AssetUpdateOneInlineInput>;
    pageLinks?: Maybe<PageLinkUpdateManyInlineInput>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    productpages?: Maybe<ProductUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowSpecialBannerUpdateLocalizationsInput>;
};
export declare type RowSpecialBannerUpdateLocalizationDataInput = {
    topic?: Maybe<Scalars['String']>;
    copy?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowSpecialBannerUpdateLocalizationInput = {
    data: RowSpecialBannerUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowSpecialBannerUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowSpecialBannerCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowSpecialBannerUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowSpecialBannerUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowSpecialBannerUpdateManyInlineInput = {
    /** Create and connect multiple RowSpecialBanner documents */
    create?: Maybe<Array<RowSpecialBannerCreateInput>>;
    /** Connect multiple existing RowSpecialBanner documents */
    connect?: Maybe<Array<RowSpecialBannerConnectInput>>;
    /** Override currently-connected documents with multiple existing RowSpecialBanner documents */
    set?: Maybe<Array<RowSpecialBannerWhereUniqueInput>>;
    /** Update multiple RowSpecialBanner documents */
    update?: Maybe<Array<RowSpecialBannerUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowSpecialBanner documents */
    upsert?: Maybe<Array<RowSpecialBannerUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowSpecialBanner documents */
    disconnect?: Maybe<Array<RowSpecialBannerWhereUniqueInput>>;
    /** Delete multiple RowSpecialBanner documents */
    delete?: Maybe<Array<RowSpecialBannerWhereUniqueInput>>;
};
export declare type RowSpecialBannerUpdateManyInput = {
    /** topic input for default locale (en) */
    topic?: Maybe<Scalars['String']>;
    /** copy input for default locale (en) */
    copy?: Maybe<Scalars['RichTextAST']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowSpecialBannerUpdateManyLocalizationsInput>;
};
export declare type RowSpecialBannerUpdateManyLocalizationDataInput = {
    topic?: Maybe<Scalars['String']>;
    copy?: Maybe<Scalars['RichTextAST']>;
};
export declare type RowSpecialBannerUpdateManyLocalizationInput = {
    data: RowSpecialBannerUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowSpecialBannerUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowSpecialBannerUpdateManyLocalizationInput>>;
};
export declare type RowSpecialBannerUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowSpecialBannerWhereInput;
    /** Update many input */
    data: RowSpecialBannerUpdateManyInput;
};
export declare type RowSpecialBannerUpdateOneInlineInput = {
    /** Create and connect one RowSpecialBanner document */
    create?: Maybe<RowSpecialBannerCreateInput>;
    /** Update single RowSpecialBanner document */
    update?: Maybe<RowSpecialBannerUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowSpecialBanner document */
    upsert?: Maybe<RowSpecialBannerUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowSpecialBanner document */
    connect?: Maybe<RowSpecialBannerWhereUniqueInput>;
    /** Disconnect currently connected RowSpecialBanner document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowSpecialBanner document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowSpecialBannerUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowSpecialBannerWhereUniqueInput;
    /** Document to update */
    data: RowSpecialBannerUpdateInput;
};
export declare type RowSpecialBannerUpsertInput = {
    /** Create document if it didn't exist */
    create: RowSpecialBannerCreateInput;
    /** Update document if it exists */
    update: RowSpecialBannerUpdateInput;
};
export declare type RowSpecialBannerUpsertLocalizationInput = {
    update: RowSpecialBannerUpdateLocalizationDataInput;
    create: RowSpecialBannerCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowSpecialBannerUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowSpecialBannerWhereUniqueInput;
    /** Upsert data */
    data: RowSpecialBannerUpsertInput;
};
/** Identifies documents */
export declare type RowSpecialBannerWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowSpecialBannerWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowSpecialBannerWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowSpecialBannerWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    topic?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    topic_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    topic_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    topic_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    topic_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    topic_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    topic_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    topic_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    topic_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    topic_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    asset?: Maybe<AssetWhereInput>;
    pageLinks_every?: Maybe<PageLinkWhereInput>;
    pageLinks_some?: Maybe<PageLinkWhereInput>;
    pageLinks_none?: Maybe<PageLinkWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
    productpages_every?: Maybe<ProductWhereInput>;
    productpages_some?: Maybe<ProductWhereInput>;
    productpages_none?: Maybe<ProductWhereInput>;
};
/** References RowSpecialBanner record uniquely */
export declare type RowSpecialBannerWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type RowSwipeableGrid = Node & {
    /** System stage field */
    stage: Stage;
    /** System Locale field */
    locale: Locale;
    /** Get the other localizations for this document */
    localizations: Array<RowSwipeableGrid>;
    /** Get the document in other stages */
    documentInStages: Array<RowSwipeableGrid>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    title: Scalars['String'];
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    pages: Array<Page>;
    /** List of RowSwipeableGrid versions */
    history: Array<Version>;
};
export declare type RowSwipeableGridlocalizationsArgs = {
    locales?: Array<Locale>;
    includeCurrent?: Scalars['Boolean'];
};
export declare type RowSwipeableGriddocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type RowSwipeableGridcreatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowSwipeableGridupdatedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowSwipeableGridpublishedAtArgs = {
    variation?: SystemDateTimeFieldVariation;
};
export declare type RowSwipeableGridcreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowSwipeableGridupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowSwipeableGridpublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type RowSwipeableGridpagesArgs = {
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type RowSwipeableGridhistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type RowSwipeableGridConnectInput = {
    /** Document to connect */
    where: RowSwipeableGridWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type RowSwipeableGridConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<RowSwipeableGridEdge>;
    aggregate: Aggregate;
};
export declare type RowSwipeableGridCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** title input for default locale (en) */
    title: Scalars['String'];
    pages?: Maybe<PageCreateManyInlineInput>;
    /** Inline mutations for managing document localizations excluding the default locale */
    localizations?: Maybe<RowSwipeableGridCreateLocalizationsInput>;
};
export declare type RowSwipeableGridCreateLocalizationDataInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    title: Scalars['String'];
};
export declare type RowSwipeableGridCreateLocalizationInput = {
    /** Localization input */
    data: RowSwipeableGridCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowSwipeableGridCreateLocalizationsInput = {
    /** Create localizations for the newly-created document */
    create?: Maybe<Array<RowSwipeableGridCreateLocalizationInput>>;
};
export declare type RowSwipeableGridCreateManyInlineInput = {
    /** Create and connect multiple existing RowSwipeableGrid documents */
    create?: Maybe<Array<RowSwipeableGridCreateInput>>;
    /** Connect multiple existing RowSwipeableGrid documents */
    connect?: Maybe<Array<RowSwipeableGridWhereUniqueInput>>;
};
export declare type RowSwipeableGridCreateOneInlineInput = {
    /** Create and connect one RowSwipeableGrid document */
    create?: Maybe<RowSwipeableGridCreateInput>;
    /** Connect one existing RowSwipeableGrid document */
    connect?: Maybe<RowSwipeableGridWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type RowSwipeableGridEdge = {
    /** The item at the end of the edge. */
    node: RowSwipeableGrid;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type RowSwipeableGridManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowSwipeableGridWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowSwipeableGridWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowSwipeableGridWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
export declare enum RowSwipeableGridOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC",
    title_ASC = "title_ASC",
    title_DESC = "title_DESC"
}
export declare type RowSwipeableGridUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    pages?: Maybe<PageUpdateManyInlineInput>;
    /** Manage document localizations */
    localizations?: Maybe<RowSwipeableGridUpdateLocalizationsInput>;
};
export declare type RowSwipeableGridUpdateLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowSwipeableGridUpdateLocalizationInput = {
    data: RowSwipeableGridUpdateLocalizationDataInput;
    locale: Locale;
};
export declare type RowSwipeableGridUpdateLocalizationsInput = {
    /** Localizations to create */
    create?: Maybe<Array<RowSwipeableGridCreateLocalizationInput>>;
    /** Localizations to update */
    update?: Maybe<Array<RowSwipeableGridUpdateLocalizationInput>>;
    upsert?: Maybe<Array<RowSwipeableGridUpsertLocalizationInput>>;
    /** Localizations to delete */
    delete?: Maybe<Array<Locale>>;
};
export declare type RowSwipeableGridUpdateManyInlineInput = {
    /** Create and connect multiple RowSwipeableGrid documents */
    create?: Maybe<Array<RowSwipeableGridCreateInput>>;
    /** Connect multiple existing RowSwipeableGrid documents */
    connect?: Maybe<Array<RowSwipeableGridConnectInput>>;
    /** Override currently-connected documents with multiple existing RowSwipeableGrid documents */
    set?: Maybe<Array<RowSwipeableGridWhereUniqueInput>>;
    /** Update multiple RowSwipeableGrid documents */
    update?: Maybe<Array<RowSwipeableGridUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple RowSwipeableGrid documents */
    upsert?: Maybe<Array<RowSwipeableGridUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple RowSwipeableGrid documents */
    disconnect?: Maybe<Array<RowSwipeableGridWhereUniqueInput>>;
    /** Delete multiple RowSwipeableGrid documents */
    delete?: Maybe<Array<RowSwipeableGridWhereUniqueInput>>;
};
export declare type RowSwipeableGridUpdateManyInput = {
    /** title input for default locale (en) */
    title?: Maybe<Scalars['String']>;
    /** Optional updates to localizations */
    localizations?: Maybe<RowSwipeableGridUpdateManyLocalizationsInput>;
};
export declare type RowSwipeableGridUpdateManyLocalizationDataInput = {
    title?: Maybe<Scalars['String']>;
};
export declare type RowSwipeableGridUpdateManyLocalizationInput = {
    data: RowSwipeableGridUpdateManyLocalizationDataInput;
    locale: Locale;
};
export declare type RowSwipeableGridUpdateManyLocalizationsInput = {
    /** Localizations to update */
    update?: Maybe<Array<RowSwipeableGridUpdateManyLocalizationInput>>;
};
export declare type RowSwipeableGridUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: RowSwipeableGridWhereInput;
    /** Update many input */
    data: RowSwipeableGridUpdateManyInput;
};
export declare type RowSwipeableGridUpdateOneInlineInput = {
    /** Create and connect one RowSwipeableGrid document */
    create?: Maybe<RowSwipeableGridCreateInput>;
    /** Update single RowSwipeableGrid document */
    update?: Maybe<RowSwipeableGridUpdateWithNestedWhereUniqueInput>;
    /** Upsert single RowSwipeableGrid document */
    upsert?: Maybe<RowSwipeableGridUpsertWithNestedWhereUniqueInput>;
    /** Connect existing RowSwipeableGrid document */
    connect?: Maybe<RowSwipeableGridWhereUniqueInput>;
    /** Disconnect currently connected RowSwipeableGrid document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected RowSwipeableGrid document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type RowSwipeableGridUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowSwipeableGridWhereUniqueInput;
    /** Document to update */
    data: RowSwipeableGridUpdateInput;
};
export declare type RowSwipeableGridUpsertInput = {
    /** Create document if it didn't exist */
    create: RowSwipeableGridCreateInput;
    /** Update document if it exists */
    update: RowSwipeableGridUpdateInput;
};
export declare type RowSwipeableGridUpsertLocalizationInput = {
    update: RowSwipeableGridUpdateLocalizationDataInput;
    create: RowSwipeableGridCreateLocalizationDataInput;
    locale: Locale;
};
export declare type RowSwipeableGridUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: RowSwipeableGridWhereUniqueInput;
    /** Upsert data */
    data: RowSwipeableGridUpsertInput;
};
/** Identifies documents */
export declare type RowSwipeableGridWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<RowSwipeableGridWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<RowSwipeableGridWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<RowSwipeableGridWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    title?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    title_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    title_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    title_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    title_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    title_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    title_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    title_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    title_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    title_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    pages_every?: Maybe<PageWhereInput>;
    pages_some?: Maybe<PageWhereInput>;
    pages_none?: Maybe<PageWhereInput>;
};
/** References RowSwipeableGrid record uniquely */
export declare type RowSwipeableGridWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
/** Stage system enumeration */
export declare enum Stage {
    /** The Draft is the default stage for all your content. */
    DRAFT = "DRAFT",
    /** The Published stage is where you can publish your content to. */
    PUBLISHED = "PUBLISHED"
}
export declare enum SystemDateTimeFieldVariation {
    BASE = "BASE",
    LOCALIZATION = "LOCALIZATION",
    COMBINED = "COMBINED"
}
export declare type UnpublishLocaleInput = {
    /** Locales to unpublish */
    locale: Locale;
    /** Stages to unpublish selected locales from */
    stages: Array<Stage>;
};
/** User system model */
export declare type User = Node & {
    /** System stage field */
    stage: Stage;
    /** Get the document in other stages */
    documentInStages: Array<User>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** The username */
    name: Scalars['String'];
    /** Profile Picture url */
    picture?: Maybe<Scalars['String']>;
    /** Flag to determine if user is active or not */
    isActive: Scalars['Boolean'];
    /** User Kind. Can be either MEMBER, PAT or PUBLIC */
    kind: UserKind;
};
/** User system model */
export declare type UserdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type UserConnectInput = {
    /** Document to connect */
    where: UserWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type UserConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<UserEdge>;
    aggregate: Aggregate;
};
export declare type UserCreateManyInlineInput = {
    /** Connect multiple existing User documents */
    connect?: Maybe<Array<UserWhereUniqueInput>>;
};
export declare type UserCreateOneInlineInput = {
    /** Connect one existing User document */
    connect?: Maybe<UserWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type UserEdge = {
    /** The item at the end of the edge. */
    node: User;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** System User Kind */
export declare enum UserKind {
    MEMBER = "MEMBER",
    PAT = "PAT",
    PUBLIC = "PUBLIC",
    WEBHOOK = "WEBHOOK"
}
/** Identifies documents */
export declare type UserManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<UserWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<UserWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<UserWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    name?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    name_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    name_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    name_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    name_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    name_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    name_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    name_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    name_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    name_not_ends_with?: Maybe<Scalars['String']>;
    picture?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    picture_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    picture_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    picture_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    picture_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    picture_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    picture_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    picture_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    picture_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    picture_not_ends_with?: Maybe<Scalars['String']>;
    isActive?: Maybe<Scalars['Boolean']>;
    /** All values that are not equal to given value. */
    isActive_not?: Maybe<Scalars['Boolean']>;
    kind?: Maybe<UserKind>;
    /** All values that are not equal to given value. */
    kind_not?: Maybe<UserKind>;
    /** All values that are contained in given list. */
    kind_in?: Maybe<Array<UserKind>>;
    /** All values that are not contained in given list. */
    kind_not_in?: Maybe<Array<UserKind>>;
};
export declare enum UserOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    name_ASC = "name_ASC",
    name_DESC = "name_DESC",
    picture_ASC = "picture_ASC",
    picture_DESC = "picture_DESC",
    isActive_ASC = "isActive_ASC",
    isActive_DESC = "isActive_DESC",
    kind_ASC = "kind_ASC",
    kind_DESC = "kind_DESC"
}
export declare type UserUpdateManyInlineInput = {
    /** Connect multiple existing User documents */
    connect?: Maybe<Array<UserConnectInput>>;
    /** Override currently-connected documents with multiple existing User documents */
    set?: Maybe<Array<UserWhereUniqueInput>>;
    /** Disconnect multiple User documents */
    disconnect?: Maybe<Array<UserWhereUniqueInput>>;
};
export declare type UserUpdateOneInlineInput = {
    /** Connect existing User document */
    connect?: Maybe<UserWhereUniqueInput>;
    /** Disconnect currently connected User document */
    disconnect?: Maybe<Scalars['Boolean']>;
};
/** Identifies documents */
export declare type UserWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<UserWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<UserWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<UserWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    name?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    name_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    name_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    name_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    name_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    name_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    name_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    name_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    name_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    name_not_ends_with?: Maybe<Scalars['String']>;
    picture?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    picture_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    picture_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    picture_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    picture_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    picture_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    picture_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    picture_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    picture_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    picture_not_ends_with?: Maybe<Scalars['String']>;
    isActive?: Maybe<Scalars['Boolean']>;
    /** All values that are not equal to given value. */
    isActive_not?: Maybe<Scalars['Boolean']>;
    kind?: Maybe<UserKind>;
    /** All values that are not equal to given value. */
    kind_not?: Maybe<UserKind>;
    /** All values that are contained in given list. */
    kind_in?: Maybe<Array<UserKind>>;
    /** All values that are not contained in given list. */
    kind_not_in?: Maybe<Array<UserKind>>;
};
/** References User record uniquely */
export declare type UserWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
};
export declare type Usps = Node & {
    /** System stage field */
    stage: Stage;
    /** Get the document in other stages */
    documentInStages: Array<Usps>;
    /** The unique identifier */
    id: Scalars['ID'];
    /** The time the document was created */
    createdAt: Scalars['DateTime'];
    /** The time the document was updated */
    updatedAt: Scalars['DateTime'];
    /** The time the document was published. Null on documents in draft stage. */
    publishedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    /** User that created this document */
    createdBy?: Maybe<User>;
    /** User that last updated this document */
    updatedBy?: Maybe<User>;
    /** User that last published this document */
    publishedBy?: Maybe<User>;
    uspsMultiple: Array<PageLink>;
    /** List of Usps versions */
    history: Array<Version>;
};
export declare type UspsdocumentInStagesArgs = {
    stages?: Array<Stage>;
    includeCurrent?: Scalars['Boolean'];
    inheritLocale?: Scalars['Boolean'];
};
export declare type UspscreatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type UspsupdatedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type UspspublishedByArgs = {
    locales?: Maybe<Array<Locale>>;
};
export declare type UspsuspsMultipleArgs = {
    where?: Maybe<PageLinkWhereInput>;
    orderBy?: Maybe<PageLinkOrderByInput>;
    skip?: Maybe<Scalars['Int']>;
    after?: Maybe<Scalars['String']>;
    before?: Maybe<Scalars['String']>;
    first?: Maybe<Scalars['Int']>;
    last?: Maybe<Scalars['Int']>;
    locales?: Maybe<Array<Locale>>;
};
export declare type UspshistoryArgs = {
    limit?: Scalars['Int'];
    skip?: Scalars['Int'];
    stageOverride?: Maybe<Stage>;
};
export declare type UspsConnectInput = {
    /** Document to connect */
    where: UspsWhereUniqueInput;
    /** Allow to specify document position in list of connected documents, will default to appending at end of list */
    position?: Maybe<ConnectPositionInput>;
};
/** A connection to a list of items. */
export declare type UspsConnection = {
    /** Information to aid in pagination. */
    pageInfo: PageInfo;
    /** A list of edges. */
    edges: Array<UspsEdge>;
    aggregate: Aggregate;
};
export declare type UspsCreateInput = {
    createdAt?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    identity: Scalars['String'];
    uspsMultiple?: Maybe<PageLinkCreateManyInlineInput>;
};
export declare type UspsCreateManyInlineInput = {
    /** Create and connect multiple existing Usps documents */
    create?: Maybe<Array<UspsCreateInput>>;
    /** Connect multiple existing Usps documents */
    connect?: Maybe<Array<UspsWhereUniqueInput>>;
};
export declare type UspsCreateOneInlineInput = {
    /** Create and connect one Usps document */
    create?: Maybe<UspsCreateInput>;
    /** Connect one existing Usps document */
    connect?: Maybe<UspsWhereUniqueInput>;
};
/** An edge in a connection. */
export declare type UspsEdge = {
    /** The item at the end of the edge. */
    node: Usps;
    /** A cursor for use in pagination. */
    cursor: Scalars['String'];
};
/** Identifies documents */
export declare type UspsManyWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<UspsWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<UspsWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<UspsWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    uspsMultiple_every?: Maybe<PageLinkWhereInput>;
    uspsMultiple_some?: Maybe<PageLinkWhereInput>;
    uspsMultiple_none?: Maybe<PageLinkWhereInput>;
};
export declare enum UspsOrderByInput {
    id_ASC = "id_ASC",
    id_DESC = "id_DESC",
    createdAt_ASC = "createdAt_ASC",
    createdAt_DESC = "createdAt_DESC",
    updatedAt_ASC = "updatedAt_ASC",
    updatedAt_DESC = "updatedAt_DESC",
    publishedAt_ASC = "publishedAt_ASC",
    publishedAt_DESC = "publishedAt_DESC",
    identity_ASC = "identity_ASC",
    identity_DESC = "identity_DESC"
}
export declare type UspsUpdateInput = {
    identity?: Maybe<Scalars['String']>;
    uspsMultiple?: Maybe<PageLinkUpdateManyInlineInput>;
};
export declare type UspsUpdateManyInlineInput = {
    /** Create and connect multiple Usps documents */
    create?: Maybe<Array<UspsCreateInput>>;
    /** Connect multiple existing Usps documents */
    connect?: Maybe<Array<UspsConnectInput>>;
    /** Override currently-connected documents with multiple existing Usps documents */
    set?: Maybe<Array<UspsWhereUniqueInput>>;
    /** Update multiple Usps documents */
    update?: Maybe<Array<UspsUpdateWithNestedWhereUniqueInput>>;
    /** Upsert multiple Usps documents */
    upsert?: Maybe<Array<UspsUpsertWithNestedWhereUniqueInput>>;
    /** Disconnect multiple Usps documents */
    disconnect?: Maybe<Array<UspsWhereUniqueInput>>;
    /** Delete multiple Usps documents */
    delete?: Maybe<Array<UspsWhereUniqueInput>>;
};
export declare type UspsUpdateManyInput = {
    /** No fields in updateMany data input */
    _?: Maybe<Scalars['String']>;
};
export declare type UspsUpdateManyWithNestedWhereInput = {
    /** Document search */
    where: UspsWhereInput;
    /** Update many input */
    data: UspsUpdateManyInput;
};
export declare type UspsUpdateOneInlineInput = {
    /** Create and connect one Usps document */
    create?: Maybe<UspsCreateInput>;
    /** Update single Usps document */
    update?: Maybe<UspsUpdateWithNestedWhereUniqueInput>;
    /** Upsert single Usps document */
    upsert?: Maybe<UspsUpsertWithNestedWhereUniqueInput>;
    /** Connect existing Usps document */
    connect?: Maybe<UspsWhereUniqueInput>;
    /** Disconnect currently connected Usps document */
    disconnect?: Maybe<Scalars['Boolean']>;
    /** Delete currently connected Usps document */
    delete?: Maybe<Scalars['Boolean']>;
};
export declare type UspsUpdateWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: UspsWhereUniqueInput;
    /** Document to update */
    data: UspsUpdateInput;
};
export declare type UspsUpsertInput = {
    /** Create document if it didn't exist */
    create: UspsCreateInput;
    /** Update document if it exists */
    update: UspsUpdateInput;
};
export declare type UspsUpsertWithNestedWhereUniqueInput = {
    /** Unique document search */
    where: UspsWhereUniqueInput;
    /** Upsert data */
    data: UspsUpsertInput;
};
/** Identifies documents */
export declare type UspsWhereInput = {
    /** Contains search across all appropriate fields. */
    _search?: Maybe<Scalars['String']>;
    /** Logical AND on all given filters. */
    AND?: Maybe<Array<UspsWhereInput>>;
    /** Logical OR on all given filters. */
    OR?: Maybe<Array<UspsWhereInput>>;
    /** Logical NOT on all given filters combined by AND. */
    NOT?: Maybe<Array<UspsWhereInput>>;
    id?: Maybe<Scalars['ID']>;
    /** All values that are not equal to given value. */
    id_not?: Maybe<Scalars['ID']>;
    /** All values that are contained in given list. */
    id_in?: Maybe<Array<Scalars['ID']>>;
    /** All values that are not contained in given list. */
    id_not_in?: Maybe<Array<Scalars['ID']>>;
    /** All values containing the given string. */
    id_contains?: Maybe<Scalars['ID']>;
    /** All values not containing the given string. */
    id_not_contains?: Maybe<Scalars['ID']>;
    /** All values starting with the given string. */
    id_starts_with?: Maybe<Scalars['ID']>;
    /** All values not starting with the given string. */
    id_not_starts_with?: Maybe<Scalars['ID']>;
    /** All values ending with the given string. */
    id_ends_with?: Maybe<Scalars['ID']>;
    /** All values not ending with the given string */
    id_not_ends_with?: Maybe<Scalars['ID']>;
    createdAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    createdAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    createdAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    createdAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    createdAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    createdAt_gte?: Maybe<Scalars['DateTime']>;
    updatedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    updatedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    updatedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    updatedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    updatedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    updatedAt_gte?: Maybe<Scalars['DateTime']>;
    publishedAt?: Maybe<Scalars['DateTime']>;
    /** All values that are not equal to given value. */
    publishedAt_not?: Maybe<Scalars['DateTime']>;
    /** All values that are contained in given list. */
    publishedAt_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values that are not contained in given list. */
    publishedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
    /** All values less than the given value. */
    publishedAt_lt?: Maybe<Scalars['DateTime']>;
    /** All values less than or equal the given value. */
    publishedAt_lte?: Maybe<Scalars['DateTime']>;
    /** All values greater than the given value. */
    publishedAt_gt?: Maybe<Scalars['DateTime']>;
    /** All values greater than or equal the given value. */
    publishedAt_gte?: Maybe<Scalars['DateTime']>;
    identity?: Maybe<Scalars['String']>;
    /** All values that are not equal to given value. */
    identity_not?: Maybe<Scalars['String']>;
    /** All values that are contained in given list. */
    identity_in?: Maybe<Array<Scalars['String']>>;
    /** All values that are not contained in given list. */
    identity_not_in?: Maybe<Array<Scalars['String']>>;
    /** All values containing the given string. */
    identity_contains?: Maybe<Scalars['String']>;
    /** All values not containing the given string. */
    identity_not_contains?: Maybe<Scalars['String']>;
    /** All values starting with the given string. */
    identity_starts_with?: Maybe<Scalars['String']>;
    /** All values not starting with the given string. */
    identity_not_starts_with?: Maybe<Scalars['String']>;
    /** All values ending with the given string. */
    identity_ends_with?: Maybe<Scalars['String']>;
    /** All values not ending with the given string */
    identity_not_ends_with?: Maybe<Scalars['String']>;
    createdBy?: Maybe<UserWhereInput>;
    updatedBy?: Maybe<UserWhereInput>;
    publishedBy?: Maybe<UserWhereInput>;
    uspsMultiple_every?: Maybe<PageLinkWhereInput>;
    uspsMultiple_some?: Maybe<PageLinkWhereInput>;
    uspsMultiple_none?: Maybe<PageLinkWhereInput>;
};
/** References Usps record uniquely */
export declare type UspsWhereUniqueInput = {
    id?: Maybe<Scalars['ID']>;
    identity?: Maybe<Scalars['String']>;
};
export declare type Version = {
    id: Scalars['ID'];
    stage: Stage;
    revision: Scalars['Int'];
    createdAt: Scalars['DateTime'];
};
export declare type VersionWhereInput = {
    id: Scalars['ID'];
    stage: Stage;
    revision: Scalars['Int'];
};
export declare enum _FilterKind {
    search = "search",
    AND = "AND",
    OR = "OR",
    NOT = "NOT",
    eq = "eq",
    eq_not = "eq_not",
    in = "in",
    not_in = "not_in",
    lt = "lt",
    lte = "lte",
    gt = "gt",
    gte = "gte",
    contains = "contains",
    not_contains = "not_contains",
    starts_with = "starts_with",
    not_starts_with = "not_starts_with",
    ends_with = "ends_with",
    not_ends_with = "not_ends_with",
    contains_all = "contains_all",
    contains_some = "contains_some",
    contains_none = "contains_none",
    relational_single = "relational_single",
    relational_every = "relational_every",
    relational_some = "relational_some",
    relational_none = "relational_none"
}
export declare enum _MutationInputFieldKind {
    scalar = "scalar",
    richText = "richText",
    richTextWithEmbeds = "richTextWithEmbeds",
    enum = "enum",
    relation = "relation",
    union = "union",
    virtual = "virtual"
}
export declare enum _MutationKind {
    create = "create",
    publish = "publish",
    unpublish = "unpublish",
    update = "update",
    upsert = "upsert",
    delete = "delete",
    updateMany = "updateMany",
    publishMany = "publishMany",
    unpublishMany = "unpublishMany",
    deleteMany = "deleteMany"
}
export declare enum _OrderDirection {
    asc = "asc",
    desc = "desc"
}
export declare enum _RelationInputCardinality {
    one = "one",
    many = "many"
}
export declare enum _RelationInputKind {
    create = "create",
    update = "update"
}
export declare enum _RelationKind {
    regular = "regular",
    union = "union"
}
export declare enum _SystemDateTimeFieldVariation {
    base = "base",
    localization = "localization",
    combined = "combined"
}
export declare type Mutation = {
    addBundleProductsToCart?: Maybe<AddBundleProductsToCartOutput>;
    addConfigurableProductsToCart?: Maybe<AddConfigurableProductsToCartOutput>;
    addDownloadableProductsToCart?: Maybe<AddDownloadableProductsToCartOutput>;
    /** Add any type of product to the cart */
    addProductsToCart?: Maybe<AddProductsToCartOutput>;
    /** Add products to the specified compare list */
    addProductsToCompareList?: Maybe<CompareList>;
    /** Adds one or more products to the specified wish list. This mutation supports all product types */
    addProductsToWishlist?: Maybe<AddProductsToWishlistOutput>;
    addSimpleProductsToCart?: Maybe<AddSimpleProductsToCartOutput>;
    addVirtualProductsToCart?: Maybe<AddVirtualProductsToCartOutput>;
    applyCouponToCart?: Maybe<ApplyCouponToCartOutput>;
    /** Assign the specified compare list to the logged in customer */
    assignCompareListToCustomer?: Maybe<AssignCompareListToCustomerOutput>;
    /** Changes the password for the logged-in customer */
    changeCustomerPassword?: Maybe<Customer>;
    /** Creates Client Token for Braintree Javascript SDK initialization. */
    createBraintreeClientToken: Scalars['String'];
    /** Creates a new compare list. The compare list is saved for logged in customers */
    createCompareList?: Maybe<CompareList>;
    /** Create customer account */
    createCustomer?: Maybe<CustomerOutput>;
    /** Create customer address */
    createCustomerAddress?: Maybe<CustomerAddress>;
    /** Create customer account */
    createCustomerV2?: Maybe<CustomerOutput>;
    /** Creates an empty shopping cart for a guest or logged in user */
    createEmptyCart?: Maybe<Scalars['String']>;
    /** Creates a Klarna Payments Session. */
    createKlarnaPaymentsSession?: Maybe<createKlarnaPaymentsSessionOutput>;
    /** @deprecated Using the Order.mollie_redirect_url attribuut */
    createMollieTransaction?: Maybe<MollieTransactionOutput>;
    /** Initiates a transaction and receives a token. Use this mutation for Payflow Pro and Payments Pro payment methods */
    createPayflowProToken?: Maybe<CreatePayflowProTokenOutput>;
    /** Initiates an Express Checkout transaction and receives a token. Use this mutation for Express Checkout and Payments Standard payment methods. */
    createPaypalExpressToken?: Maybe<PaypalExpressTokenOutput>;
    /** Creates a product review for the specified SKU */
    createProductReview: CreateProductReviewOutput;
    /** Delete the specified compare list */
    deleteCompareList?: Maybe<DeleteCompareListOutput>;
    /** Delete customer address */
    deleteCustomerAddress?: Maybe<Scalars['Boolean']>;
    /** Delete a customer payment token */
    deletePaymentToken?: Maybe<DeletePaymentTokenOutput>;
    /** Retrieve the customer token */
    generateCustomerToken?: Maybe<CustomerToken>;
    /** Request a customer token so that an administrator can perform remote shopping assistance */
    generateCustomerTokenAsAdmin?: Maybe<GenerateCustomerTokenAsAdminOutput>;
    /** Handles payment response and saves payment in Quote. Use this mutations for Payflow Pro and Payments Pro payment methods. */
    handlePayflowProResponse?: Maybe<PayflowProResponseOutput>;
    /** Merges the source cart into the destination cart */
    mergeCarts: Cart;
    mollieProcessTransaction?: Maybe<MollieProcessTransactionOutput>;
    mollieRestoreCart?: Maybe<MollieResetCartOutput>;
    placeOrder?: Maybe<PlaceOrderOutput>;
    removeCouponFromCart?: Maybe<RemoveCouponFromCartOutput>;
    removeItemFromCart?: Maybe<RemoveItemFromCartOutput>;
    /** Remove products from the specified compare list */
    removeProductsFromCompareList?: Maybe<CompareList>;
    /** Removes one or more products from the specified wish list */
    removeProductsFromWishlist?: Maybe<RemoveProductsFromWishlistOutput>;
    /** Adds all products from a customer's previous order to the cart. */
    reorderItems?: Maybe<ReorderItemsOutput>;
    /** Request an email with a reset password token for the registered customer identified by the specified email. */
    requestPasswordResetEmail?: Maybe<Scalars['Boolean']>;
    /** Reset a customer's password using the reset password token that the customer received in an email after requesting it using requestPasswordResetEmail. */
    resetPassword?: Maybe<Scalars['Boolean']>;
    /** Revoke the customer token */
    revokeCustomerToken?: Maybe<RevokeCustomerTokenOutput>;
    /** Recommends Product by Sending Single/Multiple Email */
    sendEmailToFriend?: Maybe<SendEmailToFriendOutput>;
    setBillingAddressOnCart?: Maybe<SetBillingAddressOnCartOutput>;
    setGuestEmailOnCart?: Maybe<SetGuestEmailOnCartOutput>;
    /** @deprecated Should use setPaymentMethodOnCart and placeOrder mutations in single request. */
    setPaymentMethodAndPlaceOrder?: Maybe<PlaceOrderOutput>;
    setPaymentMethodOnCart?: Maybe<SetPaymentMethodOnCartOutput>;
    setShippingAddressesOnCart?: Maybe<SetShippingAddressesOnCartOutput>;
    setShippingMethodsOnCart?: Maybe<SetShippingMethodsOnCartOutput>;
    /** Subscribes the specified email to a newsletter */
    subscribeEmailToNewsletter?: Maybe<SubscribeEmailToNewsletterOutput>;
    updateCartItems?: Maybe<UpdateCartItemsOutput>;
    /** Deprecated. Use UpdateCustomerV2 instead. */
    updateCustomer?: Maybe<CustomerOutput>;
    /** Update customer address */
    updateCustomerAddress?: Maybe<CustomerAddress>;
    updateCustomerEmail?: Maybe<CustomerOutput>;
    /** Update the customer's personal information */
    updateCustomerV2?: Maybe<CustomerOutput>;
    /** Updates one or more products in the specified wish list */
    updateProductsInWishlist?: Maybe<UpdateProductsInWishlistOutput>;
};
export declare type MutationaddBundleProductsToCartArgs = {
    input?: Maybe<AddBundleProductsToCartInput>;
};
export declare type MutationaddConfigurableProductsToCartArgs = {
    input?: Maybe<AddConfigurableProductsToCartInput>;
};
export declare type MutationaddDownloadableProductsToCartArgs = {
    input?: Maybe<AddDownloadableProductsToCartInput>;
};
export declare type MutationaddProductsToCartArgs = {
    cartId: Scalars['String'];
    cartItems: Array<CartItemInput>;
};
export declare type MutationaddProductsToCompareListArgs = {
    input?: Maybe<AddProductsToCompareListInput>;
};
export declare type MutationaddProductsToWishlistArgs = {
    wishlistId: Scalars['ID'];
    wishlistItems: Array<WishlistItemInput>;
};
export declare type MutationaddSimpleProductsToCartArgs = {
    input?: Maybe<AddSimpleProductsToCartInput>;
};
export declare type MutationaddVirtualProductsToCartArgs = {
    input?: Maybe<AddVirtualProductsToCartInput>;
};
export declare type MutationapplyCouponToCartArgs = {
    input?: Maybe<ApplyCouponToCartInput>;
};
export declare type MutationassignCompareListToCustomerArgs = {
    uid: Scalars['ID'];
};
export declare type MutationchangeCustomerPasswordArgs = {
    currentPassword: Scalars['String'];
    newPassword: Scalars['String'];
};
export declare type MutationcreateCompareListArgs = {
    input?: Maybe<CreateCompareListInput>;
};
export declare type MutationcreateCustomerArgs = {
    input: CustomerInput;
};
export declare type MutationcreateCustomerAddressArgs = {
    input: CustomerAddressInput;
};
export declare type MutationcreateCustomerV2Args = {
    input: CustomerCreateInput;
};
export declare type MutationcreateEmptyCartArgs = {
    input?: Maybe<createEmptyCartInput>;
};
export declare type MutationcreateKlarnaPaymentsSessionArgs = {
    input?: Maybe<createKlarnaPaymentsSessionInput>;
};
export declare type MutationcreateMollieTransactionArgs = {
    input?: Maybe<MollieTransactionInput>;
};
export declare type MutationcreatePayflowProTokenArgs = {
    input: PayflowProTokenInput;
};
export declare type MutationcreatePaypalExpressTokenArgs = {
    input: PaypalExpressTokenInput;
};
export declare type MutationcreateProductReviewArgs = {
    input: CreateProductReviewInput;
};
export declare type MutationdeleteCompareListArgs = {
    uid: Scalars['ID'];
};
export declare type MutationdeleteCustomerAddressArgs = {
    id: Scalars['Int'];
};
export declare type MutationdeletePaymentTokenArgs = {
    public_hash: Scalars['String'];
};
export declare type MutationgenerateCustomerTokenArgs = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type MutationgenerateCustomerTokenAsAdminArgs = {
    input: GenerateCustomerTokenAsAdminInput;
};
export declare type MutationhandlePayflowProResponseArgs = {
    input: PayflowProResponseInput;
};
export declare type MutationmergeCartsArgs = {
    source_cart_id: Scalars['String'];
    destination_cart_id?: Maybe<Scalars['String']>;
};
export declare type MutationmollieProcessTransactionArgs = {
    input?: Maybe<MollieProcessTransactionInput>;
};
export declare type MutationmollieRestoreCartArgs = {
    input?: Maybe<MollieResetCartInput>;
};
export declare type MutationplaceOrderArgs = {
    input?: Maybe<PlaceOrderInput>;
};
export declare type MutationremoveCouponFromCartArgs = {
    input?: Maybe<RemoveCouponFromCartInput>;
};
export declare type MutationremoveItemFromCartArgs = {
    input?: Maybe<RemoveItemFromCartInput>;
};
export declare type MutationremoveProductsFromCompareListArgs = {
    input?: Maybe<RemoveProductsFromCompareListInput>;
};
export declare type MutationremoveProductsFromWishlistArgs = {
    wishlistId: Scalars['ID'];
    wishlistItemsIds: Array<Scalars['ID']>;
};
export declare type MutationreorderItemsArgs = {
    orderNumber: Scalars['String'];
};
export declare type MutationrequestPasswordResetEmailArgs = {
    email: Scalars['String'];
};
export declare type MutationresetPasswordArgs = {
    email: Scalars['String'];
    resetPasswordToken: Scalars['String'];
    newPassword: Scalars['String'];
};
export declare type MutationsendEmailToFriendArgs = {
    input?: Maybe<SendEmailToFriendInput>;
};
export declare type MutationsetBillingAddressOnCartArgs = {
    input?: Maybe<SetBillingAddressOnCartInput>;
};
export declare type MutationsetGuestEmailOnCartArgs = {
    input?: Maybe<SetGuestEmailOnCartInput>;
};
export declare type MutationsetPaymentMethodAndPlaceOrderArgs = {
    input?: Maybe<SetPaymentMethodAndPlaceOrderInput>;
};
export declare type MutationsetPaymentMethodOnCartArgs = {
    input?: Maybe<SetPaymentMethodOnCartInput>;
};
export declare type MutationsetShippingAddressesOnCartArgs = {
    input?: Maybe<SetShippingAddressesOnCartInput>;
};
export declare type MutationsetShippingMethodsOnCartArgs = {
    input?: Maybe<SetShippingMethodsOnCartInput>;
};
export declare type MutationsubscribeEmailToNewsletterArgs = {
    email: Scalars['String'];
};
export declare type MutationupdateCartItemsArgs = {
    input?: Maybe<UpdateCartItemsInput>;
};
export declare type MutationupdateCustomerArgs = {
    input: CustomerInput;
};
export declare type MutationupdateCustomerAddressArgs = {
    id: Scalars['Int'];
    input?: Maybe<CustomerAddressInput>;
};
export declare type MutationupdateCustomerEmailArgs = {
    email: Scalars['String'];
    password: Scalars['String'];
};
export declare type MutationupdateCustomerV2Args = {
    input: CustomerUpdateInput;
};
export declare type MutationupdateProductsInWishlistArgs = {
    wishlistId: Scalars['ID'];
    wishlistItems: Array<WishlistItemUpdateInput>;
};
/** The type contains information about a store config */
export declare type StoreConfig = {
    /** Footer Miscellaneous HTML */
    absolute_footer?: Maybe<Scalars['String']>;
    /** Indicates whether guest users can write product reviews. Possible values: 1 (Yes) and 0 (No) */
    allow_guests_to_write_product_reviews?: Maybe<Scalars['String']>;
    /** The value of the Allow Gift Messages for Order Items option */
    allow_items?: Maybe<Scalars['String']>;
    /** The value of the Allow Gift Messages on Order Level option */
    allow_order?: Maybe<Scalars['String']>;
    /** Enable autocomplete on login and forgot password forms */
    autocomplete_on_storefront?: Maybe<Scalars['Boolean']>;
    /** Base currency code */
    base_currency_code?: Maybe<Scalars['String']>;
    /** Base link URL for the store */
    base_link_url?: Maybe<Scalars['String']>;
    /** Base media URL for the store */
    base_media_url?: Maybe<Scalars['String']>;
    /** Base static URL for the store */
    base_static_url?: Maybe<Scalars['String']>;
    /** Base URL for the store */
    base_url?: Maybe<Scalars['String']>;
    /** Braintree cc vault status. */
    braintree_cc_vault_active?: Maybe<Scalars['String']>;
    /** Default Sort By. */
    catalog_default_sort_by?: Maybe<Scalars['String']>;
    /** Corresponds to the 'Display Prices In Product Lists' field. It indicates how FPT information is displayed on category pages */
    category_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
    /** Category URL Suffix. */
    category_url_suffix?: Maybe<Scalars['String']>;
    /** CMS Home Page */
    cms_home_page?: Maybe<Scalars['String']>;
    /** CMS No Cookies Page */
    cms_no_cookies?: Maybe<Scalars['String']>;
    /** CMS No Route Page */
    cms_no_route?: Maybe<Scalars['String']>;
    /**
     * A code assigned to the store to identify it
     * @deprecated Use `store_code` instead.
     */
    code?: Maybe<Scalars['String']>;
    /** The configuration setting determines which thumbnail should be used in the cart for configurable products. */
    configurable_thumbnail_source?: Maybe<Scalars['String']>;
    /** Copyright */
    copyright?: Maybe<Scalars['String']>;
    /** Default Meta Description */
    default_description?: Maybe<Scalars['String']>;
    /** Default display currency code */
    default_display_currency_code?: Maybe<Scalars['String']>;
    /** Default Meta Keywords */
    default_keywords?: Maybe<Scalars['String']>;
    /** Default Page Title */
    default_title?: Maybe<Scalars['String']>;
    /** Display Demo Store Notice */
    demonotice?: Maybe<Scalars['Int']>;
    /** Default Web URL */
    front?: Maybe<Scalars['String']>;
    /** Products per Page on Grid Default Value. */
    grid_per_page?: Maybe<Scalars['Int']>;
    /** Products per Page on Grid Allowed Values. */
    grid_per_page_values?: Maybe<Scalars['String']>;
    /** Scripts and Style Sheets */
    head_includes?: Maybe<Scalars['String']>;
    /** Favicon Icon */
    head_shortcut_icon?: Maybe<Scalars['String']>;
    /** Logo Image */
    header_logo_src?: Maybe<Scalars['String']>;
    /**
     * The ID number assigned to the store
     * @deprecated Use `store_code` instead.
     */
    id?: Maybe<Scalars['Int']>;
    /** Indicates whether the store view has been designated as the default within the store group */
    is_default_store?: Maybe<Scalars['Boolean']>;
    /** Indicates whether the store group has been designated as the default within the website */
    is_default_store_group?: Maybe<Scalars['Boolean']>;
    /** List Mode. */
    list_mode?: Maybe<Scalars['String']>;
    /** Products per Page on List Default Value. */
    list_per_page?: Maybe<Scalars['Int']>;
    /** Products per Page on List Allowed Values. */
    list_per_page_values?: Maybe<Scalars['String']>;
    /** Store locale */
    locale?: Maybe<Scalars['String']>;
    /** Logo Image Alt */
    logo_alt?: Maybe<Scalars['String']>;
    /** Logo Attribute Height */
    logo_height?: Maybe<Scalars['Int']>;
    /** Logo Attribute Width */
    logo_width?: Maybe<Scalars['Int']>;
    /** Indicates whether wishlists are enabled (1) or disabled (0) */
    magento_wishlist_general_is_enabled?: Maybe<Scalars['String']>;
    /** The minimum number of characters required for a valid password. */
    minimum_password_length?: Maybe<Scalars['String']>;
    /** Default No-route URL */
    no_route?: Maybe<Scalars['String']>;
    /** Payflow Pro vault status. */
    payment_payflowpro_cc_vault_active?: Maybe<Scalars['String']>;
    /** Corresponds to the 'Display Prices On Product View Page' field. It indicates how FPT information is displayed on product pages */
    product_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
    /** Indicates whether product reviews are enabled. Possible values: 1 (Yes) and 0 (No) */
    product_reviews_enabled?: Maybe<Scalars['String']>;
    /** Product URL Suffix. */
    product_url_suffix?: Maybe<Scalars['String']>;
    /** The number of different character classes required in a password (lowercase, uppercase, digits, special characters). */
    required_character_classes_number?: Maybe<Scalars['String']>;
    /**
     * The ID of the root category
     * @deprecated Use `root_category_uid` instead
     */
    root_category_id?: Maybe<Scalars['Int']>;
    /** The unique ID for a `CategoryInterface` object. */
    root_category_uid?: Maybe<Scalars['ID']>;
    /** Corresponds to the 'Display Prices In Sales Modules' field. It indicates how FPT information is displayed on cart, checkout, and order pages */
    sales_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
    /** Secure base link URL for the store */
    secure_base_link_url?: Maybe<Scalars['String']>;
    /** Secure base media URL for the store */
    secure_base_media_url?: Maybe<Scalars['String']>;
    /** Secure base static URL for the store */
    secure_base_static_url?: Maybe<Scalars['String']>;
    /** Secure base URL for the store */
    secure_base_url?: Maybe<Scalars['String']>;
    /** Email to a Friend configuration. */
    send_friend?: Maybe<SendFriendConfiguration>;
    /** Show Breadcrumbs for CMS Pages */
    show_cms_breadcrumbs?: Maybe<Scalars['Int']>;
    /** The unique ID of the store view. In the Admin, this is called the Store View Code. When making a GraphQL call, assign this value to the `Store` header to provide the scope */
    store_code?: Maybe<Scalars['ID']>;
    /** The unique ID assigned to the store group. In the Admin, this is called the Store Name */
    store_group_code?: Maybe<Scalars['ID']>;
    /** The label assigned to the store group */
    store_group_name?: Maybe<Scalars['String']>;
    /** The label assigned to the store view */
    store_name?: Maybe<Scalars['String']>;
    /** The store view sort order */
    store_sort_order?: Maybe<Scalars['Int']>;
    /** Timezone of the store */
    timezone?: Maybe<Scalars['String']>;
    /** Page Title Prefix */
    title_prefix?: Maybe<Scalars['String']>;
    /** Page Title Separator. */
    title_separator?: Maybe<Scalars['String']>;
    /** Page Title Suffix */
    title_suffix?: Maybe<Scalars['String']>;
    /** The configuration determines if the store code should be used in the URL */
    use_store_in_url?: Maybe<Scalars['Boolean']>;
    /** The unique ID for the website */
    website_code?: Maybe<Scalars['ID']>;
    /**
     * The ID number assigned to the website store
     * @deprecated The field should not be used on the storefront
     */
    website_id?: Maybe<Scalars['Int']>;
    /** The label assigned to the website */
    website_name?: Maybe<Scalars['String']>;
    /** The unit of weight */
    weight_unit?: Maybe<Scalars['String']>;
    /** Welcome Text */
    welcome?: Maybe<Scalars['String']>;
};
/** This enumeration display settings for the fixed product tax */
export declare enum FixedProductTaxDisplaySettings {
    /** The displayed price includes the FPT amount without displaying the ProductPrice.fixed_product_taxes values. This value corresponds to 'Including FPT only' */
    INCLUDE_FPT_WITHOUT_DETAILS = "INCLUDE_FPT_WITHOUT_DETAILS",
    /** The displayed price includes the FPT amount while displaying the values of ProductPrice.fixed_product_taxes separately. This value corresponds to 'Including FPT and FPT description' */
    INCLUDE_FPT_WITH_DETAILS = "INCLUDE_FPT_WITH_DETAILS",
    /** The displayed price does not include the FPT amount. The values of ProductPrice.fixed_product_taxes and the price including the FPT are displayed separately. This value corresponds to 'Excluding FPT, Including FPT description and final price' */
    EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS = "EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS",
    /** The displayed price does not include the FPT amount. The values from ProductPrice.fixed_product_taxes are not displayed. This value corresponds to 'Excluding FPT' */
    EXCLUDE_FPT_WITHOUT_DETAILS = "EXCLUDE_FPT_WITHOUT_DETAILS",
    /** The FPT feature is not enabled. You can omit  ProductPrice.fixed_product_taxes from your query */
    FPT_DISABLED = "FPT_DISABLED"
}
export declare type SendFriendConfiguration = {
    /** Indicates whether the Email to a Friend feature is enabled. */
    enabled_for_customers: Scalars['Boolean'];
    /** Indicates whether the Email to a Friend feature is enabled for guests. */
    enabled_for_guests: Scalars['Boolean'];
};
export declare type Cart = {
    /**
     * An array of coupons that have been applied to the cart
     * @deprecated Use applied_coupons instead
     */
    applied_coupon?: Maybe<AppliedCoupon>;
    /** An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which specifies the coupon code */
    applied_coupons?: Maybe<Array<Maybe<AppliedCoupon>>>;
    /** Available payment methods */
    available_payment_methods?: Maybe<Array<Maybe<AvailablePaymentMethod>>>;
    billing_address?: Maybe<BillingCartAddress>;
    email?: Maybe<Scalars['String']>;
    /** The entered gift message for the cart */
    gift_message?: Maybe<GiftMessage>;
    /** The unique ID for a `Cart` object */
    id: Scalars['ID'];
    is_virtual: Scalars['Boolean'];
    items?: Maybe<Array<Maybe<CartItemInterface>>>;
    /** Available issuers for the selected payment method */
    mollie_available_issuers?: Maybe<Array<Maybe<MollieIssuer>>>;
    prices?: Maybe<CartPrices>;
    selected_payment_method?: Maybe<SelectedPaymentMethod>;
    shipping_addresses: Array<Maybe<ShippingCartAddress>>;
    total_quantity: Scalars['Float'];
};
export declare type AppliedCoupon = {
    code: Scalars['String'];
};
export declare type AvailablePaymentMethod = {
    /** The payment method code */
    code: Scalars['String'];
    /** Available issuers for this payment method */
    mollie_available_issuers?: Maybe<Array<Maybe<MollieIssuer>>>;
    /** Retrieve meta information for this payment method (image) */
    mollie_meta: MolliePaymentMethodMeta;
    /** The payment method title. */
    title: Scalars['String'];
};
export declare type MollieIssuer = {
    code?: Maybe<Scalars['String']>;
    image: Scalars['String'];
    name?: Maybe<Scalars['String']>;
    svg: Scalars['String'];
};
export declare type MolliePaymentMethodMeta = {
    image?: Maybe<Scalars['String']>;
};
export declare type BillingCartAddress = CartAddressInterface & {
    city: Scalars['String'];
    company?: Maybe<Scalars['String']>;
    country: CartAddressCountry;
    /** @deprecated The field is used only in shipping address */
    customer_notes?: Maybe<Scalars['String']>;
    firstname: Scalars['String'];
    lastname: Scalars['String'];
    postcode?: Maybe<Scalars['String']>;
    region?: Maybe<CartAddressRegion>;
    street: Array<Maybe<Scalars['String']>>;
    telephone: Scalars['String'];
};
export declare type CartAddressInterface = {
    city: Scalars['String'];
    company?: Maybe<Scalars['String']>;
    country: CartAddressCountry;
    firstname: Scalars['String'];
    lastname: Scalars['String'];
    postcode?: Maybe<Scalars['String']>;
    region?: Maybe<CartAddressRegion>;
    street: Array<Maybe<Scalars['String']>>;
    telephone: Scalars['String'];
};
export declare type CartAddressCountry = {
    code: Scalars['String'];
    label: Scalars['String'];
};
export declare type CartAddressRegion = {
    code?: Maybe<Scalars['String']>;
    label?: Maybe<Scalars['String']>;
    region_id?: Maybe<Scalars['Int']>;
};
/** Contains the text of a gift message, its sender, and recipient */
export declare type GiftMessage = {
    /** Sender name */
    from: Scalars['String'];
    /** Gift message text */
    message: Scalars['String'];
    /** Recipient name */
    to: Scalars['String'];
};
export declare type CartItemInterface = {
    /** @deprecated Use `uid` instead */
    id: Scalars['String'];
    prices?: Maybe<CartItemPrices>;
    product: ProductInterface;
    quantity: Scalars['Float'];
    /** The unique ID for a `CartItemInterface` object */
    uid: Scalars['ID'];
};
export declare type CartItemPrices = {
    /** An array of discounts to be applied to the cart item */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    price: Money;
    row_total: Money;
    row_total_including_tax: Money;
    /** The total of all discounts applied to the item */
    total_item_discount?: Maybe<Money>;
};
/** Defines an individual discount. A discount can be applied to the cart as a whole or to an item. */
export declare type Discount = {
    /** The amount of the discount */
    amount: Money;
    /** A description of the discount */
    label: Scalars['String'];
};
/** A Money object defines a monetary value, including a numeric value and a currency code. */
export declare type Money = {
    /** A three-letter currency code, such as USD or EUR */
    currency?: Maybe<CurrencyEnum>;
    /** A number expressing a monetary value */
    value?: Maybe<Scalars['Float']>;
};
/** The list of available currency codes */
export declare enum CurrencyEnum {
    AFN = "AFN",
    ALL = "ALL",
    AZN = "AZN",
    DZD = "DZD",
    AOA = "AOA",
    ARS = "ARS",
    AMD = "AMD",
    AWG = "AWG",
    AUD = "AUD",
    BSD = "BSD",
    BHD = "BHD",
    BDT = "BDT",
    BBD = "BBD",
    BYN = "BYN",
    BZD = "BZD",
    BMD = "BMD",
    BTN = "BTN",
    BOB = "BOB",
    BAM = "BAM",
    BWP = "BWP",
    BRL = "BRL",
    GBP = "GBP",
    BND = "BND",
    BGN = "BGN",
    BUK = "BUK",
    BIF = "BIF",
    KHR = "KHR",
    CAD = "CAD",
    CVE = "CVE",
    CZK = "CZK",
    KYD = "KYD",
    GQE = "GQE",
    CLP = "CLP",
    CNY = "CNY",
    COP = "COP",
    KMF = "KMF",
    CDF = "CDF",
    CRC = "CRC",
    HRK = "HRK",
    CUP = "CUP",
    DKK = "DKK",
    DJF = "DJF",
    DOP = "DOP",
    XCD = "XCD",
    EGP = "EGP",
    SVC = "SVC",
    ERN = "ERN",
    EEK = "EEK",
    ETB = "ETB",
    EUR = "EUR",
    FKP = "FKP",
    FJD = "FJD",
    GMD = "GMD",
    GEK = "GEK",
    GEL = "GEL",
    GHS = "GHS",
    GIP = "GIP",
    GTQ = "GTQ",
    GNF = "GNF",
    GYD = "GYD",
    HTG = "HTG",
    HNL = "HNL",
    HKD = "HKD",
    HUF = "HUF",
    ISK = "ISK",
    INR = "INR",
    IDR = "IDR",
    IRR = "IRR",
    IQD = "IQD",
    ILS = "ILS",
    JMD = "JMD",
    JPY = "JPY",
    JOD = "JOD",
    KZT = "KZT",
    KES = "KES",
    KWD = "KWD",
    KGS = "KGS",
    LAK = "LAK",
    LVL = "LVL",
    LBP = "LBP",
    LSL = "LSL",
    LRD = "LRD",
    LYD = "LYD",
    LTL = "LTL",
    MOP = "MOP",
    MKD = "MKD",
    MGA = "MGA",
    MWK = "MWK",
    MYR = "MYR",
    MVR = "MVR",
    LSM = "LSM",
    MRO = "MRO",
    MUR = "MUR",
    MXN = "MXN",
    MDL = "MDL",
    MNT = "MNT",
    MAD = "MAD",
    MZN = "MZN",
    MMK = "MMK",
    NAD = "NAD",
    NPR = "NPR",
    ANG = "ANG",
    YTL = "YTL",
    NZD = "NZD",
    NIC = "NIC",
    NGN = "NGN",
    KPW = "KPW",
    NOK = "NOK",
    OMR = "OMR",
    PKR = "PKR",
    PAB = "PAB",
    PGK = "PGK",
    PYG = "PYG",
    PEN = "PEN",
    PHP = "PHP",
    PLN = "PLN",
    QAR = "QAR",
    RHD = "RHD",
    RON = "RON",
    RUB = "RUB",
    RWF = "RWF",
    SHP = "SHP",
    STD = "STD",
    SAR = "SAR",
    RSD = "RSD",
    SCR = "SCR",
    SLL = "SLL",
    SGD = "SGD",
    SKK = "SKK",
    SBD = "SBD",
    SOS = "SOS",
    ZAR = "ZAR",
    KRW = "KRW",
    LKR = "LKR",
    SDG = "SDG",
    SRD = "SRD",
    SZL = "SZL",
    SEK = "SEK",
    CHF = "CHF",
    SYP = "SYP",
    TWD = "TWD",
    TJS = "TJS",
    TZS = "TZS",
    THB = "THB",
    TOP = "TOP",
    TTD = "TTD",
    TND = "TND",
    TMM = "TMM",
    USD = "USD",
    UGX = "UGX",
    UAH = "UAH",
    AED = "AED",
    UYU = "UYU",
    UZS = "UZS",
    VUV = "VUV",
    VEB = "VEB",
    VEF = "VEF",
    VND = "VND",
    CHE = "CHE",
    CHW = "CHW",
    XOF = "XOF",
    WST = "WST",
    YER = "YER",
    ZMK = "ZMK",
    ZWD = "ZWD",
    TRY = "TRY",
    AZM = "AZM",
    ROL = "ROL",
    TRL = "TRL",
    XPF = "XPF"
}
/** The ProductInterface contains attributes that are common to all types of products. Note that descriptions may not be available for custom and EAV attributes. */
export declare type ProductInterface = {
    activity?: Maybe<Scalars['String']>;
    /**
     * The attribute set assigned to the product.
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>;
    backorder_delivery_date?: Maybe<Scalars['String']>;
    backorder_delivery_period?: Maybe<Scalars['Int']>;
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>;
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>;
    category_gear?: Maybe<Scalars['String']>;
    climate?: Maybe<Scalars['String']>;
    collar?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['Int']>;
    colors?: Maybe<Scalars['String']>;
    compatible_phones?: Maybe<Scalars['Int']>;
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>;
    /**
     * Timestamp indicating when the product was created.
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>;
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>;
    dominant_color?: Maybe<Scalars['Int']>;
    eco_collection?: Maybe<Scalars['Int']>;
    erin_recommends?: Maybe<Scalars['Int']>;
    features_bags?: Maybe<Scalars['String']>;
    format?: Maybe<Scalars['Int']>;
    gender?: Maybe<Scalars['String']>;
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>;
    /**
     * The ID number assigned to the product.
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>;
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>;
    in_stock_delivery_period?: Maybe<Scalars['Int']>;
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>;
    material?: Maybe<Scalars['Int']>;
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>;
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>;
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>;
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>;
    new?: Maybe<Scalars['Int']>;
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>;
    /**
     * The end date for new product listings.
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>;
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>;
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>;
    pattern?: Maybe<Scalars['String']>;
    performance_fabric?: Maybe<Scalars['Int']>;
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>;
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange;
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
    print_art?: Maybe<Scalars['String']>;
    print_holiday?: Maybe<Scalars['String']>;
    print_labels?: Maybe<Scalars['String']>;
    print_landmarks?: Maybe<Scalars['String']>;
    print_landscape?: Maybe<Scalars['String']>;
    print_mood?: Maybe<Scalars['String']>;
    print_pattern_swatch?: Maybe<Scalars['Int']>;
    print_type?: Maybe<Scalars['String']>;
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float'];
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int'];
    /** The list of products reviews. */
    reviews: ProductReviews;
    sale?: Maybe<Scalars['Int']>;
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>;
    size?: Maybe<Scalars['Int']>;
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>;
    sleeve?: Maybe<Scalars['String']>;
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>;
    /**
     * The beginning date that a product has a special price.
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>;
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>;
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>;
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>;
    strap_bags?: Maybe<Scalars['String']>;
    style_bags?: Maybe<Scalars['String']>;
    style_bottom?: Maybe<Scalars['String']>;
    style_general?: Maybe<Scalars['String']>;
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>;
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>;
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>;
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>;
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID'];
    /**
     * Timestamp indicating when the product was updated.
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>;
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>;
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>;
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>;
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>;
};
/** The ProductInterface contains attributes that are common to all types of products. Note that descriptions may not be available for custom and EAV attributes. */
export declare type ProductInterfacereviewsArgs = {
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
};
/** CategoryInterface contains the full set of attributes that can be returned in a category search. */
export declare type CategoryInterface = {
    available_sort_by?: Maybe<Array<Maybe<Scalars['String']>>>;
    /** Breadcrumbs, parent categories info. */
    breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>;
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled */
    canonical_url?: Maybe<Scalars['String']>;
    children_count?: Maybe<Scalars['String']>;
    /** Category CMS Block. */
    cms_block?: Maybe<CmsBlock>;
    /**
     * Timestamp indicating when the category was created.
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>;
    custom_layout_update_file?: Maybe<Scalars['String']>;
    /** The attribute to use for sorting. */
    default_sort_by?: Maybe<Scalars['String']>;
    /** An optional description of the category. */
    description?: Maybe<Scalars['String']>;
    display_mode?: Maybe<Scalars['String']>;
    filter_price_range?: Maybe<Scalars['Float']>;
    /**
     * An ID that uniquely identifies the category.
     * @deprecated Use the `uid` argument instead.
     */
    id?: Maybe<Scalars['Int']>;
    image?: Maybe<Scalars['String']>;
    include_in_menu?: Maybe<Scalars['Int']>;
    is_anchor?: Maybe<Scalars['Int']>;
    landing_page?: Maybe<Scalars['Int']>;
    /** Indicates the depth of the category within the tree. */
    level?: Maybe<Scalars['Int']>;
    meta_description?: Maybe<Scalars['String']>;
    meta_keywords?: Maybe<Scalars['String']>;
    meta_title?: Maybe<Scalars['String']>;
    /** The display name of the category. */
    name?: Maybe<Scalars['String']>;
    /** Category Path. */
    path?: Maybe<Scalars['String']>;
    /** Category path in store. */
    path_in_store?: Maybe<Scalars['String']>;
    /** The position of the category relative to other categories at the same level in tree. */
    position?: Maybe<Scalars['Int']>;
    /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
    product_count?: Maybe<Scalars['Int']>;
    /** The list of products assigned to the category. */
    products?: Maybe<CategoryProducts>;
    /** The unique ID for a `CategoryInterface` object. */
    uid: Scalars['ID'];
    /**
     * Timestamp indicating when the category was updated.
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>;
    /** The url key assigned to the category. */
    url_key?: Maybe<Scalars['String']>;
    /** The url path assigned to the category. */
    url_path?: Maybe<Scalars['String']>;
    /** The part of the category URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>;
};
/** CategoryInterface contains the full set of attributes that can be returned in a category search. */
export declare type CategoryInterfaceproductsArgs = {
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
    sort?: Maybe<ProductAttributeSortInput>;
};
/** Breadcrumb item. */
export declare type Breadcrumb = {
    /**
     * Category ID.
     * @deprecated Use the `category_uid` argument instead.
     */
    category_id?: Maybe<Scalars['Int']>;
    /** Category level. */
    category_level?: Maybe<Scalars['Int']>;
    /** Category name. */
    category_name?: Maybe<Scalars['String']>;
    /** The unique ID for a `Breadcrumb` object. */
    category_uid: Scalars['ID'];
    /** Category URL key. */
    category_url_key?: Maybe<Scalars['String']>;
    /** Category URL path. */
    category_url_path?: Maybe<Scalars['String']>;
};
/** CMS block defines all CMS block information */
export declare type CmsBlock = {
    /** CMS block content */
    content?: Maybe<Scalars['String']>;
    /** CMS block identifier */
    identifier?: Maybe<Scalars['String']>;
    /** CMS block title */
    title?: Maybe<Scalars['String']>;
};
/** ProductAttributeSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. It's possible to sort products using searchable attributes with enabled 'Use in Filter Options' option */
export declare type ProductAttributeSortInput = {
    /** Attribute label: Product Name */
    name?: Maybe<SortEnum>;
    /** Sort by the position assigned to each product. */
    position?: Maybe<SortEnum>;
    /** Attribute label: Price */
    price?: Maybe<SortEnum>;
    /** Sort by the search relevance score (default). */
    relevance?: Maybe<SortEnum>;
};
/** This enumeration indicates whether to return results in ascending or descending order */
export declare enum SortEnum {
    ASC = "ASC",
    DESC = "DESC"
}
/** The category products object returned in the Category query. */
export declare type CategoryProducts = {
    /** An array of products that are assigned to the category. */
    items?: Maybe<Array<Maybe<ProductInterface>>>;
    /** An object that includes the page_info and currentPage values specified in the query. */
    page_info?: Maybe<SearchResultPageInfo>;
    /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
    total_count?: Maybe<Scalars['Int']>;
};
/** SearchResultPageInfo provides navigation for the query response */
export declare type SearchResultPageInfo = {
    /** Specifies which page of results to return */
    current_page?: Maybe<Scalars['Int']>;
    /** Specifies the maximum number of items to return */
    page_size?: Maybe<Scalars['Int']>;
    /** Total pages */
    total_pages?: Maybe<Scalars['Int']>;
};
export declare type ComplexTextValue = {
    /** HTML format */
    html: Scalars['String'];
};
/** Product image information. Contains the image URL and label. */
export declare type ProductImage = MediaGalleryInterface & {
    /** Whether the image is hidden from view. */
    disabled?: Maybe<Scalars['Boolean']>;
    /** The label of the product image or video. */
    label?: Maybe<Scalars['String']>;
    /** The media item's position after it has been sorted. */
    position?: Maybe<Scalars['Int']>;
    /** The URL of the product image or video. */
    url?: Maybe<Scalars['String']>;
};
/** Contains basic information about a product image or video. */
export declare type MediaGalleryInterface = {
    /** Whether the image is hidden from view. */
    disabled?: Maybe<Scalars['Boolean']>;
    /** The label of the product image or video. */
    label?: Maybe<Scalars['String']>;
    /** The media item's position after it has been sorted. */
    position?: Maybe<Scalars['Int']>;
    /** The URL of the product image or video. */
    url?: Maybe<Scalars['String']>;
};
/** MediaGalleryEntry defines characteristics about images and videos associated with a specific product. */
export declare type MediaGalleryEntry = {
    /** Contains a ProductMediaGalleryEntriesContent object. */
    content?: Maybe<ProductMediaGalleryEntriesContent>;
    /** Whether the image is hidden from view. */
    disabled?: Maybe<Scalars['Boolean']>;
    /** The path of the image on the server. */
    file?: Maybe<Scalars['String']>;
    /**
     * The identifier assigned to the object.
     * @deprecated Use `uid` instead.
     */
    id?: Maybe<Scalars['Int']>;
    /** The alt text displayed on the UI when the user points to the image. */
    label?: Maybe<Scalars['String']>;
    /** image or video. */
    media_type?: Maybe<Scalars['String']>;
    /** The media item's position after it has been sorted. */
    position?: Maybe<Scalars['Int']>;
    /** Array of image types. It can have the following values: image, small_image, thumbnail. */
    types?: Maybe<Array<Maybe<Scalars['String']>>>;
    /** The unique ID for a `MediaGalleryEntry` object. */
    uid: Scalars['ID'];
    /** Contains a ProductMediaGalleryEntriesVideoContent object. */
    video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>;
};
/** ProductMediaGalleryEntriesContent contains an image in base64 format and basic information about the image. */
export declare type ProductMediaGalleryEntriesContent = {
    /** The image in base64 format. */
    base64_encoded_data?: Maybe<Scalars['String']>;
    /** The file name of the image. */
    name?: Maybe<Scalars['String']>;
    /** The MIME type of the file, such as image/png. */
    type?: Maybe<Scalars['String']>;
};
/** ProductMediaGalleryEntriesVideoContent contains a link to a video file and basic information about the video. */
export declare type ProductMediaGalleryEntriesVideoContent = {
    /** Must be external-video. */
    media_type?: Maybe<Scalars['String']>;
    /** A description of the video. */
    video_description?: Maybe<Scalars['String']>;
    /** Optional data about the video. */
    video_metadata?: Maybe<Scalars['String']>;
    /** Describes the video source. */
    video_provider?: Maybe<Scalars['String']>;
    /** The title of the video. */
    video_title?: Maybe<Scalars['String']>;
    /** The URL to the video. */
    video_url?: Maybe<Scalars['String']>;
};
/** ProductPrices is deprecated, replaced by PriceRange. The ProductPrices object contains the regular price of an item, as well as its minimum and maximum prices. Only composite products, which include bundle, configurable, and grouped products, can contain a minimum and maximum price. */
export declare type ProductPrices = {
    /**
     * The highest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the to value.
     * @deprecated Use PriceRange.maximum_price.
     */
    maximalPrice?: Maybe<Price>;
    /**
     * The lowest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the from value.
     * @deprecated Use PriceRange.minimum_price.
     */
    minimalPrice?: Maybe<Price>;
    /**
     * The base price of a product.
     * @deprecated Use regular_price from PriceRange.minimum_price or PriceRange.maximum_price.
     */
    regularPrice?: Maybe<Price>;
};
/** Price is deprecated, replaced by ProductPrice. The Price object defines the price of a product as well as any tax-related adjustments. */
export declare type Price = {
    /**
     * An array that provides information about tax, weee, or weee_tax adjustments.
     * @deprecated Price is deprecated, use ProductPrice.
     */
    adjustments?: Maybe<Array<Maybe<PriceAdjustment>>>;
    /**
     * The price of a product plus a three-letter currency code.
     * @deprecated Price is deprecated, use ProductPrice.
     */
    amount?: Maybe<Money>;
};
/** PriceAdjustment is deprecated. Taxes will be included or excluded in the price. The PricedAdjustment object defines the amount of money to apply as an adjustment, the type of adjustment to apply, and whether the item is included or excluded from the adjustment. */
export declare type PriceAdjustment = {
    /** The amount of the price adjustment and its currency code. */
    amount?: Maybe<Money>;
    /**
     * Indicates whether the adjustment involves tax, weee, or weee_tax.
     * @deprecated PriceAdjustment is deprecated.
     */
    code?: Maybe<PriceAdjustmentCodesEnum>;
    /**
     * Indicates whether the entity described by the code attribute is included or excluded from the adjustment.
     * @deprecated PriceAdjustment is deprecated.
     */
    description?: Maybe<PriceAdjustmentDescriptionEnum>;
};
/** PriceAdjustment.code is deprecated. This enumeration contains values defined in modules other than the Catalog module. */
export declare enum PriceAdjustmentCodesEnum {
    TAX = "TAX",
    WEEE = "WEEE",
    WEEE_TAX = "WEEE_TAX"
}
/** PriceAdjustmentDescriptionEnum is deprecated. This enumeration states whether a price adjustment is included or excluded. */
export declare enum PriceAdjustmentDescriptionEnum {
    INCLUDED = "INCLUDED",
    EXCLUDED = "EXCLUDED"
}
/** Price range for a product. If the product has a single price, the minimum and maximum price will be the same. */
export declare type PriceRange = {
    /** The highest possible price for the product. */
    maximum_price?: Maybe<ProductPrice>;
    /** The lowest possible price for the product. */
    minimum_price: ProductPrice;
};
/** Represents a product price. */
export declare type ProductPrice = {
    /** The price discount. Represents the difference between the regular and final price. */
    discount?: Maybe<ProductDiscount>;
    /** The final price of the product after discounts applied. */
    final_price: Money;
    /** The multiple FPTs that can be applied to a product price. */
    fixed_product_taxes?: Maybe<Array<Maybe<FixedProductTax>>>;
    /** The regular price of the product. */
    regular_price: Money;
};
/** A discount applied to a product price. */
export declare type ProductDiscount = {
    /** The actual value of the discount. */
    amount_off?: Maybe<Scalars['Float']>;
    /** The discount expressed a percentage. */
    percent_off?: Maybe<Scalars['Float']>;
};
/** A single FPT that can be applied to a product price. */
export declare type FixedProductTax = {
    /** Amount of the FPT as a money object. */
    amount?: Maybe<Money>;
    /** The label assigned to the FPT to be displayed on the frontend. */
    label?: Maybe<Scalars['String']>;
};
/** A price based on the quantity purchased. */
export declare type TierPrice = {
    /** The price discount that this tier represents. */
    discount?: Maybe<ProductDiscount>;
    final_price?: Maybe<Money>;
    /** The minimum number of items that must be purchased to qualify for this price tier. */
    quantity?: Maybe<Scalars['Float']>;
};
/** ProductLinks contains information about linked products, including the link type and product type of each item. */
export declare type ProductLinksInterface = {
    /** One of related, associated, upsell, or crosssell. */
    link_type?: Maybe<Scalars['String']>;
    /** The SKU of the linked product. */
    linked_product_sku?: Maybe<Scalars['String']>;
    /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
    linked_product_type?: Maybe<Scalars['String']>;
    /** The position within the list of product links. */
    position?: Maybe<Scalars['Int']>;
    /** The identifier of the linked product. */
    sku?: Maybe<Scalars['String']>;
};
export declare type ProductReviews = {
    /** An array of product reviews. */
    items: Array<Maybe<ProductReview>>;
    /** Metadata for pagination rendering. */
    page_info: SearchResultPageInfo;
};
/** Details of a product review */
export declare type ProductReview = {
    /** The average rating for product review. */
    average_rating: Scalars['Float'];
    /** Date indicating when the review was created. */
    created_at: Scalars['String'];
    /** The customer's nickname. Defaults to the customer name, if logged in */
    nickname: Scalars['String'];
    /** Contains details about the reviewed product */
    product: ProductInterface;
    /** An array of ratings by rating category, such as quality, price, and value */
    ratings_breakdown: Array<Maybe<ProductReviewRating>>;
    /** The summary (title) of the review */
    summary: Scalars['String'];
    /** The review text. */
    text: Scalars['String'];
};
export declare type ProductReviewRating = {
    /** The label assigned to an aspect of a product that is being rated, such as quality or price */
    name: Scalars['String'];
    /** The rating value given by customer. By default, possible values range from 1 to 5. */
    value: Scalars['String'];
};
/** This enumeration states whether a product stock status is in stock or out of stock */
export declare enum ProductStockStatus {
    IN_STOCK = "IN_STOCK",
    OUT_OF_STOCK = "OUT_OF_STOCK"
}
/** ProductTierPrices is deprecated and has been replaced by TierPrice. The ProductTierPrices object defines a tier price, which is a quantity discount offered to a specific customer group. */
export declare type ProductTierPrices = {
    /**
     * The ID of the customer group.
     * @deprecated customer_group_id is not relevant for storefront.
     */
    customer_group_id?: Maybe<Scalars['String']>;
    /**
     * The percentage discount of the item.
     * @deprecated ProductTierPrices is deprecated. Use TierPrice.discount.
     */
    percentage_value?: Maybe<Scalars['Float']>;
    /**
     * The number of items that must be purchased to qualify for tier pricing.
     * @deprecated ProductTierPrices is deprecated, use TierPrice.quantity.
     */
    qty?: Maybe<Scalars['Float']>;
    /**
     * The price of the fixed price item.
     * @deprecated ProductTierPrices is deprecated. Use TierPrice.final_price
     */
    value?: Maybe<Scalars['Float']>;
    /**
     * The ID assigned to the website.
     * @deprecated website_id is not relevant for storefront.
     */
    website_id?: Maybe<Scalars['Float']>;
};
/** The object contains URL rewrite details */
export declare type UrlRewrite = {
    /** Request parameters */
    parameters?: Maybe<Array<Maybe<HttpQueryParameter>>>;
    /** Request URL */
    url?: Maybe<Scalars['String']>;
};
/** The object details of target path parameters */
export declare type HttpQueryParameter = {
    /** Parameter name */
    name?: Maybe<Scalars['String']>;
    /** Parameter value */
    value?: Maybe<Scalars['String']>;
};
/** Website is deprecated because it is should not be used on storefront. The type contains information about a website */
export declare type Website = {
    /**
     * A code assigned to the website to identify it
     * @deprecated The field should not be used on the storefront.
     */
    code?: Maybe<Scalars['String']>;
    /**
     * The default group ID that the website has
     * @deprecated The field should not be used on the storefront.
     */
    default_group_id?: Maybe<Scalars['String']>;
    /**
     * The ID number assigned to the website
     * @deprecated The field should not be used on the storefront.
     */
    id?: Maybe<Scalars['Int']>;
    /**
     * Specifies if this is the default website
     * @deprecated The field should not be used on the storefront.
     */
    is_default?: Maybe<Scalars['Boolean']>;
    /**
     * The website name. Websites use this name to identify it easier.
     * @deprecated The field should not be used on the storefront.
     */
    name?: Maybe<Scalars['String']>;
    /**
     * The attribute to use for sorting websites
     * @deprecated The field should not be used on the storefront.
     */
    sort_order?: Maybe<Scalars['Int']>;
};
export declare type CartPrices = {
    applied_taxes?: Maybe<Array<Maybe<CartTaxItem>>>;
    /** @deprecated Use discounts instead  */
    discount?: Maybe<CartDiscount>;
    /** An array of applied discounts */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    grand_total?: Maybe<Money>;
    subtotal_excluding_tax?: Maybe<Money>;
    subtotal_including_tax?: Maybe<Money>;
    subtotal_with_discount_excluding_tax?: Maybe<Money>;
};
export declare type CartTaxItem = {
    amount: Money;
    label: Scalars['String'];
};
export declare type CartDiscount = {
    amount: Money;
    label: Array<Maybe<Scalars['String']>>;
};
export declare type SelectedPaymentMethod = {
    /** The payment method code */
    code: Scalars['String'];
    /** Retrieve meta information for this payment method (image) */
    mollie_meta: MolliePaymentMethodMeta;
    /** The purchase order number. */
    purchase_order_number?: Maybe<Scalars['String']>;
    /** The payment method title. */
    title: Scalars['String'];
};
export declare type ShippingCartAddress = CartAddressInterface & {
    available_shipping_methods?: Maybe<Array<Maybe<AvailableShippingMethod>>>;
    /** @deprecated `cart_items_v2` should be used instead */
    cart_items?: Maybe<Array<Maybe<CartItemQuantity>>>;
    cart_items_v2?: Maybe<Array<Maybe<CartItemInterface>>>;
    city: Scalars['String'];
    company?: Maybe<Scalars['String']>;
    country: CartAddressCountry;
    customer_notes?: Maybe<Scalars['String']>;
    firstname: Scalars['String'];
    /** @deprecated This information shoud not be exposed on frontend */
    items_weight?: Maybe<Scalars['Float']>;
    lastname: Scalars['String'];
    pickup_location_code?: Maybe<Scalars['String']>;
    postcode?: Maybe<Scalars['String']>;
    region?: Maybe<CartAddressRegion>;
    selected_shipping_method?: Maybe<SelectedShippingMethod>;
    street: Array<Maybe<Scalars['String']>>;
    telephone: Scalars['String'];
};
export declare type AvailableShippingMethod = {
    amount: Money;
    available: Scalars['Boolean'];
    /** @deprecated The field should not be used on the storefront */
    base_amount?: Maybe<Money>;
    carrier_code: Scalars['String'];
    carrier_title: Scalars['String'];
    error_message?: Maybe<Scalars['String']>;
    /** Could be null if method is not available */
    method_code?: Maybe<Scalars['String']>;
    /** Could be null if method is not available */
    method_title?: Maybe<Scalars['String']>;
    price_excl_tax: Money;
    price_incl_tax: Money;
};
/** Deprecated: `cart_items` field of `ShippingCartAddress` returns now  `CartItemInterface` instead of `CartItemQuantity` */
export declare type CartItemQuantity = {
    /** @deprecated `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead of `CartItemQuantity` */
    cart_item_id: Scalars['Int'];
    /** @deprecated `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead of `CartItemQuantity` */
    quantity: Scalars['Float'];
};
export declare type SelectedShippingMethod = {
    amount: Money;
    /** @deprecated The field should not be used on the storefront */
    base_amount?: Maybe<Money>;
    carrier_code: Scalars['String'];
    carrier_title: Scalars['String'];
    method_code: Scalars['String'];
    method_title: Scalars['String'];
};
/** CategoryFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export declare type CategoryFilterInput = {
    /** Filter by the unique category ID for a `CategoryInterface` object. */
    category_uid?: Maybe<FilterEqualTypeInput>;
    /** Deprecated: use 'category_uid' to filter uniquely identifiers of categories. */
    ids?: Maybe<FilterEqualTypeInput>;
    /** Filter by the display name of the category. */
    name?: Maybe<FilterMatchTypeInput>;
    /** Filter by the unique parent category ID for a `CategoryInterface` object. */
    parent_category_uid?: Maybe<FilterEqualTypeInput>;
    /** Filter by the unique parent category ID for a `CategoryInterface` object. */
    parent_id?: Maybe<FilterEqualTypeInput>;
    /** Filter by the part of the URL that identifies the category. */
    url_key?: Maybe<FilterEqualTypeInput>;
    /** Filter by the URL path for the category. */
    url_path?: Maybe<FilterEqualTypeInput>;
};
/** Defines a filter that matches the input exactly. */
export declare type FilterEqualTypeInput = {
    /** A string to filter on */
    eq?: Maybe<Scalars['String']>;
    /** An array of values to filter on */
    in?: Maybe<Array<Maybe<Scalars['String']>>>;
};
/** Defines a filter that performs a fuzzy search. */
export declare type FilterMatchTypeInput = {
    /** One or more words to filter on */
    match?: Maybe<Scalars['String']>;
};
/** A collection of CategoryTree objects and pagination information. */
export declare type CategoryResult = {
    /** A list of categories that match the filter criteria. */
    items?: Maybe<Array<Maybe<CategoryTree>>>;
    /** An object that includes the page_info and currentPage values specified in the query. */
    page_info?: Maybe<SearchResultPageInfo>;
    /** The total number of categories that match the criteria. */
    total_count?: Maybe<Scalars['Int']>;
};
/** Category Tree implementation. */
export declare type CategoryTree = CategoryInterface & {
    available_sort_by?: Maybe<Array<Maybe<Scalars['String']>>>;
    /** Breadcrumbs, parent categories info. */
    breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>;
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled */
    canonical_url?: Maybe<Scalars['String']>;
    /** Child categories tree. */
    children?: Maybe<Array<Maybe<CategoryTree>>>;
    children_count?: Maybe<Scalars['String']>;
    /** Category CMS Block. */
    cms_block?: Maybe<CmsBlock>;
    /**
     * Timestamp indicating when the category was created.
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>;
    custom_layout_update_file?: Maybe<Scalars['String']>;
    /** The attribute to use for sorting. */
    default_sort_by?: Maybe<Scalars['String']>;
    /** An optional description of the category. */
    description?: Maybe<Scalars['String']>;
    display_mode?: Maybe<Scalars['String']>;
    filter_price_range?: Maybe<Scalars['Float']>;
    /**
     * An ID that uniquely identifies the category.
     * @deprecated Use the `uid` argument instead.
     */
    id?: Maybe<Scalars['Int']>;
    image?: Maybe<Scalars['String']>;
    include_in_menu?: Maybe<Scalars['Int']>;
    is_anchor?: Maybe<Scalars['Int']>;
    landing_page?: Maybe<Scalars['Int']>;
    /** Indicates the depth of the category within the tree. */
    level?: Maybe<Scalars['Int']>;
    meta_description?: Maybe<Scalars['String']>;
    meta_keywords?: Maybe<Scalars['String']>;
    meta_title?: Maybe<Scalars['String']>;
    /** The display name of the category. */
    name?: Maybe<Scalars['String']>;
    /** Category Path. */
    path?: Maybe<Scalars['String']>;
    /** Category path in store. */
    path_in_store?: Maybe<Scalars['String']>;
    /** The position of the category relative to other categories at the same level in tree. */
    position?: Maybe<Scalars['Int']>;
    /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
    product_count?: Maybe<Scalars['Int']>;
    /** The list of products assigned to the category. */
    products?: Maybe<CategoryProducts>;
    /** The unique ID for a `CategoryInterface` object. */
    uid: Scalars['ID'];
    /**
     * Timestamp indicating when the category was updated.
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>;
    /** The url key assigned to the category. */
    url_key?: Maybe<Scalars['String']>;
    /** The url path assigned to the category. */
    url_path?: Maybe<Scalars['String']>;
    /** The part of the category URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>;
};
/** Category Tree implementation. */
export declare type CategoryTreeproductsArgs = {
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
    sort?: Maybe<ProductAttributeSortInput>;
};
/** Defines all Checkout Agreement information */
export declare type CheckoutAgreement = {
    /** Checkout Agreement identifier */
    agreement_id: Scalars['Int'];
    /** Checkout Agreement checkbox text */
    checkbox_text: Scalars['String'];
    /** Checkout Agreement content */
    content: Scalars['String'];
    /** Checkout Agreement content height */
    content_height?: Maybe<Scalars['String']>;
    /** Is Checkout Agreement content in HTML format */
    is_html: Scalars['Boolean'];
    mode: CheckoutAgreementMode;
    /** Checkout Agreement name */
    name: Scalars['String'];
};
export declare enum CheckoutAgreementMode {
    AUTO = "AUTO",
    MANUAL = "MANUAL"
}
/** CMS blocks information */
export declare type CmsBlocks = {
    /** An array of CMS blocks */
    items?: Maybe<Array<Maybe<CmsBlock>>>;
};
/** CMS page defines all CMS page information */
export declare type CmsPage = {
    /** CMS page content */
    content?: Maybe<Scalars['String']>;
    /** CMS page content heading */
    content_heading?: Maybe<Scalars['String']>;
    /** Identifier of the CMS page */
    identifier?: Maybe<Scalars['String']>;
    /** CMS page meta description */
    meta_description?: Maybe<Scalars['String']>;
    /** CMS page meta keywords */
    meta_keywords?: Maybe<Scalars['String']>;
    /** CMS page meta title */
    meta_title?: Maybe<Scalars['String']>;
    /** CMS page content heading */
    page_layout?: Maybe<Scalars['String']>;
    /** CMS page title */
    title?: Maybe<Scalars['String']>;
    /** URL key of CMS page */
    url_key?: Maybe<Scalars['String']>;
};
export declare type CompareList = {
    /** An array of attributes that can be used for comparing products */
    attributes?: Maybe<Array<Maybe<ComparableAttribute>>>;
    /** The number of items in the compare list */
    item_count: Scalars['Int'];
    /** An array of products to compare */
    items?: Maybe<Array<Maybe<ComparableItem>>>;
    /** The unique ID assigned to the compare list */
    uid: Scalars['ID'];
};
export declare type ComparableAttribute = {
    /** An attribute code that is enabled for product comparisons */
    code: Scalars['String'];
    /** The label of the attribute code */
    label: Scalars['String'];
};
export declare type ComparableItem = {
    /** An array of product attributes that can be used to compare products */
    attributes: Array<Maybe<ProductAttribute>>;
    /** Contains details about a product in a compare list */
    product: ProductInterface;
    /** The unique ID of an item in a compare list */
    uid: Scalars['ID'];
};
export declare type ProductAttribute = {
    /** The unique identifier for a product attribute code. */
    code: Scalars['String'];
    /** The display value of the attribute */
    value: Scalars['String'];
};
export declare type Country = {
    available_regions?: Maybe<Array<Maybe<Region>>>;
    full_name_english?: Maybe<Scalars['String']>;
    full_name_locale?: Maybe<Scalars['String']>;
    /** The unique ID for a `Country` object. */
    id?: Maybe<Scalars['String']>;
    three_letter_abbreviation?: Maybe<Scalars['String']>;
    two_letter_abbreviation?: Maybe<Scalars['String']>;
};
export declare type Region = {
    code?: Maybe<Scalars['String']>;
    /** The unique ID for a `Region` object. */
    id?: Maybe<Scalars['Int']>;
    name?: Maybe<Scalars['String']>;
};
export declare type Currency = {
    available_currency_codes?: Maybe<Array<Maybe<Scalars['String']>>>;
    base_currency_code?: Maybe<Scalars['String']>;
    base_currency_symbol?: Maybe<Scalars['String']>;
    /** @deprecated Symbol was missed. Use `default_display_currency_code`. */
    default_display_currecy_code?: Maybe<Scalars['String']>;
    /** @deprecated Symbol was missed. Use `default_display_currency_symbol`. */
    default_display_currecy_symbol?: Maybe<Scalars['String']>;
    default_display_currency_code?: Maybe<Scalars['String']>;
    default_display_currency_symbol?: Maybe<Scalars['String']>;
    exchange_rates?: Maybe<Array<Maybe<ExchangeRate>>>;
};
export declare type ExchangeRate = {
    currency_to?: Maybe<Scalars['String']>;
    rate?: Maybe<Scalars['Float']>;
};
/** AttributeInput specifies the attribute_code and entity_type to search */
export declare type AttributeInput = {
    /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
    attribute_code?: Maybe<Scalars['String']>;
    /** The type of entity that defines the attribute */
    entity_type?: Maybe<Scalars['String']>;
};
/** CustomAttributeMetadata defines an array of attribute_codes and entity_types */
export declare type CustomAttributeMetadata = {
    /** An array of attributes */
    items?: Maybe<Array<Maybe<Attribute>>>;
};
/** Attribute contains the attribute_type of the specified attribute_code and entity_type */
export declare type Attribute = {
    /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
    attribute_code?: Maybe<Scalars['String']>;
    /** Attribute options list. */
    attribute_options?: Maybe<Array<Maybe<AttributeOption>>>;
    /** The data type of the attribute */
    attribute_type?: Maybe<Scalars['String']>;
    /** The type of entity that defines the attribute */
    entity_type?: Maybe<Scalars['String']>;
    /** The frontend input type of the attribute */
    input_type?: Maybe<Scalars['String']>;
};
/** Attribute option. */
export declare type AttributeOption = {
    /** Attribute option label. */
    label?: Maybe<Scalars['String']>;
    /** Attribute option value. */
    value?: Maybe<Scalars['String']>;
};
/** Customer defines the customer name and address and other details */
export declare type Customer = {
    /** An array containing the customer's shipping and billing addresses */
    addresses?: Maybe<Array<Maybe<CustomerAddress>>>;
    /** Indicates whether the customer has enabled remote shopping assistance */
    allow_remote_shopping_assistance: Scalars['Boolean'];
    /** The contents of the customer's compare list */
    compare_list?: Maybe<CompareList>;
    /** Timestamp indicating when the account was created */
    created_at?: Maybe<Scalars['String']>;
    /** The customer's date of birth */
    date_of_birth?: Maybe<Scalars['String']>;
    /** The ID assigned to the billing address */
    default_billing?: Maybe<Scalars['String']>;
    /** The ID assigned to the shipping address */
    default_shipping?: Maybe<Scalars['String']>;
    /**
     * The customer's date of birth
     * @deprecated Use `date_of_birth` instead
     */
    dob?: Maybe<Scalars['String']>;
    /** The customer's email address. Required */
    email?: Maybe<Scalars['String']>;
    /** The customer's first name */
    firstname?: Maybe<Scalars['String']>;
    /** The customer's gender (Male - 1, Female - 2) */
    gender?: Maybe<Scalars['Int']>;
    /** @deprecated Customer group should not be exposed in the storefront scenarios */
    group_id?: Maybe<Scalars['Int']>;
    /**
     * The ID assigned to the customer
     * @deprecated id is not needed as part of Customer because on server side it can be identified based on customer token used for authentication. There is no need to know customer ID on the client side.
     */
    id?: Maybe<Scalars['Int']>;
    /** Indicates whether the customer is subscribed to the company's newsletter */
    is_subscribed?: Maybe<Scalars['Boolean']>;
    /** The customer's family name */
    lastname?: Maybe<Scalars['String']>;
    /** The customer's middle name */
    middlename?: Maybe<Scalars['String']>;
    orders?: Maybe<CustomerOrders>;
    /** An honorific, such as Dr., Mr., or Mrs. */
    prefix?: Maybe<Scalars['String']>;
    /** Contains the customer's product reviews */
    reviews: ProductReviews;
    /** A value such as Sr., Jr., or III */
    suffix?: Maybe<Scalars['String']>;
    /** The customer's Value-added tax (VAT) number (for corporate customers) */
    taxvat?: Maybe<Scalars['String']>;
    /**
     * Contains a customer's wish lists
     * @deprecated Use `Customer.wishlists` or `Customer.wishlist_v2`
     */
    wishlist: Wishlist;
    /** Retrieve the specified wish list identified by the unique ID for a `Wishlist` object */
    wishlist_v2?: Maybe<Wishlist>;
    /** An array of wishlists. In Magento Open Source, customers are limited to one wish list. The number of wish lists is configurable for Magento Commerce */
    wishlists: Array<Maybe<Wishlist>>;
};
/** Customer defines the customer name and address and other details */
export declare type CustomerordersArgs = {
    filter?: Maybe<CustomerOrdersFilterInput>;
    currentPage?: Maybe<Scalars['Int']>;
    pageSize?: Maybe<Scalars['Int']>;
};
/** Customer defines the customer name and address and other details */
export declare type CustomerreviewsArgs = {
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
};
/** Customer defines the customer name and address and other details */
export declare type Customerwishlist_v2Args = {
    id: Scalars['ID'];
};
/** Customer defines the customer name and address and other details */
export declare type CustomerwishlistsArgs = {
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
};
/** CustomerAddress contains detailed information about a customer's billing and shipping addresses */
export declare type CustomerAddress = {
    /** The city or town */
    city?: Maybe<Scalars['String']>;
    /** The customer's company */
    company?: Maybe<Scalars['String']>;
    /** The customer's country */
    country_code?: Maybe<CountryCodeEnum>;
    /**
     * The customer's country
     * @deprecated Use `country_code` instead.
     */
    country_id?: Maybe<Scalars['String']>;
    /** @deprecated Custom attributes should not be put into container */
    custom_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>;
    /**
     * The customer ID
     * @deprecated customer_id is not needed as part of CustomerAddress, address ID (id) is unique identifier for the addresses.
     */
    customer_id?: Maybe<Scalars['Int']>;
    /** Indicates whether the address is the default billing address */
    default_billing?: Maybe<Scalars['Boolean']>;
    /** Indicates whether the address is the default shipping address */
    default_shipping?: Maybe<Scalars['Boolean']>;
    /** Address extension attributes */
    extension_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>;
    /** The fax number */
    fax?: Maybe<Scalars['String']>;
    /** The first name of the person associated with the shipping/billing address */
    firstname?: Maybe<Scalars['String']>;
    /** The ID assigned to the address object */
    id?: Maybe<Scalars['Int']>;
    /** The family name of the person associated with the shipping/billing address */
    lastname?: Maybe<Scalars['String']>;
    /** The middle name of the person associated with the shipping/billing address */
    middlename?: Maybe<Scalars['String']>;
    /** The customer's ZIP or postal code */
    postcode?: Maybe<Scalars['String']>;
    /** An honorific, such as Dr., Mr., or Mrs. */
    prefix?: Maybe<Scalars['String']>;
    /** An object containing the region name, region code, and region ID */
    region?: Maybe<CustomerAddressRegion>;
    /** The unique ID for a pre-defined region */
    region_id?: Maybe<Scalars['Int']>;
    /** An array of strings that define the street number and name */
    street?: Maybe<Array<Maybe<Scalars['String']>>>;
    /** A value such as Sr., Jr., or III */
    suffix?: Maybe<Scalars['String']>;
    /** The telephone number */
    telephone?: Maybe<Scalars['String']>;
    /** The customer's Value-added tax (VAT) number (for corporate customers) */
    vat_id?: Maybe<Scalars['String']>;
};
/** The list of countries codes */
export declare enum CountryCodeEnum {
    /** Afghanistan */
    AF = "AF",
    /** Åland Islands */
    AX = "AX",
    /** Albania */
    AL = "AL",
    /** Algeria */
    DZ = "DZ",
    /** American Samoa */
    AS = "AS",
    /** Andorra */
    AD = "AD",
    /** Angola */
    AO = "AO",
    /** Anguilla */
    AI = "AI",
    /** Antarctica */
    AQ = "AQ",
    /** Antigua & Barbuda */
    AG = "AG",
    /** Argentina */
    AR = "AR",
    /** Armenia */
    AM = "AM",
    /** Aruba */
    AW = "AW",
    /** Australia */
    AU = "AU",
    /** Austria */
    AT = "AT",
    /** Azerbaijan */
    AZ = "AZ",
    /** Bahamas */
    BS = "BS",
    /** Bahrain */
    BH = "BH",
    /** Bangladesh */
    BD = "BD",
    /** Barbados */
    BB = "BB",
    /** Belarus */
    BY = "BY",
    /** Belgium */
    BE = "BE",
    /** Belize */
    BZ = "BZ",
    /** Benin */
    BJ = "BJ",
    /** Bermuda */
    BM = "BM",
    /** Bhutan */
    BT = "BT",
    /** Bolivia */
    BO = "BO",
    /** Bosnia & Herzegovina */
    BA = "BA",
    /** Botswana */
    BW = "BW",
    /** Bouvet Island */
    BV = "BV",
    /** Brazil */
    BR = "BR",
    /** British Indian Ocean Territory */
    IO = "IO",
    /** British Virgin Islands */
    VG = "VG",
    /** Brunei */
    BN = "BN",
    /** Bulgaria */
    BG = "BG",
    /** Burkina Faso */
    BF = "BF",
    /** Burundi */
    BI = "BI",
    /** Cambodia */
    KH = "KH",
    /** Cameroon */
    CM = "CM",
    /** Canada */
    CA = "CA",
    /** Cape Verde */
    CV = "CV",
    /** Cayman Islands */
    KY = "KY",
    /** Central African Republic */
    CF = "CF",
    /** Chad */
    TD = "TD",
    /** Chile */
    CL = "CL",
    /** China */
    CN = "CN",
    /** Christmas Island */
    CX = "CX",
    /** Cocos (Keeling) Islands */
    CC = "CC",
    /** Colombia */
    CO = "CO",
    /** Comoros */
    KM = "KM",
    /** Congo-Brazzaville */
    CG = "CG",
    /** Congo-Kinshasa */
    CD = "CD",
    /** Cook Islands */
    CK = "CK",
    /** Costa Rica */
    CR = "CR",
    /** Côte d’Ivoire */
    CI = "CI",
    /** Croatia */
    HR = "HR",
    /** Cuba */
    CU = "CU",
    /** Cyprus */
    CY = "CY",
    /** Czech Republic */
    CZ = "CZ",
    /** Denmark */
    DK = "DK",
    /** Djibouti */
    DJ = "DJ",
    /** Dominica */
    DM = "DM",
    /** Dominican Republic */
    DO = "DO",
    /** Ecuador */
    EC = "EC",
    /** Egypt */
    EG = "EG",
    /** El Salvador */
    SV = "SV",
    /** Equatorial Guinea */
    GQ = "GQ",
    /** Eritrea */
    ER = "ER",
    /** Estonia */
    EE = "EE",
    /** Ethiopia */
    ET = "ET",
    /** Falkland Islands */
    FK = "FK",
    /** Faroe Islands */
    FO = "FO",
    /** Fiji */
    FJ = "FJ",
    /** Finland */
    FI = "FI",
    /** France */
    FR = "FR",
    /** French Guiana */
    GF = "GF",
    /** French Polynesia */
    PF = "PF",
    /** French Southern Territories */
    TF = "TF",
    /** Gabon */
    GA = "GA",
    /** Gambia */
    GM = "GM",
    /** Georgia */
    GE = "GE",
    /** Germany */
    DE = "DE",
    /** Ghana */
    GH = "GH",
    /** Gibraltar */
    GI = "GI",
    /** Greece */
    GR = "GR",
    /** Greenland */
    GL = "GL",
    /** Grenada */
    GD = "GD",
    /** Guadeloupe */
    GP = "GP",
    /** Guam */
    GU = "GU",
    /** Guatemala */
    GT = "GT",
    /** Guernsey */
    GG = "GG",
    /** Guinea */
    GN = "GN",
    /** Guinea-Bissau */
    GW = "GW",
    /** Guyana */
    GY = "GY",
    /** Haiti */
    HT = "HT",
    /** Heard &amp; McDonald Islands */
    HM = "HM",
    /** Honduras */
    HN = "HN",
    /** Hong Kong SAR China */
    HK = "HK",
    /** Hungary */
    HU = "HU",
    /** Iceland */
    IS = "IS",
    /** India */
    IN = "IN",
    /** Indonesia */
    ID = "ID",
    /** Iran */
    IR = "IR",
    /** Iraq */
    IQ = "IQ",
    /** Ireland */
    IE = "IE",
    /** Isle of Man */
    IM = "IM",
    /** Israel */
    IL = "IL",
    /** Italy */
    IT = "IT",
    /** Jamaica */
    JM = "JM",
    /** Japan */
    JP = "JP",
    /** Jersey */
    JE = "JE",
    /** Jordan */
    JO = "JO",
    /** Kazakhstan */
    KZ = "KZ",
    /** Kenya */
    KE = "KE",
    /** Kiribati */
    KI = "KI",
    /** Kuwait */
    KW = "KW",
    /** Kyrgyzstan */
    KG = "KG",
    /** Laos */
    LA = "LA",
    /** Latvia */
    LV = "LV",
    /** Lebanon */
    LB = "LB",
    /** Lesotho */
    LS = "LS",
    /** Liberia */
    LR = "LR",
    /** Libya */
    LY = "LY",
    /** Liechtenstein */
    LI = "LI",
    /** Lithuania */
    LT = "LT",
    /** Luxembourg */
    LU = "LU",
    /** Macau SAR China */
    MO = "MO",
    /** Macedonia */
    MK = "MK",
    /** Madagascar */
    MG = "MG",
    /** Malawi */
    MW = "MW",
    /** Malaysia */
    MY = "MY",
    /** Maldives */
    MV = "MV",
    /** Mali */
    ML = "ML",
    /** Malta */
    MT = "MT",
    /** Marshall Islands */
    MH = "MH",
    /** Martinique */
    MQ = "MQ",
    /** Mauritania */
    MR = "MR",
    /** Mauritius */
    MU = "MU",
    /** Mayotte */
    YT = "YT",
    /** Mexico */
    MX = "MX",
    /** Micronesia */
    FM = "FM",
    /** Moldova */
    MD = "MD",
    /** Monaco */
    MC = "MC",
    /** Mongolia */
    MN = "MN",
    /** Montenegro */
    ME = "ME",
    /** Montserrat */
    MS = "MS",
    /** Morocco */
    MA = "MA",
    /** Mozambique */
    MZ = "MZ",
    /** Myanmar (Burma) */
    MM = "MM",
    /** Namibia */
    NA = "NA",
    /** Nauru */
    NR = "NR",
    /** Nepal */
    NP = "NP",
    /** Netherlands */
    NL = "NL",
    /** Netherlands Antilles */
    AN = "AN",
    /** New Caledonia */
    NC = "NC",
    /** New Zealand */
    NZ = "NZ",
    /** Nicaragua */
    NI = "NI",
    /** Niger */
    NE = "NE",
    /** Nigeria */
    NG = "NG",
    /** Niue */
    NU = "NU",
    /** Norfolk Island */
    NF = "NF",
    /** Northern Mariana Islands */
    MP = "MP",
    /** North Korea */
    KP = "KP",
    /** Norway */
    NO = "NO",
    /** Oman */
    OM = "OM",
    /** Pakistan */
    PK = "PK",
    /** Palau */
    PW = "PW",
    /** Palestinian Territories */
    PS = "PS",
    /** Panama */
    PA = "PA",
    /** Papua New Guinea */
    PG = "PG",
    /** Paraguay */
    PY = "PY",
    /** Peru */
    PE = "PE",
    /** Philippines */
    PH = "PH",
    /** Pitcairn Islands */
    PN = "PN",
    /** Poland */
    PL = "PL",
    /** Portugal */
    PT = "PT",
    /** Qatar */
    QA = "QA",
    /** Réunion */
    RE = "RE",
    /** Romania */
    RO = "RO",
    /** Russia */
    RU = "RU",
    /** Rwanda */
    RW = "RW",
    /** Samoa */
    WS = "WS",
    /** San Marino */
    SM = "SM",
    /** São Tomé & Príncipe */
    ST = "ST",
    /** Saudi Arabia */
    SA = "SA",
    /** Senegal */
    SN = "SN",
    /** Serbia */
    RS = "RS",
    /** Seychelles */
    SC = "SC",
    /** Sierra Leone */
    SL = "SL",
    /** Singapore */
    SG = "SG",
    /** Slovakia */
    SK = "SK",
    /** Slovenia */
    SI = "SI",
    /** Solomon Islands */
    SB = "SB",
    /** Somalia */
    SO = "SO",
    /** South Africa */
    ZA = "ZA",
    /** South Georgia & South Sandwich Islands */
    GS = "GS",
    /** South Korea */
    KR = "KR",
    /** Spain */
    ES = "ES",
    /** Sri Lanka */
    LK = "LK",
    /** St. Barthélemy */
    BL = "BL",
    /** St. Helena */
    SH = "SH",
    /** St. Kitts & Nevis */
    KN = "KN",
    /** St. Lucia */
    LC = "LC",
    /** St. Martin */
    MF = "MF",
    /** St. Pierre & Miquelon */
    PM = "PM",
    /** St. Vincent & Grenadines */
    VC = "VC",
    /** Sudan */
    SD = "SD",
    /** Suriname */
    SR = "SR",
    /** Svalbard & Jan Mayen */
    SJ = "SJ",
    /** Swaziland */
    SZ = "SZ",
    /** Sweden */
    SE = "SE",
    /** Switzerland */
    CH = "CH",
    /** Syria */
    SY = "SY",
    /** Taiwan */
    TW = "TW",
    /** Tajikistan */
    TJ = "TJ",
    /** Tanzania */
    TZ = "TZ",
    /** Thailand */
    TH = "TH",
    /** Timor-Leste */
    TL = "TL",
    /** Togo */
    TG = "TG",
    /** Tokelau */
    TK = "TK",
    /** Tonga */
    TO = "TO",
    /** Trinidad & Tobago */
    TT = "TT",
    /** Tunisia */
    TN = "TN",
    /** Turkey */
    TR = "TR",
    /** Turkmenistan */
    TM = "TM",
    /** Turks & Caicos Islands */
    TC = "TC",
    /** Tuvalu */
    TV = "TV",
    /** Uganda */
    UG = "UG",
    /** Ukraine */
    UA = "UA",
    /** United Arab Emirates */
    AE = "AE",
    /** United Kingdom */
    GB = "GB",
    /** United States */
    US = "US",
    /** Uruguay */
    UY = "UY",
    /** U.S. Outlying Islands */
    UM = "UM",
    /** U.S. Virgin Islands */
    VI = "VI",
    /** Uzbekistan */
    UZ = "UZ",
    /** Vanuatu */
    VU = "VU",
    /** Vatican City */
    VA = "VA",
    /** Venezuela */
    VE = "VE",
    /** Vietnam */
    VN = "VN",
    /** Wallis & Futuna */
    WF = "WF",
    /** Western Sahara */
    EH = "EH",
    /** Yemen */
    YE = "YE",
    /** Zambia */
    ZM = "ZM",
    /** Zimbabwe */
    ZW = "ZW"
}
export declare type CustomerAddressAttribute = {
    /** Attribute code */
    attribute_code?: Maybe<Scalars['String']>;
    /** Attribute value */
    value?: Maybe<Scalars['String']>;
};
/** CustomerAddressRegion defines the customer's state or province */
export declare type CustomerAddressRegion = {
    /** The state or province name */
    region?: Maybe<Scalars['String']>;
    /** The address region code */
    region_code?: Maybe<Scalars['String']>;
    /** The unique ID for a pre-defined region */
    region_id?: Maybe<Scalars['Int']>;
};
/** Identifies the filter to use for filtering orders. */
export declare type CustomerOrdersFilterInput = {
    /** Filters by order number. */
    number?: Maybe<FilterStringTypeInput>;
};
/** Defines a filter for an input string. */
export declare type FilterStringTypeInput = {
    /** Filters items that are exactly the same as the specified string. */
    eq?: Maybe<Scalars['String']>;
    /** Filters items that are exactly the same as entries specified in an array of strings. */
    in?: Maybe<Array<Maybe<Scalars['String']>>>;
    /** Defines a filter that performs a fuzzy search using the specified string. */
    match?: Maybe<Scalars['String']>;
};
/** The collection of orders that match the conditions defined in the filter */
export declare type CustomerOrders = {
    /** An array of customer orders */
    items: Array<Maybe<CustomerOrder>>;
    /** An object that includes the current_page, page_info, and page_size values specified in the query */
    page_info?: Maybe<SearchResultPageInfo>;
    /** The total count of customer orders */
    total_count?: Maybe<Scalars['Int']>;
};
/** Contains details about each of the customer's orders */
export declare type CustomerOrder = {
    /** The billing address for the order */
    billing_address?: Maybe<OrderAddress>;
    /** The shipping carrier for the order delivery */
    carrier?: Maybe<Scalars['String']>;
    /** Comments about the order */
    comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
    /** @deprecated Use the order_date attribute instead */
    created_at?: Maybe<Scalars['String']>;
    /** A list of credit memos */
    credit_memos?: Maybe<Array<Maybe<CreditMemo>>>;
    /** The entered gift message for the order */
    gift_message?: Maybe<GiftMessage>;
    /** @deprecated Use the totals.grand_total attribute instead */
    grand_total?: Maybe<Scalars['Float']>;
    /** The unique ID for a `CustomerOrder` object */
    id: Scalars['ID'];
    /** @deprecated Use the id attribute instead */
    increment_id?: Maybe<Scalars['String']>;
    /** A list of invoices for the order */
    invoices: Array<Maybe<Invoice>>;
    /** An array containing the items purchased in this order */
    items?: Maybe<Array<Maybe<OrderItemInterface>>>;
    /** The order number */
    number: Scalars['String'];
    /** The date the order was placed */
    order_date: Scalars['String'];
    /** @deprecated Use the number attribute instead */
    order_number: Scalars['String'];
    /** Payment details for the order */
    payment_methods?: Maybe<Array<Maybe<OrderPaymentMethod>>>;
    /** A list of shipments for the order */
    shipments?: Maybe<Array<Maybe<OrderShipment>>>;
    /** The shipping address for the order */
    shipping_address?: Maybe<OrderAddress>;
    /** The delivery method for the order */
    shipping_method?: Maybe<Scalars['String']>;
    /** The current status of the order */
    status: Scalars['String'];
    /** Contains details about the calculated totals for this order */
    total?: Maybe<OrderTotal>;
};
/** OrderAddress contains detailed information about an order's billing and shipping addresses */
export declare type OrderAddress = {
    /** The city or town */
    city: Scalars['String'];
    /** The customer's company */
    company?: Maybe<Scalars['String']>;
    /** The customer's country */
    country_code?: Maybe<CountryCodeEnum>;
    /** The fax number */
    fax?: Maybe<Scalars['String']>;
    /** The first name of the person associated with the shipping/billing address */
    firstname: Scalars['String'];
    /** The family name of the person associated with the shipping/billing address */
    lastname: Scalars['String'];
    /** The middle name of the person associated with the shipping/billing address */
    middlename?: Maybe<Scalars['String']>;
    /** The customer's order ZIP or postal code */
    postcode?: Maybe<Scalars['String']>;
    /** An honorific, such as Dr., Mr., or Mrs. */
    prefix?: Maybe<Scalars['String']>;
    /** The state or province name */
    region?: Maybe<Scalars['String']>;
    /** The unique ID for a `Region` object of a pre-defined region */
    region_id?: Maybe<Scalars['ID']>;
    /** An array of strings that define the street number and name */
    street: Array<Maybe<Scalars['String']>>;
    /** A value such as Sr., Jr., or III */
    suffix?: Maybe<Scalars['String']>;
    /** The telephone number */
    telephone: Scalars['String'];
    /** The customer's Value-added tax (VAT) number (for corporate customers) */
    vat_id?: Maybe<Scalars['String']>;
};
/** Comment item details */
export declare type SalesCommentItem = {
    /** The text of the message */
    message: Scalars['String'];
    /** The timestamp of the comment */
    timestamp: Scalars['String'];
};
/** Credit memo details */
export declare type CreditMemo = {
    /** Comments on the credit memo */
    comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
    /** The unique ID for a `CreditMemo` object */
    id: Scalars['ID'];
    /** An array containing details about refunded items */
    items?: Maybe<Array<Maybe<CreditMemoItemInterface>>>;
    /** The sequential credit memo number */
    number: Scalars['String'];
    /** Contains details about the total refunded amount */
    total?: Maybe<CreditMemoTotal>;
};
/** Credit memo item details */
export declare type CreditMemoItemInterface = {
    /** Contains information about the final discount amount for the base product, including discounts on options */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** The unique ID for a `CreditMemoItemInterface` object */
    id: Scalars['ID'];
    /** The order item the credit memo is applied to */
    order_item?: Maybe<OrderItemInterface>;
    /** The name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** The sale price for the base product, including selected options */
    product_sale_price: Money;
    /** SKU of the base product */
    product_sku: Scalars['String'];
    /** The number of refunded items */
    quantity_refunded?: Maybe<Scalars['Float']>;
};
/** Order item details */
export declare type OrderItemInterface = {
    /** The final discount information for the product */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** The entered option for the base product, such as a logo or image */
    entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
    /** The unique ID for a `OrderItemInterface` object */
    id: Scalars['ID'];
    /** The name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** The sale price of the base product, including selected options */
    product_sale_price: Money;
    /** The SKU of the base product */
    product_sku: Scalars['String'];
    /** The type of product, such as simple, configurable, etc. */
    product_type?: Maybe<Scalars['String']>;
    /** URL key of the base product */
    product_url_key?: Maybe<Scalars['String']>;
    /** The number of canceled items */
    quantity_canceled?: Maybe<Scalars['Float']>;
    /** The number of invoiced items */
    quantity_invoiced?: Maybe<Scalars['Float']>;
    /** The number of units ordered for this item */
    quantity_ordered?: Maybe<Scalars['Float']>;
    /** The number of refunded items */
    quantity_refunded?: Maybe<Scalars['Float']>;
    /** The number of returned items */
    quantity_returned?: Maybe<Scalars['Float']>;
    /** The number of shipped items */
    quantity_shipped?: Maybe<Scalars['Float']>;
    /** The selected options for the base product, such as color or size */
    selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
    /** The status of the order item */
    status?: Maybe<Scalars['String']>;
};
/** Represents order item options like selected or entered */
export declare type OrderItemOption = {
    /** The name of the option */
    label: Scalars['String'];
    /** The value of the option */
    value: Scalars['String'];
};
/** Credit memo price details */
export declare type CreditMemoTotal = {
    /** An adjustment manually applied to the order */
    adjustment: Money;
    /** The final base grand total amount in the base currency */
    base_grand_total: Money;
    /** The applied discounts to the credit memo */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** The final total amount, including shipping, discounts, and taxes */
    grand_total: Money;
    /** Contains details about the shipping and handling costs for the credit memo */
    shipping_handling?: Maybe<ShippingHandling>;
    /** The subtotal of the invoice, excluding shipping, discounts, and taxes */
    subtotal: Money;
    /** The credit memo tax details */
    taxes?: Maybe<Array<Maybe<TaxItem>>>;
    /** The shipping amount for the credit memo */
    total_shipping: Money;
    /** The amount of tax applied to the credit memo */
    total_tax: Money;
};
/** The Shipping handling details */
export declare type ShippingHandling = {
    /** The shipping amount, excluding tax */
    amount_excluding_tax?: Maybe<Money>;
    /** The shipping amount, including tax */
    amount_including_tax?: Maybe<Money>;
    /** The applied discounts to the shipping */
    discounts?: Maybe<Array<Maybe<ShippingDiscount>>>;
    /** Contains details about taxes applied for shipping */
    taxes?: Maybe<Array<Maybe<TaxItem>>>;
    /** The total amount for shipping */
    total_amount: Money;
};
/** Defines an individual shipping discount. This discount can be applied to shipping. */
export declare type ShippingDiscount = {
    /** The amount of the discount */
    amount: Money;
};
/** The tax item details */
export declare type TaxItem = {
    /** The amount of tax applied to the item */
    amount: Money;
    /** The rate used to calculate the tax */
    rate: Scalars['Float'];
    /** A title that describes the tax */
    title: Scalars['String'];
};
/** Invoice details */
export declare type Invoice = {
    /** Comments on the invoice */
    comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
    /** The unique ID for a `Invoice` object */
    id: Scalars['ID'];
    /** Invoiced product details */
    items?: Maybe<Array<Maybe<InvoiceItemInterface>>>;
    /** Sequential invoice number */
    number: Scalars['String'];
    /** Invoice total amount details */
    total?: Maybe<InvoiceTotal>;
};
/** Invoice item details */
export declare type InvoiceItemInterface = {
    /** Contains information about the final discount amount for the base product, including discounts on options */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** The unique ID for a `InvoiceItemInterface` object */
    id: Scalars['ID'];
    /** Contains details about an individual order item */
    order_item?: Maybe<OrderItemInterface>;
    /** The name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** The sale price for the base product including selected options */
    product_sale_price: Money;
    /** The SKU of the base product */
    product_sku: Scalars['String'];
    /** The number of invoiced items */
    quantity_invoiced?: Maybe<Scalars['Float']>;
};
/** Contains price details from an invoice */
export declare type InvoiceTotal = {
    /** The final base grand total amount in the base currency */
    base_grand_total: Money;
    /** The applied discounts to the invoice */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** The final total amount, including shipping, discounts, and taxes */
    grand_total: Money;
    /** Contains details about the shipping and handling costs for the invoice */
    shipping_handling?: Maybe<ShippingHandling>;
    /** The subtotal of the invoice, excluding shipping, discounts, and taxes */
    subtotal: Money;
    /** The invoice tax details */
    taxes?: Maybe<Array<Maybe<TaxItem>>>;
    /** The shipping amount for the invoice */
    total_shipping: Money;
    /** The amount of tax applied to the invoice */
    total_tax: Money;
};
/** Contains details about the payment method used to pay for the order */
export declare type OrderPaymentMethod = {
    /** Additional data per payment method type */
    additional_data?: Maybe<Array<Maybe<KeyValue>>>;
    /** The label that describes the payment method */
    name: Scalars['String'];
    /** The payment method code that indicates how the order was paid for */
    type: Scalars['String'];
};
/** The key-value type */
export declare type KeyValue = {
    /** The name part of the name/value pair */
    name?: Maybe<Scalars['String']>;
    /** The value part of the name/value pair */
    value?: Maybe<Scalars['String']>;
};
/** Order shipment details */
export declare type OrderShipment = {
    /** Comments added to the shipment */
    comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
    /** The unique ID for a `OrderShipment` object */
    id: Scalars['ID'];
    /** Contains items included in the shipment */
    items?: Maybe<Array<Maybe<ShipmentItemInterface>>>;
    /** The sequential credit shipment number */
    number: Scalars['String'];
    /** Contains shipment tracking details */
    tracking?: Maybe<Array<Maybe<ShipmentTracking>>>;
};
/** Order shipment item details */
export declare type ShipmentItemInterface = {
    /** The unique ID for a `ShipmentItemInterface` object */
    id: Scalars['ID'];
    /** Associated order item */
    order_item?: Maybe<OrderItemInterface>;
    /** Name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** Sale price for the base product */
    product_sale_price: Money;
    /** SKU of the base product */
    product_sku: Scalars['String'];
    /** Number of shipped items */
    quantity_shipped: Scalars['Float'];
};
/** Order shipment tracking details */
export declare type ShipmentTracking = {
    /** The shipping carrier for the order delivery */
    carrier: Scalars['String'];
    /** The tracking number of the order shipment */
    number?: Maybe<Scalars['String']>;
    /** The shipment tracking title */
    title: Scalars['String'];
};
/** Contains details about the sales total amounts used to calculate the final price */
export declare type OrderTotal = {
    /** The final base grand total amount in the base currency */
    base_grand_total: Money;
    /** The applied discounts to the order */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** The final total amount, including shipping, discounts, and taxes */
    grand_total: Money;
    /** Contains details about the shipping and handling costs for the order */
    shipping_handling?: Maybe<ShippingHandling>;
    /** The subtotal of the order, excluding shipping, discounts, and taxes */
    subtotal: Money;
    /** The order tax details */
    taxes?: Maybe<Array<Maybe<TaxItem>>>;
    /** The shipping amount for the order */
    total_shipping: Money;
    /** The amount of tax applied to the order */
    total_tax: Money;
};
export declare type Wishlist = {
    /** The unique ID for a `Wishlist` object */
    id?: Maybe<Scalars['ID']>;
    /** @deprecated Use field `items_v2` from type `Wishlist` instead */
    items?: Maybe<Array<Maybe<WishlistItem>>>;
    /** The number of items in the wish list */
    items_count?: Maybe<Scalars['Int']>;
    /** An array of items in the customer's wish list */
    items_v2?: Maybe<WishlistItems>;
    /** An encrypted code that Magento uses to link to the wish list */
    sharing_code?: Maybe<Scalars['String']>;
    /** The time of the last modification to the wish list */
    updated_at?: Maybe<Scalars['String']>;
};
export declare type Wishlistitems_v2Args = {
    currentPage?: Maybe<Scalars['Int']>;
    pageSize?: Maybe<Scalars['Int']>;
};
export declare type WishlistItem = {
    /** The time when the customer added the item to the wish list */
    added_at?: Maybe<Scalars['String']>;
    /** The customer's comment about this item */
    description?: Maybe<Scalars['String']>;
    /** The unique ID for a `WishlistItem` object */
    id?: Maybe<Scalars['Int']>;
    product?: Maybe<ProductInterface>;
    /** The quantity of this wish list item */
    qty?: Maybe<Scalars['Float']>;
};
export declare type WishlistItems = {
    /** A list of items in the wish list */
    items: Array<Maybe<WishlistItemInterface>>;
    /** Contains pagination metadata */
    page_info?: Maybe<SearchResultPageInfo>;
};
export declare type WishlistItemInterface = {
    /** The date and time the item was added to the wish list */
    added_at: Scalars['String'];
    /** Custom options selected for the wish list item */
    customizable_options: Array<Maybe<SelectedCustomizableOption>>;
    /** The description of the item */
    description?: Maybe<Scalars['String']>;
    /** The unique ID for a `WishlistItemInterface` object */
    id: Scalars['ID'];
    /** Product details of the wish list item */
    product?: Maybe<ProductInterface>;
    /** The quantity of this wish list item */
    quantity: Scalars['Float'];
};
export declare type SelectedCustomizableOption = {
    /** The unique ID for a `CustomizableRadioOption`, `CustomizableDropDownOption`, `CustomizableMultipleOption`, etc. of `CustomizableOptionInterface` objects */
    customizable_option_uid: Scalars['ID'];
    /** @deprecated Use SelectedCustomizableOption.customizable_option_uid instead */
    id: Scalars['Int'];
    is_required: Scalars['Boolean'];
    label: Scalars['String'];
    sort_order: Scalars['Int'];
    type: Scalars['String'];
    values: Array<Maybe<SelectedCustomizableOptionValue>>;
};
export declare type SelectedCustomizableOptionValue = {
    /** The unique ID for a `CustomizableMultipleValue`, `CustomizableRadioValue`, `CustomizableCheckboxValue`, `CustomizableDropDownValue`, etc. objects */
    customizable_option_value_uid: Scalars['ID'];
    /** @deprecated Use SelectedCustomizableOptionValue.customizable_option_value_uid instead */
    id: Scalars['Int'];
    label: Scalars['String'];
    price: CartItemSelectedOptionValuePrice;
    value: Scalars['String'];
};
export declare type CartItemSelectedOptionValuePrice = {
    type: PriceTypeEnum;
    units: Scalars['String'];
    value: Scalars['Float'];
};
/** This enumeration the price type. */
export declare enum PriceTypeEnum {
    FIXED = "FIXED",
    PERCENT = "PERCENT",
    DYNAMIC = "DYNAMIC"
}
export declare type CustomerDownloadableProducts = {
    /** List of purchased downloadable items */
    items?: Maybe<Array<Maybe<CustomerDownloadableProduct>>>;
};
export declare type CustomerDownloadableProduct = {
    date?: Maybe<Scalars['String']>;
    download_url?: Maybe<Scalars['String']>;
    order_increment_id?: Maybe<Scalars['String']>;
    remaining_downloads?: Maybe<Scalars['String']>;
    status?: Maybe<Scalars['String']>;
};
export declare type CustomerPaymentTokens = {
    /** An array of payment tokens */
    items: Array<Maybe<PaymentToken>>;
};
/** The stored payment method available to the customer */
export declare type PaymentToken = {
    /** Stored account details */
    details?: Maybe<Scalars['String']>;
    /** The payment method code associated with the token */
    payment_method_code: Scalars['String'];
    /** The public hash of the token */
    public_hash: Scalars['String'];
    type: PaymentTokenTypeEnum;
};
/** The list of available payment token types */
export declare enum PaymentTokenTypeEnum {
    card = "card",
    account = "account"
}
/** The required input to request the secure URL for Payments Pro Hosted Solution payment. */
export declare type HostedProUrlInput = {
    /** The unique ID that identifies the customer's cart */
    cart_id: Scalars['String'];
};
/** Contains secure URL used for Payments Pro Hosted Solution payment method. */
export declare type HostedProUrl = {
    /** Secure Url generated by PayPal */
    secure_form_url?: Maybe<Scalars['String']>;
};
/** Input required to fetch payment token information for Payflow Link and Payments Advanced payment methods. */
export declare type PayflowLinkTokenInput = {
    /** The unique ID that identifies the customer's cart */
    cart_id: Scalars['String'];
};
/** Contains information used to generate PayPal iframe for transaction. Applies to Payflow Link and Payments Advanced payment methods. */
export declare type PayflowLinkToken = {
    /** Mode for Payflow transaction */
    mode?: Maybe<PayflowLinkMode>;
    /** PayPal URL used for requesting Payflow form */
    paypal_url?: Maybe<Scalars['String']>;
    /** Secure token generated by PayPal */
    secure_token?: Maybe<Scalars['String']>;
    /** Secure token ID generated by PayPal */
    secure_token_id?: Maybe<Scalars['String']>;
};
/** Mode for payment: TEST or LIVE. Applies to Payflow Link and Payments Advanced payment methods. */
export declare enum PayflowLinkMode {
    TEST = "TEST",
    LIVE = "LIVE"
}
export declare type IsEmailAvailableOutput = {
    /** Is email availabel value */
    is_email_available?: Maybe<Scalars['Boolean']>;
};
export declare type MolliePaymentMethodsInput = {
    amount: Scalars['Float'];
    currency: Scalars['String'];
};
export declare type MolliePaymentMethodsOutput = {
    methods?: Maybe<Array<Maybe<MolliePaymentMethod>>>;
};
export declare type MolliePaymentMethod = {
    code?: Maybe<Scalars['String']>;
    image?: Maybe<Scalars['String']>;
    name?: Maybe<Scalars['String']>;
};
/** AreaInput defines the parameters which will be used for filter by specified location. */
export declare type AreaInput = {
    /** The radius for the search in KM. */
    radius: Scalars['Int'];
    /** The country code where search must be performed. Required parameter together with region, city or postcode. */
    search_term: Scalars['String'];
};
/** PickupLocationFilterInput defines the list of attributes and filters for the search. */
export declare type PickupLocationFilterInput = {
    /** Filter by city. */
    city?: Maybe<FilterTypeInput>;
    /** Filter by country. */
    country_id?: Maybe<FilterTypeInput>;
    /** Filter by pickup location name. */
    name?: Maybe<FilterTypeInput>;
    /** Filter by pickup location code. */
    pickup_location_code?: Maybe<FilterTypeInput>;
    /** Filter by postcode. */
    postcode?: Maybe<FilterTypeInput>;
    /** Filter by region. */
    region?: Maybe<FilterTypeInput>;
    /** Filter by region id. */
    region_id?: Maybe<FilterTypeInput>;
    /** Filter by street. */
    street?: Maybe<FilterTypeInput>;
};
/** FilterTypeInput specifies which action will be performed in a query  */
export declare type FilterTypeInput = {
    /** Equals */
    eq?: Maybe<Scalars['String']>;
    finset?: Maybe<Array<Maybe<Scalars['String']>>>;
    /** From. Must be used with 'to' */
    from?: Maybe<Scalars['String']>;
    /** Greater than */
    gt?: Maybe<Scalars['String']>;
    /** Greater than or equal to */
    gteq?: Maybe<Scalars['String']>;
    /** In. The value can contain a set of comma-separated values */
    in?: Maybe<Array<Maybe<Scalars['String']>>>;
    /** Like. The specified value can contain % (percent signs) to allow matching of 0 or more characters */
    like?: Maybe<Scalars['String']>;
    /** Less than */
    lt?: Maybe<Scalars['String']>;
    /** Less than or equal to */
    lteq?: Maybe<Scalars['String']>;
    /** More than or equal to */
    moreq?: Maybe<Scalars['String']>;
    /** Not equal to */
    neq?: Maybe<Scalars['String']>;
    /** Not in. The value can contain a set of comma-separated values */
    nin?: Maybe<Array<Maybe<Scalars['String']>>>;
    /** Not null */
    notnull?: Maybe<Scalars['String']>;
    /** Is null */
    null?: Maybe<Scalars['String']>;
    /** To. Must be used with 'from' */
    to?: Maybe<Scalars['String']>;
};
/** PickupLocationSortInput specifies attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export declare type PickupLocationSortInput = {
    /** City where pickup location is placed. */
    city?: Maybe<SortEnum>;
    /** Name of the contact person. */
    contact_name?: Maybe<SortEnum>;
    /** Id of the country in two letters. */
    country_id?: Maybe<SortEnum>;
    /** Description of the pickup location. */
    description?: Maybe<SortEnum>;
    /** Distance to the address, requested by distance filter. Applicable only with distance filter. If distance sort order is present, all other sort orders will be ignored. */
    distance?: Maybe<SortEnum>;
    /** Contact email of the pickup location. */
    email?: Maybe<SortEnum>;
    /** Contact fax of the pickup location. */
    fax?: Maybe<SortEnum>;
    /** Geographic latitude where pickup location is placed. */
    latitude?: Maybe<SortEnum>;
    /** Geographic longitude where pickup location is placed. */
    longitude?: Maybe<SortEnum>;
    /** The pickup location name. Customer use this to identify the pickup location. */
    name?: Maybe<SortEnum>;
    /** Contact phone number of the pickup location. */
    phone?: Maybe<SortEnum>;
    /** A code assigned to pickup location to identify the source. */
    pickup_location_code?: Maybe<SortEnum>;
    /** Postcode where pickup location is placed. */
    postcode?: Maybe<SortEnum>;
    /** Name of the region. */
    region?: Maybe<SortEnum>;
    /** Id of the region. */
    region_id?: Maybe<SortEnum>;
    /** Street where pickup location is placed. */
    street?: Maybe<SortEnum>;
};
/** Product Information used for Pickup Locations search. */
export declare type ProductInfoInput = {
    /** Product SKU. */
    sku: Scalars['String'];
};
/** Top level object returned in a pickup locations search. */
export declare type PickupLocations = {
    /** An array of pickup locations that match the specific search request. */
    items?: Maybe<Array<Maybe<PickupLocation>>>;
    /** An object that includes the page_info and currentPage values specified in the query. */
    page_info?: Maybe<SearchResultPageInfo>;
    /** The number of products returned. */
    total_count?: Maybe<Scalars['Int']>;
};
/** Defines Pickup Location information. */
export declare type PickupLocation = {
    city?: Maybe<Scalars['String']>;
    contact_name?: Maybe<Scalars['String']>;
    country_id?: Maybe<Scalars['String']>;
    description?: Maybe<Scalars['String']>;
    email?: Maybe<Scalars['String']>;
    fax?: Maybe<Scalars['String']>;
    latitude?: Maybe<Scalars['Float']>;
    longitude?: Maybe<Scalars['Float']>;
    name?: Maybe<Scalars['String']>;
    phone?: Maybe<Scalars['String']>;
    pickup_location_code?: Maybe<Scalars['String']>;
    postcode?: Maybe<Scalars['String']>;
    region?: Maybe<Scalars['String']>;
    region_id?: Maybe<Scalars['Int']>;
    street?: Maybe<Scalars['String']>;
};
export declare type ProductReviewRatingsMetadata = {
    /** List of product reviews sorted by position */
    items: Array<Maybe<ProductReviewRatingMetadata>>;
};
export declare type ProductReviewRatingMetadata = {
    /** An encoded rating ID. */
    id: Scalars['String'];
    /** The label assigned to an aspect of a product that is being rated, such as quality or price */
    name: Scalars['String'];
    /** List of product review ratings sorted by position. */
    values: Array<Maybe<ProductReviewRatingValueMetadata>>;
};
export declare type ProductReviewRatingValueMetadata = {
    /** A ratings scale, such as the number of stars awarded */
    value: Scalars['String'];
    /** An encoded rating value id. */
    value_id: Scalars['String'];
};
/** ProductAttributeFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export declare type ProductAttributeFilterInput = {
    /** Attribute label: Activity */
    activity?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Category Gear */
    category_gear?: Maybe<FilterEqualTypeInput>;
    /** Deprecated: use `category_uid` to filter product by category id. */
    category_id?: Maybe<FilterEqualTypeInput>;
    /** Filter product by the unique ID for a `CategoryInterface` object. */
    category_uid?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Climate */
    climate?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Collar */
    collar?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Color */
    color?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Colors */
    colors?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Compatible Phones */
    compatible_phones?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Debug: colors */
    debug_colors?: Maybe<FilterMatchTypeInput>;
    /** Attribute label: Debug: labels */
    debug_labels?: Maybe<FilterMatchTypeInput>;
    /** Attribute label: Debug: landmarks */
    debug_landmarks?: Maybe<FilterMatchTypeInput>;
    /** Attribute label: Description */
    description?: Maybe<FilterMatchTypeInput>;
    /** Attribute label: Dominant color */
    dominant_color?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Eco Collection */
    eco_collection?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Erin Recommends */
    erin_recommends?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Features */
    features_bags?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Format */
    format?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Gender */
    gender?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Material */
    material?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Product Name */
    name?: Maybe<FilterMatchTypeInput>;
    /** Attribute label: New */
    new?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Pattern */
    pattern?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Performance Fabric */
    performance_fabric?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Price */
    price?: Maybe<FilterRangeTypeInput>;
    /** Attribute label: Art */
    print_art?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Holiday */
    print_holiday?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Search Labels */
    print_labels?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Search Landmarks */
    print_landmarks?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Landscape */
    print_landscape?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Mood */
    print_mood?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Type */
    print_type?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Sale */
    sale?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Short Description */
    short_description?: Maybe<FilterMatchTypeInput>;
    /** Attribute label: Size */
    size?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: SKU */
    sku?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Sleeve */
    sleeve?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Strap/Handle */
    strap_bags?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Style Bags */
    style_bags?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Style Bottom */
    style_bottom?: Maybe<FilterEqualTypeInput>;
    /** Attribute label: Style General */
    style_general?: Maybe<FilterEqualTypeInput>;
    /** The part of the URL that identifies the product */
    url_key?: Maybe<FilterEqualTypeInput>;
};
/** Defines a filter that matches a range of values, such as prices or dates. */
export declare type FilterRangeTypeInput = {
    /** The beginning of the range */
    from?: Maybe<Scalars['String']>;
    /** The end of the range */
    to?: Maybe<Scalars['String']>;
};
/** The Products object is the top-level object returned in a product search. */
export declare type Products = {
    /** Layered navigation aggregations. */
    aggregations?: Maybe<Array<Maybe<Aggregation>>>;
    /**
     * Layered navigation filters array.
     * @deprecated Use aggregations instead
     */
    filters?: Maybe<Array<Maybe<LayerFilter>>>;
    /** An array of products that match the specified search criteria. */
    items?: Maybe<Array<Maybe<ProductInterface>>>;
    /** An object that includes the page_info and currentPage values specified in the query. */
    page_info?: Maybe<SearchResultPageInfo>;
    /** An object that includes the default sort field and all available sort fields. */
    sort_fields?: Maybe<SortFields>;
    /** The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
    total_count?: Maybe<Scalars['Int']>;
};
/** A bucket that contains information for each filterable option (such as price, category `UID`, and custom attributes). */
export declare type Aggregation = {
    /** Attribute code of the aggregation group. */
    attribute_code: Scalars['String'];
    /** The number of options in the aggregation group. */
    count?: Maybe<Scalars['Int']>;
    /** The aggregation display name. */
    label?: Maybe<Scalars['String']>;
    /** Array of options for the aggregation. */
    options?: Maybe<Array<Maybe<AggregationOption>>>;
};
export declare type AggregationOption = AggregationOptionInterface & {
    /** The number of items that match the aggregation option. */
    count?: Maybe<Scalars['Int']>;
    /** Aggregation option display label. */
    label?: Maybe<Scalars['String']>;
    /** The internal ID that represents the value of the option. */
    value: Scalars['String'];
};
export declare type AggregationOptionInterface = {
    /** The number of items that match the aggregation option. */
    count?: Maybe<Scalars['Int']>;
    /** Aggregation option display label. */
    label?: Maybe<Scalars['String']>;
    /** The internal ID that represents the value of the option. */
    value: Scalars['String'];
};
export declare type LayerFilter = {
    /**
     * Array of filter items.
     * @deprecated Use Aggregation.options instead.
     */
    filter_items?: Maybe<Array<Maybe<LayerFilterItemInterface>>>;
    /**
     * Count of filter items in filter group.
     * @deprecated Use Aggregation.count instead.
     */
    filter_items_count?: Maybe<Scalars['Int']>;
    /**
     * Layered navigation filter name.
     * @deprecated Use Aggregation.label instead.
     */
    name?: Maybe<Scalars['String']>;
    /**
     * Request variable name for filter query.
     * @deprecated Use Aggregation.attribute_code instead.
     */
    request_var?: Maybe<Scalars['String']>;
};
export declare type LayerFilterItemInterface = {
    /**
     * Count of items by filter.
     * @deprecated Use AggregationOption.count instead.
     */
    items_count?: Maybe<Scalars['Int']>;
    /**
     * Filter label.
     * @deprecated Use AggregationOption.label instead.
     */
    label?: Maybe<Scalars['String']>;
    /**
     * Value for filter request variable to be used in query.
     * @deprecated Use AggregationOption.value instead.
     */
    value_string?: Maybe<Scalars['String']>;
};
/** SortFields contains a default value for sort fields and all available sort fields. */
export declare type SortFields = {
    /** Default value of sort fields. */
    default?: Maybe<Scalars['String']>;
    /** Available sort fields. */
    options?: Maybe<Array<Maybe<SortField>>>;
};
export declare type SortField = {
    /** Label of sort field. */
    label?: Maybe<Scalars['String']>;
    /** Attribute code of sort field. */
    value?: Maybe<Scalars['String']>;
};
/** EntityUrl is an output object containing the `id`, `relative_url`, and `type` attributes */
export declare type EntityUrl = {
    /** @deprecated The canonical_url field is deprecated, use relative_url instead. */
    canonical_url?: Maybe<Scalars['String']>;
    /** The unique ID for a `ProductInterface`, `CategoryInterface`, `CmsPage`, etc. object associated with the specified url. This could be a product UID, category UID, or cms page UID. */
    entity_uid?: Maybe<Scalars['ID']>;
    /**
     * The ID assigned to the object associated with the specified url. This could be a product ID, category ID, or page ID.
     * @deprecated Use `entity_uid` instead.
     */
    id?: Maybe<Scalars['Int']>;
    /** 301 or 302 HTTP code for url permanent or temporary redirect or 0 for the 200 no redirect */
    redirectCode?: Maybe<Scalars['Int']>;
    /** The internal relative URL. If the specified  url is a redirect, the query returns the redirected URL, not the original. */
    relative_url?: Maybe<Scalars['String']>;
    /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
    type?: Maybe<UrlRewriteEntityTypeEnum>;
};
/** This enumeration defines the entity type. */
export declare enum UrlRewriteEntityTypeEnum {
    CMS_PAGE = "CMS_PAGE",
    PRODUCT = "PRODUCT",
    CATEGORY = "CATEGORY"
}
/** Deprecated: `Wishlist` type should be used instead */
export declare type WishlistOutput = {
    /**
     * An array of items in the customer's wish list
     * @deprecated Use field `items` from type `Wishlist` instead
     */
    items?: Maybe<Array<Maybe<WishlistItem>>>;
    /**
     * The number of items in the wish list
     * @deprecated Use field `items_count` from type `Wishlist` instead
     */
    items_count?: Maybe<Scalars['Int']>;
    /**
     * When multiple wish lists are enabled, the name the customer assigns to the wishlist
     * @deprecated This field is related to Commerce functionality and is always `null` in Open Source edition
     */
    name?: Maybe<Scalars['String']>;
    /**
     * An encrypted code that Magento uses to link to the wish list
     * @deprecated Use field `sharing_code` from type `Wishlist` instead
     */
    sharing_code?: Maybe<Scalars['String']>;
    /**
     * The time of the last modification to the wish list
     * @deprecated Use field `updated_at` from type `Wishlist` instead
     */
    updated_at?: Maybe<Scalars['String']>;
};
export declare type AddBundleProductsToCartInput = {
    cart_id: Scalars['String'];
    cart_items: Array<Maybe<BundleProductCartItemInput>>;
};
export declare type BundleProductCartItemInput = {
    bundle_options: Array<Maybe<BundleOptionInput>>;
    customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>;
    data: CartItemInput;
};
export declare type BundleOptionInput = {
    id: Scalars['Int'];
    quantity: Scalars['Float'];
    value: Array<Maybe<Scalars['String']>>;
};
export declare type CustomizableOptionInput = {
    /** The customizable option id of the product */
    id?: Maybe<Scalars['Int']>;
    /** The string value of the option */
    value_string: Scalars['String'];
};
export declare type CartItemInput = {
    /** An array of entered options for the base product, such as personalization text */
    entered_options?: Maybe<Array<Maybe<EnteredOptionInput>>>;
    /** For child products, the SKU of its parent product */
    parent_sku?: Maybe<Scalars['String']>;
    quantity: Scalars['Float'];
    /** The selected options for the base product, such as color or size with  unique ID for a `CustomizableRadioOption`, `CustomizableDropDownOption`, `ConfigurableProductOptionsValues`, etc. objects */
    selected_options?: Maybe<Array<Maybe<Scalars['ID']>>>;
    sku: Scalars['String'];
};
/** Defines a customer-entered option */
export declare type EnteredOptionInput = {
    /** The unique ID for a `CustomizableFieldOption`, `CustomizableFileOption`, `CustomizableAreaOption`, etc. of `CustomizableOptionInterface` objects */
    uid: Scalars['ID'];
    /** Text the customer entered */
    value: Scalars['String'];
};
export declare type AddBundleProductsToCartOutput = {
    cart: Cart;
};
export declare type AddConfigurableProductsToCartInput = {
    cart_id: Scalars['String'];
    cart_items: Array<Maybe<ConfigurableProductCartItemInput>>;
};
export declare type ConfigurableProductCartItemInput = {
    customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>;
    data: CartItemInput;
    /** Configurable product SKU. */
    parent_sku?: Maybe<Scalars['String']>;
    /** Deprecated. Use CartItemInput.sku instead. */
    variant_sku?: Maybe<Scalars['String']>;
};
export declare type AddConfigurableProductsToCartOutput = {
    cart: Cart;
};
export declare type AddDownloadableProductsToCartInput = {
    cart_id: Scalars['String'];
    cart_items: Array<Maybe<DownloadableProductCartItemInput>>;
};
export declare type DownloadableProductCartItemInput = {
    customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>;
    data: CartItemInput;
    downloadable_product_links?: Maybe<Array<Maybe<DownloadableProductLinksInput>>>;
};
export declare type DownloadableProductLinksInput = {
    link_id: Scalars['Int'];
};
export declare type AddDownloadableProductsToCartOutput = {
    cart: Cart;
};
export declare type AddProductsToCartOutput = {
    /** The cart after products have been added */
    cart: Cart;
    /** An error encountered while adding an item to the cart. */
    user_errors: Array<Maybe<CartUserInputError>>;
};
/** An error encountered while adding an item to the the cart. */
export declare type CartUserInputError = {
    /** Cart-specific error code */
    code: CartUserInputErrorType;
    /** A localized error message */
    message: Scalars['String'];
};
export declare enum CartUserInputErrorType {
    PRODUCT_NOT_FOUND = "PRODUCT_NOT_FOUND",
    NOT_SALABLE = "NOT_SALABLE",
    INSUFFICIENT_STOCK = "INSUFFICIENT_STOCK",
    UNDEFINED = "UNDEFINED"
}
export declare type AddProductsToCompareListInput = {
    /** An array of product IDs to add to the compare list */
    products: Array<Maybe<Scalars['ID']>>;
    /** The unique identifier of the compare list to modify */
    uid: Scalars['ID'];
};
/** Defines the items to add to a wish list */
export declare type WishlistItemInput = {
    /** An array of options that the customer entered */
    entered_options?: Maybe<Array<Maybe<EnteredOptionInput>>>;
    /** For complex product types, the SKU of the parent product */
    parent_sku?: Maybe<Scalars['String']>;
    /** The amount or number of items to add */
    quantity: Scalars['Float'];
    /** An array of strings corresponding to options the customer selected */
    selected_options?: Maybe<Array<Maybe<Scalars['ID']>>>;
    /** The SKU of the product to add. For complex product types, specify the child product SKU */
    sku: Scalars['String'];
};
/** Contains the customer's wish list and any errors encountered */
export declare type AddProductsToWishlistOutput = {
    /** An array of errors encountered while adding products to a wish list */
    user_errors: Array<Maybe<WishListUserInputError>>;
    /** Contains the wish list with all items that were successfully added */
    wishlist: Wishlist;
};
/** An error encountered while performing operations with WishList. */
export declare type WishListUserInputError = {
    /** Wishlist-specific error code */
    code: WishListUserInputErrorType;
    /** A localized error message */
    message: Scalars['String'];
};
export declare enum WishListUserInputErrorType {
    PRODUCT_NOT_FOUND = "PRODUCT_NOT_FOUND",
    UNDEFINED = "UNDEFINED"
}
export declare type AddSimpleProductsToCartInput = {
    cart_id: Scalars['String'];
    cart_items: Array<Maybe<SimpleProductCartItemInput>>;
};
export declare type SimpleProductCartItemInput = {
    customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>;
    data: CartItemInput;
};
export declare type AddSimpleProductsToCartOutput = {
    cart: Cart;
};
export declare type AddVirtualProductsToCartInput = {
    cart_id: Scalars['String'];
    cart_items: Array<Maybe<VirtualProductCartItemInput>>;
};
export declare type VirtualProductCartItemInput = {
    customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>;
    data: CartItemInput;
};
export declare type AddVirtualProductsToCartOutput = {
    cart: Cart;
};
export declare type ApplyCouponToCartInput = {
    cart_id: Scalars['String'];
    coupon_code: Scalars['String'];
};
export declare type ApplyCouponToCartOutput = {
    cart: Cart;
};
export declare type AssignCompareListToCustomerOutput = {
    /** The contents of the customer's compare list */
    compare_list?: Maybe<CompareList>;
    result: Scalars['Boolean'];
};
export declare type CreateCompareListInput = {
    /** An array of product IDs to add to the compare list */
    products?: Maybe<Array<Maybe<Scalars['ID']>>>;
};
export declare type CustomerInput = {
    /** The customer's date of birth */
    date_of_birth?: Maybe<Scalars['String']>;
    /** Deprecated: Use `date_of_birth` instead */
    dob?: Maybe<Scalars['String']>;
    /** The customer's email address. Required for customer creation */
    email?: Maybe<Scalars['String']>;
    /** The customer's first name */
    firstname?: Maybe<Scalars['String']>;
    /** The customer's gender (Male - 1, Female - 2) */
    gender?: Maybe<Scalars['Int']>;
    /** Indicates whether the customer is subscribed to the company's newsletter */
    is_subscribed?: Maybe<Scalars['Boolean']>;
    /** The customer's family name */
    lastname?: Maybe<Scalars['String']>;
    /** The customer's middle name */
    middlename?: Maybe<Scalars['String']>;
    /** The customer's password */
    password?: Maybe<Scalars['String']>;
    /** An honorific, such as Dr., Mr., or Mrs. */
    prefix?: Maybe<Scalars['String']>;
    /** A value such as Sr., Jr., or III */
    suffix?: Maybe<Scalars['String']>;
    /** The customer's Tax/VAT number (for corporate customers) */
    taxvat?: Maybe<Scalars['String']>;
};
export declare type CustomerOutput = {
    customer: Customer;
};
export declare type CustomerAddressInput = {
    /** The city or town */
    city?: Maybe<Scalars['String']>;
    /** The customer's company */
    company?: Maybe<Scalars['String']>;
    /** The customer's country */
    country_code?: Maybe<CountryCodeEnum>;
    /** Deprecated: use `country_code` instead. */
    country_id?: Maybe<CountryCodeEnum>;
    /** Deprecated: Custom attributes should not be put into container. */
    custom_attributes?: Maybe<Array<Maybe<CustomerAddressAttributeInput>>>;
    /** Indicates whether the address is the default billing address */
    default_billing?: Maybe<Scalars['Boolean']>;
    /** Indicates whether the address is the default shipping address */
    default_shipping?: Maybe<Scalars['Boolean']>;
    /** The fax number */
    fax?: Maybe<Scalars['String']>;
    /** The first name of the person associated with the shipping/billing address */
    firstname?: Maybe<Scalars['String']>;
    /** The family name of the person associated with the shipping/billing address */
    lastname?: Maybe<Scalars['String']>;
    /** The middle name of the person associated with the shipping/billing address */
    middlename?: Maybe<Scalars['String']>;
    /** The customer's ZIP or postal code */
    postcode?: Maybe<Scalars['String']>;
    /** An honorific, such as Dr., Mr., or Mrs. */
    prefix?: Maybe<Scalars['String']>;
    /** An object containing the region name, region code, and region ID */
    region?: Maybe<CustomerAddressRegionInput>;
    /** An array of strings that define the street number and name */
    street?: Maybe<Array<Maybe<Scalars['String']>>>;
    /** A value such as Sr., Jr., or III */
    suffix?: Maybe<Scalars['String']>;
    /** The telephone number */
    telephone?: Maybe<Scalars['String']>;
    /** The customer's Tax/VAT number (for corporate customers) */
    vat_id?: Maybe<Scalars['String']>;
};
export declare type CustomerAddressAttributeInput = {
    /** Attribute code */
    attribute_code: Scalars['String'];
    /** Attribute value */
    value: Scalars['String'];
};
/** CustomerAddressRegionInput defines the customer's state or province */
export declare type CustomerAddressRegionInput = {
    /** The state or province name */
    region?: Maybe<Scalars['String']>;
    /** The address region code */
    region_code?: Maybe<Scalars['String']>;
    /** The unique ID for a pre-defined region */
    region_id?: Maybe<Scalars['Int']>;
};
export declare type CustomerCreateInput = {
    /** Indicates whether the customer has enabled remote shopping assistance */
    allow_remote_shopping_assistance?: Maybe<Scalars['Boolean']>;
    /** The customer's date of birth */
    date_of_birth?: Maybe<Scalars['String']>;
    /** Deprecated: Use `date_of_birth` instead */
    dob?: Maybe<Scalars['String']>;
    /** The customer's email address. Required for customer creation */
    email: Scalars['String'];
    /** The customer's first name */
    firstname: Scalars['String'];
    /** The customer's gender (Male - 1, Female - 2) */
    gender?: Maybe<Scalars['Int']>;
    /** Indicates whether the customer is subscribed to the company's newsletter */
    is_subscribed?: Maybe<Scalars['Boolean']>;
    /** The customer's family name */
    lastname: Scalars['String'];
    /** The customer's middle name */
    middlename?: Maybe<Scalars['String']>;
    /** The customer's password */
    password?: Maybe<Scalars['String']>;
    /** An honorific, such as Dr., Mr., or Mrs. */
    prefix?: Maybe<Scalars['String']>;
    /** A value such as Sr., Jr., or III */
    suffix?: Maybe<Scalars['String']>;
    /** The customer's Tax/VAT number (for corporate customers) */
    taxvat?: Maybe<Scalars['String']>;
};
export declare type createEmptyCartInput = {
    cart_id?: Maybe<Scalars['String']>;
};
export declare type createKlarnaPaymentsSessionInput = {
    cart_id: Scalars['String'];
};
export declare type createKlarnaPaymentsSessionOutput = {
    /** The payment method client token */
    client_token?: Maybe<Scalars['String']>;
    /** The payment method categories */
    payment_method_categories?: Maybe<Array<Maybe<Categories>>>;
};
export declare type Categories = {
    /** The payment method assets */
    asset_urls?: Maybe<Array<Maybe<Assets>>>;
    /** The payment method identifier */
    identifier: Scalars['String'];
    /** The payment method name */
    name: Scalars['String'];
};
export declare type Assets = {
    /** The payment method logo url (descriptive) */
    descriptive?: Maybe<Scalars['String']>;
    /** The payment method logo url (standard) */
    standard?: Maybe<Scalars['String']>;
};
export declare type MollieTransactionInput = {
    issuer?: Maybe<Scalars['String']>;
    payment_token: Scalars['String'];
};
export declare type MollieTransactionOutput = {
    checkout_url?: Maybe<Scalars['String']>;
};
/** Input required to fetch payment token information for Payflow Pro and Payments Pro payment methods. */
export declare type PayflowProTokenInput = {
    /** The unique ID that identifies the customer's cart */
    cart_id: Scalars['String'];
    /** A set of relative URLs that PayPal uses for callback. */
    urls: PayflowProUrlInput;
};
/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payflow Pro and Payment Pro payment methods. */
export declare type PayflowProUrlInput = {
    /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
    cancel_url: Scalars['String'];
    /** The relative URL of the transaction error page that PayPal will redirect to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html. */
    error_url: Scalars['String'];
    /** The relative URL of the final confirmation page that PayPal will redirect to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
    return_url: Scalars['String'];
};
/** Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods. */
export declare type CreatePayflowProTokenOutput = {
    response_message: Scalars['String'];
    result: Scalars['Int'];
    result_code: Scalars['Int'];
    secure_token: Scalars['String'];
    secure_token_id: Scalars['String'];
};
/** Defines the attributes required to receive a payment token for Express Checkout and Payments Standard payment methods. */
export declare type PaypalExpressTokenInput = {
    /** The unique ID that identifies the customer's cart */
    cart_id: Scalars['String'];
    /** Payment method code */
    code: Scalars['String'];
    /** Indicates whether the buyer selected the quick checkout button. The default value is false */
    express_button?: Maybe<Scalars['Boolean']>;
    /** A set of relative URLs that PayPal uses in response to various actions during the authorization process */
    urls: PaypalExpressUrlsInput;
    /** Indicates whether the buyer clicked the PayPal credit button. The default value is false */
    use_paypal_credit?: Maybe<Scalars['Boolean']>;
};
/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Express Checkout and Payments Standard payment methods. */
export declare type PaypalExpressUrlsInput = {
    /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
    cancel_url: Scalars['String'];
    /** The relative URL of the page that PayPal will redirect to when the payment has been put on hold for additional review. This condition mostly applies to ACH transactions, and is not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success_pending.html, the relative URL is paypal/action/success_pending.html.  */
    pending_url?: Maybe<Scalars['String']>;
    /** The relative URL of the final confirmation page that PayPal will redirect to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
    return_url: Scalars['String'];
    /** The relative URL of the order confirmation page that PayPal will redirect to when the payment is successful and additional confirmation is not needed. Not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success.html, the relative URL is paypal/action/success.html. */
    success_url?: Maybe<Scalars['String']>;
};
/** Contains the token returned by PayPal and a set of URLs that allow the buyer to authorize payment and adjust checkout details. Applies to Express Checkout and Payments Standard payment methods. */
export declare type PaypalExpressTokenOutput = {
    /** A set of URLs that allow the buyer to authorize payment and adjust checkout details */
    paypal_urls?: Maybe<PaypalExpressUrlList>;
    /** The token returned by PayPal */
    token?: Maybe<Scalars['String']>;
};
/** A set of URLs that allow the buyer to authorize payment and adjust checkout details for Express Checkout and Payments Standard transactions. */
export declare type PaypalExpressUrlList = {
    /** The PayPal URL that allows the buyer to edit their checkout details */
    edit?: Maybe<Scalars['String']>;
    /** The URL to the PayPal login page */
    start?: Maybe<Scalars['String']>;
};
export declare type CreateProductReviewInput = {
    /** The customer's nickname. Defaults to the customer name, if logged in */
    nickname: Scalars['String'];
    /** Ratings details by category. e.g price: 5, quality: 4 etc */
    ratings: Array<Maybe<ProductReviewRatingInput>>;
    /** The SKU of the reviewed product */
    sku: Scalars['String'];
    /** The summary (title) of the review */
    summary: Scalars['String'];
    /** The review text. */
    text: Scalars['String'];
};
export declare type ProductReviewRatingInput = {
    /** An encoded rating ID. */
    id: Scalars['String'];
    /** An encoded rating value id. */
    value_id: Scalars['String'];
};
export declare type CreateProductReviewOutput = {
    /** Contains the completed product review */
    review: ProductReview;
};
export declare type DeleteCompareListOutput = {
    /** Indicates whether the compare list was successfully deleted */
    result: Scalars['Boolean'];
};
export declare type DeletePaymentTokenOutput = {
    customerPaymentTokens?: Maybe<CustomerPaymentTokens>;
    result: Scalars['Boolean'];
};
export declare type CustomerToken = {
    /** The customer token */
    token?: Maybe<Scalars['String']>;
};
export declare type GenerateCustomerTokenAsAdminInput = {
    /** The email address of the customer requesting remote shopping assistance */
    customer_email: Scalars['String'];
};
export declare type GenerateCustomerTokenAsAdminOutput = {
    /** The generated customer token */
    customer_token: Scalars['String'];
};
/** Input required to complete payment. Applies to Payflow Pro and Payments Pro payment methods. */
export declare type PayflowProResponseInput = {
    cart_id: Scalars['String'];
    paypal_payload: Scalars['String'];
};
export declare type PayflowProResponseOutput = {
    cart: Cart;
};
export declare type MollieProcessTransactionInput = {
    /** The payment token returned from the PlaceOrder call/added to the return URL */
    payment_token: Scalars['String'];
};
export declare type MollieProcessTransactionOutput = {
    /** The cart is only available when the payment status is failed, canceled or expired. */
    cart?: Maybe<Cart>;
    paymentStatus?: Maybe<PaymentStatusEnum>;
};
export declare enum PaymentStatusEnum {
    CREATED = "CREATED",
    PAID = "PAID",
    AUTHORIZED = "AUTHORIZED",
    CANCELED = "CANCELED",
    SHIPPING = "SHIPPING",
    COMPLETED = "COMPLETED",
    EXPIRED = "EXPIRED",
    PENDING = "PENDING",
    REFUNDED = "REFUNDED",
    ERROR = "ERROR"
}
export declare type MollieResetCartInput = {
    /** The unique ID that identifies the customer's cart */
    cart_id: Scalars['String'];
};
export declare type MollieResetCartOutput = {
    cart: Cart;
};
export declare type PlaceOrderInput = {
    cart_id: Scalars['String'];
};
export declare type PlaceOrderOutput = {
    order: Order;
};
export declare type Order = {
    mollie_payment_token?: Maybe<Scalars['String']>;
    mollie_redirect_url?: Maybe<Scalars['String']>;
    /** @deprecated The order_id field is deprecated, use order_number instead. */
    order_id?: Maybe<Scalars['String']>;
    /** The unique ID for a `Order` object. */
    order_number: Scalars['String'];
};
export declare type RemoveCouponFromCartInput = {
    cart_id: Scalars['String'];
};
export declare type RemoveCouponFromCartOutput = {
    cart?: Maybe<Cart>;
};
export declare type RemoveItemFromCartInput = {
    cart_id: Scalars['String'];
    /** Deprecated. Use `cart_item_uid` instead. */
    cart_item_id?: Maybe<Scalars['Int']>;
    /** Required field. The unique ID for a `CartItemInterface` object */
    cart_item_uid?: Maybe<Scalars['ID']>;
};
export declare type RemoveItemFromCartOutput = {
    cart: Cart;
};
export declare type RemoveProductsFromCompareListInput = {
    /** An array of product IDs to remove from the compare list */
    products: Array<Maybe<Scalars['ID']>>;
    /** The unique identifier of the compare list to modify */
    uid: Scalars['ID'];
};
/** Contains the customer's wish list and any errors encountered */
export declare type RemoveProductsFromWishlistOutput = {
    /** An array of errors encountered while deleting products from a wish list */
    user_errors: Array<Maybe<WishListUserInputError>>;
    /** Contains the wish list with after items were successfully deleted */
    wishlist: Wishlist;
};
export declare type ReorderItemsOutput = {
    /** Contains detailed information about the customer's cart. */
    cart: Cart;
    /** An array of reordering errors. */
    userInputErrors: Array<Maybe<CheckoutUserInputError>>;
};
/** An error encountered while adding an item the the cart. */
export declare type CheckoutUserInputError = {
    /** Checkout-specific error code */
    code: CheckoutUserInputErrorCodes;
    /** Localized error message */
    message: Scalars['String'];
    /** Path to the input field that caused an error. See the GraphQL specification about path errors for details: http://spec.graphql.org/draft/#sec-Errors */
    path: Array<Maybe<Scalars['String']>>;
};
export declare enum CheckoutUserInputErrorCodes {
    REORDER_NOT_AVAILABLE = "REORDER_NOT_AVAILABLE",
    PRODUCT_NOT_FOUND = "PRODUCT_NOT_FOUND",
    NOT_SALABLE = "NOT_SALABLE",
    INSUFFICIENT_STOCK = "INSUFFICIENT_STOCK",
    UNDEFINED = "UNDEFINED"
}
export declare type RevokeCustomerTokenOutput = {
    result: Scalars['Boolean'];
};
export declare type SendEmailToFriendInput = {
    product_id: Scalars['Int'];
    recipients: Array<Maybe<SendEmailToFriendRecipientInput>>;
    sender: SendEmailToFriendSenderInput;
};
export declare type SendEmailToFriendRecipientInput = {
    email: Scalars['String'];
    name: Scalars['String'];
};
export declare type SendEmailToFriendSenderInput = {
    email: Scalars['String'];
    message: Scalars['String'];
    name: Scalars['String'];
};
export declare type SendEmailToFriendOutput = {
    recipients?: Maybe<Array<Maybe<SendEmailToFriendRecipient>>>;
    sender?: Maybe<SendEmailToFriendSender>;
};
export declare type SendEmailToFriendRecipient = {
    email: Scalars['String'];
    name: Scalars['String'];
};
export declare type SendEmailToFriendSender = {
    email: Scalars['String'];
    message: Scalars['String'];
    name: Scalars['String'];
};
export declare type SetBillingAddressOnCartInput = {
    billing_address: BillingAddressInput;
    cart_id: Scalars['String'];
};
export declare type BillingAddressInput = {
    address?: Maybe<CartAddressInput>;
    customer_address_id?: Maybe<Scalars['Int']>;
    /** Set billing address same as shipping */
    same_as_shipping?: Maybe<Scalars['Boolean']>;
    /** Deprecated: use `same_as_shipping` field instead */
    use_for_shipping?: Maybe<Scalars['Boolean']>;
};
export declare type CartAddressInput = {
    city: Scalars['String'];
    company?: Maybe<Scalars['String']>;
    country_code: Scalars['String'];
    firstname: Scalars['String'];
    lastname: Scalars['String'];
    postcode?: Maybe<Scalars['String']>;
    region?: Maybe<Scalars['String']>;
    region_id?: Maybe<Scalars['Int']>;
    /** Determines whether to save the address in the customer's address book. The default value is true */
    save_in_address_book?: Maybe<Scalars['Boolean']>;
    street: Array<Maybe<Scalars['String']>>;
    telephone: Scalars['String'];
};
export declare type SetBillingAddressOnCartOutput = {
    cart: Cart;
};
export declare type SetGuestEmailOnCartInput = {
    cart_id: Scalars['String'];
    email: Scalars['String'];
};
export declare type SetGuestEmailOnCartOutput = {
    cart: Cart;
};
export declare type SetPaymentMethodAndPlaceOrderInput = {
    cart_id: Scalars['String'];
    payment_method: PaymentMethodInput;
};
export declare type PaymentMethodInput = {
    braintree?: Maybe<BraintreeInput>;
    braintree_cc_vault?: Maybe<BraintreeCcVaultInput>;
    /** Payment method code */
    code: Scalars['String'];
    /** Required input for PayPal Hosted pro payments */
    hosted_pro?: Maybe<HostedProInput>;
    klarna?: Maybe<KlarnaInput>;
    /** The card token provided by Mollie Components */
    mollie_card_token?: Maybe<Scalars['String']>;
    /** Provided the issuer chosen by the end-user */
    mollie_selected_issuer?: Maybe<Scalars['String']>;
    /** Required input for Payflow Express Checkout payments */
    payflow_express?: Maybe<PayflowExpressInput>;
    /** Required input for PayPal Payflow Link and Payments Advanced payments */
    payflow_link?: Maybe<PayflowLinkInput>;
    /** Required input type for PayPal Payflow Pro and Payment Pro payments */
    payflowpro?: Maybe<PayflowProInput>;
    /** Required input type for PayPal Payflow Pro vault payments */
    payflowpro_cc_vault?: Maybe<VaultTokenInput>;
    /** Required input for Express Checkout and Payments Standard payments */
    paypal_express?: Maybe<PaypalExpressInput>;
    /** Purchase order number */
    purchase_order_number?: Maybe<Scalars['String']>;
};
export declare type BraintreeInput = {
    /** Contains a fingerprint provided by Braintree JS SDK and should be sent with sale transaction details to the Braintree payment gateway. Should be specified only in a case if Kount (advanced fraud protection) is enabled for Braintree payment integration. */
    device_data?: Maybe<Scalars['String']>;
    /** States whether an entered by a customer credit/debit card should be tokenized for later usage. Required only if Vault is enabled for Braintree payment integration. */
    is_active_payment_token_enabler: Scalars['Boolean'];
    /** The one-time payment token generated by Braintree payment gateway based on card details. Required field to make sale transaction. */
    payment_method_nonce: Scalars['String'];
};
export declare type BraintreeCcVaultInput = {
    device_data?: Maybe<Scalars['String']>;
    public_hash: Scalars['String'];
};
/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payments Pro Hosted Solution payment method. */
export declare type HostedProInput = {
    /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
    cancel_url: Scalars['String'];
    /** The relative URL of the final confirmation page that PayPal will redirect to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
    return_url: Scalars['String'];
};
export declare type KlarnaInput = {
    /** The authorization token must be provided to set any Klarna Payments method */
    authorization_token: Scalars['String'];
};
/** Required input for Payflow Express Checkout payments */
export declare type PayflowExpressInput = {
    /** The unique ID of the PayPal user */
    payer_id: Scalars['String'];
    /** The token returned by the createPaypalExpressToken mutation */
    token: Scalars['String'];
};
/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payflow Link and Payments Advanced payment methods. */
export declare type PayflowLinkInput = {
    /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
    cancel_url: Scalars['String'];
    /** The relative URL of the transaction error page that PayPal will redirect to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html. */
    error_url: Scalars['String'];
    /** The relative URL of the order confirmation page that PayPal will redirect to when the payment is successful and additional confirmation is not needed. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
    return_url: Scalars['String'];
};
/** Required input for Payflow Pro and Payments Pro payment methods. */
export declare type PayflowProInput = {
    /** Required input for credit card related information */
    cc_details: CreditCardDetailsInput;
    /** States whether details about the customer's credit/debit card should be tokenized for later usage. Required only if Vault is enabled for PayPal Payflow Pro payment integration. */
    is_active_payment_token_enabler?: Maybe<Scalars['Boolean']>;
};
/** Required fields for Payflow Pro and Payments Pro credit card payments */
export declare type CreditCardDetailsInput = {
    /** Credit card expiration month */
    cc_exp_month: Scalars['Int'];
    /** Credit card expiration year */
    cc_exp_year: Scalars['Int'];
    /** Last 4 digits of the credit card */
    cc_last_4: Scalars['Int'];
    /** Credit card type */
    cc_type: Scalars['String'];
};
/** Required input for payment methods with Vault support. */
export declare type VaultTokenInput = {
    /** The public hash of the payment token */
    public_hash: Scalars['String'];
};
/** Required input for Express Checkout and Payments Standard payments */
export declare type PaypalExpressInput = {
    /** The unique ID of the PayPal user */
    payer_id: Scalars['String'];
    /** The token returned by the createPaypalExpressToken mutation */
    token: Scalars['String'];
};
export declare type SetPaymentMethodOnCartInput = {
    cart_id: Scalars['String'];
    payment_method: PaymentMethodInput;
};
export declare type SetPaymentMethodOnCartOutput = {
    cart: Cart;
};
export declare type SetShippingAddressesOnCartInput = {
    cart_id: Scalars['String'];
    shipping_addresses: Array<Maybe<ShippingAddressInput>>;
};
export declare type ShippingAddressInput = {
    address?: Maybe<CartAddressInput>;
    customer_address_id?: Maybe<Scalars['Int']>;
    customer_notes?: Maybe<Scalars['String']>;
    /** The code of Pickup Location which will be used for In-Store Pickup. */
    pickup_location_code?: Maybe<Scalars['String']>;
};
export declare type SetShippingAddressesOnCartOutput = {
    cart: Cart;
};
export declare type SetShippingMethodsOnCartInput = {
    cart_id: Scalars['String'];
    shipping_methods: Array<Maybe<ShippingMethodInput>>;
};
export declare type ShippingMethodInput = {
    carrier_code: Scalars['String'];
    method_code: Scalars['String'];
};
export declare type SetShippingMethodsOnCartOutput = {
    cart: Cart;
};
export declare type SubscribeEmailToNewsletterOutput = {
    /** Returns the status of the subscription request */
    status?: Maybe<SubscriptionStatusesEnum>;
};
export declare enum SubscriptionStatusesEnum {
    NOT_ACTIVE = "NOT_ACTIVE",
    SUBSCRIBED = "SUBSCRIBED",
    UNSUBSCRIBED = "UNSUBSCRIBED",
    UNCONFIRMED = "UNCONFIRMED"
}
export declare type UpdateCartItemsInput = {
    cart_id: Scalars['String'];
    cart_items: Array<Maybe<CartItemUpdateInput>>;
};
export declare type CartItemUpdateInput = {
    /** Deprecated. Use `cart_item_uid` instead. */
    cart_item_id?: Maybe<Scalars['Int']>;
    /** The unique ID for a `CartItemInterface` object */
    cart_item_uid?: Maybe<Scalars['ID']>;
    customizable_options?: Maybe<Array<Maybe<CustomizableOptionInput>>>;
    /** Gift message details for the cart item */
    gift_message?: Maybe<GiftMessageInput>;
    quantity?: Maybe<Scalars['Float']>;
};
/** Contains the text of a gift message, its sender, and recipient */
export declare type GiftMessageInput = {
    /** Sender name */
    from: Scalars['String'];
    /** Gift message text */
    message: Scalars['String'];
    /** Recipient name */
    to: Scalars['String'];
};
export declare type UpdateCartItemsOutput = {
    cart: Cart;
};
export declare type CustomerUpdateInput = {
    /** Indicates whether the customer has enabled remote shopping assistance */
    allow_remote_shopping_assistance?: Maybe<Scalars['Boolean']>;
    /** The customer's date of birth */
    date_of_birth?: Maybe<Scalars['String']>;
    /** Deprecated: Use `date_of_birth` instead */
    dob?: Maybe<Scalars['String']>;
    /** The customer's first name */
    firstname?: Maybe<Scalars['String']>;
    /** The customer's gender (Male - 1, Female - 2) */
    gender?: Maybe<Scalars['Int']>;
    /** Indicates whether the customer is subscribed to the company's newsletter */
    is_subscribed?: Maybe<Scalars['Boolean']>;
    /** The customer's family name */
    lastname?: Maybe<Scalars['String']>;
    /** The customer's middle name */
    middlename?: Maybe<Scalars['String']>;
    /** An honorific, such as Dr., Mr., or Mrs. */
    prefix?: Maybe<Scalars['String']>;
    /** A value such as Sr., Jr., or III */
    suffix?: Maybe<Scalars['String']>;
    /** The customer's Tax/VAT number (for corporate customers) */
    taxvat?: Maybe<Scalars['String']>;
};
/** Defines updates to items in a wish list */
export declare type WishlistItemUpdateInput = {
    /** Customer-entered comments about the item */
    description?: Maybe<Scalars['String']>;
    /** An array of options that the customer entered */
    entered_options?: Maybe<Array<Maybe<EnteredOptionInput>>>;
    /** The new amount or number of this item */
    quantity?: Maybe<Scalars['Float']>;
    /** An array of strings corresponding to options the customer selected */
    selected_options?: Maybe<Array<Maybe<Scalars['ID']>>>;
    /** The unique ID for a `WishlistItemInterface` object */
    wishlist_item_id: Scalars['ID'];
};
/** Contains the customer's wish list and any errors encountered */
export declare type UpdateProductsInWishlistOutput = {
    /** An array of errors encountered while updating products in a wish list */
    user_errors: Array<Maybe<WishListUserInputError>>;
    /** Contains the wish list with all items that were successfully updated */
    wishlist: Wishlist;
};
/** ProductLinks is an implementation of ProductLinksInterface. */
export declare type ProductLinks = ProductLinksInterface & {
    /** One of related, associated, upsell, or crosssell. */
    link_type?: Maybe<Scalars['String']>;
    /** The SKU of the linked product. */
    linked_product_sku?: Maybe<Scalars['String']>;
    /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
    linked_product_type?: Maybe<Scalars['String']>;
    /** The position within the list of product links. */
    position?: Maybe<Scalars['Int']>;
    /** The identifier of the linked product. */
    sku?: Maybe<Scalars['String']>;
};
/** PhysicalProductInterface contains attributes specific to tangible products. */
export declare type PhysicalProductInterface = {
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>;
};
/** CustomizableAreaOption contains information about a text area that is defined as part of a customizable option. */
export declare type CustomizableAreaOption = CustomizableOptionInterface & {
    /**
     * Option ID.
     * @deprecated Use `uid` instead
     */
    option_id?: Maybe<Scalars['Int']>;
    /** The Stock Keeping Unit of the base product. */
    product_sku?: Maybe<Scalars['String']>;
    /** Indicates whether the option is required. */
    required?: Maybe<Scalars['Boolean']>;
    /** The order in which the option is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableOptionInterface` object. */
    uid: Scalars['ID'];
    /** An object that defines a text area. */
    value?: Maybe<CustomizableAreaValue>;
};
/** The CustomizableOptionInterface contains basic information about a customizable option. It can be implemented by several types of configurable options. */
export declare type CustomizableOptionInterface = {
    /**
     * Option ID.
     * @deprecated Use `uid` instead
     */
    option_id?: Maybe<Scalars['Int']>;
    /** Indicates whether the option is required. */
    required?: Maybe<Scalars['Boolean']>;
    /** The order in which the option is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableOptionInterface` object. */
    uid: Scalars['ID'];
};
/** CustomizableAreaValue defines the price and sku of a product whose page contains a customized text area. */
export declare type CustomizableAreaValue = {
    /** The maximum number of characters that can be entered for this customizable option. */
    max_characters?: Maybe<Scalars['Int']>;
    /** The price assigned to this option. */
    price?: Maybe<Scalars['Float']>;
    /** FIXED, PERCENT, or DYNAMIC. */
    price_type?: Maybe<PriceTypeEnum>;
    /** The Stock Keeping Unit for this option. */
    sku?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableAreaValue` object. */
    uid: Scalars['ID'];
};
/** CustomizableDateOption contains information about a date picker that is defined as part of a customizable option. */
export declare type CustomizableDateOption = CustomizableOptionInterface & {
    /**
     * Option ID.
     * @deprecated Use `uid` instead
     */
    option_id?: Maybe<Scalars['Int']>;
    /** The Stock Keeping Unit of the base product. */
    product_sku?: Maybe<Scalars['String']>;
    /** Indicates whether the option is required. */
    required?: Maybe<Scalars['Boolean']>;
    /** The order in which the option is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableOptionInterface` object. */
    uid: Scalars['ID'];
    /** An object that defines a date field in a customizable option. */
    value?: Maybe<CustomizableDateValue>;
};
/** CustomizableDateValue defines the price and sku of a product whose page contains a customized date picker. */
export declare type CustomizableDateValue = {
    /** The price assigned to this option. */
    price?: Maybe<Scalars['Float']>;
    /** FIXED, PERCENT, or DYNAMIC. */
    price_type?: Maybe<PriceTypeEnum>;
    /** The Stock Keeping Unit for this option. */
    sku?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableDateValue` object. */
    uid: Scalars['ID'];
};
/** CustomizableDropDownOption contains information about a drop down menu that is defined as part of a customizable option. */
export declare type CustomizableDropDownOption = CustomizableOptionInterface & {
    /**
     * Option ID.
     * @deprecated Use `uid` instead
     */
    option_id?: Maybe<Scalars['Int']>;
    /** Indicates whether the option is required. */
    required?: Maybe<Scalars['Boolean']>;
    /** The order in which the option is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableOptionInterface` object. */
    uid: Scalars['ID'];
    /** An array that defines the set of options for a drop down menu. */
    value?: Maybe<Array<Maybe<CustomizableDropDownValue>>>;
};
/** CustomizableDropDownValue defines the price and sku of a product whose page contains a customized drop down menu. */
export declare type CustomizableDropDownValue = {
    /** The ID assigned to the value. */
    option_type_id?: Maybe<Scalars['Int']>;
    /** The price assigned to this option. */
    price?: Maybe<Scalars['Float']>;
    /** FIXED, PERCENT, or DYNAMIC. */
    price_type?: Maybe<PriceTypeEnum>;
    /** The Stock Keeping Unit for this option. */
    sku?: Maybe<Scalars['String']>;
    /** The order in which the option is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableDropDownValue` object. */
    uid: Scalars['ID'];
};
/** CustomizableMultipleOption contains information about a multiselect that is defined as part of a customizable option. */
export declare type CustomizableMultipleOption = CustomizableOptionInterface & {
    /**
     * Option ID.
     * @deprecated Use `uid` instead
     */
    option_id?: Maybe<Scalars['Int']>;
    /** Indicates whether the option is required. */
    required?: Maybe<Scalars['Boolean']>;
    /** The order in which the option is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableOptionInterface` object. */
    uid: Scalars['ID'];
    /** An array that defines the set of options for a multiselect. */
    value?: Maybe<Array<Maybe<CustomizableMultipleValue>>>;
};
/** CustomizableMultipleValue defines the price and sku of a product whose page contains a customized multiselect. */
export declare type CustomizableMultipleValue = {
    /** The ID assigned to the value. */
    option_type_id?: Maybe<Scalars['Int']>;
    /** The price assigned to this option. */
    price?: Maybe<Scalars['Float']>;
    /** FIXED, PERCENT, or DYNAMIC. */
    price_type?: Maybe<PriceTypeEnum>;
    /** The Stock Keeping Unit for this option. */
    sku?: Maybe<Scalars['String']>;
    /** The order in which the option is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableMultipleValue` object. */
    uid: Scalars['ID'];
};
/** CustomizableFieldOption contains information about a text field that is defined as part of a customizable option. */
export declare type CustomizableFieldOption = CustomizableOptionInterface & {
    /**
     * Option ID.
     * @deprecated Use `uid` instead
     */
    option_id?: Maybe<Scalars['Int']>;
    /** The Stock Keeping Unit of the base product. */
    product_sku?: Maybe<Scalars['String']>;
    /** Indicates whether the option is required. */
    required?: Maybe<Scalars['Boolean']>;
    /** The order in which the option is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableOptionInterface` object. */
    uid: Scalars['ID'];
    /** An object that defines a text field. */
    value?: Maybe<CustomizableFieldValue>;
};
/** CustomizableFieldValue defines the price and sku of a product whose page contains a customized text field. */
export declare type CustomizableFieldValue = {
    /** The maximum number of characters that can be entered for this customizable option. */
    max_characters?: Maybe<Scalars['Int']>;
    /** The price of the custom value. */
    price?: Maybe<Scalars['Float']>;
    /** FIXED, PERCENT, or DYNAMIC. */
    price_type?: Maybe<PriceTypeEnum>;
    /** The Stock Keeping Unit for this option. */
    sku?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableFieldValue` object. */
    uid: Scalars['ID'];
};
/** CustomizableFileOption contains information about a file picker that is defined as part of a customizable option. */
export declare type CustomizableFileOption = CustomizableOptionInterface & {
    /**
     * Option ID.
     * @deprecated Use `uid` instead
     */
    option_id?: Maybe<Scalars['Int']>;
    /** The Stock Keeping Unit of the base product. */
    product_sku?: Maybe<Scalars['String']>;
    /** Indicates whether the option is required. */
    required?: Maybe<Scalars['Boolean']>;
    /** The order in which the option is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableOptionInterface` object. */
    uid: Scalars['ID'];
    /** An object that defines a file value. */
    value?: Maybe<CustomizableFileValue>;
};
/** CustomizableFileValue defines the price and sku of a product whose page contains a customized file picker. */
export declare type CustomizableFileValue = {
    /** The file extension to accept. */
    file_extension?: Maybe<Scalars['String']>;
    /** The maximum width of an image. */
    image_size_x?: Maybe<Scalars['Int']>;
    /** The maximum height of an image. */
    image_size_y?: Maybe<Scalars['Int']>;
    /** The price assigned to this option. */
    price?: Maybe<Scalars['Float']>;
    /** FIXED, PERCENT, or DYNAMIC. */
    price_type?: Maybe<PriceTypeEnum>;
    /** The Stock Keeping Unit for this option. */
    sku?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableFileValue` object. */
    uid: Scalars['ID'];
};
/** Contains information about a product video. */
export declare type ProductVideo = MediaGalleryInterface & {
    /** Whether the image is hidden from view. */
    disabled?: Maybe<Scalars['Boolean']>;
    /** The label of the product image or video. */
    label?: Maybe<Scalars['String']>;
    /** The media item's position after it has been sorted. */
    position?: Maybe<Scalars['Int']>;
    /** The URL of the product image or video. */
    url?: Maybe<Scalars['String']>;
    /** Contains a ProductMediaGalleryEntriesVideoContent object. */
    video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>;
};
/** CustomizableProductInterface contains information about customizable product options. */
export declare type CustomizableProductInterface = {
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
};
/** CustomizableRadioOption contains information about a set of radio buttons that are defined as part of a customizable option. */
export declare type CustomizableRadioOption = CustomizableOptionInterface & {
    /**
     * Option ID.
     * @deprecated Use `uid` instead
     */
    option_id?: Maybe<Scalars['Int']>;
    /** Indicates whether the option is required. */
    required?: Maybe<Scalars['Boolean']>;
    /** The order in which the option is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableOptionInterface` object. */
    uid: Scalars['ID'];
    /** An array that defines a set of radio buttons. */
    value?: Maybe<Array<Maybe<CustomizableRadioValue>>>;
};
/** CustomizableRadioValue defines the price and sku of a product whose page contains a customized set of radio buttons. */
export declare type CustomizableRadioValue = {
    /** The ID assigned to the value. */
    option_type_id?: Maybe<Scalars['Int']>;
    /** The price assigned to this option. */
    price?: Maybe<Scalars['Float']>;
    /** FIXED, PERCENT, or DYNAMIC. */
    price_type?: Maybe<PriceTypeEnum>;
    /** The Stock Keeping Unit for this option. */
    sku?: Maybe<Scalars['String']>;
    /** The order in which the radio button is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableRadioValue` object. */
    uid: Scalars['ID'];
};
/** CustomizableCheckbbixOption contains information about a set of checkbox values that are defined as part of a customizable option. */
export declare type CustomizableCheckboxOption = CustomizableOptionInterface & {
    /**
     * Option ID.
     * @deprecated Use `uid` instead
     */
    option_id?: Maybe<Scalars['Int']>;
    /** Indicates whether the option is required. */
    required?: Maybe<Scalars['Boolean']>;
    /** The order in which the option is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableOptionInterface` object. */
    uid: Scalars['ID'];
    /** An array that defines a set of checkbox values. */
    value?: Maybe<Array<Maybe<CustomizableCheckboxValue>>>;
};
/** CustomizableCheckboxValue defines the price and sku of a product whose page contains a customized set of checkbox values. */
export declare type CustomizableCheckboxValue = {
    /** The ID assigned to the value. */
    option_type_id?: Maybe<Scalars['Int']>;
    /** The price assigned to this option. */
    price?: Maybe<Scalars['Float']>;
    /** FIXED, PERCENT, or DYNAMIC. */
    price_type?: Maybe<PriceTypeEnum>;
    /** The Stock Keeping Unit for this option. */
    sku?: Maybe<Scalars['String']>;
    /** The order in which the checkbox value is displayed. */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name for this option. */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `CustomizableCheckboxValue` object. */
    uid: Scalars['ID'];
};
/** A virtual product is non-tangible product that does not require shipping and is not kept in inventory. */
export declare type VirtualProduct = ProductInterface & CustomizableProductInterface & {
    activity?: Maybe<Scalars['String']>;
    /**
     * The attribute set assigned to the product.
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>;
    backorder_delivery_date?: Maybe<Scalars['String']>;
    backorder_delivery_period?: Maybe<Scalars['Int']>;
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>;
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>;
    category_gear?: Maybe<Scalars['String']>;
    climate?: Maybe<Scalars['String']>;
    collar?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['Int']>;
    colors?: Maybe<Scalars['String']>;
    compatible_phones?: Maybe<Scalars['Int']>;
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>;
    /**
     * Timestamp indicating when the product was created.
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>;
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>;
    dominant_color?: Maybe<Scalars['Int']>;
    eco_collection?: Maybe<Scalars['Int']>;
    erin_recommends?: Maybe<Scalars['Int']>;
    features_bags?: Maybe<Scalars['String']>;
    format?: Maybe<Scalars['Int']>;
    gender?: Maybe<Scalars['String']>;
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>;
    /**
     * The ID number assigned to the product.
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>;
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>;
    in_stock_delivery_period?: Maybe<Scalars['Int']>;
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>;
    material?: Maybe<Scalars['Int']>;
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>;
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>;
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>;
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>;
    new?: Maybe<Scalars['Int']>;
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>;
    /**
     * The end date for new product listings.
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>;
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>;
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>;
    pattern?: Maybe<Scalars['String']>;
    performance_fabric?: Maybe<Scalars['Int']>;
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>;
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange;
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
    print_art?: Maybe<Scalars['String']>;
    print_holiday?: Maybe<Scalars['String']>;
    print_labels?: Maybe<Scalars['String']>;
    print_landmarks?: Maybe<Scalars['String']>;
    print_landscape?: Maybe<Scalars['String']>;
    print_mood?: Maybe<Scalars['String']>;
    print_pattern_swatch?: Maybe<Scalars['Int']>;
    print_type?: Maybe<Scalars['String']>;
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float'];
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int'];
    /** The list of products reviews. */
    reviews: ProductReviews;
    sale?: Maybe<Scalars['Int']>;
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>;
    size?: Maybe<Scalars['Int']>;
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>;
    sleeve?: Maybe<Scalars['String']>;
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>;
    /**
     * The beginning date that a product has a special price.
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>;
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>;
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>;
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>;
    strap_bags?: Maybe<Scalars['String']>;
    style_bags?: Maybe<Scalars['String']>;
    style_bottom?: Maybe<Scalars['String']>;
    style_general?: Maybe<Scalars['String']>;
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>;
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>;
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>;
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>;
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID'];
    /**
     * Timestamp indicating when the product was updated.
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>;
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>;
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>;
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>;
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>;
};
/** A virtual product is non-tangible product that does not require shipping and is not kept in inventory. */
export declare type VirtualProductreviewsArgs = {
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
};
/** A simple product is tangible and are usually sold as single units or in fixed quantities. */
export declare type SimpleProduct = ProductInterface & PhysicalProductInterface & CustomizableProductInterface & {
    activity?: Maybe<Scalars['String']>;
    /**
     * The attribute set assigned to the product.
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>;
    backorder_delivery_date?: Maybe<Scalars['String']>;
    backorder_delivery_period?: Maybe<Scalars['Int']>;
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>;
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>;
    category_gear?: Maybe<Scalars['String']>;
    climate?: Maybe<Scalars['String']>;
    collar?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['Int']>;
    colors?: Maybe<Scalars['String']>;
    compatible_phones?: Maybe<Scalars['Int']>;
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>;
    /**
     * Timestamp indicating when the product was created.
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>;
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>;
    dominant_color?: Maybe<Scalars['Int']>;
    eco_collection?: Maybe<Scalars['Int']>;
    erin_recommends?: Maybe<Scalars['Int']>;
    features_bags?: Maybe<Scalars['String']>;
    format?: Maybe<Scalars['Int']>;
    gender?: Maybe<Scalars['String']>;
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>;
    /**
     * The ID number assigned to the product.
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>;
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>;
    in_stock_delivery_period?: Maybe<Scalars['Int']>;
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>;
    material?: Maybe<Scalars['Int']>;
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>;
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>;
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>;
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>;
    new?: Maybe<Scalars['Int']>;
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>;
    /**
     * The end date for new product listings.
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>;
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>;
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>;
    pattern?: Maybe<Scalars['String']>;
    performance_fabric?: Maybe<Scalars['Int']>;
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>;
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange;
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
    print_art?: Maybe<Scalars['String']>;
    print_holiday?: Maybe<Scalars['String']>;
    print_labels?: Maybe<Scalars['String']>;
    print_landmarks?: Maybe<Scalars['String']>;
    print_landscape?: Maybe<Scalars['String']>;
    print_mood?: Maybe<Scalars['String']>;
    print_pattern_swatch?: Maybe<Scalars['Int']>;
    print_type?: Maybe<Scalars['String']>;
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float'];
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int'];
    /** The list of products reviews. */
    reviews: ProductReviews;
    sale?: Maybe<Scalars['Int']>;
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>;
    size?: Maybe<Scalars['Int']>;
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>;
    sleeve?: Maybe<Scalars['String']>;
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>;
    /**
     * The beginning date that a product has a special price.
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>;
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>;
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>;
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>;
    strap_bags?: Maybe<Scalars['String']>;
    style_bags?: Maybe<Scalars['String']>;
    style_bottom?: Maybe<Scalars['String']>;
    style_general?: Maybe<Scalars['String']>;
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>;
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>;
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>;
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>;
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID'];
    /**
     * Timestamp indicating when the product was updated.
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>;
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>;
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>;
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>;
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>;
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>;
};
/** A simple product is tangible and are usually sold as single units or in fixed quantities. */
export declare type SimpleProductreviewsArgs = {
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
};
/** ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. ProductFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export declare type ProductFilterInput = {
    /** Category ID the product belongs to. */
    category_id?: Maybe<FilterTypeInput>;
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<FilterTypeInput>;
    /** Timestamp indicating when the product was created. */
    created_at?: Maybe<FilterTypeInput>;
    /** The name of a custom layout. */
    custom_layout?: Maybe<FilterTypeInput>;
    /** XML code that is applied as a layout update to the product page. */
    custom_layout_update?: Maybe<FilterTypeInput>;
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<FilterTypeInput>;
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<FilterTypeInput>;
    /** Indicates whether additional attributes have been created for the product. */
    has_options?: Maybe<FilterTypeInput>;
    /** The relative path to the main image on the product page. */
    image?: Maybe<FilterTypeInput>;
    /** The label assigned to a product image. */
    image_label?: Maybe<FilterTypeInput>;
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<FilterTypeInput>;
    /** The numeric maximal price of the product. Do not include the currency code. */
    max_price?: Maybe<FilterTypeInput>;
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<FilterTypeInput>;
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<FilterTypeInput>;
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<FilterTypeInput>;
    /** The numeric minimal price of the product. Do not include the currency code. */
    min_price?: Maybe<FilterTypeInput>;
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<FilterTypeInput>;
    /** The beginning date for new product listings, and determines if the product is featured as a new product. */
    news_from_date?: Maybe<FilterTypeInput>;
    /** The end date for new product listings. */
    news_to_date?: Maybe<FilterTypeInput>;
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<FilterTypeInput>;
    /** The keyword required to perform a logical OR comparison. */
    or?: Maybe<ProductFilterInput>;
    /** The price of an item. */
    price?: Maybe<FilterTypeInput>;
    /** Indicates whether the product has required options. */
    required_options?: Maybe<FilterTypeInput>;
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<FilterTypeInput>;
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<FilterTypeInput>;
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<FilterTypeInput>;
    /** The label assigned to a product's small image. */
    small_image_label?: Maybe<FilterTypeInput>;
    /** The beginning date that a product has a special price. */
    special_from_date?: Maybe<FilterTypeInput>;
    /** The discounted price of the product. Do not include the currency code. */
    special_price?: Maybe<FilterTypeInput>;
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<FilterTypeInput>;
    /** The file name of a swatch image */
    swatch_image?: Maybe<FilterTypeInput>;
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<FilterTypeInput>;
    /** The label assigned to a product's thumbnail image. */
    thumbnail_label?: Maybe<FilterTypeInput>;
    /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
    tier_price?: Maybe<FilterTypeInput>;
    /** Timestamp indicating when the product was updated. */
    updated_at?: Maybe<FilterTypeInput>;
    /** The part of the URL that identifies the product */
    url_key?: Maybe<FilterTypeInput>;
    url_path?: Maybe<FilterTypeInput>;
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<FilterTypeInput>;
};
/** ProductSortInput is deprecated, use @ProductAttributeSortInput instead. ProductSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export declare type ProductSortInput = {
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<SortEnum>;
    /** Timestamp indicating when the product was created. */
    created_at?: Maybe<SortEnum>;
    /** The name of a custom layout. */
    custom_layout?: Maybe<SortEnum>;
    /** XML code that is applied as a layout update to the product page. */
    custom_layout_update?: Maybe<SortEnum>;
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<SortEnum>;
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<SortEnum>;
    /** Indicates whether additional attributes have been created for the product. */
    has_options?: Maybe<SortEnum>;
    /** The relative path to the main image on the product page. */
    image?: Maybe<SortEnum>;
    /** The label assigned to a product image. */
    image_label?: Maybe<SortEnum>;
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<SortEnum>;
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<SortEnum>;
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<SortEnum>;
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<SortEnum>;
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<SortEnum>;
    /** The beginning date for new product listings, and determines if the product is featured as a new product. */
    news_from_date?: Maybe<SortEnum>;
    /** The end date for new product listings. */
    news_to_date?: Maybe<SortEnum>;
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<SortEnum>;
    /** The price of the item. */
    price?: Maybe<SortEnum>;
    /** Indicates whether the product has required options. */
    required_options?: Maybe<SortEnum>;
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<SortEnum>;
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<SortEnum>;
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<SortEnum>;
    /** The label assigned to a product's small image. */
    small_image_label?: Maybe<SortEnum>;
    /** The beginning date that a product has a special price. */
    special_from_date?: Maybe<SortEnum>;
    /** The discounted price of the product. */
    special_price?: Maybe<SortEnum>;
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<SortEnum>;
    /** The file name of a swatch image */
    swatch_image?: Maybe<SortEnum>;
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<SortEnum>;
    /** The label assigned to a product's thumbnail image. */
    thumbnail_label?: Maybe<SortEnum>;
    /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
    tier_price?: Maybe<SortEnum>;
    /** Timestamp indicating when the product was updated. */
    updated_at?: Maybe<SortEnum>;
    /** The part of the URL that identifies the product */
    url_key?: Maybe<SortEnum>;
    url_path?: Maybe<SortEnum>;
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<SortEnum>;
};
export declare type LayerFilterItem = LayerFilterItemInterface & {
    /**
     * Count of items by filter.
     * @deprecated Use AggregationOption.count instead.
     */
    items_count?: Maybe<Scalars['Int']>;
    /**
     * Filter label.
     * @deprecated Use AggregationOption.label instead.
     */
    label?: Maybe<Scalars['String']>;
    /**
     * Value for filter request variable to be used in query.
     * @deprecated Use AggregationOption.value instead.
     */
    value_string?: Maybe<Scalars['String']>;
};
/** A simple product wish list Item */
export declare type SimpleWishlistItem = WishlistItemInterface & {
    /** The date and time the item was added to the wish list */
    added_at: Scalars['String'];
    /** Custom options selected for the wish list item */
    customizable_options: Array<Maybe<SelectedCustomizableOption>>;
    /** The description of the item */
    description?: Maybe<Scalars['String']>;
    /** The unique ID for a `WishlistItemInterface` object */
    id: Scalars['ID'];
    /** Product details of the wish list item */
    product?: Maybe<ProductInterface>;
    /** The quantity of this wish list item */
    quantity: Scalars['Float'];
};
/** A virtual product wish list item */
export declare type VirtualWishlistItem = WishlistItemInterface & {
    /** The date and time the item was added to the wish list */
    added_at: Scalars['String'];
    /** Custom options selected for the wish list item */
    customizable_options: Array<Maybe<SelectedCustomizableOption>>;
    /** The description of the item */
    description?: Maybe<Scalars['String']>;
    /** The unique ID for a `WishlistItemInterface` object */
    id: Scalars['ID'];
    /** Product details of the wish list item */
    product?: Maybe<ProductInterface>;
    /** The quantity of this wish list item */
    quantity: Scalars['Float'];
};
/** Simple Cart Item */
export declare type SimpleCartItem = CartItemInterface & {
    customizable_options: Array<Maybe<SelectedCustomizableOption>>;
    /** The entered gift message for the cart item */
    gift_message?: Maybe<GiftMessage>;
    /** @deprecated Use `uid` instead */
    id: Scalars['String'];
    prices?: Maybe<CartItemPrices>;
    product: ProductInterface;
    quantity: Scalars['Float'];
    /** The unique ID for a `CartItemInterface` object */
    uid: Scalars['ID'];
};
/** Virtual Cart Item */
export declare type VirtualCartItem = CartItemInterface & {
    customizable_options: Array<Maybe<SelectedCustomizableOption>>;
    /** @deprecated Use `uid` instead */
    id: Scalars['String'];
    prices?: Maybe<CartItemPrices>;
    product: ProductInterface;
    quantity: Scalars['Float'];
    /** The unique ID for a `CartItemInterface` object */
    uid: Scalars['ID'];
};
/** Downloadable Cart Item */
export declare type DownloadableCartItem = CartItemInterface & {
    customizable_options: Array<Maybe<SelectedCustomizableOption>>;
    /** @deprecated Use `uid` instead */
    id: Scalars['String'];
    /** An array containing information about the links for the added to cart downloadable product */
    links?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
    prices?: Maybe<CartItemPrices>;
    product: ProductInterface;
    quantity: Scalars['Float'];
    /** DownloadableProductSamples defines characteristics of a downloadable product */
    samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
    /** The unique ID for a `CartItemInterface` object */
    uid: Scalars['ID'];
};
/** DownloadableProductLinks defines characteristics of a downloadable product */
export declare type DownloadableProductLinks = {
    /** @deprecated This information should not be exposed on frontend */
    id?: Maybe<Scalars['Int']>;
    /** @deprecated This information should not be exposed on frontend */
    is_shareable?: Maybe<Scalars['Boolean']>;
    /** @deprecated `sample_url` serves to get the downloadable sample */
    link_type?: Maybe<DownloadableFileTypeEnum>;
    /** @deprecated This information should not be exposed on frontend */
    number_of_downloads?: Maybe<Scalars['Int']>;
    /** The price of the downloadable product */
    price?: Maybe<Scalars['Float']>;
    /** @deprecated `sample_url` serves to get the downloadable sample */
    sample_file?: Maybe<Scalars['String']>;
    /** @deprecated `sample_url` serves to get the downloadable sample */
    sample_type?: Maybe<DownloadableFileTypeEnum>;
    /** URL to the downloadable sample */
    sample_url?: Maybe<Scalars['String']>;
    /** A number indicating the sort order */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name of the link */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `DownloadableProductLinks` object. */
    uid: Scalars['ID'];
};
export declare enum DownloadableFileTypeEnum {
    FILE = "FILE",
    URL = "URL"
}
/** DownloadableProductSamples defines characteristics of a downloadable product */
export declare type DownloadableProductSamples = {
    /** @deprecated This information should not be exposed on frontend */
    id?: Maybe<Scalars['Int']>;
    /** @deprecated `sample_url` serves to get the downloadable sample */
    sample_file?: Maybe<Scalars['String']>;
    /** @deprecated `sample_url` serves to get the downloadable sample */
    sample_type?: Maybe<DownloadableFileTypeEnum>;
    /** URL to the downloadable sample */
    sample_url?: Maybe<Scalars['String']>;
    /** A number indicating the sort order */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name of the sample */
    title?: Maybe<Scalars['String']>;
};
/** DownloadableProduct defines a product that the customer downloads */
export declare type DownloadableProduct = ProductInterface & CustomizableProductInterface & {
    activity?: Maybe<Scalars['String']>;
    /**
     * The attribute set assigned to the product.
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>;
    backorder_delivery_date?: Maybe<Scalars['String']>;
    backorder_delivery_period?: Maybe<Scalars['Int']>;
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>;
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>;
    category_gear?: Maybe<Scalars['String']>;
    climate?: Maybe<Scalars['String']>;
    collar?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['Int']>;
    colors?: Maybe<Scalars['String']>;
    compatible_phones?: Maybe<Scalars['Int']>;
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>;
    /**
     * Timestamp indicating when the product was created.
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>;
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>;
    dominant_color?: Maybe<Scalars['Int']>;
    /** An array containing information about the links for this downloadable product */
    downloadable_product_links?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
    /** An array containing information about samples of this downloadable product. */
    downloadable_product_samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
    eco_collection?: Maybe<Scalars['Int']>;
    erin_recommends?: Maybe<Scalars['Int']>;
    features_bags?: Maybe<Scalars['String']>;
    format?: Maybe<Scalars['Int']>;
    gender?: Maybe<Scalars['String']>;
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>;
    /**
     * The ID number assigned to the product.
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>;
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>;
    in_stock_delivery_period?: Maybe<Scalars['Int']>;
    /** A value of 1 indicates that each link in the array must be purchased separately */
    links_purchased_separately?: Maybe<Scalars['Int']>;
    /** The heading above the list of downloadable products */
    links_title?: Maybe<Scalars['String']>;
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>;
    material?: Maybe<Scalars['Int']>;
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>;
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>;
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>;
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>;
    new?: Maybe<Scalars['Int']>;
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>;
    /**
     * The end date for new product listings.
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>;
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>;
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>;
    pattern?: Maybe<Scalars['String']>;
    performance_fabric?: Maybe<Scalars['Int']>;
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>;
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange;
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
    print_art?: Maybe<Scalars['String']>;
    print_holiday?: Maybe<Scalars['String']>;
    print_labels?: Maybe<Scalars['String']>;
    print_landmarks?: Maybe<Scalars['String']>;
    print_landscape?: Maybe<Scalars['String']>;
    print_mood?: Maybe<Scalars['String']>;
    print_pattern_swatch?: Maybe<Scalars['Int']>;
    print_type?: Maybe<Scalars['String']>;
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float'];
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int'];
    /** The list of products reviews. */
    reviews: ProductReviews;
    sale?: Maybe<Scalars['Int']>;
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>;
    size?: Maybe<Scalars['Int']>;
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>;
    sleeve?: Maybe<Scalars['String']>;
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>;
    /**
     * The beginning date that a product has a special price.
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>;
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>;
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>;
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>;
    strap_bags?: Maybe<Scalars['String']>;
    style_bags?: Maybe<Scalars['String']>;
    style_bottom?: Maybe<Scalars['String']>;
    style_general?: Maybe<Scalars['String']>;
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>;
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>;
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>;
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>;
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID'];
    /**
     * Timestamp indicating when the product was updated.
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>;
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>;
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>;
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>;
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>;
};
/** DownloadableProduct defines a product that the customer downloads */
export declare type DownloadableProductreviewsArgs = {
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
};
export declare type DownloadableOrderItem = OrderItemInterface & {
    /** The final discount information for the product */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** A list of downloadable links that are ordered from the downloadable product */
    downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
    /** The entered option for the base product, such as a logo or image */
    entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
    /** The unique ID for a `OrderItemInterface` object */
    id: Scalars['ID'];
    /** The name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** The sale price of the base product, including selected options */
    product_sale_price: Money;
    /** The SKU of the base product */
    product_sku: Scalars['String'];
    /** The type of product, such as simple, configurable, etc. */
    product_type?: Maybe<Scalars['String']>;
    /** URL key of the base product */
    product_url_key?: Maybe<Scalars['String']>;
    /** The number of canceled items */
    quantity_canceled?: Maybe<Scalars['Float']>;
    /** The number of invoiced items */
    quantity_invoiced?: Maybe<Scalars['Float']>;
    /** The number of units ordered for this item */
    quantity_ordered?: Maybe<Scalars['Float']>;
    /** The number of refunded items */
    quantity_refunded?: Maybe<Scalars['Float']>;
    /** The number of returned items */
    quantity_returned?: Maybe<Scalars['Float']>;
    /** The number of shipped items */
    quantity_shipped?: Maybe<Scalars['Float']>;
    /** The selected options for the base product, such as color or size */
    selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
    /** The status of the order item */
    status?: Maybe<Scalars['String']>;
};
/** DownloadableProductLinks defines characteristics of a downloadable product */
export declare type DownloadableItemsLinks = {
    /** A number indicating the sort order */
    sort_order?: Maybe<Scalars['Int']>;
    /** The display name of the link */
    title?: Maybe<Scalars['String']>;
    /** The unique ID for a `DownloadableItemsLinks` object. */
    uid: Scalars['ID'];
};
export declare type DownloadableInvoiceItem = InvoiceItemInterface & {
    /** Contains information about the final discount amount for the base product, including discounts on options */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** A list of downloadable links that are invoiced from the downloadable product */
    downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
    /** The unique ID for a `InvoiceItemInterface` object */
    id: Scalars['ID'];
    /** Contains details about an individual order item */
    order_item?: Maybe<OrderItemInterface>;
    /** The name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** The sale price for the base product including selected options */
    product_sale_price: Money;
    /** The SKU of the base product */
    product_sku: Scalars['String'];
    /** The number of invoiced items */
    quantity_invoiced?: Maybe<Scalars['Float']>;
};
export declare type DownloadableCreditMemoItem = CreditMemoItemInterface & {
    /** Contains information about the final discount amount for the base product, including discounts on options */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** A list of downloadable links that are refunded from the downloadable product */
    downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
    /** The unique ID for a `CreditMemoItemInterface` object */
    id: Scalars['ID'];
    /** The order item the credit memo is applied to */
    order_item?: Maybe<OrderItemInterface>;
    /** The name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** The sale price for the base product, including selected options */
    product_sale_price: Money;
    /** SKU of the base product */
    product_sku: Scalars['String'];
    /** The number of refunded items */
    quantity_refunded?: Maybe<Scalars['Float']>;
};
/** A downloadable product wish list item */
export declare type DownloadableWishlistItem = WishlistItemInterface & {
    /** The date and time the item was added to the wish list */
    added_at: Scalars['String'];
    /** Custom options selected for the wish list item */
    customizable_options: Array<Maybe<SelectedCustomizableOption>>;
    /** The description of the item */
    description?: Maybe<Scalars['String']>;
    /** The unique ID for a `WishlistItemInterface` object */
    id: Scalars['ID'];
    /** An array containing information about the selected links */
    links_v2?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
    /** Product details of the wish list item */
    product?: Maybe<ProductInterface>;
    /** The quantity of this wish list item */
    quantity: Scalars['Float'];
    /** An array containing information about the selected samples */
    samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
};
export declare type BundleCartItem = CartItemInterface & {
    bundle_options: Array<Maybe<SelectedBundleOption>>;
    customizable_options: Array<Maybe<SelectedCustomizableOption>>;
    /** The entered gift message for the cart item */
    gift_message?: Maybe<GiftMessage>;
    /** @deprecated Use `uid` instead */
    id: Scalars['String'];
    prices?: Maybe<CartItemPrices>;
    product: ProductInterface;
    quantity: Scalars['Float'];
    /** The unique ID for a `CartItemInterface` object */
    uid: Scalars['ID'];
};
export declare type SelectedBundleOption = {
    /** @deprecated Use `uid` instead */
    id: Scalars['Int'];
    label: Scalars['String'];
    type: Scalars['String'];
    /** The unique ID for a `SelectedBundleOption` object */
    uid: Scalars['ID'];
    values: Array<Maybe<SelectedBundleOptionValue>>;
};
export declare type SelectedBundleOptionValue = {
    /** Use `uid` instead */
    id: Scalars['Int'];
    label: Scalars['String'];
    price: Scalars['Float'];
    quantity: Scalars['Float'];
    /** The unique ID for a `SelectedBundleOptionValue` object */
    uid: Scalars['ID'];
};
/** BundleItem defines an individual item in a bundle product. */
export declare type BundleItem = {
    /**
     * An ID assigned to each type of item in a bundle product.
     * @deprecated Use `uid` instead
     */
    option_id?: Maybe<Scalars['Int']>;
    /** An array of additional options for this bundle item. */
    options?: Maybe<Array<Maybe<BundleItemOption>>>;
    /** he relative position of this item compared to the other bundle items. */
    position?: Maybe<Scalars['Int']>;
    /** Indicates whether the item must be included in the bundle. */
    required?: Maybe<Scalars['Boolean']>;
    /** The SKU of the bundle product. */
    sku?: Maybe<Scalars['String']>;
    /** The display name of the item. */
    title?: Maybe<Scalars['String']>;
    /** The input type that the customer uses to select the item. Examples include radio button and checkbox. */
    type?: Maybe<Scalars['String']>;
    /** The unique ID for a `BundleItem` object. */
    uid?: Maybe<Scalars['ID']>;
};
/** BundleItemOption defines characteristics and options for a specific bundle item. */
export declare type BundleItemOption = {
    /** Indicates whether the customer can change the number of items for this option. */
    can_change_quantity?: Maybe<Scalars['Boolean']>;
    /**
     * The ID assigned to the bundled item option.
     * @deprecated Use `uid` instead
     */
    id?: Maybe<Scalars['Int']>;
    /** Indicates whether this option is the default option. */
    is_default?: Maybe<Scalars['Boolean']>;
    /** The text that identifies the bundled item option. */
    label?: Maybe<Scalars['String']>;
    /** When a bundle item contains multiple options, the relative position of this option compared to the other options. */
    position?: Maybe<Scalars['Int']>;
    /** The price of the selected option. */
    price?: Maybe<Scalars['Float']>;
    /** One of FIXED, PERCENT, or DYNAMIC. */
    price_type?: Maybe<PriceTypeEnum>;
    /** Contains details about this product option. */
    product?: Maybe<ProductInterface>;
    /**
     * Indicates the quantity of this specific bundle item.
     * @deprecated The `qty` is deprecated. Use `quantity` instead.
     */
    qty?: Maybe<Scalars['Float']>;
    /** Indicates the quantity of this specific bundle item. */
    quantity?: Maybe<Scalars['Float']>;
    /** The unique ID for a `BundleItemOption` object. */
    uid: Scalars['ID'];
};
/** BundleProduct defines basic features of a bundle product and contains multiple BundleItems. */
export declare type BundleProduct = ProductInterface & PhysicalProductInterface & CustomizableProductInterface & {
    activity?: Maybe<Scalars['String']>;
    /**
     * The attribute set assigned to the product.
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>;
    backorder_delivery_date?: Maybe<Scalars['String']>;
    backorder_delivery_period?: Maybe<Scalars['Int']>;
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>;
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>;
    category_gear?: Maybe<Scalars['String']>;
    climate?: Maybe<Scalars['String']>;
    collar?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['Int']>;
    colors?: Maybe<Scalars['String']>;
    compatible_phones?: Maybe<Scalars['Int']>;
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>;
    /**
     * Timestamp indicating when the product was created.
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>;
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>;
    dominant_color?: Maybe<Scalars['Int']>;
    /** Indicates whether the bundle product has a dynamic price. */
    dynamic_price?: Maybe<Scalars['Boolean']>;
    /** Indicates whether the bundle product has a dynamic SK. */
    dynamic_sku?: Maybe<Scalars['Boolean']>;
    /** Indicates whether the bundle product has a dynamically calculated weight. */
    dynamic_weight?: Maybe<Scalars['Boolean']>;
    eco_collection?: Maybe<Scalars['Int']>;
    erin_recommends?: Maybe<Scalars['Int']>;
    features_bags?: Maybe<Scalars['String']>;
    format?: Maybe<Scalars['Int']>;
    gender?: Maybe<Scalars['String']>;
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>;
    /**
     * The ID number assigned to the product.
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>;
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>;
    in_stock_delivery_period?: Maybe<Scalars['Int']>;
    /** An array containing information about individual bundle items. */
    items?: Maybe<Array<Maybe<BundleItem>>>;
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>;
    material?: Maybe<Scalars['Int']>;
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>;
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>;
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>;
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>;
    new?: Maybe<Scalars['Int']>;
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>;
    /**
     * The end date for new product listings.
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>;
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>;
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>;
    pattern?: Maybe<Scalars['String']>;
    performance_fabric?: Maybe<Scalars['Int']>;
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>;
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange;
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
    /** One of PRICE_RANGE or AS_LOW_AS. */
    price_view?: Maybe<PriceViewEnum>;
    print_art?: Maybe<Scalars['String']>;
    print_holiday?: Maybe<Scalars['String']>;
    print_labels?: Maybe<Scalars['String']>;
    print_landmarks?: Maybe<Scalars['String']>;
    print_landscape?: Maybe<Scalars['String']>;
    print_mood?: Maybe<Scalars['String']>;
    print_pattern_swatch?: Maybe<Scalars['Int']>;
    print_type?: Maybe<Scalars['String']>;
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float'];
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int'];
    /** The list of products reviews. */
    reviews: ProductReviews;
    sale?: Maybe<Scalars['Int']>;
    /** Indicates whether to ship bundle items together or individually. */
    ship_bundle_items?: Maybe<ShipBundleItemsEnum>;
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>;
    size?: Maybe<Scalars['Int']>;
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>;
    sleeve?: Maybe<Scalars['String']>;
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>;
    /**
     * The beginning date that a product has a special price.
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>;
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>;
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>;
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>;
    strap_bags?: Maybe<Scalars['String']>;
    style_bags?: Maybe<Scalars['String']>;
    style_bottom?: Maybe<Scalars['String']>;
    style_general?: Maybe<Scalars['String']>;
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>;
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>;
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>;
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>;
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID'];
    /**
     * Timestamp indicating when the product was updated.
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>;
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>;
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>;
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>;
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>;
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>;
};
/** BundleProduct defines basic features of a bundle product and contains multiple BundleItems. */
export declare type BundleProductreviewsArgs = {
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
};
/** This enumeration defines whether a bundle product's price is displayed as the lowest possible value or as a range. */
export declare enum PriceViewEnum {
    PRICE_RANGE = "PRICE_RANGE",
    AS_LOW_AS = "AS_LOW_AS"
}
/** This enumeration defines whether bundle items must be shipped together. */
export declare enum ShipBundleItemsEnum {
    TOGETHER = "TOGETHER",
    SEPARATELY = "SEPARATELY"
}
export declare type BundleOrderItem = OrderItemInterface & {
    /** A list of bundle options that are assigned to the bundle product */
    bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
    /** The final discount information for the product */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** The entered option for the base product, such as a logo or image */
    entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
    /** The unique ID for a `OrderItemInterface` object */
    id: Scalars['ID'];
    /** The name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** The sale price of the base product, including selected options */
    product_sale_price: Money;
    /** The SKU of the base product */
    product_sku: Scalars['String'];
    /** The type of product, such as simple, configurable, etc. */
    product_type?: Maybe<Scalars['String']>;
    /** URL key of the base product */
    product_url_key?: Maybe<Scalars['String']>;
    /** The number of canceled items */
    quantity_canceled?: Maybe<Scalars['Float']>;
    /** The number of invoiced items */
    quantity_invoiced?: Maybe<Scalars['Float']>;
    /** The number of units ordered for this item */
    quantity_ordered?: Maybe<Scalars['Float']>;
    /** The number of refunded items */
    quantity_refunded?: Maybe<Scalars['Float']>;
    /** The number of returned items */
    quantity_returned?: Maybe<Scalars['Float']>;
    /** The number of shipped items */
    quantity_shipped?: Maybe<Scalars['Float']>;
    /** The selected options for the base product, such as color or size */
    selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
    /** The status of the order item */
    status?: Maybe<Scalars['String']>;
};
/** A list of options of the selected bundle product */
export declare type ItemSelectedBundleOption = {
    /**
     * The unique ID for a `ItemSelectedBundleOption` object
     * @deprecated Use `uid` instead
     */
    id: Scalars['ID'];
    /** The label of the option */
    label: Scalars['String'];
    /** The unique ID for a `ItemSelectedBundleOption` object */
    uid: Scalars['ID'];
    /** A list of products that represent the values of the parent option */
    values?: Maybe<Array<Maybe<ItemSelectedBundleOptionValue>>>;
};
/** A list of values for the selected bundle product */
export declare type ItemSelectedBundleOptionValue = {
    /**
     * The unique ID for a `ItemSelectedBundleOptionValue` object
     * @deprecated Use `uid` instead
     */
    id: Scalars['ID'];
    /** The price of the child bundle product */
    price: Money;
    /** The name of the child bundle product */
    product_name: Scalars['String'];
    /** The SKU of the child bundle product */
    product_sku: Scalars['String'];
    /** Indicates how many of this bundle product were ordered */
    quantity: Scalars['Float'];
    /** The unique ID for a `ItemSelectedBundleOptionValue` object */
    uid: Scalars['ID'];
};
export declare type BundleInvoiceItem = InvoiceItemInterface & {
    /** A list of bundle options that are assigned to the bundle product */
    bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
    /** Contains information about the final discount amount for the base product, including discounts on options */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** The unique ID for a `InvoiceItemInterface` object */
    id: Scalars['ID'];
    /** Contains details about an individual order item */
    order_item?: Maybe<OrderItemInterface>;
    /** The name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** The sale price for the base product including selected options */
    product_sale_price: Money;
    /** The SKU of the base product */
    product_sku: Scalars['String'];
    /** The number of invoiced items */
    quantity_invoiced?: Maybe<Scalars['Float']>;
};
export declare type BundleShipmentItem = ShipmentItemInterface & {
    /** A list of bundle options that are assigned to the bundle product */
    bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
    /** The unique ID for a `ShipmentItemInterface` object */
    id: Scalars['ID'];
    /** Associated order item */
    order_item?: Maybe<OrderItemInterface>;
    /** Name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** Sale price for the base product */
    product_sale_price: Money;
    /** SKU of the base product */
    product_sku: Scalars['String'];
    /** Number of shipped items */
    quantity_shipped: Scalars['Float'];
};
export declare type BundleCreditMemoItem = CreditMemoItemInterface & {
    /** A list of bundle options that are assigned to the bundle product */
    bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
    /** Contains information about the final discount amount for the base product, including discounts on options */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** The unique ID for a `CreditMemoItemInterface` object */
    id: Scalars['ID'];
    /** The order item the credit memo is applied to */
    order_item?: Maybe<OrderItemInterface>;
    /** The name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** The sale price for the base product, including selected options */
    product_sale_price: Money;
    /** SKU of the base product */
    product_sku: Scalars['String'];
    /** The number of refunded items */
    quantity_refunded?: Maybe<Scalars['Float']>;
};
export declare type BundleWishlistItem = WishlistItemInterface & {
    /** The date and time the item was added to the wish list */
    added_at: Scalars['String'];
    /** An array containing information about the selected bundle items */
    bundle_options?: Maybe<Array<Maybe<SelectedBundleOption>>>;
    /** Custom options selected for the wish list item */
    customizable_options: Array<Maybe<SelectedCustomizableOption>>;
    /** The description of the item */
    description?: Maybe<Scalars['String']>;
    /** The unique ID for a `WishlistItemInterface` object */
    id: Scalars['ID'];
    /** Product details of the wish list item */
    product?: Maybe<ProductInterface>;
    /** The quantity of this wish list item */
    quantity: Scalars['Float'];
};
export declare type ConfigurableCartItem = CartItemInterface & {
    configurable_options: Array<Maybe<SelectedConfigurableOption>>;
    customizable_options?: Maybe<Array<Maybe<SelectedCustomizableOption>>>;
    /** The entered gift message for the cart item */
    gift_message?: Maybe<GiftMessage>;
    /** @deprecated Use `uid` instead */
    id: Scalars['String'];
    prices?: Maybe<CartItemPrices>;
    product: ProductInterface;
    quantity: Scalars['Float'];
    /** The unique ID for a `CartItemInterface` object */
    uid: Scalars['ID'];
};
export declare type SelectedConfigurableOption = {
    /** The unique ID for a `ConfigurableProductOptions` object */
    configurable_product_option_uid: Scalars['ID'];
    /** The unique ID for a `ConfigurableProductOptionsValues` object */
    configurable_product_option_value_uid: Scalars['ID'];
    /** @deprecated Use SelectedConfigurableOption.configurable_product_option_uid instead */
    id: Scalars['Int'];
    option_label: Scalars['String'];
    /** @deprecated Use SelectedConfigurableOption.configurable_product_option_value_uid instead */
    value_id: Scalars['Int'];
    value_label: Scalars['String'];
};
export declare type SalesItemInterface = {
    /** The entered gift message for the order item */
    gift_message?: Maybe<GiftMessage>;
};
/** GroupedProduct defines a grouped product */
export declare type GroupedProduct = ProductInterface & PhysicalProductInterface & {
    activity?: Maybe<Scalars['String']>;
    /**
     * The attribute set assigned to the product.
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>;
    backorder_delivery_date?: Maybe<Scalars['String']>;
    backorder_delivery_period?: Maybe<Scalars['Int']>;
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>;
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>;
    category_gear?: Maybe<Scalars['String']>;
    climate?: Maybe<Scalars['String']>;
    collar?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['Int']>;
    colors?: Maybe<Scalars['String']>;
    compatible_phones?: Maybe<Scalars['Int']>;
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>;
    /**
     * Timestamp indicating when the product was created.
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>;
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>;
    dominant_color?: Maybe<Scalars['Int']>;
    eco_collection?: Maybe<Scalars['Int']>;
    erin_recommends?: Maybe<Scalars['Int']>;
    features_bags?: Maybe<Scalars['String']>;
    format?: Maybe<Scalars['Int']>;
    gender?: Maybe<Scalars['String']>;
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>;
    /**
     * The ID number assigned to the product.
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>;
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>;
    in_stock_delivery_period?: Maybe<Scalars['Int']>;
    /** An array containing grouped product items */
    items?: Maybe<Array<Maybe<GroupedProductItem>>>;
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>;
    material?: Maybe<Scalars['Int']>;
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>;
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>;
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>;
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>;
    new?: Maybe<Scalars['Int']>;
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>;
    /**
     * The end date for new product listings.
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>;
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>;
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>;
    pattern?: Maybe<Scalars['String']>;
    performance_fabric?: Maybe<Scalars['Int']>;
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>;
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange;
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
    print_art?: Maybe<Scalars['String']>;
    print_holiday?: Maybe<Scalars['String']>;
    print_labels?: Maybe<Scalars['String']>;
    print_landmarks?: Maybe<Scalars['String']>;
    print_landscape?: Maybe<Scalars['String']>;
    print_mood?: Maybe<Scalars['String']>;
    print_pattern_swatch?: Maybe<Scalars['Int']>;
    print_type?: Maybe<Scalars['String']>;
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float'];
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int'];
    /** The list of products reviews. */
    reviews: ProductReviews;
    sale?: Maybe<Scalars['Int']>;
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>;
    size?: Maybe<Scalars['Int']>;
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>;
    sleeve?: Maybe<Scalars['String']>;
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>;
    /**
     * The beginning date that a product has a special price.
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>;
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>;
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>;
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>;
    strap_bags?: Maybe<Scalars['String']>;
    style_bags?: Maybe<Scalars['String']>;
    style_bottom?: Maybe<Scalars['String']>;
    style_general?: Maybe<Scalars['String']>;
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>;
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>;
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>;
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>;
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID'];
    /**
     * Timestamp indicating when the product was updated.
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>;
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>;
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>;
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>;
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>;
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>;
};
/** GroupedProduct defines a grouped product */
export declare type GroupedProductreviewsArgs = {
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
};
/** GroupedProductItem contains information about an individual grouped product item */
export declare type GroupedProductItem = {
    /** The relative position of this item compared to the other group items */
    position?: Maybe<Scalars['Int']>;
    /** The ProductInterface object, which contains details about this product option */
    product?: Maybe<ProductInterface>;
    /** The quantity of this grouped product item */
    qty?: Maybe<Scalars['Float']>;
};
/** A grouped product wish list item */
export declare type GroupedProductWishlistItem = WishlistItemInterface & {
    /** The date and time the item was added to the wish list */
    added_at: Scalars['String'];
    /** Custom options selected for the wish list item */
    customizable_options: Array<Maybe<SelectedCustomizableOption>>;
    /** The description of the item */
    description?: Maybe<Scalars['String']>;
    /** The unique ID for a `WishlistItemInterface` object */
    id: Scalars['ID'];
    /** Product details of the wish list item */
    product?: Maybe<ProductInterface>;
    /** The quantity of this wish list item */
    quantity: Scalars['Float'];
};
/** Deprecated: use type `PaypalExpressTokenOutput` instead */
export declare type PaypalExpressToken = {
    /**
     * A set of URLs that allow the buyer to authorize payment and adjust checkout details
     * @deprecated Use field `paypal_urls` of type `PaypalExpressTokenOutput` instead
     */
    paypal_urls?: Maybe<PaypalExpressUrlList>;
    /**
     * The token returned by PayPal
     * @deprecated Use field `token` of type `PaypalExpressTokenOutput` instead
     */
    token?: Maybe<Scalars['String']>;
};
/** Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods. */
export declare type PayflowProToken = {
    response_message: Scalars['String'];
    result: Scalars['Int'];
    result_code: Scalars['Int'];
    secure_token: Scalars['String'];
    secure_token_id: Scalars['String'];
};
/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export declare type ConfigurableProduct = ProductInterface & PhysicalProductInterface & CustomizableProductInterface & {
    activity?: Maybe<Scalars['String']>;
    /**
     * The attribute set assigned to the product.
     * @deprecated The field should not be used on the storefront.
     */
    attribute_set_id?: Maybe<Scalars['Int']>;
    backorder_delivery_date?: Maybe<Scalars['String']>;
    backorder_delivery_period?: Maybe<Scalars['Int']>;
    /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
    canonical_url?: Maybe<Scalars['String']>;
    /** The categories assigned to a product. */
    categories?: Maybe<Array<Maybe<CategoryInterface>>>;
    category_gear?: Maybe<Scalars['String']>;
    climate?: Maybe<Scalars['String']>;
    collar?: Maybe<Scalars['String']>;
    color?: Maybe<Scalars['Int']>;
    colors?: Maybe<Scalars['String']>;
    compatible_phones?: Maybe<Scalars['Int']>;
    /** An array of linked simple product items */
    configurable_options?: Maybe<Array<Maybe<ConfigurableProductOptions>>>;
    /** Metadata for the specified configurable options selection */
    configurable_product_options_selection?: Maybe<ConfigurableProductOptionsSelection>;
    /** The product's country of origin. */
    country_of_manufacture?: Maybe<Scalars['String']>;
    /**
     * Timestamp indicating when the product was created.
     * @deprecated The field should not be used on the storefront.
     */
    created_at?: Maybe<Scalars['String']>;
    /** Crosssell Products */
    crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** Detailed information about the product. The value can include simple HTML tags. */
    description?: Maybe<ComplexTextValue>;
    dominant_color?: Maybe<Scalars['Int']>;
    eco_collection?: Maybe<Scalars['Int']>;
    erin_recommends?: Maybe<Scalars['Int']>;
    features_bags?: Maybe<Scalars['String']>;
    format?: Maybe<Scalars['Int']>;
    gender?: Maybe<Scalars['String']>;
    /** Indicates whether a gift message is available. */
    gift_message_available?: Maybe<Scalars['String']>;
    /**
     * The ID number assigned to the product.
     * @deprecated Use the `uid` field instead.
     */
    id?: Maybe<Scalars['Int']>;
    /** The relative path to the main image on the product page. */
    image?: Maybe<ProductImage>;
    in_stock_delivery_period?: Maybe<Scalars['Int']>;
    /** A number representing the product's manufacturer. */
    manufacturer?: Maybe<Scalars['Int']>;
    material?: Maybe<Scalars['Int']>;
    /** An array of Media Gallery objects. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
    /**
     * An array of MediaGalleryEntry objects.
     * @deprecated Use product's `media_gallery` instead
     */
    media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
    /** A brief overview of the product for search results listings, maximum 255 characters. */
    meta_description?: Maybe<Scalars['String']>;
    /** A comma-separated list of keywords that are visible only to search engines. */
    meta_keyword?: Maybe<Scalars['String']>;
    /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
    meta_title?: Maybe<Scalars['String']>;
    /** The product name. Customers use this name to identify the product. */
    name?: Maybe<Scalars['String']>;
    new?: Maybe<Scalars['Int']>;
    /**
     * The beginning date for new product listings, and determines if the product is featured as a new product.
     * @deprecated The field should not be used on the storefront.
     */
    new_from_date?: Maybe<Scalars['String']>;
    /**
     * The end date for new product listings.
     * @deprecated The field should not be used on the storefront.
     */
    new_to_date?: Maybe<Scalars['String']>;
    /** Product stock only x left count */
    only_x_left_in_stock?: Maybe<Scalars['Float']>;
    /** An array of options for a customizable product. */
    options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
    /** If the product has multiple options, determines where they appear on the product page. */
    options_container?: Maybe<Scalars['String']>;
    pattern?: Maybe<Scalars['String']>;
    performance_fabric?: Maybe<Scalars['Int']>;
    /**
     * A ProductPrices object, indicating the price of an item.
     * @deprecated Use price_range for product price information.
     */
    price?: Maybe<ProductPrices>;
    /** A PriceRange object, indicating the range of prices for the product */
    price_range: PriceRange;
    /** An array of TierPrice objects. */
    price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
    print_art?: Maybe<Scalars['String']>;
    print_holiday?: Maybe<Scalars['String']>;
    print_labels?: Maybe<Scalars['String']>;
    print_landmarks?: Maybe<Scalars['String']>;
    print_landscape?: Maybe<Scalars['String']>;
    print_mood?: Maybe<Scalars['String']>;
    print_pattern_swatch?: Maybe<Scalars['Int']>;
    print_type?: Maybe<Scalars['String']>;
    /** An array of ProductLinks objects. */
    product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
    /** The average of all the ratings given to the product. */
    rating_summary: Scalars['Float'];
    /** Related Products */
    related_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The total count of all the reviews given to the product. */
    review_count: Scalars['Int'];
    /** The list of products reviews. */
    reviews: ProductReviews;
    sale?: Maybe<Scalars['Int']>;
    /** A short description of the product. Its use depends on the theme. */
    short_description?: Maybe<ComplexTextValue>;
    size?: Maybe<Scalars['Int']>;
    /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
    sku?: Maybe<Scalars['String']>;
    sleeve?: Maybe<Scalars['String']>;
    /** The relative path to the small image, which is used on catalog pages. */
    small_image?: Maybe<ProductImage>;
    /**
     * The beginning date that a product has a special price.
     * @deprecated The field should not be used on the storefront.
     */
    special_from_date?: Maybe<Scalars['String']>;
    /** The discounted price of the product. */
    special_price?: Maybe<Scalars['Float']>;
    /** The end date that a product has a special price. */
    special_to_date?: Maybe<Scalars['String']>;
    /** Stock status of the product */
    stock_status?: Maybe<ProductStockStatus>;
    strap_bags?: Maybe<Scalars['String']>;
    style_bags?: Maybe<Scalars['String']>;
    style_bottom?: Maybe<Scalars['String']>;
    style_general?: Maybe<Scalars['String']>;
    /** The file name of a swatch image */
    swatch_image?: Maybe<Scalars['String']>;
    /** The relative path to the product's thumbnail image. */
    thumbnail?: Maybe<ProductImage>;
    /**
     * The price when tier pricing is in effect and the items purchased threshold has been reached.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_price?: Maybe<Scalars['Float']>;
    /**
     * An array of ProductTierPrices objects.
     * @deprecated Use price_tiers for product tier price information.
     */
    tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
    /**
     * One of simple, virtual, bundle, downloadable, grouped, or configurable.
     * @deprecated Use __typename instead.
     */
    type_id?: Maybe<Scalars['String']>;
    /** The unique ID for a `ProductInterface` object. */
    uid: Scalars['ID'];
    /**
     * Timestamp indicating when the product was updated.
     * @deprecated The field should not be used on the storefront.
     */
    updated_at?: Maybe<Scalars['String']>;
    /** Upsell Products */
    upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
    /** The part of the URL that identifies the product */
    url_key?: Maybe<Scalars['String']>;
    /** @deprecated Use product's `canonical_url` or url rewrites instead */
    url_path?: Maybe<Scalars['String']>;
    /** URL rewrites list */
    url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
    /** The part of the product URL that is appended after the url key */
    url_suffix?: Maybe<Scalars['String']>;
    /** An array of variants of products */
    variants?: Maybe<Array<Maybe<ConfigurableVariant>>>;
    /**
     * An array of websites in which the product is available.
     * @deprecated The field should not be used on the storefront.
     */
    websites?: Maybe<Array<Maybe<Website>>>;
    /** The weight of the item, in units defined by the store. */
    weight?: Maybe<Scalars['Float']>;
};
/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export declare type ConfigurableProductconfigurable_product_options_selectionArgs = {
    configurableOptionValueUids?: Maybe<Array<Scalars['ID']>>;
};
/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export declare type ConfigurableProductreviewsArgs = {
    pageSize?: Maybe<Scalars['Int']>;
    currentPage?: Maybe<Scalars['Int']>;
};
/** ConfigurableProductOptions defines configurable attributes for the specified product */
export declare type ConfigurableProductOptions = {
    /** A string that identifies the attribute */
    attribute_code?: Maybe<Scalars['String']>;
    /**
     * The ID assigned to the attribute
     * @deprecated Use attribute_uid instead
     */
    attribute_id?: Maybe<Scalars['String']>;
    /**
     * The ID assigned to the attribute
     * @deprecated Use attribute_uid instead
     */
    attribute_id_v2?: Maybe<Scalars['Int']>;
    /** The unique ID for a `Attribute` object */
    attribute_uid: Scalars['ID'];
    /**
     * The configurable option ID number assigned by the system
     * @deprecated Use uid instead
     */
    id?: Maybe<Scalars['Int']>;
    /** A string that describes the configurable product option, which is displayed on the UI */
    label?: Maybe<Scalars['String']>;
    /** A number that indicates the order in which the attribute is displayed */
    position?: Maybe<Scalars['Int']>;
    /**
     * This is the same as a product's id field
     * @deprecated `product_id` is not needed and can be obtained from it's parent
     */
    product_id?: Maybe<Scalars['Int']>;
    /** The unique ID for a `ConfigurableProductOptions` object */
    uid: Scalars['ID'];
    /** Indicates whether the option is the default */
    use_default?: Maybe<Scalars['Boolean']>;
    /** An array that defines the value_index codes assigned to the configurable product */
    values?: Maybe<Array<Maybe<ConfigurableProductOptionsValues>>>;
};
/** ConfigurableProductOptionsValues contains the index number assigned to a configurable product option */
export declare type ConfigurableProductOptionsValues = {
    /** The label of the product on the default store */
    default_label?: Maybe<Scalars['String']>;
    /** The label of the product */
    label?: Maybe<Scalars['String']>;
    /** The label of the product on the current store */
    store_label?: Maybe<Scalars['String']>;
    /** Swatch data for configurable product option */
    swatch_data?: Maybe<SwatchDataInterface>;
    /** The unique ID for a `ConfigurableProductOptionsValues` object */
    uid?: Maybe<Scalars['ID']>;
    /** Indicates whether to use the default_label */
    use_default_value?: Maybe<Scalars['Boolean']>;
    /**
     * A unique index number assigned to the configurable product option
     * @deprecated Use `uid` instead
     */
    value_index?: Maybe<Scalars['Int']>;
};
export declare type SwatchDataInterface = {
    /** Value of swatch item (HEX color code, image link or textual value) */
    value?: Maybe<Scalars['String']>;
};
/** Metadata corresponding to the configurable options selection. */
export declare type ConfigurableProductOptionsSelection = {
    /** Product images and videos corresponding to the specified configurable options selection. */
    media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
    /** Configurable options available for further selection based on current selection. */
    options_available_for_selection?: Maybe<Array<Maybe<ConfigurableOptionAvailableForSelection>>>;
    /** Variant represented by the specified configurable options selection. It is expected to be null, until selections are made for each configurable option. */
    variant?: Maybe<SimpleProduct>;
};
/** Configurable option available for further selection based on current selection. */
export declare type ConfigurableOptionAvailableForSelection = {
    /** Attribute code that uniquely identifies configurable option. */
    attribute_code: Scalars['String'];
    /** Configurable option values available for further selection. */
    option_value_uids: Array<Maybe<Scalars['ID']>>;
};
/** An array containing all the simple product variants of a configurable product */
export declare type ConfigurableVariant = {
    attributes?: Maybe<Array<Maybe<ConfigurableAttributeOption>>>;
    product?: Maybe<SimpleProduct>;
};
/** ConfigurableAttributeOption contains the value_index (and other related information) assigned to a configurable product option */
export declare type ConfigurableAttributeOption = {
    /** The ID assigned to the attribute */
    code?: Maybe<Scalars['String']>;
    /** A string that describes the configurable attribute option */
    label?: Maybe<Scalars['String']>;
    /** The unique ID for a `ConfigurableAttributeOption` object */
    uid: Scalars['ID'];
    /** A unique index number assigned to the configurable product option */
    value_index?: Maybe<Scalars['Int']>;
};
/** A configurable product wish list item */
export declare type ConfigurableWishlistItem = WishlistItemInterface & {
    /** The date and time the item was added to the wish list */
    added_at: Scalars['String'];
    /** The SKU of the simple product corresponding to a set of selected configurable options */
    child_sku: Scalars['String'];
    /** An array of selected configurable options */
    configurable_options?: Maybe<Array<Maybe<SelectedConfigurableOption>>>;
    /** Custom options selected for the wish list item */
    customizable_options: Array<Maybe<SelectedCustomizableOption>>;
    /** The description of the item */
    description?: Maybe<Scalars['String']>;
    /** The unique ID for a `WishlistItemInterface` object */
    id: Scalars['ID'];
    /** Product details of the wish list item */
    product?: Maybe<ProductInterface>;
    /** The quantity of this wish list item */
    quantity: Scalars['Float'];
};
export declare type OrderItem = OrderItemInterface & {
    /** The final discount information for the product */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** The entered option for the base product, such as a logo or image */
    entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
    /** The unique ID for a `OrderItemInterface` object */
    id: Scalars['ID'];
    /** The name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** The sale price of the base product, including selected options */
    product_sale_price: Money;
    /** The SKU of the base product */
    product_sku: Scalars['String'];
    /** The type of product, such as simple, configurable, etc. */
    product_type?: Maybe<Scalars['String']>;
    /** URL key of the base product */
    product_url_key?: Maybe<Scalars['String']>;
    /** The number of canceled items */
    quantity_canceled?: Maybe<Scalars['Float']>;
    /** The number of invoiced items */
    quantity_invoiced?: Maybe<Scalars['Float']>;
    /** The number of units ordered for this item */
    quantity_ordered?: Maybe<Scalars['Float']>;
    /** The number of refunded items */
    quantity_refunded?: Maybe<Scalars['Float']>;
    /** The number of returned items */
    quantity_returned?: Maybe<Scalars['Float']>;
    /** The number of shipped items */
    quantity_shipped?: Maybe<Scalars['Float']>;
    /** The selected options for the base product, such as color or size */
    selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
    /** The status of the order item */
    status?: Maybe<Scalars['String']>;
};
export declare type InvoiceItem = InvoiceItemInterface & {
    /** Contains information about the final discount amount for the base product, including discounts on options */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** The unique ID for a `InvoiceItemInterface` object */
    id: Scalars['ID'];
    /** Contains details about an individual order item */
    order_item?: Maybe<OrderItemInterface>;
    /** The name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** The sale price for the base product including selected options */
    product_sale_price: Money;
    /** The SKU of the base product */
    product_sku: Scalars['String'];
    /** The number of invoiced items */
    quantity_invoiced?: Maybe<Scalars['Float']>;
};
export declare type ShipmentItem = ShipmentItemInterface & {
    /** The unique ID for a `ShipmentItemInterface` object */
    id: Scalars['ID'];
    /** Associated order item */
    order_item?: Maybe<OrderItemInterface>;
    /** Name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** Sale price for the base product */
    product_sale_price: Money;
    /** SKU of the base product */
    product_sku: Scalars['String'];
    /** Number of shipped items */
    quantity_shipped: Scalars['Float'];
};
export declare type CreditMemoItem = CreditMemoItemInterface & {
    /** Contains information about the final discount amount for the base product, including discounts on options */
    discounts?: Maybe<Array<Maybe<Discount>>>;
    /** The unique ID for a `CreditMemoItemInterface` object */
    id: Scalars['ID'];
    /** The order item the credit memo is applied to */
    order_item?: Maybe<OrderItemInterface>;
    /** The name of the base product */
    product_name?: Maybe<Scalars['String']>;
    /** The sale price for the base product, including selected options */
    product_sale_price: Money;
    /** SKU of the base product */
    product_sku: Scalars['String'];
    /** The number of refunded items */
    quantity_refunded?: Maybe<Scalars['Float']>;
};
export declare type SwatchLayerFilterItemInterface = {
    /** Data required to render swatch filter item */
    swatch_data?: Maybe<SwatchData>;
};
export declare type SwatchData = {
    /** Type of swatch filter item: 1 - text, 2 - image */
    type?: Maybe<Scalars['String']>;
    /** Value for swatch item (text or image link) */
    value?: Maybe<Scalars['String']>;
};
export declare type SwatchLayerFilterItem = LayerFilterItemInterface & SwatchLayerFilterItemInterface & {
    /**
     * Count of items by filter.
     * @deprecated Use AggregationOption.count instead.
     */
    items_count?: Maybe<Scalars['Int']>;
    /**
     * Filter label.
     * @deprecated Use AggregationOption.label instead.
     */
    label?: Maybe<Scalars['String']>;
    /** Data required to render swatch filter item */
    swatch_data?: Maybe<SwatchData>;
    /**
     * Value for filter request variable to be used in query.
     * @deprecated Use AggregationOption.value instead.
     */
    value_string?: Maybe<Scalars['String']>;
};
export declare type ImageSwatchData = SwatchDataInterface & {
    /** Thumbnail swatch image URL */
    thumbnail?: Maybe<Scalars['String']>;
    /** Value of swatch item (HEX color code, image link or textual value) */
    value?: Maybe<Scalars['String']>;
};
export declare type TextSwatchData = SwatchDataInterface & {
    /** Value of swatch item (HEX color code, image link or textual value) */
    value?: Maybe<Scalars['String']>;
};
export declare type ColorSwatchData = SwatchDataInterface & {
    /** Value of swatch item (HEX color code, image link or textual value) */
    value?: Maybe<Scalars['String']>;
};
export declare type WithIndex<TObject> = TObject & Record<string, any>;
export declare type ResolversObject<TObject> = WithIndex<TObject>;
export declare type ResolverTypeWrapper<T> = Promise<T> | T;
export declare type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
    fragment: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
    selectionSet: string;
    resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export declare type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> = ResolverFn<TResult, TParent, TContext, TArgs> | ResolverWithResolve<TResult, TParent, TContext, TArgs> | StitchingResolver<TResult, TParent, TContext, TArgs>;
export declare type ResolverFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => Promise<TResult> | TResult;
export declare type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => AsyncIterator<TResult> | Promise<AsyncIterator<TResult>>;
export declare type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<{
        [key in TKey]: TResult;
    }, TParent, TContext, TArgs>;
    resolve?: SubscriptionResolveFn<TResult, {
        [key in TKey]: TResult;
    }, TContext, TArgs>;
}
export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
    subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
    resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}
export declare type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> = SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs> | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
export declare type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> = ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>) | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
export declare type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (parent: TParent, context: TContext, info: GraphQLResolveInfo) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
export declare type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;
export declare type NextResolverFn<T> = () => Promise<T>;
export declare type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (next: NextResolverFn<TResult>, parent: TParent, args: TArgs, context: TContext, info: GraphQLResolveInfo) => TResult | Promise<TResult>;
/** Mapping between all available schema types and the resolvers types */
export declare type ResolversTypes = ResolversObject<{
    Query: ResolverTypeWrapper<{}>;
    Aggregate: ResolverTypeWrapper<Aggregate>;
    Asset: ResolverTypeWrapper<Asset>;
    AssetConnectInput: AssetConnectInput;
    AssetConnection: ResolverTypeWrapper<AssetConnection>;
    AssetCreateInput: AssetCreateInput;
    AssetCreateLocalizationDataInput: AssetCreateLocalizationDataInput;
    AssetCreateLocalizationInput: AssetCreateLocalizationInput;
    AssetCreateLocalizationsInput: AssetCreateLocalizationsInput;
    AssetCreateManyInlineInput: AssetCreateManyInlineInput;
    AssetCreateOneInlineInput: AssetCreateOneInlineInput;
    AssetEdge: ResolverTypeWrapper<AssetEdge>;
    AssetManyWhereInput: AssetManyWhereInput;
    AssetOrderByInput: AssetOrderByInput;
    AssetTransformationInput: AssetTransformationInput;
    AssetUpdateInput: AssetUpdateInput;
    AssetUpdateLocalizationDataInput: AssetUpdateLocalizationDataInput;
    AssetUpdateLocalizationInput: AssetUpdateLocalizationInput;
    AssetUpdateLocalizationsInput: AssetUpdateLocalizationsInput;
    AssetUpdateManyInlineInput: AssetUpdateManyInlineInput;
    AssetUpdateManyInput: AssetUpdateManyInput;
    AssetUpdateManyLocalizationDataInput: AssetUpdateManyLocalizationDataInput;
    AssetUpdateManyLocalizationInput: AssetUpdateManyLocalizationInput;
    AssetUpdateManyLocalizationsInput: AssetUpdateManyLocalizationsInput;
    AssetUpdateManyWithNestedWhereInput: AssetUpdateManyWithNestedWhereInput;
    AssetUpdateOneInlineInput: AssetUpdateOneInlineInput;
    AssetUpdateWithNestedWhereUniqueInput: AssetUpdateWithNestedWhereUniqueInput;
    AssetUpsertInput: AssetUpsertInput;
    AssetUpsertLocalizationInput: AssetUpsertLocalizationInput;
    AssetUpsertWithNestedWhereUniqueInput: AssetUpsertWithNestedWhereUniqueInput;
    AssetWhereInput: AssetWhereInput;
    AssetWhereUniqueInput: AssetWhereUniqueInput;
    BatchPayload: ResolverTypeWrapper<BatchPayload>;
    Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
    Color: ResolverTypeWrapper<Color>;
    ColorInput: ColorInput;
    ConnectPositionInput: ConnectPositionInput;
    Date: ResolverTypeWrapper<Scalars['Date']>;
    DateTime: ResolverTypeWrapper<Scalars['DateTime']>;
    DocumentFileTypes: DocumentFileTypes;
    DocumentOutputInput: DocumentOutputInput;
    DocumentTransformationInput: DocumentTransformationInput;
    DocumentVersion: ResolverTypeWrapper<DocumentVersion>;
    Float: ResolverTypeWrapper<Scalars['Float']>;
    Footer: ResolverTypeWrapper<Footer>;
    FooterConnectInput: FooterConnectInput;
    FooterConnection: ResolverTypeWrapper<FooterConnection>;
    FooterCreateInput: FooterCreateInput;
    FooterCreateManyInlineInput: FooterCreateManyInlineInput;
    FooterCreateOneInlineInput: FooterCreateOneInlineInput;
    FooterEdge: ResolverTypeWrapper<FooterEdge>;
    FooterManyWhereInput: FooterManyWhereInput;
    FooterOrderByInput: FooterOrderByInput;
    FooterUpdateInput: FooterUpdateInput;
    FooterUpdateManyInlineInput: FooterUpdateManyInlineInput;
    FooterUpdateManyInput: FooterUpdateManyInput;
    FooterUpdateManyWithNestedWhereInput: FooterUpdateManyWithNestedWhereInput;
    FooterUpdateOneInlineInput: FooterUpdateOneInlineInput;
    FooterUpdateWithNestedWhereUniqueInput: FooterUpdateWithNestedWhereUniqueInput;
    FooterUpsertInput: FooterUpsertInput;
    FooterUpsertWithNestedWhereUniqueInput: FooterUpsertWithNestedWhereUniqueInput;
    FooterWhereInput: FooterWhereInput;
    FooterWhereUniqueInput: FooterWhereUniqueInput;
    Hex: ResolverTypeWrapper<Scalars['Hex']>;
    ID: ResolverTypeWrapper<Scalars['ID']>;
    ImageFit: ImageFit;
    ImageResizeInput: ImageResizeInput;
    ImageTransformationInput: ImageTransformationInput;
    Int: ResolverTypeWrapper<Scalars['Int']>;
    Json: ResolverTypeWrapper<Scalars['Json']>;
    Locale: Locale;
    Location: ResolverTypeWrapper<Location>;
    LocationInput: LocationInput;
    Long: ResolverTypeWrapper<Scalars['Long']>;
    MagentoCategory: ResolverTypeWrapper<MagentoCategory>;
    MagentoCategoryConnectInput: MagentoCategoryConnectInput;
    MagentoCategoryConnection: ResolverTypeWrapper<MagentoCategoryConnection>;
    MagentoCategoryCreateInput: MagentoCategoryCreateInput;
    MagentoCategoryCreateLocalizationDataInput: MagentoCategoryCreateLocalizationDataInput;
    MagentoCategoryCreateLocalizationInput: MagentoCategoryCreateLocalizationInput;
    MagentoCategoryCreateLocalizationsInput: MagentoCategoryCreateLocalizationsInput;
    MagentoCategoryCreateManyInlineInput: MagentoCategoryCreateManyInlineInput;
    MagentoCategoryCreateOneInlineInput: MagentoCategoryCreateOneInlineInput;
    MagentoCategoryEdge: ResolverTypeWrapper<MagentoCategoryEdge>;
    MagentoCategoryManyWhereInput: MagentoCategoryManyWhereInput;
    MagentoCategoryOrderByInput: MagentoCategoryOrderByInput;
    MagentoCategoryUpdateInput: MagentoCategoryUpdateInput;
    MagentoCategoryUpdateLocalizationDataInput: MagentoCategoryUpdateLocalizationDataInput;
    MagentoCategoryUpdateLocalizationInput: MagentoCategoryUpdateLocalizationInput;
    MagentoCategoryUpdateLocalizationsInput: MagentoCategoryUpdateLocalizationsInput;
    MagentoCategoryUpdateManyInlineInput: MagentoCategoryUpdateManyInlineInput;
    MagentoCategoryUpdateManyInput: MagentoCategoryUpdateManyInput;
    MagentoCategoryUpdateManyWithNestedWhereInput: MagentoCategoryUpdateManyWithNestedWhereInput;
    MagentoCategoryUpdateOneInlineInput: MagentoCategoryUpdateOneInlineInput;
    MagentoCategoryUpdateWithNestedWhereUniqueInput: MagentoCategoryUpdateWithNestedWhereUniqueInput;
    MagentoCategoryUpsertInput: MagentoCategoryUpsertInput;
    MagentoCategoryUpsertLocalizationInput: MagentoCategoryUpsertLocalizationInput;
    MagentoCategoryUpsertWithNestedWhereUniqueInput: MagentoCategoryUpsertWithNestedWhereUniqueInput;
    MagentoCategoryWhereInput: MagentoCategoryWhereInput;
    MagentoCategoryWhereUniqueInput: MagentoCategoryWhereUniqueInput;
    MetaRobots: MetaRobots;
    Node: ResolversTypes['Asset'] | ResolversTypes['Footer'] | ResolversTypes['MagentoCategory'] | ResolversTypes['Page'] | ResolversTypes['PageLink'] | ResolversTypes['Product'] | ResolversTypes['RowBlogContent'] | ResolversTypes['RowButtonLinkList'] | ResolversTypes['RowColumnOne'] | ResolversTypes['RowColumnThree'] | ResolversTypes['RowColumnTwo'] | ResolversTypes['RowContentLinks'] | ResolversTypes['RowHeroBanner'] | ResolversTypes['RowProductBackstory'] | ResolversTypes['RowProductFeature'] | ResolversTypes['RowProductFeatureBoxed'] | ResolversTypes['RowProductGrid'] | ResolversTypes['RowProductRelated'] | ResolversTypes['RowProductReviews'] | ResolversTypes['RowProductSpecs'] | ResolversTypes['RowProductUpsells'] | ResolversTypes['RowQuote'] | ResolversTypes['RowServiceOptions'] | ResolversTypes['RowSpecialBanner'] | ResolversTypes['RowSwipeableGrid'] | ResolversTypes['User'] | ResolversTypes['Usps'];
    Page: ResolverTypeWrapper<Omit<Page, 'content'> & {
        content: Array<ResolversTypes['PageContent']>;
    }>;
    PageConnectInput: PageConnectInput;
    PageConnection: ResolverTypeWrapper<PageConnection>;
    PageContent: ResolversTypes['RowBlogContent'] | ResolversTypes['RowButtonLinkList'] | ResolversTypes['RowColumnOne'] | ResolversTypes['RowColumnThree'] | ResolversTypes['RowColumnTwo'] | ResolversTypes['RowContentLinks'] | ResolversTypes['RowHeroBanner'] | ResolversTypes['RowProductBackstory'] | ResolversTypes['RowProductGrid'] | ResolversTypes['RowQuote'] | ResolversTypes['RowServiceOptions'] | ResolversTypes['RowSpecialBanner'] | ResolversTypes['RowSwipeableGrid'];
    PageContentConnectInput: PageContentConnectInput;
    PageContentCreateInput: PageContentCreateInput;
    PageContentCreateManyInlineInput: PageContentCreateManyInlineInput;
    PageContentCreateOneInlineInput: PageContentCreateOneInlineInput;
    PageContentUpdateInput: PageContentUpdateInput;
    PageContentUpdateManyInlineInput: PageContentUpdateManyInlineInput;
    PageContentUpdateManyWithNestedWhereInput: PageContentUpdateManyWithNestedWhereInput;
    PageContentUpdateOneInlineInput: PageContentUpdateOneInlineInput;
    PageContentUpdateWithNestedWhereUniqueInput: PageContentUpdateWithNestedWhereUniqueInput;
    PageContentUpsertWithNestedWhereUniqueInput: PageContentUpsertWithNestedWhereUniqueInput;
    PageContentWhereInput: PageContentWhereInput;
    PageContentWhereUniqueInput: PageContentWhereUniqueInput;
    PageCreateInput: PageCreateInput;
    PageCreateLocalizationDataInput: PageCreateLocalizationDataInput;
    PageCreateLocalizationInput: PageCreateLocalizationInput;
    PageCreateLocalizationsInput: PageCreateLocalizationsInput;
    PageCreateManyInlineInput: PageCreateManyInlineInput;
    PageCreateOneInlineInput: PageCreateOneInlineInput;
    PageEdge: ResolverTypeWrapper<PageEdge>;
    PageInfo: ResolverTypeWrapper<PageInfo>;
    PageLink: ResolverTypeWrapper<PageLink>;
    PageLinkConnectInput: PageLinkConnectInput;
    PageLinkConnection: ResolverTypeWrapper<PageLinkConnection>;
    PageLinkCreateInput: PageLinkCreateInput;
    PageLinkCreateLocalizationDataInput: PageLinkCreateLocalizationDataInput;
    PageLinkCreateLocalizationInput: PageLinkCreateLocalizationInput;
    PageLinkCreateLocalizationsInput: PageLinkCreateLocalizationsInput;
    PageLinkCreateManyInlineInput: PageLinkCreateManyInlineInput;
    PageLinkCreateOneInlineInput: PageLinkCreateOneInlineInput;
    PageLinkEdge: ResolverTypeWrapper<PageLinkEdge>;
    PageLinkManyWhereInput: PageLinkManyWhereInput;
    PageLinkOrderByInput: PageLinkOrderByInput;
    PageLinkUpdateInput: PageLinkUpdateInput;
    PageLinkUpdateLocalizationDataInput: PageLinkUpdateLocalizationDataInput;
    PageLinkUpdateLocalizationInput: PageLinkUpdateLocalizationInput;
    PageLinkUpdateLocalizationsInput: PageLinkUpdateLocalizationsInput;
    PageLinkUpdateManyInlineInput: PageLinkUpdateManyInlineInput;
    PageLinkUpdateManyInput: PageLinkUpdateManyInput;
    PageLinkUpdateManyLocalizationDataInput: PageLinkUpdateManyLocalizationDataInput;
    PageLinkUpdateManyLocalizationInput: PageLinkUpdateManyLocalizationInput;
    PageLinkUpdateManyLocalizationsInput: PageLinkUpdateManyLocalizationsInput;
    PageLinkUpdateManyWithNestedWhereInput: PageLinkUpdateManyWithNestedWhereInput;
    PageLinkUpdateOneInlineInput: PageLinkUpdateOneInlineInput;
    PageLinkUpdateWithNestedWhereUniqueInput: PageLinkUpdateWithNestedWhereUniqueInput;
    PageLinkUpsertInput: PageLinkUpsertInput;
    PageLinkUpsertLocalizationInput: PageLinkUpsertLocalizationInput;
    PageLinkUpsertWithNestedWhereUniqueInput: PageLinkUpsertWithNestedWhereUniqueInput;
    PageLinkWhereInput: PageLinkWhereInput;
    PageLinkWhereUniqueInput: PageLinkWhereUniqueInput;
    PageManyWhereInput: PageManyWhereInput;
    PageOrderByInput: PageOrderByInput;
    PageUpdateInput: PageUpdateInput;
    PageUpdateLocalizationDataInput: PageUpdateLocalizationDataInput;
    PageUpdateLocalizationInput: PageUpdateLocalizationInput;
    PageUpdateLocalizationsInput: PageUpdateLocalizationsInput;
    PageUpdateManyInlineInput: PageUpdateManyInlineInput;
    PageUpdateManyInput: PageUpdateManyInput;
    PageUpdateManyLocalizationDataInput: PageUpdateManyLocalizationDataInput;
    PageUpdateManyLocalizationInput: PageUpdateManyLocalizationInput;
    PageUpdateManyLocalizationsInput: PageUpdateManyLocalizationsInput;
    PageUpdateManyWithNestedWhereInput: PageUpdateManyWithNestedWhereInput;
    PageUpdateOneInlineInput: PageUpdateOneInlineInput;
    PageUpdateWithNestedWhereUniqueInput: PageUpdateWithNestedWhereUniqueInput;
    PageUpsertInput: PageUpsertInput;
    PageUpsertLocalizationInput: PageUpsertLocalizationInput;
    PageUpsertWithNestedWhereUniqueInput: PageUpsertWithNestedWhereUniqueInput;
    PageWhereInput: PageWhereInput;
    PageWhereUniqueInput: PageWhereUniqueInput;
    Product: ResolverTypeWrapper<Omit<Product, 'content'> & {
        content: Array<ResolversTypes['ProductContent']>;
    }>;
    ProductConnectInput: ProductConnectInput;
    ProductConnection: ResolverTypeWrapper<ProductConnection>;
    ProductContent: ResolversTypes['RowColumnOne'] | ResolversTypes['RowColumnThree'] | ResolversTypes['RowColumnTwo'] | ResolversTypes['RowContentLinks'] | ResolversTypes['RowProductFeature'] | ResolversTypes['RowProductFeatureBoxed'] | ResolversTypes['RowProductRelated'] | ResolversTypes['RowProductReviews'] | ResolversTypes['RowProductSpecs'] | ResolversTypes['RowProductUpsells'] | ResolversTypes['RowQuote'] | ResolversTypes['RowSpecialBanner'];
    ProductContentConnectInput: ProductContentConnectInput;
    ProductContentCreateInput: ProductContentCreateInput;
    ProductContentCreateManyInlineInput: ProductContentCreateManyInlineInput;
    ProductContentCreateOneInlineInput: ProductContentCreateOneInlineInput;
    ProductContentUpdateInput: ProductContentUpdateInput;
    ProductContentUpdateManyInlineInput: ProductContentUpdateManyInlineInput;
    ProductContentUpdateManyWithNestedWhereInput: ProductContentUpdateManyWithNestedWhereInput;
    ProductContentUpdateOneInlineInput: ProductContentUpdateOneInlineInput;
    ProductContentUpdateWithNestedWhereUniqueInput: ProductContentUpdateWithNestedWhereUniqueInput;
    ProductContentUpsertWithNestedWhereUniqueInput: ProductContentUpsertWithNestedWhereUniqueInput;
    ProductContentWhereInput: ProductContentWhereInput;
    ProductContentWhereUniqueInput: ProductContentWhereUniqueInput;
    ProductCreateInput: ProductCreateInput;
    ProductCreateLocalizationDataInput: ProductCreateLocalizationDataInput;
    ProductCreateLocalizationInput: ProductCreateLocalizationInput;
    ProductCreateLocalizationsInput: ProductCreateLocalizationsInput;
    ProductCreateManyInlineInput: ProductCreateManyInlineInput;
    ProductCreateOneInlineInput: ProductCreateOneInlineInput;
    ProductEdge: ResolverTypeWrapper<ProductEdge>;
    ProductManyWhereInput: ProductManyWhereInput;
    ProductOrderByInput: ProductOrderByInput;
    ProductUpdateInput: ProductUpdateInput;
    ProductUpdateLocalizationDataInput: ProductUpdateLocalizationDataInput;
    ProductUpdateLocalizationInput: ProductUpdateLocalizationInput;
    ProductUpdateLocalizationsInput: ProductUpdateLocalizationsInput;
    ProductUpdateManyInlineInput: ProductUpdateManyInlineInput;
    ProductUpdateManyInput: ProductUpdateManyInput;
    ProductUpdateManyWithNestedWhereInput: ProductUpdateManyWithNestedWhereInput;
    ProductUpdateOneInlineInput: ProductUpdateOneInlineInput;
    ProductUpdateWithNestedWhereUniqueInput: ProductUpdateWithNestedWhereUniqueInput;
    ProductUpsertInput: ProductUpsertInput;
    ProductUpsertLocalizationInput: ProductUpsertLocalizationInput;
    ProductUpsertWithNestedWhereUniqueInput: ProductUpsertWithNestedWhereUniqueInput;
    ProductWhereInput: ProductWhereInput;
    ProductWhereUniqueInput: ProductWhereUniqueInput;
    PublishLocaleInput: PublishLocaleInput;
    RGBA: ResolverTypeWrapper<RGBA>;
    RGBAHue: ResolverTypeWrapper<Scalars['RGBAHue']>;
    RGBAInput: RGBAInput;
    RGBATransparency: ResolverTypeWrapper<Scalars['RGBATransparency']>;
    RichText: ResolverTypeWrapper<RichText>;
    RichTextAST: ResolverTypeWrapper<Scalars['RichTextAST']>;
    RowBlogContent: ResolverTypeWrapper<RowBlogContent>;
    RowBlogContentConnectInput: RowBlogContentConnectInput;
    RowBlogContentConnection: ResolverTypeWrapper<RowBlogContentConnection>;
    RowBlogContentCreateInput: RowBlogContentCreateInput;
    RowBlogContentCreateLocalizationDataInput: RowBlogContentCreateLocalizationDataInput;
    RowBlogContentCreateLocalizationInput: RowBlogContentCreateLocalizationInput;
    RowBlogContentCreateLocalizationsInput: RowBlogContentCreateLocalizationsInput;
    RowBlogContentCreateManyInlineInput: RowBlogContentCreateManyInlineInput;
    RowBlogContentCreateOneInlineInput: RowBlogContentCreateOneInlineInput;
    RowBlogContentEdge: ResolverTypeWrapper<RowBlogContentEdge>;
    RowBlogContentManyWhereInput: RowBlogContentManyWhereInput;
    RowBlogContentOrderByInput: RowBlogContentOrderByInput;
    RowBlogContentUpdateInput: RowBlogContentUpdateInput;
    RowBlogContentUpdateLocalizationDataInput: RowBlogContentUpdateLocalizationDataInput;
    RowBlogContentUpdateLocalizationInput: RowBlogContentUpdateLocalizationInput;
    RowBlogContentUpdateLocalizationsInput: RowBlogContentUpdateLocalizationsInput;
    RowBlogContentUpdateManyInlineInput: RowBlogContentUpdateManyInlineInput;
    RowBlogContentUpdateManyInput: RowBlogContentUpdateManyInput;
    RowBlogContentUpdateManyLocalizationDataInput: RowBlogContentUpdateManyLocalizationDataInput;
    RowBlogContentUpdateManyLocalizationInput: RowBlogContentUpdateManyLocalizationInput;
    RowBlogContentUpdateManyLocalizationsInput: RowBlogContentUpdateManyLocalizationsInput;
    RowBlogContentUpdateManyWithNestedWhereInput: RowBlogContentUpdateManyWithNestedWhereInput;
    RowBlogContentUpdateOneInlineInput: RowBlogContentUpdateOneInlineInput;
    RowBlogContentUpdateWithNestedWhereUniqueInput: RowBlogContentUpdateWithNestedWhereUniqueInput;
    RowBlogContentUpsertInput: RowBlogContentUpsertInput;
    RowBlogContentUpsertLocalizationInput: RowBlogContentUpsertLocalizationInput;
    RowBlogContentUpsertWithNestedWhereUniqueInput: RowBlogContentUpsertWithNestedWhereUniqueInput;
    RowBlogContentWhereInput: RowBlogContentWhereInput;
    RowBlogContentWhereUniqueInput: RowBlogContentWhereUniqueInput;
    RowButtonLinkList: ResolverTypeWrapper<RowButtonLinkList>;
    RowButtonLinkListConnectInput: RowButtonLinkListConnectInput;
    RowButtonLinkListConnection: ResolverTypeWrapper<RowButtonLinkListConnection>;
    RowButtonLinkListCreateInput: RowButtonLinkListCreateInput;
    RowButtonLinkListCreateLocalizationDataInput: RowButtonLinkListCreateLocalizationDataInput;
    RowButtonLinkListCreateLocalizationInput: RowButtonLinkListCreateLocalizationInput;
    RowButtonLinkListCreateLocalizationsInput: RowButtonLinkListCreateLocalizationsInput;
    RowButtonLinkListCreateManyInlineInput: RowButtonLinkListCreateManyInlineInput;
    RowButtonLinkListCreateOneInlineInput: RowButtonLinkListCreateOneInlineInput;
    RowButtonLinkListEdge: ResolverTypeWrapper<RowButtonLinkListEdge>;
    RowButtonLinkListManyWhereInput: RowButtonLinkListManyWhereInput;
    RowButtonLinkListOrderByInput: RowButtonLinkListOrderByInput;
    RowButtonLinkListUpdateInput: RowButtonLinkListUpdateInput;
    RowButtonLinkListUpdateLocalizationDataInput: RowButtonLinkListUpdateLocalizationDataInput;
    RowButtonLinkListUpdateLocalizationInput: RowButtonLinkListUpdateLocalizationInput;
    RowButtonLinkListUpdateLocalizationsInput: RowButtonLinkListUpdateLocalizationsInput;
    RowButtonLinkListUpdateManyInlineInput: RowButtonLinkListUpdateManyInlineInput;
    RowButtonLinkListUpdateManyInput: RowButtonLinkListUpdateManyInput;
    RowButtonLinkListUpdateManyLocalizationDataInput: RowButtonLinkListUpdateManyLocalizationDataInput;
    RowButtonLinkListUpdateManyLocalizationInput: RowButtonLinkListUpdateManyLocalizationInput;
    RowButtonLinkListUpdateManyLocalizationsInput: RowButtonLinkListUpdateManyLocalizationsInput;
    RowButtonLinkListUpdateManyWithNestedWhereInput: RowButtonLinkListUpdateManyWithNestedWhereInput;
    RowButtonLinkListUpdateOneInlineInput: RowButtonLinkListUpdateOneInlineInput;
    RowButtonLinkListUpdateWithNestedWhereUniqueInput: RowButtonLinkListUpdateWithNestedWhereUniqueInput;
    RowButtonLinkListUpsertInput: RowButtonLinkListUpsertInput;
    RowButtonLinkListUpsertLocalizationInput: RowButtonLinkListUpsertLocalizationInput;
    RowButtonLinkListUpsertWithNestedWhereUniqueInput: RowButtonLinkListUpsertWithNestedWhereUniqueInput;
    RowButtonLinkListWhereInput: RowButtonLinkListWhereInput;
    RowButtonLinkListWhereUniqueInput: RowButtonLinkListWhereUniqueInput;
    RowColumnOne: ResolverTypeWrapper<RowColumnOne>;
    RowColumnOneConnectInput: RowColumnOneConnectInput;
    RowColumnOneConnection: ResolverTypeWrapper<RowColumnOneConnection>;
    RowColumnOneCreateInput: RowColumnOneCreateInput;
    RowColumnOneCreateLocalizationDataInput: RowColumnOneCreateLocalizationDataInput;
    RowColumnOneCreateLocalizationInput: RowColumnOneCreateLocalizationInput;
    RowColumnOneCreateLocalizationsInput: RowColumnOneCreateLocalizationsInput;
    RowColumnOneCreateManyInlineInput: RowColumnOneCreateManyInlineInput;
    RowColumnOneCreateOneInlineInput: RowColumnOneCreateOneInlineInput;
    RowColumnOneEdge: ResolverTypeWrapper<RowColumnOneEdge>;
    RowColumnOneManyWhereInput: RowColumnOneManyWhereInput;
    RowColumnOneOrderByInput: RowColumnOneOrderByInput;
    RowColumnOneUpdateInput: RowColumnOneUpdateInput;
    RowColumnOneUpdateLocalizationDataInput: RowColumnOneUpdateLocalizationDataInput;
    RowColumnOneUpdateLocalizationInput: RowColumnOneUpdateLocalizationInput;
    RowColumnOneUpdateLocalizationsInput: RowColumnOneUpdateLocalizationsInput;
    RowColumnOneUpdateManyInlineInput: RowColumnOneUpdateManyInlineInput;
    RowColumnOneUpdateManyInput: RowColumnOneUpdateManyInput;
    RowColumnOneUpdateManyLocalizationDataInput: RowColumnOneUpdateManyLocalizationDataInput;
    RowColumnOneUpdateManyLocalizationInput: RowColumnOneUpdateManyLocalizationInput;
    RowColumnOneUpdateManyLocalizationsInput: RowColumnOneUpdateManyLocalizationsInput;
    RowColumnOneUpdateManyWithNestedWhereInput: RowColumnOneUpdateManyWithNestedWhereInput;
    RowColumnOneUpdateOneInlineInput: RowColumnOneUpdateOneInlineInput;
    RowColumnOneUpdateWithNestedWhereUniqueInput: RowColumnOneUpdateWithNestedWhereUniqueInput;
    RowColumnOneUpsertInput: RowColumnOneUpsertInput;
    RowColumnOneUpsertLocalizationInput: RowColumnOneUpsertLocalizationInput;
    RowColumnOneUpsertWithNestedWhereUniqueInput: RowColumnOneUpsertWithNestedWhereUniqueInput;
    RowColumnOneWhereInput: RowColumnOneWhereInput;
    RowColumnOneWhereUniqueInput: RowColumnOneWhereUniqueInput;
    RowColumnThree: ResolverTypeWrapper<RowColumnThree>;
    RowColumnThreeConnectInput: RowColumnThreeConnectInput;
    RowColumnThreeConnection: ResolverTypeWrapper<RowColumnThreeConnection>;
    RowColumnThreeCreateInput: RowColumnThreeCreateInput;
    RowColumnThreeCreateLocalizationDataInput: RowColumnThreeCreateLocalizationDataInput;
    RowColumnThreeCreateLocalizationInput: RowColumnThreeCreateLocalizationInput;
    RowColumnThreeCreateLocalizationsInput: RowColumnThreeCreateLocalizationsInput;
    RowColumnThreeCreateManyInlineInput: RowColumnThreeCreateManyInlineInput;
    RowColumnThreeCreateOneInlineInput: RowColumnThreeCreateOneInlineInput;
    RowColumnThreeEdge: ResolverTypeWrapper<RowColumnThreeEdge>;
    RowColumnThreeManyWhereInput: RowColumnThreeManyWhereInput;
    RowColumnThreeOrderByInput: RowColumnThreeOrderByInput;
    RowColumnThreeUpdateInput: RowColumnThreeUpdateInput;
    RowColumnThreeUpdateLocalizationDataInput: RowColumnThreeUpdateLocalizationDataInput;
    RowColumnThreeUpdateLocalizationInput: RowColumnThreeUpdateLocalizationInput;
    RowColumnThreeUpdateLocalizationsInput: RowColumnThreeUpdateLocalizationsInput;
    RowColumnThreeUpdateManyInlineInput: RowColumnThreeUpdateManyInlineInput;
    RowColumnThreeUpdateManyInput: RowColumnThreeUpdateManyInput;
    RowColumnThreeUpdateManyLocalizationDataInput: RowColumnThreeUpdateManyLocalizationDataInput;
    RowColumnThreeUpdateManyLocalizationInput: RowColumnThreeUpdateManyLocalizationInput;
    RowColumnThreeUpdateManyLocalizationsInput: RowColumnThreeUpdateManyLocalizationsInput;
    RowColumnThreeUpdateManyWithNestedWhereInput: RowColumnThreeUpdateManyWithNestedWhereInput;
    RowColumnThreeUpdateOneInlineInput: RowColumnThreeUpdateOneInlineInput;
    RowColumnThreeUpdateWithNestedWhereUniqueInput: RowColumnThreeUpdateWithNestedWhereUniqueInput;
    RowColumnThreeUpsertInput: RowColumnThreeUpsertInput;
    RowColumnThreeUpsertLocalizationInput: RowColumnThreeUpsertLocalizationInput;
    RowColumnThreeUpsertWithNestedWhereUniqueInput: RowColumnThreeUpsertWithNestedWhereUniqueInput;
    RowColumnThreeWhereInput: RowColumnThreeWhereInput;
    RowColumnThreeWhereUniqueInput: RowColumnThreeWhereUniqueInput;
    RowColumnTwo: ResolverTypeWrapper<RowColumnTwo>;
    RowColumnTwoConnectInput: RowColumnTwoConnectInput;
    RowColumnTwoConnection: ResolverTypeWrapper<RowColumnTwoConnection>;
    RowColumnTwoCreateInput: RowColumnTwoCreateInput;
    RowColumnTwoCreateLocalizationDataInput: RowColumnTwoCreateLocalizationDataInput;
    RowColumnTwoCreateLocalizationInput: RowColumnTwoCreateLocalizationInput;
    RowColumnTwoCreateLocalizationsInput: RowColumnTwoCreateLocalizationsInput;
    RowColumnTwoCreateManyInlineInput: RowColumnTwoCreateManyInlineInput;
    RowColumnTwoCreateOneInlineInput: RowColumnTwoCreateOneInlineInput;
    RowColumnTwoEdge: ResolverTypeWrapper<RowColumnTwoEdge>;
    RowColumnTwoManyWhereInput: RowColumnTwoManyWhereInput;
    RowColumnTwoOrderByInput: RowColumnTwoOrderByInput;
    RowColumnTwoUpdateInput: RowColumnTwoUpdateInput;
    RowColumnTwoUpdateLocalizationDataInput: RowColumnTwoUpdateLocalizationDataInput;
    RowColumnTwoUpdateLocalizationInput: RowColumnTwoUpdateLocalizationInput;
    RowColumnTwoUpdateLocalizationsInput: RowColumnTwoUpdateLocalizationsInput;
    RowColumnTwoUpdateManyInlineInput: RowColumnTwoUpdateManyInlineInput;
    RowColumnTwoUpdateManyInput: RowColumnTwoUpdateManyInput;
    RowColumnTwoUpdateManyLocalizationDataInput: RowColumnTwoUpdateManyLocalizationDataInput;
    RowColumnTwoUpdateManyLocalizationInput: RowColumnTwoUpdateManyLocalizationInput;
    RowColumnTwoUpdateManyLocalizationsInput: RowColumnTwoUpdateManyLocalizationsInput;
    RowColumnTwoUpdateManyWithNestedWhereInput: RowColumnTwoUpdateManyWithNestedWhereInput;
    RowColumnTwoUpdateOneInlineInput: RowColumnTwoUpdateOneInlineInput;
    RowColumnTwoUpdateWithNestedWhereUniqueInput: RowColumnTwoUpdateWithNestedWhereUniqueInput;
    RowColumnTwoUpsertInput: RowColumnTwoUpsertInput;
    RowColumnTwoUpsertLocalizationInput: RowColumnTwoUpsertLocalizationInput;
    RowColumnTwoUpsertWithNestedWhereUniqueInput: RowColumnTwoUpsertWithNestedWhereUniqueInput;
    RowColumnTwoWhereInput: RowColumnTwoWhereInput;
    RowColumnTwoWhereUniqueInput: RowColumnTwoWhereUniqueInput;
    RowContentLinks: ResolverTypeWrapper<RowContentLinks>;
    RowContentLinksConnectInput: RowContentLinksConnectInput;
    RowContentLinksConnection: ResolverTypeWrapper<RowContentLinksConnection>;
    RowContentLinksCreateInput: RowContentLinksCreateInput;
    RowContentLinksCreateLocalizationDataInput: RowContentLinksCreateLocalizationDataInput;
    RowContentLinksCreateLocalizationInput: RowContentLinksCreateLocalizationInput;
    RowContentLinksCreateLocalizationsInput: RowContentLinksCreateLocalizationsInput;
    RowContentLinksCreateManyInlineInput: RowContentLinksCreateManyInlineInput;
    RowContentLinksCreateOneInlineInput: RowContentLinksCreateOneInlineInput;
    RowContentLinksEdge: ResolverTypeWrapper<RowContentLinksEdge>;
    RowContentLinksManyWhereInput: RowContentLinksManyWhereInput;
    RowContentLinksOrderByInput: RowContentLinksOrderByInput;
    RowContentLinksUpdateInput: RowContentLinksUpdateInput;
    RowContentLinksUpdateLocalizationDataInput: RowContentLinksUpdateLocalizationDataInput;
    RowContentLinksUpdateLocalizationInput: RowContentLinksUpdateLocalizationInput;
    RowContentLinksUpdateLocalizationsInput: RowContentLinksUpdateLocalizationsInput;
    RowContentLinksUpdateManyInlineInput: RowContentLinksUpdateManyInlineInput;
    RowContentLinksUpdateManyInput: RowContentLinksUpdateManyInput;
    RowContentLinksUpdateManyLocalizationDataInput: RowContentLinksUpdateManyLocalizationDataInput;
    RowContentLinksUpdateManyLocalizationInput: RowContentLinksUpdateManyLocalizationInput;
    RowContentLinksUpdateManyLocalizationsInput: RowContentLinksUpdateManyLocalizationsInput;
    RowContentLinksUpdateManyWithNestedWhereInput: RowContentLinksUpdateManyWithNestedWhereInput;
    RowContentLinksUpdateOneInlineInput: RowContentLinksUpdateOneInlineInput;
    RowContentLinksUpdateWithNestedWhereUniqueInput: RowContentLinksUpdateWithNestedWhereUniqueInput;
    RowContentLinksUpsertInput: RowContentLinksUpsertInput;
    RowContentLinksUpsertLocalizationInput: RowContentLinksUpsertLocalizationInput;
    RowContentLinksUpsertWithNestedWhereUniqueInput: RowContentLinksUpsertWithNestedWhereUniqueInput;
    RowContentLinksWhereInput: RowContentLinksWhereInput;
    RowContentLinksWhereUniqueInput: RowContentLinksWhereUniqueInput;
    RowHeroBanner: ResolverTypeWrapper<RowHeroBanner>;
    RowHeroBannerConnectInput: RowHeroBannerConnectInput;
    RowHeroBannerConnection: ResolverTypeWrapper<RowHeroBannerConnection>;
    RowHeroBannerCreateInput: RowHeroBannerCreateInput;
    RowHeroBannerCreateLocalizationDataInput: RowHeroBannerCreateLocalizationDataInput;
    RowHeroBannerCreateLocalizationInput: RowHeroBannerCreateLocalizationInput;
    RowHeroBannerCreateLocalizationsInput: RowHeroBannerCreateLocalizationsInput;
    RowHeroBannerCreateManyInlineInput: RowHeroBannerCreateManyInlineInput;
    RowHeroBannerCreateOneInlineInput: RowHeroBannerCreateOneInlineInput;
    RowHeroBannerEdge: ResolverTypeWrapper<RowHeroBannerEdge>;
    RowHeroBannerManyWhereInput: RowHeroBannerManyWhereInput;
    RowHeroBannerOrderByInput: RowHeroBannerOrderByInput;
    RowHeroBannerUpdateInput: RowHeroBannerUpdateInput;
    RowHeroBannerUpdateLocalizationDataInput: RowHeroBannerUpdateLocalizationDataInput;
    RowHeroBannerUpdateLocalizationInput: RowHeroBannerUpdateLocalizationInput;
    RowHeroBannerUpdateLocalizationsInput: RowHeroBannerUpdateLocalizationsInput;
    RowHeroBannerUpdateManyInlineInput: RowHeroBannerUpdateManyInlineInput;
    RowHeroBannerUpdateManyInput: RowHeroBannerUpdateManyInput;
    RowHeroBannerUpdateManyLocalizationDataInput: RowHeroBannerUpdateManyLocalizationDataInput;
    RowHeroBannerUpdateManyLocalizationInput: RowHeroBannerUpdateManyLocalizationInput;
    RowHeroBannerUpdateManyLocalizationsInput: RowHeroBannerUpdateManyLocalizationsInput;
    RowHeroBannerUpdateManyWithNestedWhereInput: RowHeroBannerUpdateManyWithNestedWhereInput;
    RowHeroBannerUpdateOneInlineInput: RowHeroBannerUpdateOneInlineInput;
    RowHeroBannerUpdateWithNestedWhereUniqueInput: RowHeroBannerUpdateWithNestedWhereUniqueInput;
    RowHeroBannerUpsertInput: RowHeroBannerUpsertInput;
    RowHeroBannerUpsertLocalizationInput: RowHeroBannerUpsertLocalizationInput;
    RowHeroBannerUpsertWithNestedWhereUniqueInput: RowHeroBannerUpsertWithNestedWhereUniqueInput;
    RowHeroBannerWhereInput: RowHeroBannerWhereInput;
    RowHeroBannerWhereUniqueInput: RowHeroBannerWhereUniqueInput;
    RowProductBackstory: ResolverTypeWrapper<RowProductBackstory>;
    RowProductBackstoryConnectInput: RowProductBackstoryConnectInput;
    RowProductBackstoryConnection: ResolverTypeWrapper<RowProductBackstoryConnection>;
    RowProductBackstoryCreateInput: RowProductBackstoryCreateInput;
    RowProductBackstoryCreateLocalizationDataInput: RowProductBackstoryCreateLocalizationDataInput;
    RowProductBackstoryCreateLocalizationInput: RowProductBackstoryCreateLocalizationInput;
    RowProductBackstoryCreateLocalizationsInput: RowProductBackstoryCreateLocalizationsInput;
    RowProductBackstoryCreateManyInlineInput: RowProductBackstoryCreateManyInlineInput;
    RowProductBackstoryCreateOneInlineInput: RowProductBackstoryCreateOneInlineInput;
    RowProductBackstoryEdge: ResolverTypeWrapper<RowProductBackstoryEdge>;
    RowProductBackstoryManyWhereInput: RowProductBackstoryManyWhereInput;
    RowProductBackstoryOrderByInput: RowProductBackstoryOrderByInput;
    RowProductBackstoryUpdateInput: RowProductBackstoryUpdateInput;
    RowProductBackstoryUpdateLocalizationDataInput: RowProductBackstoryUpdateLocalizationDataInput;
    RowProductBackstoryUpdateLocalizationInput: RowProductBackstoryUpdateLocalizationInput;
    RowProductBackstoryUpdateLocalizationsInput: RowProductBackstoryUpdateLocalizationsInput;
    RowProductBackstoryUpdateManyInlineInput: RowProductBackstoryUpdateManyInlineInput;
    RowProductBackstoryUpdateManyInput: RowProductBackstoryUpdateManyInput;
    RowProductBackstoryUpdateManyLocalizationDataInput: RowProductBackstoryUpdateManyLocalizationDataInput;
    RowProductBackstoryUpdateManyLocalizationInput: RowProductBackstoryUpdateManyLocalizationInput;
    RowProductBackstoryUpdateManyLocalizationsInput: RowProductBackstoryUpdateManyLocalizationsInput;
    RowProductBackstoryUpdateManyWithNestedWhereInput: RowProductBackstoryUpdateManyWithNestedWhereInput;
    RowProductBackstoryUpdateOneInlineInput: RowProductBackstoryUpdateOneInlineInput;
    RowProductBackstoryUpdateWithNestedWhereUniqueInput: RowProductBackstoryUpdateWithNestedWhereUniqueInput;
    RowProductBackstoryUpsertInput: RowProductBackstoryUpsertInput;
    RowProductBackstoryUpsertLocalizationInput: RowProductBackstoryUpsertLocalizationInput;
    RowProductBackstoryUpsertWithNestedWhereUniqueInput: RowProductBackstoryUpsertWithNestedWhereUniqueInput;
    RowProductBackstoryWhereInput: RowProductBackstoryWhereInput;
    RowProductBackstoryWhereUniqueInput: RowProductBackstoryWhereUniqueInput;
    RowProductFeature: ResolverTypeWrapper<RowProductFeature>;
    RowProductFeatureBoxed: ResolverTypeWrapper<RowProductFeatureBoxed>;
    RowProductFeatureBoxedConnectInput: RowProductFeatureBoxedConnectInput;
    RowProductFeatureBoxedConnection: ResolverTypeWrapper<RowProductFeatureBoxedConnection>;
    RowProductFeatureBoxedCreateInput: RowProductFeatureBoxedCreateInput;
    RowProductFeatureBoxedCreateLocalizationDataInput: RowProductFeatureBoxedCreateLocalizationDataInput;
    RowProductFeatureBoxedCreateLocalizationInput: RowProductFeatureBoxedCreateLocalizationInput;
    RowProductFeatureBoxedCreateLocalizationsInput: RowProductFeatureBoxedCreateLocalizationsInput;
    RowProductFeatureBoxedCreateManyInlineInput: RowProductFeatureBoxedCreateManyInlineInput;
    RowProductFeatureBoxedCreateOneInlineInput: RowProductFeatureBoxedCreateOneInlineInput;
    RowProductFeatureBoxedEdge: ResolverTypeWrapper<RowProductFeatureBoxedEdge>;
    RowProductFeatureBoxedManyWhereInput: RowProductFeatureBoxedManyWhereInput;
    RowProductFeatureBoxedOrderByInput: RowProductFeatureBoxedOrderByInput;
    RowProductFeatureBoxedUpdateInput: RowProductFeatureBoxedUpdateInput;
    RowProductFeatureBoxedUpdateLocalizationDataInput: RowProductFeatureBoxedUpdateLocalizationDataInput;
    RowProductFeatureBoxedUpdateLocalizationInput: RowProductFeatureBoxedUpdateLocalizationInput;
    RowProductFeatureBoxedUpdateLocalizationsInput: RowProductFeatureBoxedUpdateLocalizationsInput;
    RowProductFeatureBoxedUpdateManyInlineInput: RowProductFeatureBoxedUpdateManyInlineInput;
    RowProductFeatureBoxedUpdateManyInput: RowProductFeatureBoxedUpdateManyInput;
    RowProductFeatureBoxedUpdateManyLocalizationDataInput: RowProductFeatureBoxedUpdateManyLocalizationDataInput;
    RowProductFeatureBoxedUpdateManyLocalizationInput: RowProductFeatureBoxedUpdateManyLocalizationInput;
    RowProductFeatureBoxedUpdateManyLocalizationsInput: RowProductFeatureBoxedUpdateManyLocalizationsInput;
    RowProductFeatureBoxedUpdateManyWithNestedWhereInput: RowProductFeatureBoxedUpdateManyWithNestedWhereInput;
    RowProductFeatureBoxedUpdateOneInlineInput: RowProductFeatureBoxedUpdateOneInlineInput;
    RowProductFeatureBoxedUpdateWithNestedWhereUniqueInput: RowProductFeatureBoxedUpdateWithNestedWhereUniqueInput;
    RowProductFeatureBoxedUpsertInput: RowProductFeatureBoxedUpsertInput;
    RowProductFeatureBoxedUpsertLocalizationInput: RowProductFeatureBoxedUpsertLocalizationInput;
    RowProductFeatureBoxedUpsertWithNestedWhereUniqueInput: RowProductFeatureBoxedUpsertWithNestedWhereUniqueInput;
    RowProductFeatureBoxedWhereInput: RowProductFeatureBoxedWhereInput;
    RowProductFeatureBoxedWhereUniqueInput: RowProductFeatureBoxedWhereUniqueInput;
    RowProductFeatureConnectInput: RowProductFeatureConnectInput;
    RowProductFeatureConnection: ResolverTypeWrapper<RowProductFeatureConnection>;
    RowProductFeatureCreateInput: RowProductFeatureCreateInput;
    RowProductFeatureCreateLocalizationDataInput: RowProductFeatureCreateLocalizationDataInput;
    RowProductFeatureCreateLocalizationInput: RowProductFeatureCreateLocalizationInput;
    RowProductFeatureCreateLocalizationsInput: RowProductFeatureCreateLocalizationsInput;
    RowProductFeatureCreateManyInlineInput: RowProductFeatureCreateManyInlineInput;
    RowProductFeatureCreateOneInlineInput: RowProductFeatureCreateOneInlineInput;
    RowProductFeatureEdge: ResolverTypeWrapper<RowProductFeatureEdge>;
    RowProductFeatureManyWhereInput: RowProductFeatureManyWhereInput;
    RowProductFeatureOrderByInput: RowProductFeatureOrderByInput;
    RowProductFeatureUpdateInput: RowProductFeatureUpdateInput;
    RowProductFeatureUpdateLocalizationDataInput: RowProductFeatureUpdateLocalizationDataInput;
    RowProductFeatureUpdateLocalizationInput: RowProductFeatureUpdateLocalizationInput;
    RowProductFeatureUpdateLocalizationsInput: RowProductFeatureUpdateLocalizationsInput;
    RowProductFeatureUpdateManyInlineInput: RowProductFeatureUpdateManyInlineInput;
    RowProductFeatureUpdateManyInput: RowProductFeatureUpdateManyInput;
    RowProductFeatureUpdateManyLocalizationDataInput: RowProductFeatureUpdateManyLocalizationDataInput;
    RowProductFeatureUpdateManyLocalizationInput: RowProductFeatureUpdateManyLocalizationInput;
    RowProductFeatureUpdateManyLocalizationsInput: RowProductFeatureUpdateManyLocalizationsInput;
    RowProductFeatureUpdateManyWithNestedWhereInput: RowProductFeatureUpdateManyWithNestedWhereInput;
    RowProductFeatureUpdateOneInlineInput: RowProductFeatureUpdateOneInlineInput;
    RowProductFeatureUpdateWithNestedWhereUniqueInput: RowProductFeatureUpdateWithNestedWhereUniqueInput;
    RowProductFeatureUpsertInput: RowProductFeatureUpsertInput;
    RowProductFeatureUpsertLocalizationInput: RowProductFeatureUpsertLocalizationInput;
    RowProductFeatureUpsertWithNestedWhereUniqueInput: RowProductFeatureUpsertWithNestedWhereUniqueInput;
    RowProductFeatureWhereInput: RowProductFeatureWhereInput;
    RowProductFeatureWhereUniqueInput: RowProductFeatureWhereUniqueInput;
    RowProductGrid: ResolverTypeWrapper<RowProductGrid>;
    RowProductGridConnectInput: RowProductGridConnectInput;
    RowProductGridConnection: ResolverTypeWrapper<RowProductGridConnection>;
    RowProductGridCreateInput: RowProductGridCreateInput;
    RowProductGridCreateLocalizationDataInput: RowProductGridCreateLocalizationDataInput;
    RowProductGridCreateLocalizationInput: RowProductGridCreateLocalizationInput;
    RowProductGridCreateLocalizationsInput: RowProductGridCreateLocalizationsInput;
    RowProductGridCreateManyInlineInput: RowProductGridCreateManyInlineInput;
    RowProductGridCreateOneInlineInput: RowProductGridCreateOneInlineInput;
    RowProductGridEdge: ResolverTypeWrapper<RowProductGridEdge>;
    RowProductGridManyWhereInput: RowProductGridManyWhereInput;
    RowProductGridOrderByInput: RowProductGridOrderByInput;
    RowProductGridUpdateInput: RowProductGridUpdateInput;
    RowProductGridUpdateLocalizationDataInput: RowProductGridUpdateLocalizationDataInput;
    RowProductGridUpdateLocalizationInput: RowProductGridUpdateLocalizationInput;
    RowProductGridUpdateLocalizationsInput: RowProductGridUpdateLocalizationsInput;
    RowProductGridUpdateManyInlineInput: RowProductGridUpdateManyInlineInput;
    RowProductGridUpdateManyInput: RowProductGridUpdateManyInput;
    RowProductGridUpdateManyLocalizationDataInput: RowProductGridUpdateManyLocalizationDataInput;
    RowProductGridUpdateManyLocalizationInput: RowProductGridUpdateManyLocalizationInput;
    RowProductGridUpdateManyLocalizationsInput: RowProductGridUpdateManyLocalizationsInput;
    RowProductGridUpdateManyWithNestedWhereInput: RowProductGridUpdateManyWithNestedWhereInput;
    RowProductGridUpdateOneInlineInput: RowProductGridUpdateOneInlineInput;
    RowProductGridUpdateWithNestedWhereUniqueInput: RowProductGridUpdateWithNestedWhereUniqueInput;
    RowProductGridUpsertInput: RowProductGridUpsertInput;
    RowProductGridUpsertLocalizationInput: RowProductGridUpsertLocalizationInput;
    RowProductGridUpsertWithNestedWhereUniqueInput: RowProductGridUpsertWithNestedWhereUniqueInput;
    RowProductGridWhereInput: RowProductGridWhereInput;
    RowProductGridWhereUniqueInput: RowProductGridWhereUniqueInput;
    RowProductRelated: ResolverTypeWrapper<RowProductRelated>;
    RowProductRelatedConnectInput: RowProductRelatedConnectInput;
    RowProductRelatedConnection: ResolverTypeWrapper<RowProductRelatedConnection>;
    RowProductRelatedCreateInput: RowProductRelatedCreateInput;
    RowProductRelatedCreateLocalizationDataInput: RowProductRelatedCreateLocalizationDataInput;
    RowProductRelatedCreateLocalizationInput: RowProductRelatedCreateLocalizationInput;
    RowProductRelatedCreateLocalizationsInput: RowProductRelatedCreateLocalizationsInput;
    RowProductRelatedCreateManyInlineInput: RowProductRelatedCreateManyInlineInput;
    RowProductRelatedCreateOneInlineInput: RowProductRelatedCreateOneInlineInput;
    RowProductRelatedEdge: ResolverTypeWrapper<RowProductRelatedEdge>;
    RowProductRelatedManyWhereInput: RowProductRelatedManyWhereInput;
    RowProductRelatedOrderByInput: RowProductRelatedOrderByInput;
    RowProductRelatedUpdateInput: RowProductRelatedUpdateInput;
    RowProductRelatedUpdateLocalizationDataInput: RowProductRelatedUpdateLocalizationDataInput;
    RowProductRelatedUpdateLocalizationInput: RowProductRelatedUpdateLocalizationInput;
    RowProductRelatedUpdateLocalizationsInput: RowProductRelatedUpdateLocalizationsInput;
    RowProductRelatedUpdateManyInlineInput: RowProductRelatedUpdateManyInlineInput;
    RowProductRelatedUpdateManyInput: RowProductRelatedUpdateManyInput;
    RowProductRelatedUpdateManyLocalizationDataInput: RowProductRelatedUpdateManyLocalizationDataInput;
    RowProductRelatedUpdateManyLocalizationInput: RowProductRelatedUpdateManyLocalizationInput;
    RowProductRelatedUpdateManyLocalizationsInput: RowProductRelatedUpdateManyLocalizationsInput;
    RowProductRelatedUpdateManyWithNestedWhereInput: RowProductRelatedUpdateManyWithNestedWhereInput;
    RowProductRelatedUpdateOneInlineInput: RowProductRelatedUpdateOneInlineInput;
    RowProductRelatedUpdateWithNestedWhereUniqueInput: RowProductRelatedUpdateWithNestedWhereUniqueInput;
    RowProductRelatedUpsertInput: RowProductRelatedUpsertInput;
    RowProductRelatedUpsertLocalizationInput: RowProductRelatedUpsertLocalizationInput;
    RowProductRelatedUpsertWithNestedWhereUniqueInput: RowProductRelatedUpsertWithNestedWhereUniqueInput;
    RowProductRelatedWhereInput: RowProductRelatedWhereInput;
    RowProductRelatedWhereUniqueInput: RowProductRelatedWhereUniqueInput;
    RowProductReviews: ResolverTypeWrapper<RowProductReviews>;
    RowProductReviewsConnectInput: RowProductReviewsConnectInput;
    RowProductReviewsConnection: ResolverTypeWrapper<RowProductReviewsConnection>;
    RowProductReviewsCreateInput: RowProductReviewsCreateInput;
    RowProductReviewsCreateLocalizationDataInput: RowProductReviewsCreateLocalizationDataInput;
    RowProductReviewsCreateLocalizationInput: RowProductReviewsCreateLocalizationInput;
    RowProductReviewsCreateLocalizationsInput: RowProductReviewsCreateLocalizationsInput;
    RowProductReviewsCreateManyInlineInput: RowProductReviewsCreateManyInlineInput;
    RowProductReviewsCreateOneInlineInput: RowProductReviewsCreateOneInlineInput;
    RowProductReviewsEdge: ResolverTypeWrapper<RowProductReviewsEdge>;
    RowProductReviewsManyWhereInput: RowProductReviewsManyWhereInput;
    RowProductReviewsOrderByInput: RowProductReviewsOrderByInput;
    RowProductReviewsUpdateInput: RowProductReviewsUpdateInput;
    RowProductReviewsUpdateLocalizationDataInput: RowProductReviewsUpdateLocalizationDataInput;
    RowProductReviewsUpdateLocalizationInput: RowProductReviewsUpdateLocalizationInput;
    RowProductReviewsUpdateLocalizationsInput: RowProductReviewsUpdateLocalizationsInput;
    RowProductReviewsUpdateManyInlineInput: RowProductReviewsUpdateManyInlineInput;
    RowProductReviewsUpdateManyInput: RowProductReviewsUpdateManyInput;
    RowProductReviewsUpdateManyLocalizationDataInput: RowProductReviewsUpdateManyLocalizationDataInput;
    RowProductReviewsUpdateManyLocalizationInput: RowProductReviewsUpdateManyLocalizationInput;
    RowProductReviewsUpdateManyLocalizationsInput: RowProductReviewsUpdateManyLocalizationsInput;
    RowProductReviewsUpdateManyWithNestedWhereInput: RowProductReviewsUpdateManyWithNestedWhereInput;
    RowProductReviewsUpdateOneInlineInput: RowProductReviewsUpdateOneInlineInput;
    RowProductReviewsUpdateWithNestedWhereUniqueInput: RowProductReviewsUpdateWithNestedWhereUniqueInput;
    RowProductReviewsUpsertInput: RowProductReviewsUpsertInput;
    RowProductReviewsUpsertLocalizationInput: RowProductReviewsUpsertLocalizationInput;
    RowProductReviewsUpsertWithNestedWhereUniqueInput: RowProductReviewsUpsertWithNestedWhereUniqueInput;
    RowProductReviewsWhereInput: RowProductReviewsWhereInput;
    RowProductReviewsWhereUniqueInput: RowProductReviewsWhereUniqueInput;
    RowProductSpecs: ResolverTypeWrapper<RowProductSpecs>;
    RowProductSpecsConnectInput: RowProductSpecsConnectInput;
    RowProductSpecsConnection: ResolverTypeWrapper<RowProductSpecsConnection>;
    RowProductSpecsCreateInput: RowProductSpecsCreateInput;
    RowProductSpecsCreateManyInlineInput: RowProductSpecsCreateManyInlineInput;
    RowProductSpecsCreateOneInlineInput: RowProductSpecsCreateOneInlineInput;
    RowProductSpecsEdge: ResolverTypeWrapper<RowProductSpecsEdge>;
    RowProductSpecsManyWhereInput: RowProductSpecsManyWhereInput;
    RowProductSpecsOrderByInput: RowProductSpecsOrderByInput;
    RowProductSpecsUpdateInput: RowProductSpecsUpdateInput;
    RowProductSpecsUpdateManyInlineInput: RowProductSpecsUpdateManyInlineInput;
    RowProductSpecsUpdateManyInput: RowProductSpecsUpdateManyInput;
    RowProductSpecsUpdateManyWithNestedWhereInput: RowProductSpecsUpdateManyWithNestedWhereInput;
    RowProductSpecsUpdateOneInlineInput: RowProductSpecsUpdateOneInlineInput;
    RowProductSpecsUpdateWithNestedWhereUniqueInput: RowProductSpecsUpdateWithNestedWhereUniqueInput;
    RowProductSpecsUpsertInput: RowProductSpecsUpsertInput;
    RowProductSpecsUpsertWithNestedWhereUniqueInput: RowProductSpecsUpsertWithNestedWhereUniqueInput;
    RowProductSpecsWhereInput: RowProductSpecsWhereInput;
    RowProductSpecsWhereUniqueInput: RowProductSpecsWhereUniqueInput;
    RowProductUpsells: ResolverTypeWrapper<RowProductUpsells>;
    RowProductUpsellsConnectInput: RowProductUpsellsConnectInput;
    RowProductUpsellsConnection: ResolverTypeWrapper<RowProductUpsellsConnection>;
    RowProductUpsellsCreateInput: RowProductUpsellsCreateInput;
    RowProductUpsellsCreateLocalizationDataInput: RowProductUpsellsCreateLocalizationDataInput;
    RowProductUpsellsCreateLocalizationInput: RowProductUpsellsCreateLocalizationInput;
    RowProductUpsellsCreateLocalizationsInput: RowProductUpsellsCreateLocalizationsInput;
    RowProductUpsellsCreateManyInlineInput: RowProductUpsellsCreateManyInlineInput;
    RowProductUpsellsCreateOneInlineInput: RowProductUpsellsCreateOneInlineInput;
    RowProductUpsellsEdge: ResolverTypeWrapper<RowProductUpsellsEdge>;
    RowProductUpsellsManyWhereInput: RowProductUpsellsManyWhereInput;
    RowProductUpsellsOrderByInput: RowProductUpsellsOrderByInput;
    RowProductUpsellsUpdateInput: RowProductUpsellsUpdateInput;
    RowProductUpsellsUpdateLocalizationDataInput: RowProductUpsellsUpdateLocalizationDataInput;
    RowProductUpsellsUpdateLocalizationInput: RowProductUpsellsUpdateLocalizationInput;
    RowProductUpsellsUpdateLocalizationsInput: RowProductUpsellsUpdateLocalizationsInput;
    RowProductUpsellsUpdateManyInlineInput: RowProductUpsellsUpdateManyInlineInput;
    RowProductUpsellsUpdateManyInput: RowProductUpsellsUpdateManyInput;
    RowProductUpsellsUpdateManyLocalizationDataInput: RowProductUpsellsUpdateManyLocalizationDataInput;
    RowProductUpsellsUpdateManyLocalizationInput: RowProductUpsellsUpdateManyLocalizationInput;
    RowProductUpsellsUpdateManyLocalizationsInput: RowProductUpsellsUpdateManyLocalizationsInput;
    RowProductUpsellsUpdateManyWithNestedWhereInput: RowProductUpsellsUpdateManyWithNestedWhereInput;
    RowProductUpsellsUpdateOneInlineInput: RowProductUpsellsUpdateOneInlineInput;
    RowProductUpsellsUpdateWithNestedWhereUniqueInput: RowProductUpsellsUpdateWithNestedWhereUniqueInput;
    RowProductUpsellsUpsertInput: RowProductUpsellsUpsertInput;
    RowProductUpsellsUpsertLocalizationInput: RowProductUpsellsUpsertLocalizationInput;
    RowProductUpsellsUpsertWithNestedWhereUniqueInput: RowProductUpsellsUpsertWithNestedWhereUniqueInput;
    RowProductUpsellsWhereInput: RowProductUpsellsWhereInput;
    RowProductUpsellsWhereUniqueInput: RowProductUpsellsWhereUniqueInput;
    RowQuote: ResolverTypeWrapper<RowQuote>;
    RowQuoteConnectInput: RowQuoteConnectInput;
    RowQuoteConnection: ResolverTypeWrapper<RowQuoteConnection>;
    RowQuoteCreateInput: RowQuoteCreateInput;
    RowQuoteCreateLocalizationDataInput: RowQuoteCreateLocalizationDataInput;
    RowQuoteCreateLocalizationInput: RowQuoteCreateLocalizationInput;
    RowQuoteCreateLocalizationsInput: RowQuoteCreateLocalizationsInput;
    RowQuoteCreateManyInlineInput: RowQuoteCreateManyInlineInput;
    RowQuoteCreateOneInlineInput: RowQuoteCreateOneInlineInput;
    RowQuoteEdge: ResolverTypeWrapper<RowQuoteEdge>;
    RowQuoteManyWhereInput: RowQuoteManyWhereInput;
    RowQuoteOrderByInput: RowQuoteOrderByInput;
    RowQuoteUpdateInput: RowQuoteUpdateInput;
    RowQuoteUpdateLocalizationDataInput: RowQuoteUpdateLocalizationDataInput;
    RowQuoteUpdateLocalizationInput: RowQuoteUpdateLocalizationInput;
    RowQuoteUpdateLocalizationsInput: RowQuoteUpdateLocalizationsInput;
    RowQuoteUpdateManyInlineInput: RowQuoteUpdateManyInlineInput;
    RowQuoteUpdateManyInput: RowQuoteUpdateManyInput;
    RowQuoteUpdateManyLocalizationDataInput: RowQuoteUpdateManyLocalizationDataInput;
    RowQuoteUpdateManyLocalizationInput: RowQuoteUpdateManyLocalizationInput;
    RowQuoteUpdateManyLocalizationsInput: RowQuoteUpdateManyLocalizationsInput;
    RowQuoteUpdateManyWithNestedWhereInput: RowQuoteUpdateManyWithNestedWhereInput;
    RowQuoteUpdateOneInlineInput: RowQuoteUpdateOneInlineInput;
    RowQuoteUpdateWithNestedWhereUniqueInput: RowQuoteUpdateWithNestedWhereUniqueInput;
    RowQuoteUpsertInput: RowQuoteUpsertInput;
    RowQuoteUpsertLocalizationInput: RowQuoteUpsertLocalizationInput;
    RowQuoteUpsertWithNestedWhereUniqueInput: RowQuoteUpsertWithNestedWhereUniqueInput;
    RowQuoteWhereInput: RowQuoteWhereInput;
    RowQuoteWhereUniqueInput: RowQuoteWhereUniqueInput;
    RowServiceOptions: ResolverTypeWrapper<RowServiceOptions>;
    RowServiceOptionsConnectInput: RowServiceOptionsConnectInput;
    RowServiceOptionsConnection: ResolverTypeWrapper<RowServiceOptionsConnection>;
    RowServiceOptionsCreateInput: RowServiceOptionsCreateInput;
    RowServiceOptionsCreateLocalizationDataInput: RowServiceOptionsCreateLocalizationDataInput;
    RowServiceOptionsCreateLocalizationInput: RowServiceOptionsCreateLocalizationInput;
    RowServiceOptionsCreateLocalizationsInput: RowServiceOptionsCreateLocalizationsInput;
    RowServiceOptionsCreateManyInlineInput: RowServiceOptionsCreateManyInlineInput;
    RowServiceOptionsCreateOneInlineInput: RowServiceOptionsCreateOneInlineInput;
    RowServiceOptionsEdge: ResolverTypeWrapper<RowServiceOptionsEdge>;
    RowServiceOptionsManyWhereInput: RowServiceOptionsManyWhereInput;
    RowServiceOptionsOrderByInput: RowServiceOptionsOrderByInput;
    RowServiceOptionsUpdateInput: RowServiceOptionsUpdateInput;
    RowServiceOptionsUpdateLocalizationDataInput: RowServiceOptionsUpdateLocalizationDataInput;
    RowServiceOptionsUpdateLocalizationInput: RowServiceOptionsUpdateLocalizationInput;
    RowServiceOptionsUpdateLocalizationsInput: RowServiceOptionsUpdateLocalizationsInput;
    RowServiceOptionsUpdateManyInlineInput: RowServiceOptionsUpdateManyInlineInput;
    RowServiceOptionsUpdateManyInput: RowServiceOptionsUpdateManyInput;
    RowServiceOptionsUpdateManyLocalizationDataInput: RowServiceOptionsUpdateManyLocalizationDataInput;
    RowServiceOptionsUpdateManyLocalizationInput: RowServiceOptionsUpdateManyLocalizationInput;
    RowServiceOptionsUpdateManyLocalizationsInput: RowServiceOptionsUpdateManyLocalizationsInput;
    RowServiceOptionsUpdateManyWithNestedWhereInput: RowServiceOptionsUpdateManyWithNestedWhereInput;
    RowServiceOptionsUpdateOneInlineInput: RowServiceOptionsUpdateOneInlineInput;
    RowServiceOptionsUpdateWithNestedWhereUniqueInput: RowServiceOptionsUpdateWithNestedWhereUniqueInput;
    RowServiceOptionsUpsertInput: RowServiceOptionsUpsertInput;
    RowServiceOptionsUpsertLocalizationInput: RowServiceOptionsUpsertLocalizationInput;
    RowServiceOptionsUpsertWithNestedWhereUniqueInput: RowServiceOptionsUpsertWithNestedWhereUniqueInput;
    RowServiceOptionsWhereInput: RowServiceOptionsWhereInput;
    RowServiceOptionsWhereUniqueInput: RowServiceOptionsWhereUniqueInput;
    RowSpecialBanner: ResolverTypeWrapper<RowSpecialBanner>;
    RowSpecialBannerConnectInput: RowSpecialBannerConnectInput;
    RowSpecialBannerConnection: ResolverTypeWrapper<RowSpecialBannerConnection>;
    RowSpecialBannerCreateInput: RowSpecialBannerCreateInput;
    RowSpecialBannerCreateLocalizationDataInput: RowSpecialBannerCreateLocalizationDataInput;
    RowSpecialBannerCreateLocalizationInput: RowSpecialBannerCreateLocalizationInput;
    RowSpecialBannerCreateLocalizationsInput: RowSpecialBannerCreateLocalizationsInput;
    RowSpecialBannerCreateManyInlineInput: RowSpecialBannerCreateManyInlineInput;
    RowSpecialBannerCreateOneInlineInput: RowSpecialBannerCreateOneInlineInput;
    RowSpecialBannerEdge: ResolverTypeWrapper<RowSpecialBannerEdge>;
    RowSpecialBannerManyWhereInput: RowSpecialBannerManyWhereInput;
    RowSpecialBannerOrderByInput: RowSpecialBannerOrderByInput;
    RowSpecialBannerUpdateInput: RowSpecialBannerUpdateInput;
    RowSpecialBannerUpdateLocalizationDataInput: RowSpecialBannerUpdateLocalizationDataInput;
    RowSpecialBannerUpdateLocalizationInput: RowSpecialBannerUpdateLocalizationInput;
    RowSpecialBannerUpdateLocalizationsInput: RowSpecialBannerUpdateLocalizationsInput;
    RowSpecialBannerUpdateManyInlineInput: RowSpecialBannerUpdateManyInlineInput;
    RowSpecialBannerUpdateManyInput: RowSpecialBannerUpdateManyInput;
    RowSpecialBannerUpdateManyLocalizationDataInput: RowSpecialBannerUpdateManyLocalizationDataInput;
    RowSpecialBannerUpdateManyLocalizationInput: RowSpecialBannerUpdateManyLocalizationInput;
    RowSpecialBannerUpdateManyLocalizationsInput: RowSpecialBannerUpdateManyLocalizationsInput;
    RowSpecialBannerUpdateManyWithNestedWhereInput: RowSpecialBannerUpdateManyWithNestedWhereInput;
    RowSpecialBannerUpdateOneInlineInput: RowSpecialBannerUpdateOneInlineInput;
    RowSpecialBannerUpdateWithNestedWhereUniqueInput: RowSpecialBannerUpdateWithNestedWhereUniqueInput;
    RowSpecialBannerUpsertInput: RowSpecialBannerUpsertInput;
    RowSpecialBannerUpsertLocalizationInput: RowSpecialBannerUpsertLocalizationInput;
    RowSpecialBannerUpsertWithNestedWhereUniqueInput: RowSpecialBannerUpsertWithNestedWhereUniqueInput;
    RowSpecialBannerWhereInput: RowSpecialBannerWhereInput;
    RowSpecialBannerWhereUniqueInput: RowSpecialBannerWhereUniqueInput;
    RowSwipeableGrid: ResolverTypeWrapper<RowSwipeableGrid>;
    RowSwipeableGridConnectInput: RowSwipeableGridConnectInput;
    RowSwipeableGridConnection: ResolverTypeWrapper<RowSwipeableGridConnection>;
    RowSwipeableGridCreateInput: RowSwipeableGridCreateInput;
    RowSwipeableGridCreateLocalizationDataInput: RowSwipeableGridCreateLocalizationDataInput;
    RowSwipeableGridCreateLocalizationInput: RowSwipeableGridCreateLocalizationInput;
    RowSwipeableGridCreateLocalizationsInput: RowSwipeableGridCreateLocalizationsInput;
    RowSwipeableGridCreateManyInlineInput: RowSwipeableGridCreateManyInlineInput;
    RowSwipeableGridCreateOneInlineInput: RowSwipeableGridCreateOneInlineInput;
    RowSwipeableGridEdge: ResolverTypeWrapper<RowSwipeableGridEdge>;
    RowSwipeableGridManyWhereInput: RowSwipeableGridManyWhereInput;
    RowSwipeableGridOrderByInput: RowSwipeableGridOrderByInput;
    RowSwipeableGridUpdateInput: RowSwipeableGridUpdateInput;
    RowSwipeableGridUpdateLocalizationDataInput: RowSwipeableGridUpdateLocalizationDataInput;
    RowSwipeableGridUpdateLocalizationInput: RowSwipeableGridUpdateLocalizationInput;
    RowSwipeableGridUpdateLocalizationsInput: RowSwipeableGridUpdateLocalizationsInput;
    RowSwipeableGridUpdateManyInlineInput: RowSwipeableGridUpdateManyInlineInput;
    RowSwipeableGridUpdateManyInput: RowSwipeableGridUpdateManyInput;
    RowSwipeableGridUpdateManyLocalizationDataInput: RowSwipeableGridUpdateManyLocalizationDataInput;
    RowSwipeableGridUpdateManyLocalizationInput: RowSwipeableGridUpdateManyLocalizationInput;
    RowSwipeableGridUpdateManyLocalizationsInput: RowSwipeableGridUpdateManyLocalizationsInput;
    RowSwipeableGridUpdateManyWithNestedWhereInput: RowSwipeableGridUpdateManyWithNestedWhereInput;
    RowSwipeableGridUpdateOneInlineInput: RowSwipeableGridUpdateOneInlineInput;
    RowSwipeableGridUpdateWithNestedWhereUniqueInput: RowSwipeableGridUpdateWithNestedWhereUniqueInput;
    RowSwipeableGridUpsertInput: RowSwipeableGridUpsertInput;
    RowSwipeableGridUpsertLocalizationInput: RowSwipeableGridUpsertLocalizationInput;
    RowSwipeableGridUpsertWithNestedWhereUniqueInput: RowSwipeableGridUpsertWithNestedWhereUniqueInput;
    RowSwipeableGridWhereInput: RowSwipeableGridWhereInput;
    RowSwipeableGridWhereUniqueInput: RowSwipeableGridWhereUniqueInput;
    Stage: Stage;
    String: ResolverTypeWrapper<Scalars['String']>;
    SystemDateTimeFieldVariation: SystemDateTimeFieldVariation;
    UnpublishLocaleInput: UnpublishLocaleInput;
    User: ResolverTypeWrapper<User>;
    UserConnectInput: UserConnectInput;
    UserConnection: ResolverTypeWrapper<UserConnection>;
    UserCreateManyInlineInput: UserCreateManyInlineInput;
    UserCreateOneInlineInput: UserCreateOneInlineInput;
    UserEdge: ResolverTypeWrapper<UserEdge>;
    UserKind: UserKind;
    UserManyWhereInput: UserManyWhereInput;
    UserOrderByInput: UserOrderByInput;
    UserUpdateManyInlineInput: UserUpdateManyInlineInput;
    UserUpdateOneInlineInput: UserUpdateOneInlineInput;
    UserWhereInput: UserWhereInput;
    UserWhereUniqueInput: UserWhereUniqueInput;
    Usps: ResolverTypeWrapper<Usps>;
    UspsConnectInput: UspsConnectInput;
    UspsConnection: ResolverTypeWrapper<UspsConnection>;
    UspsCreateInput: UspsCreateInput;
    UspsCreateManyInlineInput: UspsCreateManyInlineInput;
    UspsCreateOneInlineInput: UspsCreateOneInlineInput;
    UspsEdge: ResolverTypeWrapper<UspsEdge>;
    UspsManyWhereInput: UspsManyWhereInput;
    UspsOrderByInput: UspsOrderByInput;
    UspsUpdateInput: UspsUpdateInput;
    UspsUpdateManyInlineInput: UspsUpdateManyInlineInput;
    UspsUpdateManyInput: UspsUpdateManyInput;
    UspsUpdateManyWithNestedWhereInput: UspsUpdateManyWithNestedWhereInput;
    UspsUpdateOneInlineInput: UspsUpdateOneInlineInput;
    UspsUpdateWithNestedWhereUniqueInput: UspsUpdateWithNestedWhereUniqueInput;
    UspsUpsertInput: UspsUpsertInput;
    UspsUpsertWithNestedWhereUniqueInput: UspsUpsertWithNestedWhereUniqueInput;
    UspsWhereInput: UspsWhereInput;
    UspsWhereUniqueInput: UspsWhereUniqueInput;
    Version: ResolverTypeWrapper<Version>;
    VersionWhereInput: VersionWhereInput;
    _FilterKind: _FilterKind;
    _MutationInputFieldKind: _MutationInputFieldKind;
    _MutationKind: _MutationKind;
    _OrderDirection: _OrderDirection;
    _RelationInputCardinality: _RelationInputCardinality;
    _RelationInputKind: _RelationInputKind;
    _RelationKind: _RelationKind;
    _SystemDateTimeFieldVariation: _SystemDateTimeFieldVariation;
    Mutation: ResolverTypeWrapper<{}>;
    StoreConfig: ResolverTypeWrapper<StoreConfig>;
    FixedProductTaxDisplaySettings: FixedProductTaxDisplaySettings;
    SendFriendConfiguration: ResolverTypeWrapper<SendFriendConfiguration>;
    Cart: ResolverTypeWrapper<Cart>;
    AppliedCoupon: ResolverTypeWrapper<AppliedCoupon>;
    AvailablePaymentMethod: ResolverTypeWrapper<AvailablePaymentMethod>;
    MollieIssuer: ResolverTypeWrapper<MollieIssuer>;
    MolliePaymentMethodMeta: ResolverTypeWrapper<MolliePaymentMethodMeta>;
    BillingCartAddress: ResolverTypeWrapper<BillingCartAddress>;
    CartAddressInterface: ResolversTypes['BillingCartAddress'] | ResolversTypes['ShippingCartAddress'];
    CartAddressCountry: ResolverTypeWrapper<CartAddressCountry>;
    CartAddressRegion: ResolverTypeWrapper<CartAddressRegion>;
    GiftMessage: ResolverTypeWrapper<GiftMessage>;
    CartItemInterface: ResolversTypes['SimpleCartItem'] | ResolversTypes['VirtualCartItem'] | ResolversTypes['DownloadableCartItem'] | ResolversTypes['BundleCartItem'] | ResolversTypes['ConfigurableCartItem'];
    CartItemPrices: ResolverTypeWrapper<CartItemPrices>;
    Discount: ResolverTypeWrapper<Discount>;
    Money: ResolverTypeWrapper<Money>;
    CurrencyEnum: CurrencyEnum;
    ProductInterface: ResolversTypes['VirtualProduct'] | ResolversTypes['SimpleProduct'] | ResolversTypes['DownloadableProduct'] | ResolversTypes['BundleProduct'] | ResolversTypes['GroupedProduct'] | ResolversTypes['ConfigurableProduct'];
    CategoryInterface: ResolversTypes['CategoryTree'];
    Breadcrumb: ResolverTypeWrapper<Breadcrumb>;
    CmsBlock: ResolverTypeWrapper<CmsBlock>;
    ProductAttributeSortInput: ProductAttributeSortInput;
    SortEnum: SortEnum;
    CategoryProducts: ResolverTypeWrapper<CategoryProducts>;
    SearchResultPageInfo: ResolverTypeWrapper<SearchResultPageInfo>;
    ComplexTextValue: ResolverTypeWrapper<ComplexTextValue>;
    ProductImage: ResolverTypeWrapper<ProductImage>;
    MediaGalleryInterface: ResolversTypes['ProductImage'] | ResolversTypes['ProductVideo'];
    MediaGalleryEntry: ResolverTypeWrapper<MediaGalleryEntry>;
    ProductMediaGalleryEntriesContent: ResolverTypeWrapper<ProductMediaGalleryEntriesContent>;
    ProductMediaGalleryEntriesVideoContent: ResolverTypeWrapper<ProductMediaGalleryEntriesVideoContent>;
    ProductPrices: ResolverTypeWrapper<ProductPrices>;
    Price: ResolverTypeWrapper<Price>;
    PriceAdjustment: ResolverTypeWrapper<PriceAdjustment>;
    PriceAdjustmentCodesEnum: PriceAdjustmentCodesEnum;
    PriceAdjustmentDescriptionEnum: PriceAdjustmentDescriptionEnum;
    PriceRange: ResolverTypeWrapper<PriceRange>;
    ProductPrice: ResolverTypeWrapper<ProductPrice>;
    ProductDiscount: ResolverTypeWrapper<ProductDiscount>;
    FixedProductTax: ResolverTypeWrapper<FixedProductTax>;
    TierPrice: ResolverTypeWrapper<TierPrice>;
    ProductLinksInterface: ResolversTypes['ProductLinks'];
    ProductReviews: ResolverTypeWrapper<ProductReviews>;
    ProductReview: ResolverTypeWrapper<ProductReview>;
    ProductReviewRating: ResolverTypeWrapper<ProductReviewRating>;
    ProductStockStatus: ProductStockStatus;
    ProductTierPrices: ResolverTypeWrapper<ProductTierPrices>;
    UrlRewrite: ResolverTypeWrapper<UrlRewrite>;
    HttpQueryParameter: ResolverTypeWrapper<HttpQueryParameter>;
    Website: ResolverTypeWrapper<Website>;
    CartPrices: ResolverTypeWrapper<CartPrices>;
    CartTaxItem: ResolverTypeWrapper<CartTaxItem>;
    CartDiscount: ResolverTypeWrapper<CartDiscount>;
    SelectedPaymentMethod: ResolverTypeWrapper<SelectedPaymentMethod>;
    ShippingCartAddress: ResolverTypeWrapper<ShippingCartAddress>;
    AvailableShippingMethod: ResolverTypeWrapper<AvailableShippingMethod>;
    CartItemQuantity: ResolverTypeWrapper<CartItemQuantity>;
    SelectedShippingMethod: ResolverTypeWrapper<SelectedShippingMethod>;
    CategoryFilterInput: CategoryFilterInput;
    FilterEqualTypeInput: FilterEqualTypeInput;
    FilterMatchTypeInput: FilterMatchTypeInput;
    CategoryResult: ResolverTypeWrapper<CategoryResult>;
    CategoryTree: ResolverTypeWrapper<CategoryTree>;
    CheckoutAgreement: ResolverTypeWrapper<CheckoutAgreement>;
    CheckoutAgreementMode: CheckoutAgreementMode;
    CmsBlocks: ResolverTypeWrapper<CmsBlocks>;
    CmsPage: ResolverTypeWrapper<CmsPage>;
    CompareList: ResolverTypeWrapper<CompareList>;
    ComparableAttribute: ResolverTypeWrapper<ComparableAttribute>;
    ComparableItem: ResolverTypeWrapper<ComparableItem>;
    ProductAttribute: ResolverTypeWrapper<ProductAttribute>;
    Country: ResolverTypeWrapper<Country>;
    Region: ResolverTypeWrapper<Region>;
    Currency: ResolverTypeWrapper<Currency>;
    ExchangeRate: ResolverTypeWrapper<ExchangeRate>;
    AttributeInput: AttributeInput;
    CustomAttributeMetadata: ResolverTypeWrapper<CustomAttributeMetadata>;
    Attribute: ResolverTypeWrapper<Attribute>;
    AttributeOption: ResolverTypeWrapper<AttributeOption>;
    Customer: ResolverTypeWrapper<Customer>;
    CustomerAddress: ResolverTypeWrapper<CustomerAddress>;
    CountryCodeEnum: CountryCodeEnum;
    CustomerAddressAttribute: ResolverTypeWrapper<CustomerAddressAttribute>;
    CustomerAddressRegion: ResolverTypeWrapper<CustomerAddressRegion>;
    CustomerOrdersFilterInput: CustomerOrdersFilterInput;
    FilterStringTypeInput: FilterStringTypeInput;
    CustomerOrders: ResolverTypeWrapper<CustomerOrders>;
    CustomerOrder: ResolverTypeWrapper<CustomerOrder>;
    OrderAddress: ResolverTypeWrapper<OrderAddress>;
    SalesCommentItem: ResolverTypeWrapper<SalesCommentItem>;
    CreditMemo: ResolverTypeWrapper<CreditMemo>;
    CreditMemoItemInterface: ResolversTypes['DownloadableCreditMemoItem'] | ResolversTypes['BundleCreditMemoItem'] | ResolversTypes['CreditMemoItem'];
    OrderItemInterface: ResolversTypes['DownloadableOrderItem'] | ResolversTypes['BundleOrderItem'] | ResolversTypes['OrderItem'];
    OrderItemOption: ResolverTypeWrapper<OrderItemOption>;
    CreditMemoTotal: ResolverTypeWrapper<CreditMemoTotal>;
    ShippingHandling: ResolverTypeWrapper<ShippingHandling>;
    ShippingDiscount: ResolverTypeWrapper<ShippingDiscount>;
    TaxItem: ResolverTypeWrapper<TaxItem>;
    Invoice: ResolverTypeWrapper<Invoice>;
    InvoiceItemInterface: ResolversTypes['DownloadableInvoiceItem'] | ResolversTypes['BundleInvoiceItem'] | ResolversTypes['InvoiceItem'];
    InvoiceTotal: ResolverTypeWrapper<InvoiceTotal>;
    OrderPaymentMethod: ResolverTypeWrapper<OrderPaymentMethod>;
    KeyValue: ResolverTypeWrapper<KeyValue>;
    OrderShipment: ResolverTypeWrapper<OrderShipment>;
    ShipmentItemInterface: ResolversTypes['BundleShipmentItem'] | ResolversTypes['ShipmentItem'];
    ShipmentTracking: ResolverTypeWrapper<ShipmentTracking>;
    OrderTotal: ResolverTypeWrapper<OrderTotal>;
    Wishlist: ResolverTypeWrapper<Wishlist>;
    WishlistItem: ResolverTypeWrapper<WishlistItem>;
    WishlistItems: ResolverTypeWrapper<WishlistItems>;
    WishlistItemInterface: ResolversTypes['SimpleWishlistItem'] | ResolversTypes['VirtualWishlistItem'] | ResolversTypes['DownloadableWishlistItem'] | ResolversTypes['BundleWishlistItem'] | ResolversTypes['GroupedProductWishlistItem'] | ResolversTypes['ConfigurableWishlistItem'];
    SelectedCustomizableOption: ResolverTypeWrapper<SelectedCustomizableOption>;
    SelectedCustomizableOptionValue: ResolverTypeWrapper<SelectedCustomizableOptionValue>;
    CartItemSelectedOptionValuePrice: ResolverTypeWrapper<CartItemSelectedOptionValuePrice>;
    PriceTypeEnum: PriceTypeEnum;
    CustomerDownloadableProducts: ResolverTypeWrapper<CustomerDownloadableProducts>;
    CustomerDownloadableProduct: ResolverTypeWrapper<CustomerDownloadableProduct>;
    CustomerPaymentTokens: ResolverTypeWrapper<CustomerPaymentTokens>;
    PaymentToken: ResolverTypeWrapper<PaymentToken>;
    PaymentTokenTypeEnum: PaymentTokenTypeEnum;
    HostedProUrlInput: HostedProUrlInput;
    HostedProUrl: ResolverTypeWrapper<HostedProUrl>;
    PayflowLinkTokenInput: PayflowLinkTokenInput;
    PayflowLinkToken: ResolverTypeWrapper<PayflowLinkToken>;
    PayflowLinkMode: PayflowLinkMode;
    IsEmailAvailableOutput: ResolverTypeWrapper<IsEmailAvailableOutput>;
    MolliePaymentMethodsInput: MolliePaymentMethodsInput;
    MolliePaymentMethodsOutput: ResolverTypeWrapper<MolliePaymentMethodsOutput>;
    MolliePaymentMethod: ResolverTypeWrapper<MolliePaymentMethod>;
    AreaInput: AreaInput;
    PickupLocationFilterInput: PickupLocationFilterInput;
    FilterTypeInput: FilterTypeInput;
    PickupLocationSortInput: PickupLocationSortInput;
    ProductInfoInput: ProductInfoInput;
    PickupLocations: ResolverTypeWrapper<PickupLocations>;
    PickupLocation: ResolverTypeWrapper<PickupLocation>;
    ProductReviewRatingsMetadata: ResolverTypeWrapper<ProductReviewRatingsMetadata>;
    ProductReviewRatingMetadata: ResolverTypeWrapper<ProductReviewRatingMetadata>;
    ProductReviewRatingValueMetadata: ResolverTypeWrapper<ProductReviewRatingValueMetadata>;
    ProductAttributeFilterInput: ProductAttributeFilterInput;
    FilterRangeTypeInput: FilterRangeTypeInput;
    Products: ResolverTypeWrapper<Products>;
    Aggregation: ResolverTypeWrapper<Aggregation>;
    AggregationOption: ResolverTypeWrapper<AggregationOption>;
    AggregationOptionInterface: ResolversTypes['AggregationOption'];
    LayerFilter: ResolverTypeWrapper<LayerFilter>;
    LayerFilterItemInterface: ResolversTypes['LayerFilterItem'] | ResolversTypes['SwatchLayerFilterItem'];
    SortFields: ResolverTypeWrapper<SortFields>;
    SortField: ResolverTypeWrapper<SortField>;
    EntityUrl: ResolverTypeWrapper<EntityUrl>;
    UrlRewriteEntityTypeEnum: UrlRewriteEntityTypeEnum;
    WishlistOutput: ResolverTypeWrapper<WishlistOutput>;
    AddBundleProductsToCartInput: AddBundleProductsToCartInput;
    BundleProductCartItemInput: BundleProductCartItemInput;
    BundleOptionInput: BundleOptionInput;
    CustomizableOptionInput: CustomizableOptionInput;
    CartItemInput: CartItemInput;
    EnteredOptionInput: EnteredOptionInput;
    AddBundleProductsToCartOutput: ResolverTypeWrapper<AddBundleProductsToCartOutput>;
    AddConfigurableProductsToCartInput: AddConfigurableProductsToCartInput;
    ConfigurableProductCartItemInput: ConfigurableProductCartItemInput;
    AddConfigurableProductsToCartOutput: ResolverTypeWrapper<AddConfigurableProductsToCartOutput>;
    AddDownloadableProductsToCartInput: AddDownloadableProductsToCartInput;
    DownloadableProductCartItemInput: DownloadableProductCartItemInput;
    DownloadableProductLinksInput: DownloadableProductLinksInput;
    AddDownloadableProductsToCartOutput: ResolverTypeWrapper<AddDownloadableProductsToCartOutput>;
    AddProductsToCartOutput: ResolverTypeWrapper<AddProductsToCartOutput>;
    CartUserInputError: ResolverTypeWrapper<CartUserInputError>;
    CartUserInputErrorType: CartUserInputErrorType;
    AddProductsToCompareListInput: AddProductsToCompareListInput;
    WishlistItemInput: WishlistItemInput;
    AddProductsToWishlistOutput: ResolverTypeWrapper<AddProductsToWishlistOutput>;
    WishListUserInputError: ResolverTypeWrapper<WishListUserInputError>;
    WishListUserInputErrorType: WishListUserInputErrorType;
    AddSimpleProductsToCartInput: AddSimpleProductsToCartInput;
    SimpleProductCartItemInput: SimpleProductCartItemInput;
    AddSimpleProductsToCartOutput: ResolverTypeWrapper<AddSimpleProductsToCartOutput>;
    AddVirtualProductsToCartInput: AddVirtualProductsToCartInput;
    VirtualProductCartItemInput: VirtualProductCartItemInput;
    AddVirtualProductsToCartOutput: ResolverTypeWrapper<AddVirtualProductsToCartOutput>;
    ApplyCouponToCartInput: ApplyCouponToCartInput;
    ApplyCouponToCartOutput: ResolverTypeWrapper<ApplyCouponToCartOutput>;
    AssignCompareListToCustomerOutput: ResolverTypeWrapper<AssignCompareListToCustomerOutput>;
    CreateCompareListInput: CreateCompareListInput;
    CustomerInput: CustomerInput;
    CustomerOutput: ResolverTypeWrapper<CustomerOutput>;
    CustomerAddressInput: CustomerAddressInput;
    CustomerAddressAttributeInput: CustomerAddressAttributeInput;
    CustomerAddressRegionInput: CustomerAddressRegionInput;
    CustomerCreateInput: CustomerCreateInput;
    createEmptyCartInput: createEmptyCartInput;
    createKlarnaPaymentsSessionInput: createKlarnaPaymentsSessionInput;
    createKlarnaPaymentsSessionOutput: ResolverTypeWrapper<createKlarnaPaymentsSessionOutput>;
    Categories: ResolverTypeWrapper<Categories>;
    Assets: ResolverTypeWrapper<Assets>;
    MollieTransactionInput: MollieTransactionInput;
    MollieTransactionOutput: ResolverTypeWrapper<MollieTransactionOutput>;
    PayflowProTokenInput: PayflowProTokenInput;
    PayflowProUrlInput: PayflowProUrlInput;
    CreatePayflowProTokenOutput: ResolverTypeWrapper<CreatePayflowProTokenOutput>;
    PaypalExpressTokenInput: PaypalExpressTokenInput;
    PaypalExpressUrlsInput: PaypalExpressUrlsInput;
    PaypalExpressTokenOutput: ResolverTypeWrapper<PaypalExpressTokenOutput>;
    PaypalExpressUrlList: ResolverTypeWrapper<PaypalExpressUrlList>;
    CreateProductReviewInput: CreateProductReviewInput;
    ProductReviewRatingInput: ProductReviewRatingInput;
    CreateProductReviewOutput: ResolverTypeWrapper<CreateProductReviewOutput>;
    DeleteCompareListOutput: ResolverTypeWrapper<DeleteCompareListOutput>;
    DeletePaymentTokenOutput: ResolverTypeWrapper<DeletePaymentTokenOutput>;
    CustomerToken: ResolverTypeWrapper<CustomerToken>;
    GenerateCustomerTokenAsAdminInput: GenerateCustomerTokenAsAdminInput;
    GenerateCustomerTokenAsAdminOutput: ResolverTypeWrapper<GenerateCustomerTokenAsAdminOutput>;
    PayflowProResponseInput: PayflowProResponseInput;
    PayflowProResponseOutput: ResolverTypeWrapper<PayflowProResponseOutput>;
    MollieProcessTransactionInput: MollieProcessTransactionInput;
    MollieProcessTransactionOutput: ResolverTypeWrapper<MollieProcessTransactionOutput>;
    PaymentStatusEnum: PaymentStatusEnum;
    MollieResetCartInput: MollieResetCartInput;
    MollieResetCartOutput: ResolverTypeWrapper<MollieResetCartOutput>;
    PlaceOrderInput: PlaceOrderInput;
    PlaceOrderOutput: ResolverTypeWrapper<PlaceOrderOutput>;
    Order: ResolverTypeWrapper<Order>;
    RemoveCouponFromCartInput: RemoveCouponFromCartInput;
    RemoveCouponFromCartOutput: ResolverTypeWrapper<RemoveCouponFromCartOutput>;
    RemoveItemFromCartInput: RemoveItemFromCartInput;
    RemoveItemFromCartOutput: ResolverTypeWrapper<RemoveItemFromCartOutput>;
    RemoveProductsFromCompareListInput: RemoveProductsFromCompareListInput;
    RemoveProductsFromWishlistOutput: ResolverTypeWrapper<RemoveProductsFromWishlistOutput>;
    ReorderItemsOutput: ResolverTypeWrapper<ReorderItemsOutput>;
    CheckoutUserInputError: ResolverTypeWrapper<CheckoutUserInputError>;
    CheckoutUserInputErrorCodes: CheckoutUserInputErrorCodes;
    RevokeCustomerTokenOutput: ResolverTypeWrapper<RevokeCustomerTokenOutput>;
    SendEmailToFriendInput: SendEmailToFriendInput;
    SendEmailToFriendRecipientInput: SendEmailToFriendRecipientInput;
    SendEmailToFriendSenderInput: SendEmailToFriendSenderInput;
    SendEmailToFriendOutput: ResolverTypeWrapper<SendEmailToFriendOutput>;
    SendEmailToFriendRecipient: ResolverTypeWrapper<SendEmailToFriendRecipient>;
    SendEmailToFriendSender: ResolverTypeWrapper<SendEmailToFriendSender>;
    SetBillingAddressOnCartInput: SetBillingAddressOnCartInput;
    BillingAddressInput: BillingAddressInput;
    CartAddressInput: CartAddressInput;
    SetBillingAddressOnCartOutput: ResolverTypeWrapper<SetBillingAddressOnCartOutput>;
    SetGuestEmailOnCartInput: SetGuestEmailOnCartInput;
    SetGuestEmailOnCartOutput: ResolverTypeWrapper<SetGuestEmailOnCartOutput>;
    SetPaymentMethodAndPlaceOrderInput: SetPaymentMethodAndPlaceOrderInput;
    PaymentMethodInput: PaymentMethodInput;
    BraintreeInput: BraintreeInput;
    BraintreeCcVaultInput: BraintreeCcVaultInput;
    HostedProInput: HostedProInput;
    KlarnaInput: KlarnaInput;
    PayflowExpressInput: PayflowExpressInput;
    PayflowLinkInput: PayflowLinkInput;
    PayflowProInput: PayflowProInput;
    CreditCardDetailsInput: CreditCardDetailsInput;
    VaultTokenInput: VaultTokenInput;
    PaypalExpressInput: PaypalExpressInput;
    SetPaymentMethodOnCartInput: SetPaymentMethodOnCartInput;
    SetPaymentMethodOnCartOutput: ResolverTypeWrapper<SetPaymentMethodOnCartOutput>;
    SetShippingAddressesOnCartInput: SetShippingAddressesOnCartInput;
    ShippingAddressInput: ShippingAddressInput;
    SetShippingAddressesOnCartOutput: ResolverTypeWrapper<SetShippingAddressesOnCartOutput>;
    SetShippingMethodsOnCartInput: SetShippingMethodsOnCartInput;
    ShippingMethodInput: ShippingMethodInput;
    SetShippingMethodsOnCartOutput: ResolverTypeWrapper<SetShippingMethodsOnCartOutput>;
    SubscribeEmailToNewsletterOutput: ResolverTypeWrapper<SubscribeEmailToNewsletterOutput>;
    SubscriptionStatusesEnum: SubscriptionStatusesEnum;
    UpdateCartItemsInput: UpdateCartItemsInput;
    CartItemUpdateInput: CartItemUpdateInput;
    GiftMessageInput: GiftMessageInput;
    UpdateCartItemsOutput: ResolverTypeWrapper<UpdateCartItemsOutput>;
    CustomerUpdateInput: CustomerUpdateInput;
    WishlistItemUpdateInput: WishlistItemUpdateInput;
    UpdateProductsInWishlistOutput: ResolverTypeWrapper<UpdateProductsInWishlistOutput>;
    ProductLinks: ResolverTypeWrapper<ProductLinks>;
    PhysicalProductInterface: ResolversTypes['SimpleProduct'] | ResolversTypes['BundleProduct'] | ResolversTypes['GroupedProduct'] | ResolversTypes['ConfigurableProduct'];
    CustomizableAreaOption: ResolverTypeWrapper<CustomizableAreaOption>;
    CustomizableOptionInterface: ResolversTypes['CustomizableAreaOption'] | ResolversTypes['CustomizableDateOption'] | ResolversTypes['CustomizableDropDownOption'] | ResolversTypes['CustomizableMultipleOption'] | ResolversTypes['CustomizableFieldOption'] | ResolversTypes['CustomizableFileOption'] | ResolversTypes['CustomizableRadioOption'] | ResolversTypes['CustomizableCheckboxOption'];
    CustomizableAreaValue: ResolverTypeWrapper<CustomizableAreaValue>;
    CustomizableDateOption: ResolverTypeWrapper<CustomizableDateOption>;
    CustomizableDateValue: ResolverTypeWrapper<CustomizableDateValue>;
    CustomizableDropDownOption: ResolverTypeWrapper<CustomizableDropDownOption>;
    CustomizableDropDownValue: ResolverTypeWrapper<CustomizableDropDownValue>;
    CustomizableMultipleOption: ResolverTypeWrapper<CustomizableMultipleOption>;
    CustomizableMultipleValue: ResolverTypeWrapper<CustomizableMultipleValue>;
    CustomizableFieldOption: ResolverTypeWrapper<CustomizableFieldOption>;
    CustomizableFieldValue: ResolverTypeWrapper<CustomizableFieldValue>;
    CustomizableFileOption: ResolverTypeWrapper<CustomizableFileOption>;
    CustomizableFileValue: ResolverTypeWrapper<CustomizableFileValue>;
    ProductVideo: ResolverTypeWrapper<ProductVideo>;
    CustomizableProductInterface: ResolversTypes['VirtualProduct'] | ResolversTypes['SimpleProduct'] | ResolversTypes['DownloadableProduct'] | ResolversTypes['BundleProduct'] | ResolversTypes['ConfigurableProduct'];
    CustomizableRadioOption: ResolverTypeWrapper<CustomizableRadioOption>;
    CustomizableRadioValue: ResolverTypeWrapper<CustomizableRadioValue>;
    CustomizableCheckboxOption: ResolverTypeWrapper<CustomizableCheckboxOption>;
    CustomizableCheckboxValue: ResolverTypeWrapper<CustomizableCheckboxValue>;
    VirtualProduct: ResolverTypeWrapper<VirtualProduct>;
    SimpleProduct: ResolverTypeWrapper<SimpleProduct>;
    ProductFilterInput: ProductFilterInput;
    ProductSortInput: ProductSortInput;
    LayerFilterItem: ResolverTypeWrapper<LayerFilterItem>;
    SimpleWishlistItem: ResolverTypeWrapper<SimpleWishlistItem>;
    VirtualWishlistItem: ResolverTypeWrapper<VirtualWishlistItem>;
    SimpleCartItem: ResolverTypeWrapper<SimpleCartItem>;
    VirtualCartItem: ResolverTypeWrapper<VirtualCartItem>;
    DownloadableCartItem: ResolverTypeWrapper<DownloadableCartItem>;
    DownloadableProductLinks: ResolverTypeWrapper<DownloadableProductLinks>;
    DownloadableFileTypeEnum: DownloadableFileTypeEnum;
    DownloadableProductSamples: ResolverTypeWrapper<DownloadableProductSamples>;
    DownloadableProduct: ResolverTypeWrapper<DownloadableProduct>;
    DownloadableOrderItem: ResolverTypeWrapper<DownloadableOrderItem>;
    DownloadableItemsLinks: ResolverTypeWrapper<DownloadableItemsLinks>;
    DownloadableInvoiceItem: ResolverTypeWrapper<DownloadableInvoiceItem>;
    DownloadableCreditMemoItem: ResolverTypeWrapper<DownloadableCreditMemoItem>;
    DownloadableWishlistItem: ResolverTypeWrapper<DownloadableWishlistItem>;
    BundleCartItem: ResolverTypeWrapper<BundleCartItem>;
    SelectedBundleOption: ResolverTypeWrapper<SelectedBundleOption>;
    SelectedBundleOptionValue: ResolverTypeWrapper<SelectedBundleOptionValue>;
    BundleItem: ResolverTypeWrapper<BundleItem>;
    BundleItemOption: ResolverTypeWrapper<BundleItemOption>;
    BundleProduct: ResolverTypeWrapper<BundleProduct>;
    PriceViewEnum: PriceViewEnum;
    ShipBundleItemsEnum: ShipBundleItemsEnum;
    BundleOrderItem: ResolverTypeWrapper<BundleOrderItem>;
    ItemSelectedBundleOption: ResolverTypeWrapper<ItemSelectedBundleOption>;
    ItemSelectedBundleOptionValue: ResolverTypeWrapper<ItemSelectedBundleOptionValue>;
    BundleInvoiceItem: ResolverTypeWrapper<BundleInvoiceItem>;
    BundleShipmentItem: ResolverTypeWrapper<BundleShipmentItem>;
    BundleCreditMemoItem: ResolverTypeWrapper<BundleCreditMemoItem>;
    BundleWishlistItem: ResolverTypeWrapper<BundleWishlistItem>;
    ConfigurableCartItem: ResolverTypeWrapper<ConfigurableCartItem>;
    SelectedConfigurableOption: ResolverTypeWrapper<SelectedConfigurableOption>;
    SalesItemInterface: ResolverTypeWrapper<SalesItemInterface>;
    GroupedProduct: ResolverTypeWrapper<GroupedProduct>;
    GroupedProductItem: ResolverTypeWrapper<GroupedProductItem>;
    GroupedProductWishlistItem: ResolverTypeWrapper<GroupedProductWishlistItem>;
    PaypalExpressToken: ResolverTypeWrapper<PaypalExpressToken>;
    PayflowProToken: ResolverTypeWrapper<PayflowProToken>;
    ConfigurableProduct: ResolverTypeWrapper<ConfigurableProduct>;
    ConfigurableProductOptions: ResolverTypeWrapper<ConfigurableProductOptions>;
    ConfigurableProductOptionsValues: ResolverTypeWrapper<ConfigurableProductOptionsValues>;
    SwatchDataInterface: ResolversTypes['ImageSwatchData'] | ResolversTypes['TextSwatchData'] | ResolversTypes['ColorSwatchData'];
    ConfigurableProductOptionsSelection: ResolverTypeWrapper<ConfigurableProductOptionsSelection>;
    ConfigurableOptionAvailableForSelection: ResolverTypeWrapper<ConfigurableOptionAvailableForSelection>;
    ConfigurableVariant: ResolverTypeWrapper<ConfigurableVariant>;
    ConfigurableAttributeOption: ResolverTypeWrapper<ConfigurableAttributeOption>;
    ConfigurableWishlistItem: ResolverTypeWrapper<ConfigurableWishlistItem>;
    OrderItem: ResolverTypeWrapper<OrderItem>;
    InvoiceItem: ResolverTypeWrapper<InvoiceItem>;
    ShipmentItem: ResolverTypeWrapper<ShipmentItem>;
    CreditMemoItem: ResolverTypeWrapper<CreditMemoItem>;
    SwatchLayerFilterItemInterface: ResolversTypes['SwatchLayerFilterItem'];
    SwatchData: ResolverTypeWrapper<SwatchData>;
    SwatchLayerFilterItem: ResolverTypeWrapper<SwatchLayerFilterItem>;
    ImageSwatchData: ResolverTypeWrapper<ImageSwatchData>;
    TextSwatchData: ResolverTypeWrapper<TextSwatchData>;
    ColorSwatchData: ResolverTypeWrapper<ColorSwatchData>;
}>;
/** Mapping between all available schema types and the resolvers parents */
export declare type ResolversParentTypes = ResolversObject<{
    Query: {};
    Aggregate: Aggregate;
    Asset: Asset;
    AssetConnectInput: AssetConnectInput;
    AssetConnection: AssetConnection;
    AssetCreateInput: AssetCreateInput;
    AssetCreateLocalizationDataInput: AssetCreateLocalizationDataInput;
    AssetCreateLocalizationInput: AssetCreateLocalizationInput;
    AssetCreateLocalizationsInput: AssetCreateLocalizationsInput;
    AssetCreateManyInlineInput: AssetCreateManyInlineInput;
    AssetCreateOneInlineInput: AssetCreateOneInlineInput;
    AssetEdge: AssetEdge;
    AssetManyWhereInput: AssetManyWhereInput;
    AssetTransformationInput: AssetTransformationInput;
    AssetUpdateInput: AssetUpdateInput;
    AssetUpdateLocalizationDataInput: AssetUpdateLocalizationDataInput;
    AssetUpdateLocalizationInput: AssetUpdateLocalizationInput;
    AssetUpdateLocalizationsInput: AssetUpdateLocalizationsInput;
    AssetUpdateManyInlineInput: AssetUpdateManyInlineInput;
    AssetUpdateManyInput: AssetUpdateManyInput;
    AssetUpdateManyLocalizationDataInput: AssetUpdateManyLocalizationDataInput;
    AssetUpdateManyLocalizationInput: AssetUpdateManyLocalizationInput;
    AssetUpdateManyLocalizationsInput: AssetUpdateManyLocalizationsInput;
    AssetUpdateManyWithNestedWhereInput: AssetUpdateManyWithNestedWhereInput;
    AssetUpdateOneInlineInput: AssetUpdateOneInlineInput;
    AssetUpdateWithNestedWhereUniqueInput: AssetUpdateWithNestedWhereUniqueInput;
    AssetUpsertInput: AssetUpsertInput;
    AssetUpsertLocalizationInput: AssetUpsertLocalizationInput;
    AssetUpsertWithNestedWhereUniqueInput: AssetUpsertWithNestedWhereUniqueInput;
    AssetWhereInput: AssetWhereInput;
    AssetWhereUniqueInput: AssetWhereUniqueInput;
    BatchPayload: BatchPayload;
    Boolean: Scalars['Boolean'];
    Color: Color;
    ColorInput: ColorInput;
    ConnectPositionInput: ConnectPositionInput;
    Date: Scalars['Date'];
    DateTime: Scalars['DateTime'];
    DocumentOutputInput: DocumentOutputInput;
    DocumentTransformationInput: DocumentTransformationInput;
    DocumentVersion: DocumentVersion;
    Float: Scalars['Float'];
    Footer: Footer;
    FooterConnectInput: FooterConnectInput;
    FooterConnection: FooterConnection;
    FooterCreateInput: FooterCreateInput;
    FooterCreateManyInlineInput: FooterCreateManyInlineInput;
    FooterCreateOneInlineInput: FooterCreateOneInlineInput;
    FooterEdge: FooterEdge;
    FooterManyWhereInput: FooterManyWhereInput;
    FooterUpdateInput: FooterUpdateInput;
    FooterUpdateManyInlineInput: FooterUpdateManyInlineInput;
    FooterUpdateManyInput: FooterUpdateManyInput;
    FooterUpdateManyWithNestedWhereInput: FooterUpdateManyWithNestedWhereInput;
    FooterUpdateOneInlineInput: FooterUpdateOneInlineInput;
    FooterUpdateWithNestedWhereUniqueInput: FooterUpdateWithNestedWhereUniqueInput;
    FooterUpsertInput: FooterUpsertInput;
    FooterUpsertWithNestedWhereUniqueInput: FooterUpsertWithNestedWhereUniqueInput;
    FooterWhereInput: FooterWhereInput;
    FooterWhereUniqueInput: FooterWhereUniqueInput;
    Hex: Scalars['Hex'];
    ID: Scalars['ID'];
    ImageResizeInput: ImageResizeInput;
    ImageTransformationInput: ImageTransformationInput;
    Int: Scalars['Int'];
    Json: Scalars['Json'];
    Location: Location;
    LocationInput: LocationInput;
    Long: Scalars['Long'];
    MagentoCategory: MagentoCategory;
    MagentoCategoryConnectInput: MagentoCategoryConnectInput;
    MagentoCategoryConnection: MagentoCategoryConnection;
    MagentoCategoryCreateInput: MagentoCategoryCreateInput;
    MagentoCategoryCreateLocalizationDataInput: MagentoCategoryCreateLocalizationDataInput;
    MagentoCategoryCreateLocalizationInput: MagentoCategoryCreateLocalizationInput;
    MagentoCategoryCreateLocalizationsInput: MagentoCategoryCreateLocalizationsInput;
    MagentoCategoryCreateManyInlineInput: MagentoCategoryCreateManyInlineInput;
    MagentoCategoryCreateOneInlineInput: MagentoCategoryCreateOneInlineInput;
    MagentoCategoryEdge: MagentoCategoryEdge;
    MagentoCategoryManyWhereInput: MagentoCategoryManyWhereInput;
    MagentoCategoryUpdateInput: MagentoCategoryUpdateInput;
    MagentoCategoryUpdateLocalizationDataInput: MagentoCategoryUpdateLocalizationDataInput;
    MagentoCategoryUpdateLocalizationInput: MagentoCategoryUpdateLocalizationInput;
    MagentoCategoryUpdateLocalizationsInput: MagentoCategoryUpdateLocalizationsInput;
    MagentoCategoryUpdateManyInlineInput: MagentoCategoryUpdateManyInlineInput;
    MagentoCategoryUpdateManyInput: MagentoCategoryUpdateManyInput;
    MagentoCategoryUpdateManyWithNestedWhereInput: MagentoCategoryUpdateManyWithNestedWhereInput;
    MagentoCategoryUpdateOneInlineInput: MagentoCategoryUpdateOneInlineInput;
    MagentoCategoryUpdateWithNestedWhereUniqueInput: MagentoCategoryUpdateWithNestedWhereUniqueInput;
    MagentoCategoryUpsertInput: MagentoCategoryUpsertInput;
    MagentoCategoryUpsertLocalizationInput: MagentoCategoryUpsertLocalizationInput;
    MagentoCategoryUpsertWithNestedWhereUniqueInput: MagentoCategoryUpsertWithNestedWhereUniqueInput;
    MagentoCategoryWhereInput: MagentoCategoryWhereInput;
    MagentoCategoryWhereUniqueInput: MagentoCategoryWhereUniqueInput;
    Node: ResolversParentTypes['Asset'] | ResolversParentTypes['Footer'] | ResolversParentTypes['MagentoCategory'] | ResolversParentTypes['Page'] | ResolversParentTypes['PageLink'] | ResolversParentTypes['Product'] | ResolversParentTypes['RowBlogContent'] | ResolversParentTypes['RowButtonLinkList'] | ResolversParentTypes['RowColumnOne'] | ResolversParentTypes['RowColumnThree'] | ResolversParentTypes['RowColumnTwo'] | ResolversParentTypes['RowContentLinks'] | ResolversParentTypes['RowHeroBanner'] | ResolversParentTypes['RowProductBackstory'] | ResolversParentTypes['RowProductFeature'] | ResolversParentTypes['RowProductFeatureBoxed'] | ResolversParentTypes['RowProductGrid'] | ResolversParentTypes['RowProductRelated'] | ResolversParentTypes['RowProductReviews'] | ResolversParentTypes['RowProductSpecs'] | ResolversParentTypes['RowProductUpsells'] | ResolversParentTypes['RowQuote'] | ResolversParentTypes['RowServiceOptions'] | ResolversParentTypes['RowSpecialBanner'] | ResolversParentTypes['RowSwipeableGrid'] | ResolversParentTypes['User'] | ResolversParentTypes['Usps'];
    Page: Omit<Page, 'content'> & {
        content: Array<ResolversParentTypes['PageContent']>;
    };
    PageConnectInput: PageConnectInput;
    PageConnection: PageConnection;
    PageContent: ResolversParentTypes['RowBlogContent'] | ResolversParentTypes['RowButtonLinkList'] | ResolversParentTypes['RowColumnOne'] | ResolversParentTypes['RowColumnThree'] | ResolversParentTypes['RowColumnTwo'] | ResolversParentTypes['RowContentLinks'] | ResolversParentTypes['RowHeroBanner'] | ResolversParentTypes['RowProductBackstory'] | ResolversParentTypes['RowProductGrid'] | ResolversParentTypes['RowQuote'] | ResolversParentTypes['RowServiceOptions'] | ResolversParentTypes['RowSpecialBanner'] | ResolversParentTypes['RowSwipeableGrid'];
    PageContentConnectInput: PageContentConnectInput;
    PageContentCreateInput: PageContentCreateInput;
    PageContentCreateManyInlineInput: PageContentCreateManyInlineInput;
    PageContentCreateOneInlineInput: PageContentCreateOneInlineInput;
    PageContentUpdateInput: PageContentUpdateInput;
    PageContentUpdateManyInlineInput: PageContentUpdateManyInlineInput;
    PageContentUpdateManyWithNestedWhereInput: PageContentUpdateManyWithNestedWhereInput;
    PageContentUpdateOneInlineInput: PageContentUpdateOneInlineInput;
    PageContentUpdateWithNestedWhereUniqueInput: PageContentUpdateWithNestedWhereUniqueInput;
    PageContentUpsertWithNestedWhereUniqueInput: PageContentUpsertWithNestedWhereUniqueInput;
    PageContentWhereInput: PageContentWhereInput;
    PageContentWhereUniqueInput: PageContentWhereUniqueInput;
    PageCreateInput: PageCreateInput;
    PageCreateLocalizationDataInput: PageCreateLocalizationDataInput;
    PageCreateLocalizationInput: PageCreateLocalizationInput;
    PageCreateLocalizationsInput: PageCreateLocalizationsInput;
    PageCreateManyInlineInput: PageCreateManyInlineInput;
    PageCreateOneInlineInput: PageCreateOneInlineInput;
    PageEdge: PageEdge;
    PageInfo: PageInfo;
    PageLink: PageLink;
    PageLinkConnectInput: PageLinkConnectInput;
    PageLinkConnection: PageLinkConnection;
    PageLinkCreateInput: PageLinkCreateInput;
    PageLinkCreateLocalizationDataInput: PageLinkCreateLocalizationDataInput;
    PageLinkCreateLocalizationInput: PageLinkCreateLocalizationInput;
    PageLinkCreateLocalizationsInput: PageLinkCreateLocalizationsInput;
    PageLinkCreateManyInlineInput: PageLinkCreateManyInlineInput;
    PageLinkCreateOneInlineInput: PageLinkCreateOneInlineInput;
    PageLinkEdge: PageLinkEdge;
    PageLinkManyWhereInput: PageLinkManyWhereInput;
    PageLinkUpdateInput: PageLinkUpdateInput;
    PageLinkUpdateLocalizationDataInput: PageLinkUpdateLocalizationDataInput;
    PageLinkUpdateLocalizationInput: PageLinkUpdateLocalizationInput;
    PageLinkUpdateLocalizationsInput: PageLinkUpdateLocalizationsInput;
    PageLinkUpdateManyInlineInput: PageLinkUpdateManyInlineInput;
    PageLinkUpdateManyInput: PageLinkUpdateManyInput;
    PageLinkUpdateManyLocalizationDataInput: PageLinkUpdateManyLocalizationDataInput;
    PageLinkUpdateManyLocalizationInput: PageLinkUpdateManyLocalizationInput;
    PageLinkUpdateManyLocalizationsInput: PageLinkUpdateManyLocalizationsInput;
    PageLinkUpdateManyWithNestedWhereInput: PageLinkUpdateManyWithNestedWhereInput;
    PageLinkUpdateOneInlineInput: PageLinkUpdateOneInlineInput;
    PageLinkUpdateWithNestedWhereUniqueInput: PageLinkUpdateWithNestedWhereUniqueInput;
    PageLinkUpsertInput: PageLinkUpsertInput;
    PageLinkUpsertLocalizationInput: PageLinkUpsertLocalizationInput;
    PageLinkUpsertWithNestedWhereUniqueInput: PageLinkUpsertWithNestedWhereUniqueInput;
    PageLinkWhereInput: PageLinkWhereInput;
    PageLinkWhereUniqueInput: PageLinkWhereUniqueInput;
    PageManyWhereInput: PageManyWhereInput;
    PageUpdateInput: PageUpdateInput;
    PageUpdateLocalizationDataInput: PageUpdateLocalizationDataInput;
    PageUpdateLocalizationInput: PageUpdateLocalizationInput;
    PageUpdateLocalizationsInput: PageUpdateLocalizationsInput;
    PageUpdateManyInlineInput: PageUpdateManyInlineInput;
    PageUpdateManyInput: PageUpdateManyInput;
    PageUpdateManyLocalizationDataInput: PageUpdateManyLocalizationDataInput;
    PageUpdateManyLocalizationInput: PageUpdateManyLocalizationInput;
    PageUpdateManyLocalizationsInput: PageUpdateManyLocalizationsInput;
    PageUpdateManyWithNestedWhereInput: PageUpdateManyWithNestedWhereInput;
    PageUpdateOneInlineInput: PageUpdateOneInlineInput;
    PageUpdateWithNestedWhereUniqueInput: PageUpdateWithNestedWhereUniqueInput;
    PageUpsertInput: PageUpsertInput;
    PageUpsertLocalizationInput: PageUpsertLocalizationInput;
    PageUpsertWithNestedWhereUniqueInput: PageUpsertWithNestedWhereUniqueInput;
    PageWhereInput: PageWhereInput;
    PageWhereUniqueInput: PageWhereUniqueInput;
    Product: Omit<Product, 'content'> & {
        content: Array<ResolversParentTypes['ProductContent']>;
    };
    ProductConnectInput: ProductConnectInput;
    ProductConnection: ProductConnection;
    ProductContent: ResolversParentTypes['RowColumnOne'] | ResolversParentTypes['RowColumnThree'] | ResolversParentTypes['RowColumnTwo'] | ResolversParentTypes['RowContentLinks'] | ResolversParentTypes['RowProductFeature'] | ResolversParentTypes['RowProductFeatureBoxed'] | ResolversParentTypes['RowProductRelated'] | ResolversParentTypes['RowProductReviews'] | ResolversParentTypes['RowProductSpecs'] | ResolversParentTypes['RowProductUpsells'] | ResolversParentTypes['RowQuote'] | ResolversParentTypes['RowSpecialBanner'];
    ProductContentConnectInput: ProductContentConnectInput;
    ProductContentCreateInput: ProductContentCreateInput;
    ProductContentCreateManyInlineInput: ProductContentCreateManyInlineInput;
    ProductContentCreateOneInlineInput: ProductContentCreateOneInlineInput;
    ProductContentUpdateInput: ProductContentUpdateInput;
    ProductContentUpdateManyInlineInput: ProductContentUpdateManyInlineInput;
    ProductContentUpdateManyWithNestedWhereInput: ProductContentUpdateManyWithNestedWhereInput;
    ProductContentUpdateOneInlineInput: ProductContentUpdateOneInlineInput;
    ProductContentUpdateWithNestedWhereUniqueInput: ProductContentUpdateWithNestedWhereUniqueInput;
    ProductContentUpsertWithNestedWhereUniqueInput: ProductContentUpsertWithNestedWhereUniqueInput;
    ProductContentWhereInput: ProductContentWhereInput;
    ProductContentWhereUniqueInput: ProductContentWhereUniqueInput;
    ProductCreateInput: ProductCreateInput;
    ProductCreateLocalizationDataInput: ProductCreateLocalizationDataInput;
    ProductCreateLocalizationInput: ProductCreateLocalizationInput;
    ProductCreateLocalizationsInput: ProductCreateLocalizationsInput;
    ProductCreateManyInlineInput: ProductCreateManyInlineInput;
    ProductCreateOneInlineInput: ProductCreateOneInlineInput;
    ProductEdge: ProductEdge;
    ProductManyWhereInput: ProductManyWhereInput;
    ProductUpdateInput: ProductUpdateInput;
    ProductUpdateLocalizationDataInput: ProductUpdateLocalizationDataInput;
    ProductUpdateLocalizationInput: ProductUpdateLocalizationInput;
    ProductUpdateLocalizationsInput: ProductUpdateLocalizationsInput;
    ProductUpdateManyInlineInput: ProductUpdateManyInlineInput;
    ProductUpdateManyInput: ProductUpdateManyInput;
    ProductUpdateManyWithNestedWhereInput: ProductUpdateManyWithNestedWhereInput;
    ProductUpdateOneInlineInput: ProductUpdateOneInlineInput;
    ProductUpdateWithNestedWhereUniqueInput: ProductUpdateWithNestedWhereUniqueInput;
    ProductUpsertInput: ProductUpsertInput;
    ProductUpsertLocalizationInput: ProductUpsertLocalizationInput;
    ProductUpsertWithNestedWhereUniqueInput: ProductUpsertWithNestedWhereUniqueInput;
    ProductWhereInput: ProductWhereInput;
    ProductWhereUniqueInput: ProductWhereUniqueInput;
    PublishLocaleInput: PublishLocaleInput;
    RGBA: RGBA;
    RGBAHue: Scalars['RGBAHue'];
    RGBAInput: RGBAInput;
    RGBATransparency: Scalars['RGBATransparency'];
    RichText: RichText;
    RichTextAST: Scalars['RichTextAST'];
    RowBlogContent: RowBlogContent;
    RowBlogContentConnectInput: RowBlogContentConnectInput;
    RowBlogContentConnection: RowBlogContentConnection;
    RowBlogContentCreateInput: RowBlogContentCreateInput;
    RowBlogContentCreateLocalizationDataInput: RowBlogContentCreateLocalizationDataInput;
    RowBlogContentCreateLocalizationInput: RowBlogContentCreateLocalizationInput;
    RowBlogContentCreateLocalizationsInput: RowBlogContentCreateLocalizationsInput;
    RowBlogContentCreateManyInlineInput: RowBlogContentCreateManyInlineInput;
    RowBlogContentCreateOneInlineInput: RowBlogContentCreateOneInlineInput;
    RowBlogContentEdge: RowBlogContentEdge;
    RowBlogContentManyWhereInput: RowBlogContentManyWhereInput;
    RowBlogContentUpdateInput: RowBlogContentUpdateInput;
    RowBlogContentUpdateLocalizationDataInput: RowBlogContentUpdateLocalizationDataInput;
    RowBlogContentUpdateLocalizationInput: RowBlogContentUpdateLocalizationInput;
    RowBlogContentUpdateLocalizationsInput: RowBlogContentUpdateLocalizationsInput;
    RowBlogContentUpdateManyInlineInput: RowBlogContentUpdateManyInlineInput;
    RowBlogContentUpdateManyInput: RowBlogContentUpdateManyInput;
    RowBlogContentUpdateManyLocalizationDataInput: RowBlogContentUpdateManyLocalizationDataInput;
    RowBlogContentUpdateManyLocalizationInput: RowBlogContentUpdateManyLocalizationInput;
    RowBlogContentUpdateManyLocalizationsInput: RowBlogContentUpdateManyLocalizationsInput;
    RowBlogContentUpdateManyWithNestedWhereInput: RowBlogContentUpdateManyWithNestedWhereInput;
    RowBlogContentUpdateOneInlineInput: RowBlogContentUpdateOneInlineInput;
    RowBlogContentUpdateWithNestedWhereUniqueInput: RowBlogContentUpdateWithNestedWhereUniqueInput;
    RowBlogContentUpsertInput: RowBlogContentUpsertInput;
    RowBlogContentUpsertLocalizationInput: RowBlogContentUpsertLocalizationInput;
    RowBlogContentUpsertWithNestedWhereUniqueInput: RowBlogContentUpsertWithNestedWhereUniqueInput;
    RowBlogContentWhereInput: RowBlogContentWhereInput;
    RowBlogContentWhereUniqueInput: RowBlogContentWhereUniqueInput;
    RowButtonLinkList: RowButtonLinkList;
    RowButtonLinkListConnectInput: RowButtonLinkListConnectInput;
    RowButtonLinkListConnection: RowButtonLinkListConnection;
    RowButtonLinkListCreateInput: RowButtonLinkListCreateInput;
    RowButtonLinkListCreateLocalizationDataInput: RowButtonLinkListCreateLocalizationDataInput;
    RowButtonLinkListCreateLocalizationInput: RowButtonLinkListCreateLocalizationInput;
    RowButtonLinkListCreateLocalizationsInput: RowButtonLinkListCreateLocalizationsInput;
    RowButtonLinkListCreateManyInlineInput: RowButtonLinkListCreateManyInlineInput;
    RowButtonLinkListCreateOneInlineInput: RowButtonLinkListCreateOneInlineInput;
    RowButtonLinkListEdge: RowButtonLinkListEdge;
    RowButtonLinkListManyWhereInput: RowButtonLinkListManyWhereInput;
    RowButtonLinkListUpdateInput: RowButtonLinkListUpdateInput;
    RowButtonLinkListUpdateLocalizationDataInput: RowButtonLinkListUpdateLocalizationDataInput;
    RowButtonLinkListUpdateLocalizationInput: RowButtonLinkListUpdateLocalizationInput;
    RowButtonLinkListUpdateLocalizationsInput: RowButtonLinkListUpdateLocalizationsInput;
    RowButtonLinkListUpdateManyInlineInput: RowButtonLinkListUpdateManyInlineInput;
    RowButtonLinkListUpdateManyInput: RowButtonLinkListUpdateManyInput;
    RowButtonLinkListUpdateManyLocalizationDataInput: RowButtonLinkListUpdateManyLocalizationDataInput;
    RowButtonLinkListUpdateManyLocalizationInput: RowButtonLinkListUpdateManyLocalizationInput;
    RowButtonLinkListUpdateManyLocalizationsInput: RowButtonLinkListUpdateManyLocalizationsInput;
    RowButtonLinkListUpdateManyWithNestedWhereInput: RowButtonLinkListUpdateManyWithNestedWhereInput;
    RowButtonLinkListUpdateOneInlineInput: RowButtonLinkListUpdateOneInlineInput;
    RowButtonLinkListUpdateWithNestedWhereUniqueInput: RowButtonLinkListUpdateWithNestedWhereUniqueInput;
    RowButtonLinkListUpsertInput: RowButtonLinkListUpsertInput;
    RowButtonLinkListUpsertLocalizationInput: RowButtonLinkListUpsertLocalizationInput;
    RowButtonLinkListUpsertWithNestedWhereUniqueInput: RowButtonLinkListUpsertWithNestedWhereUniqueInput;
    RowButtonLinkListWhereInput: RowButtonLinkListWhereInput;
    RowButtonLinkListWhereUniqueInput: RowButtonLinkListWhereUniqueInput;
    RowColumnOne: RowColumnOne;
    RowColumnOneConnectInput: RowColumnOneConnectInput;
    RowColumnOneConnection: RowColumnOneConnection;
    RowColumnOneCreateInput: RowColumnOneCreateInput;
    RowColumnOneCreateLocalizationDataInput: RowColumnOneCreateLocalizationDataInput;
    RowColumnOneCreateLocalizationInput: RowColumnOneCreateLocalizationInput;
    RowColumnOneCreateLocalizationsInput: RowColumnOneCreateLocalizationsInput;
    RowColumnOneCreateManyInlineInput: RowColumnOneCreateManyInlineInput;
    RowColumnOneCreateOneInlineInput: RowColumnOneCreateOneInlineInput;
    RowColumnOneEdge: RowColumnOneEdge;
    RowColumnOneManyWhereInput: RowColumnOneManyWhereInput;
    RowColumnOneUpdateInput: RowColumnOneUpdateInput;
    RowColumnOneUpdateLocalizationDataInput: RowColumnOneUpdateLocalizationDataInput;
    RowColumnOneUpdateLocalizationInput: RowColumnOneUpdateLocalizationInput;
    RowColumnOneUpdateLocalizationsInput: RowColumnOneUpdateLocalizationsInput;
    RowColumnOneUpdateManyInlineInput: RowColumnOneUpdateManyInlineInput;
    RowColumnOneUpdateManyInput: RowColumnOneUpdateManyInput;
    RowColumnOneUpdateManyLocalizationDataInput: RowColumnOneUpdateManyLocalizationDataInput;
    RowColumnOneUpdateManyLocalizationInput: RowColumnOneUpdateManyLocalizationInput;
    RowColumnOneUpdateManyLocalizationsInput: RowColumnOneUpdateManyLocalizationsInput;
    RowColumnOneUpdateManyWithNestedWhereInput: RowColumnOneUpdateManyWithNestedWhereInput;
    RowColumnOneUpdateOneInlineInput: RowColumnOneUpdateOneInlineInput;
    RowColumnOneUpdateWithNestedWhereUniqueInput: RowColumnOneUpdateWithNestedWhereUniqueInput;
    RowColumnOneUpsertInput: RowColumnOneUpsertInput;
    RowColumnOneUpsertLocalizationInput: RowColumnOneUpsertLocalizationInput;
    RowColumnOneUpsertWithNestedWhereUniqueInput: RowColumnOneUpsertWithNestedWhereUniqueInput;
    RowColumnOneWhereInput: RowColumnOneWhereInput;
    RowColumnOneWhereUniqueInput: RowColumnOneWhereUniqueInput;
    RowColumnThree: RowColumnThree;
    RowColumnThreeConnectInput: RowColumnThreeConnectInput;
    RowColumnThreeConnection: RowColumnThreeConnection;
    RowColumnThreeCreateInput: RowColumnThreeCreateInput;
    RowColumnThreeCreateLocalizationDataInput: RowColumnThreeCreateLocalizationDataInput;
    RowColumnThreeCreateLocalizationInput: RowColumnThreeCreateLocalizationInput;
    RowColumnThreeCreateLocalizationsInput: RowColumnThreeCreateLocalizationsInput;
    RowColumnThreeCreateManyInlineInput: RowColumnThreeCreateManyInlineInput;
    RowColumnThreeCreateOneInlineInput: RowColumnThreeCreateOneInlineInput;
    RowColumnThreeEdge: RowColumnThreeEdge;
    RowColumnThreeManyWhereInput: RowColumnThreeManyWhereInput;
    RowColumnThreeUpdateInput: RowColumnThreeUpdateInput;
    RowColumnThreeUpdateLocalizationDataInput: RowColumnThreeUpdateLocalizationDataInput;
    RowColumnThreeUpdateLocalizationInput: RowColumnThreeUpdateLocalizationInput;
    RowColumnThreeUpdateLocalizationsInput: RowColumnThreeUpdateLocalizationsInput;
    RowColumnThreeUpdateManyInlineInput: RowColumnThreeUpdateManyInlineInput;
    RowColumnThreeUpdateManyInput: RowColumnThreeUpdateManyInput;
    RowColumnThreeUpdateManyLocalizationDataInput: RowColumnThreeUpdateManyLocalizationDataInput;
    RowColumnThreeUpdateManyLocalizationInput: RowColumnThreeUpdateManyLocalizationInput;
    RowColumnThreeUpdateManyLocalizationsInput: RowColumnThreeUpdateManyLocalizationsInput;
    RowColumnThreeUpdateManyWithNestedWhereInput: RowColumnThreeUpdateManyWithNestedWhereInput;
    RowColumnThreeUpdateOneInlineInput: RowColumnThreeUpdateOneInlineInput;
    RowColumnThreeUpdateWithNestedWhereUniqueInput: RowColumnThreeUpdateWithNestedWhereUniqueInput;
    RowColumnThreeUpsertInput: RowColumnThreeUpsertInput;
    RowColumnThreeUpsertLocalizationInput: RowColumnThreeUpsertLocalizationInput;
    RowColumnThreeUpsertWithNestedWhereUniqueInput: RowColumnThreeUpsertWithNestedWhereUniqueInput;
    RowColumnThreeWhereInput: RowColumnThreeWhereInput;
    RowColumnThreeWhereUniqueInput: RowColumnThreeWhereUniqueInput;
    RowColumnTwo: RowColumnTwo;
    RowColumnTwoConnectInput: RowColumnTwoConnectInput;
    RowColumnTwoConnection: RowColumnTwoConnection;
    RowColumnTwoCreateInput: RowColumnTwoCreateInput;
    RowColumnTwoCreateLocalizationDataInput: RowColumnTwoCreateLocalizationDataInput;
    RowColumnTwoCreateLocalizationInput: RowColumnTwoCreateLocalizationInput;
    RowColumnTwoCreateLocalizationsInput: RowColumnTwoCreateLocalizationsInput;
    RowColumnTwoCreateManyInlineInput: RowColumnTwoCreateManyInlineInput;
    RowColumnTwoCreateOneInlineInput: RowColumnTwoCreateOneInlineInput;
    RowColumnTwoEdge: RowColumnTwoEdge;
    RowColumnTwoManyWhereInput: RowColumnTwoManyWhereInput;
    RowColumnTwoUpdateInput: RowColumnTwoUpdateInput;
    RowColumnTwoUpdateLocalizationDataInput: RowColumnTwoUpdateLocalizationDataInput;
    RowColumnTwoUpdateLocalizationInput: RowColumnTwoUpdateLocalizationInput;
    RowColumnTwoUpdateLocalizationsInput: RowColumnTwoUpdateLocalizationsInput;
    RowColumnTwoUpdateManyInlineInput: RowColumnTwoUpdateManyInlineInput;
    RowColumnTwoUpdateManyInput: RowColumnTwoUpdateManyInput;
    RowColumnTwoUpdateManyLocalizationDataInput: RowColumnTwoUpdateManyLocalizationDataInput;
    RowColumnTwoUpdateManyLocalizationInput: RowColumnTwoUpdateManyLocalizationInput;
    RowColumnTwoUpdateManyLocalizationsInput: RowColumnTwoUpdateManyLocalizationsInput;
    RowColumnTwoUpdateManyWithNestedWhereInput: RowColumnTwoUpdateManyWithNestedWhereInput;
    RowColumnTwoUpdateOneInlineInput: RowColumnTwoUpdateOneInlineInput;
    RowColumnTwoUpdateWithNestedWhereUniqueInput: RowColumnTwoUpdateWithNestedWhereUniqueInput;
    RowColumnTwoUpsertInput: RowColumnTwoUpsertInput;
    RowColumnTwoUpsertLocalizationInput: RowColumnTwoUpsertLocalizationInput;
    RowColumnTwoUpsertWithNestedWhereUniqueInput: RowColumnTwoUpsertWithNestedWhereUniqueInput;
    RowColumnTwoWhereInput: RowColumnTwoWhereInput;
    RowColumnTwoWhereUniqueInput: RowColumnTwoWhereUniqueInput;
    RowContentLinks: RowContentLinks;
    RowContentLinksConnectInput: RowContentLinksConnectInput;
    RowContentLinksConnection: RowContentLinksConnection;
    RowContentLinksCreateInput: RowContentLinksCreateInput;
    RowContentLinksCreateLocalizationDataInput: RowContentLinksCreateLocalizationDataInput;
    RowContentLinksCreateLocalizationInput: RowContentLinksCreateLocalizationInput;
    RowContentLinksCreateLocalizationsInput: RowContentLinksCreateLocalizationsInput;
    RowContentLinksCreateManyInlineInput: RowContentLinksCreateManyInlineInput;
    RowContentLinksCreateOneInlineInput: RowContentLinksCreateOneInlineInput;
    RowContentLinksEdge: RowContentLinksEdge;
    RowContentLinksManyWhereInput: RowContentLinksManyWhereInput;
    RowContentLinksUpdateInput: RowContentLinksUpdateInput;
    RowContentLinksUpdateLocalizationDataInput: RowContentLinksUpdateLocalizationDataInput;
    RowContentLinksUpdateLocalizationInput: RowContentLinksUpdateLocalizationInput;
    RowContentLinksUpdateLocalizationsInput: RowContentLinksUpdateLocalizationsInput;
    RowContentLinksUpdateManyInlineInput: RowContentLinksUpdateManyInlineInput;
    RowContentLinksUpdateManyInput: RowContentLinksUpdateManyInput;
    RowContentLinksUpdateManyLocalizationDataInput: RowContentLinksUpdateManyLocalizationDataInput;
    RowContentLinksUpdateManyLocalizationInput: RowContentLinksUpdateManyLocalizationInput;
    RowContentLinksUpdateManyLocalizationsInput: RowContentLinksUpdateManyLocalizationsInput;
    RowContentLinksUpdateManyWithNestedWhereInput: RowContentLinksUpdateManyWithNestedWhereInput;
    RowContentLinksUpdateOneInlineInput: RowContentLinksUpdateOneInlineInput;
    RowContentLinksUpdateWithNestedWhereUniqueInput: RowContentLinksUpdateWithNestedWhereUniqueInput;
    RowContentLinksUpsertInput: RowContentLinksUpsertInput;
    RowContentLinksUpsertLocalizationInput: RowContentLinksUpsertLocalizationInput;
    RowContentLinksUpsertWithNestedWhereUniqueInput: RowContentLinksUpsertWithNestedWhereUniqueInput;
    RowContentLinksWhereInput: RowContentLinksWhereInput;
    RowContentLinksWhereUniqueInput: RowContentLinksWhereUniqueInput;
    RowHeroBanner: RowHeroBanner;
    RowHeroBannerConnectInput: RowHeroBannerConnectInput;
    RowHeroBannerConnection: RowHeroBannerConnection;
    RowHeroBannerCreateInput: RowHeroBannerCreateInput;
    RowHeroBannerCreateLocalizationDataInput: RowHeroBannerCreateLocalizationDataInput;
    RowHeroBannerCreateLocalizationInput: RowHeroBannerCreateLocalizationInput;
    RowHeroBannerCreateLocalizationsInput: RowHeroBannerCreateLocalizationsInput;
    RowHeroBannerCreateManyInlineInput: RowHeroBannerCreateManyInlineInput;
    RowHeroBannerCreateOneInlineInput: RowHeroBannerCreateOneInlineInput;
    RowHeroBannerEdge: RowHeroBannerEdge;
    RowHeroBannerManyWhereInput: RowHeroBannerManyWhereInput;
    RowHeroBannerUpdateInput: RowHeroBannerUpdateInput;
    RowHeroBannerUpdateLocalizationDataInput: RowHeroBannerUpdateLocalizationDataInput;
    RowHeroBannerUpdateLocalizationInput: RowHeroBannerUpdateLocalizationInput;
    RowHeroBannerUpdateLocalizationsInput: RowHeroBannerUpdateLocalizationsInput;
    RowHeroBannerUpdateManyInlineInput: RowHeroBannerUpdateManyInlineInput;
    RowHeroBannerUpdateManyInput: RowHeroBannerUpdateManyInput;
    RowHeroBannerUpdateManyLocalizationDataInput: RowHeroBannerUpdateManyLocalizationDataInput;
    RowHeroBannerUpdateManyLocalizationInput: RowHeroBannerUpdateManyLocalizationInput;
    RowHeroBannerUpdateManyLocalizationsInput: RowHeroBannerUpdateManyLocalizationsInput;
    RowHeroBannerUpdateManyWithNestedWhereInput: RowHeroBannerUpdateManyWithNestedWhereInput;
    RowHeroBannerUpdateOneInlineInput: RowHeroBannerUpdateOneInlineInput;
    RowHeroBannerUpdateWithNestedWhereUniqueInput: RowHeroBannerUpdateWithNestedWhereUniqueInput;
    RowHeroBannerUpsertInput: RowHeroBannerUpsertInput;
    RowHeroBannerUpsertLocalizationInput: RowHeroBannerUpsertLocalizationInput;
    RowHeroBannerUpsertWithNestedWhereUniqueInput: RowHeroBannerUpsertWithNestedWhereUniqueInput;
    RowHeroBannerWhereInput: RowHeroBannerWhereInput;
    RowHeroBannerWhereUniqueInput: RowHeroBannerWhereUniqueInput;
    RowProductBackstory: RowProductBackstory;
    RowProductBackstoryConnectInput: RowProductBackstoryConnectInput;
    RowProductBackstoryConnection: RowProductBackstoryConnection;
    RowProductBackstoryCreateInput: RowProductBackstoryCreateInput;
    RowProductBackstoryCreateLocalizationDataInput: RowProductBackstoryCreateLocalizationDataInput;
    RowProductBackstoryCreateLocalizationInput: RowProductBackstoryCreateLocalizationInput;
    RowProductBackstoryCreateLocalizationsInput: RowProductBackstoryCreateLocalizationsInput;
    RowProductBackstoryCreateManyInlineInput: RowProductBackstoryCreateManyInlineInput;
    RowProductBackstoryCreateOneInlineInput: RowProductBackstoryCreateOneInlineInput;
    RowProductBackstoryEdge: RowProductBackstoryEdge;
    RowProductBackstoryManyWhereInput: RowProductBackstoryManyWhereInput;
    RowProductBackstoryUpdateInput: RowProductBackstoryUpdateInput;
    RowProductBackstoryUpdateLocalizationDataInput: RowProductBackstoryUpdateLocalizationDataInput;
    RowProductBackstoryUpdateLocalizationInput: RowProductBackstoryUpdateLocalizationInput;
    RowProductBackstoryUpdateLocalizationsInput: RowProductBackstoryUpdateLocalizationsInput;
    RowProductBackstoryUpdateManyInlineInput: RowProductBackstoryUpdateManyInlineInput;
    RowProductBackstoryUpdateManyInput: RowProductBackstoryUpdateManyInput;
    RowProductBackstoryUpdateManyLocalizationDataInput: RowProductBackstoryUpdateManyLocalizationDataInput;
    RowProductBackstoryUpdateManyLocalizationInput: RowProductBackstoryUpdateManyLocalizationInput;
    RowProductBackstoryUpdateManyLocalizationsInput: RowProductBackstoryUpdateManyLocalizationsInput;
    RowProductBackstoryUpdateManyWithNestedWhereInput: RowProductBackstoryUpdateManyWithNestedWhereInput;
    RowProductBackstoryUpdateOneInlineInput: RowProductBackstoryUpdateOneInlineInput;
    RowProductBackstoryUpdateWithNestedWhereUniqueInput: RowProductBackstoryUpdateWithNestedWhereUniqueInput;
    RowProductBackstoryUpsertInput: RowProductBackstoryUpsertInput;
    RowProductBackstoryUpsertLocalizationInput: RowProductBackstoryUpsertLocalizationInput;
    RowProductBackstoryUpsertWithNestedWhereUniqueInput: RowProductBackstoryUpsertWithNestedWhereUniqueInput;
    RowProductBackstoryWhereInput: RowProductBackstoryWhereInput;
    RowProductBackstoryWhereUniqueInput: RowProductBackstoryWhereUniqueInput;
    RowProductFeature: RowProductFeature;
    RowProductFeatureBoxed: RowProductFeatureBoxed;
    RowProductFeatureBoxedConnectInput: RowProductFeatureBoxedConnectInput;
    RowProductFeatureBoxedConnection: RowProductFeatureBoxedConnection;
    RowProductFeatureBoxedCreateInput: RowProductFeatureBoxedCreateInput;
    RowProductFeatureBoxedCreateLocalizationDataInput: RowProductFeatureBoxedCreateLocalizationDataInput;
    RowProductFeatureBoxedCreateLocalizationInput: RowProductFeatureBoxedCreateLocalizationInput;
    RowProductFeatureBoxedCreateLocalizationsInput: RowProductFeatureBoxedCreateLocalizationsInput;
    RowProductFeatureBoxedCreateManyInlineInput: RowProductFeatureBoxedCreateManyInlineInput;
    RowProductFeatureBoxedCreateOneInlineInput: RowProductFeatureBoxedCreateOneInlineInput;
    RowProductFeatureBoxedEdge: RowProductFeatureBoxedEdge;
    RowProductFeatureBoxedManyWhereInput: RowProductFeatureBoxedManyWhereInput;
    RowProductFeatureBoxedUpdateInput: RowProductFeatureBoxedUpdateInput;
    RowProductFeatureBoxedUpdateLocalizationDataInput: RowProductFeatureBoxedUpdateLocalizationDataInput;
    RowProductFeatureBoxedUpdateLocalizationInput: RowProductFeatureBoxedUpdateLocalizationInput;
    RowProductFeatureBoxedUpdateLocalizationsInput: RowProductFeatureBoxedUpdateLocalizationsInput;
    RowProductFeatureBoxedUpdateManyInlineInput: RowProductFeatureBoxedUpdateManyInlineInput;
    RowProductFeatureBoxedUpdateManyInput: RowProductFeatureBoxedUpdateManyInput;
    RowProductFeatureBoxedUpdateManyLocalizationDataInput: RowProductFeatureBoxedUpdateManyLocalizationDataInput;
    RowProductFeatureBoxedUpdateManyLocalizationInput: RowProductFeatureBoxedUpdateManyLocalizationInput;
    RowProductFeatureBoxedUpdateManyLocalizationsInput: RowProductFeatureBoxedUpdateManyLocalizationsInput;
    RowProductFeatureBoxedUpdateManyWithNestedWhereInput: RowProductFeatureBoxedUpdateManyWithNestedWhereInput;
    RowProductFeatureBoxedUpdateOneInlineInput: RowProductFeatureBoxedUpdateOneInlineInput;
    RowProductFeatureBoxedUpdateWithNestedWhereUniqueInput: RowProductFeatureBoxedUpdateWithNestedWhereUniqueInput;
    RowProductFeatureBoxedUpsertInput: RowProductFeatureBoxedUpsertInput;
    RowProductFeatureBoxedUpsertLocalizationInput: RowProductFeatureBoxedUpsertLocalizationInput;
    RowProductFeatureBoxedUpsertWithNestedWhereUniqueInput: RowProductFeatureBoxedUpsertWithNestedWhereUniqueInput;
    RowProductFeatureBoxedWhereInput: RowProductFeatureBoxedWhereInput;
    RowProductFeatureBoxedWhereUniqueInput: RowProductFeatureBoxedWhereUniqueInput;
    RowProductFeatureConnectInput: RowProductFeatureConnectInput;
    RowProductFeatureConnection: RowProductFeatureConnection;
    RowProductFeatureCreateInput: RowProductFeatureCreateInput;
    RowProductFeatureCreateLocalizationDataInput: RowProductFeatureCreateLocalizationDataInput;
    RowProductFeatureCreateLocalizationInput: RowProductFeatureCreateLocalizationInput;
    RowProductFeatureCreateLocalizationsInput: RowProductFeatureCreateLocalizationsInput;
    RowProductFeatureCreateManyInlineInput: RowProductFeatureCreateManyInlineInput;
    RowProductFeatureCreateOneInlineInput: RowProductFeatureCreateOneInlineInput;
    RowProductFeatureEdge: RowProductFeatureEdge;
    RowProductFeatureManyWhereInput: RowProductFeatureManyWhereInput;
    RowProductFeatureUpdateInput: RowProductFeatureUpdateInput;
    RowProductFeatureUpdateLocalizationDataInput: RowProductFeatureUpdateLocalizationDataInput;
    RowProductFeatureUpdateLocalizationInput: RowProductFeatureUpdateLocalizationInput;
    RowProductFeatureUpdateLocalizationsInput: RowProductFeatureUpdateLocalizationsInput;
    RowProductFeatureUpdateManyInlineInput: RowProductFeatureUpdateManyInlineInput;
    RowProductFeatureUpdateManyInput: RowProductFeatureUpdateManyInput;
    RowProductFeatureUpdateManyLocalizationDataInput: RowProductFeatureUpdateManyLocalizationDataInput;
    RowProductFeatureUpdateManyLocalizationInput: RowProductFeatureUpdateManyLocalizationInput;
    RowProductFeatureUpdateManyLocalizationsInput: RowProductFeatureUpdateManyLocalizationsInput;
    RowProductFeatureUpdateManyWithNestedWhereInput: RowProductFeatureUpdateManyWithNestedWhereInput;
    RowProductFeatureUpdateOneInlineInput: RowProductFeatureUpdateOneInlineInput;
    RowProductFeatureUpdateWithNestedWhereUniqueInput: RowProductFeatureUpdateWithNestedWhereUniqueInput;
    RowProductFeatureUpsertInput: RowProductFeatureUpsertInput;
    RowProductFeatureUpsertLocalizationInput: RowProductFeatureUpsertLocalizationInput;
    RowProductFeatureUpsertWithNestedWhereUniqueInput: RowProductFeatureUpsertWithNestedWhereUniqueInput;
    RowProductFeatureWhereInput: RowProductFeatureWhereInput;
    RowProductFeatureWhereUniqueInput: RowProductFeatureWhereUniqueInput;
    RowProductGrid: RowProductGrid;
    RowProductGridConnectInput: RowProductGridConnectInput;
    RowProductGridConnection: RowProductGridConnection;
    RowProductGridCreateInput: RowProductGridCreateInput;
    RowProductGridCreateLocalizationDataInput: RowProductGridCreateLocalizationDataInput;
    RowProductGridCreateLocalizationInput: RowProductGridCreateLocalizationInput;
    RowProductGridCreateLocalizationsInput: RowProductGridCreateLocalizationsInput;
    RowProductGridCreateManyInlineInput: RowProductGridCreateManyInlineInput;
    RowProductGridCreateOneInlineInput: RowProductGridCreateOneInlineInput;
    RowProductGridEdge: RowProductGridEdge;
    RowProductGridManyWhereInput: RowProductGridManyWhereInput;
    RowProductGridUpdateInput: RowProductGridUpdateInput;
    RowProductGridUpdateLocalizationDataInput: RowProductGridUpdateLocalizationDataInput;
    RowProductGridUpdateLocalizationInput: RowProductGridUpdateLocalizationInput;
    RowProductGridUpdateLocalizationsInput: RowProductGridUpdateLocalizationsInput;
    RowProductGridUpdateManyInlineInput: RowProductGridUpdateManyInlineInput;
    RowProductGridUpdateManyInput: RowProductGridUpdateManyInput;
    RowProductGridUpdateManyLocalizationDataInput: RowProductGridUpdateManyLocalizationDataInput;
    RowProductGridUpdateManyLocalizationInput: RowProductGridUpdateManyLocalizationInput;
    RowProductGridUpdateManyLocalizationsInput: RowProductGridUpdateManyLocalizationsInput;
    RowProductGridUpdateManyWithNestedWhereInput: RowProductGridUpdateManyWithNestedWhereInput;
    RowProductGridUpdateOneInlineInput: RowProductGridUpdateOneInlineInput;
    RowProductGridUpdateWithNestedWhereUniqueInput: RowProductGridUpdateWithNestedWhereUniqueInput;
    RowProductGridUpsertInput: RowProductGridUpsertInput;
    RowProductGridUpsertLocalizationInput: RowProductGridUpsertLocalizationInput;
    RowProductGridUpsertWithNestedWhereUniqueInput: RowProductGridUpsertWithNestedWhereUniqueInput;
    RowProductGridWhereInput: RowProductGridWhereInput;
    RowProductGridWhereUniqueInput: RowProductGridWhereUniqueInput;
    RowProductRelated: RowProductRelated;
    RowProductRelatedConnectInput: RowProductRelatedConnectInput;
    RowProductRelatedConnection: RowProductRelatedConnection;
    RowProductRelatedCreateInput: RowProductRelatedCreateInput;
    RowProductRelatedCreateLocalizationDataInput: RowProductRelatedCreateLocalizationDataInput;
    RowProductRelatedCreateLocalizationInput: RowProductRelatedCreateLocalizationInput;
    RowProductRelatedCreateLocalizationsInput: RowProductRelatedCreateLocalizationsInput;
    RowProductRelatedCreateManyInlineInput: RowProductRelatedCreateManyInlineInput;
    RowProductRelatedCreateOneInlineInput: RowProductRelatedCreateOneInlineInput;
    RowProductRelatedEdge: RowProductRelatedEdge;
    RowProductRelatedManyWhereInput: RowProductRelatedManyWhereInput;
    RowProductRelatedUpdateInput: RowProductRelatedUpdateInput;
    RowProductRelatedUpdateLocalizationDataInput: RowProductRelatedUpdateLocalizationDataInput;
    RowProductRelatedUpdateLocalizationInput: RowProductRelatedUpdateLocalizationInput;
    RowProductRelatedUpdateLocalizationsInput: RowProductRelatedUpdateLocalizationsInput;
    RowProductRelatedUpdateManyInlineInput: RowProductRelatedUpdateManyInlineInput;
    RowProductRelatedUpdateManyInput: RowProductRelatedUpdateManyInput;
    RowProductRelatedUpdateManyLocalizationDataInput: RowProductRelatedUpdateManyLocalizationDataInput;
    RowProductRelatedUpdateManyLocalizationInput: RowProductRelatedUpdateManyLocalizationInput;
    RowProductRelatedUpdateManyLocalizationsInput: RowProductRelatedUpdateManyLocalizationsInput;
    RowProductRelatedUpdateManyWithNestedWhereInput: RowProductRelatedUpdateManyWithNestedWhereInput;
    RowProductRelatedUpdateOneInlineInput: RowProductRelatedUpdateOneInlineInput;
    RowProductRelatedUpdateWithNestedWhereUniqueInput: RowProductRelatedUpdateWithNestedWhereUniqueInput;
    RowProductRelatedUpsertInput: RowProductRelatedUpsertInput;
    RowProductRelatedUpsertLocalizationInput: RowProductRelatedUpsertLocalizationInput;
    RowProductRelatedUpsertWithNestedWhereUniqueInput: RowProductRelatedUpsertWithNestedWhereUniqueInput;
    RowProductRelatedWhereInput: RowProductRelatedWhereInput;
    RowProductRelatedWhereUniqueInput: RowProductRelatedWhereUniqueInput;
    RowProductReviews: RowProductReviews;
    RowProductReviewsConnectInput: RowProductReviewsConnectInput;
    RowProductReviewsConnection: RowProductReviewsConnection;
    RowProductReviewsCreateInput: RowProductReviewsCreateInput;
    RowProductReviewsCreateLocalizationDataInput: RowProductReviewsCreateLocalizationDataInput;
    RowProductReviewsCreateLocalizationInput: RowProductReviewsCreateLocalizationInput;
    RowProductReviewsCreateLocalizationsInput: RowProductReviewsCreateLocalizationsInput;
    RowProductReviewsCreateManyInlineInput: RowProductReviewsCreateManyInlineInput;
    RowProductReviewsCreateOneInlineInput: RowProductReviewsCreateOneInlineInput;
    RowProductReviewsEdge: RowProductReviewsEdge;
    RowProductReviewsManyWhereInput: RowProductReviewsManyWhereInput;
    RowProductReviewsUpdateInput: RowProductReviewsUpdateInput;
    RowProductReviewsUpdateLocalizationDataInput: RowProductReviewsUpdateLocalizationDataInput;
    RowProductReviewsUpdateLocalizationInput: RowProductReviewsUpdateLocalizationInput;
    RowProductReviewsUpdateLocalizationsInput: RowProductReviewsUpdateLocalizationsInput;
    RowProductReviewsUpdateManyInlineInput: RowProductReviewsUpdateManyInlineInput;
    RowProductReviewsUpdateManyInput: RowProductReviewsUpdateManyInput;
    RowProductReviewsUpdateManyLocalizationDataInput: RowProductReviewsUpdateManyLocalizationDataInput;
    RowProductReviewsUpdateManyLocalizationInput: RowProductReviewsUpdateManyLocalizationInput;
    RowProductReviewsUpdateManyLocalizationsInput: RowProductReviewsUpdateManyLocalizationsInput;
    RowProductReviewsUpdateManyWithNestedWhereInput: RowProductReviewsUpdateManyWithNestedWhereInput;
    RowProductReviewsUpdateOneInlineInput: RowProductReviewsUpdateOneInlineInput;
    RowProductReviewsUpdateWithNestedWhereUniqueInput: RowProductReviewsUpdateWithNestedWhereUniqueInput;
    RowProductReviewsUpsertInput: RowProductReviewsUpsertInput;
    RowProductReviewsUpsertLocalizationInput: RowProductReviewsUpsertLocalizationInput;
    RowProductReviewsUpsertWithNestedWhereUniqueInput: RowProductReviewsUpsertWithNestedWhereUniqueInput;
    RowProductReviewsWhereInput: RowProductReviewsWhereInput;
    RowProductReviewsWhereUniqueInput: RowProductReviewsWhereUniqueInput;
    RowProductSpecs: RowProductSpecs;
    RowProductSpecsConnectInput: RowProductSpecsConnectInput;
    RowProductSpecsConnection: RowProductSpecsConnection;
    RowProductSpecsCreateInput: RowProductSpecsCreateInput;
    RowProductSpecsCreateManyInlineInput: RowProductSpecsCreateManyInlineInput;
    RowProductSpecsCreateOneInlineInput: RowProductSpecsCreateOneInlineInput;
    RowProductSpecsEdge: RowProductSpecsEdge;
    RowProductSpecsManyWhereInput: RowProductSpecsManyWhereInput;
    RowProductSpecsUpdateInput: RowProductSpecsUpdateInput;
    RowProductSpecsUpdateManyInlineInput: RowProductSpecsUpdateManyInlineInput;
    RowProductSpecsUpdateManyInput: RowProductSpecsUpdateManyInput;
    RowProductSpecsUpdateManyWithNestedWhereInput: RowProductSpecsUpdateManyWithNestedWhereInput;
    RowProductSpecsUpdateOneInlineInput: RowProductSpecsUpdateOneInlineInput;
    RowProductSpecsUpdateWithNestedWhereUniqueInput: RowProductSpecsUpdateWithNestedWhereUniqueInput;
    RowProductSpecsUpsertInput: RowProductSpecsUpsertInput;
    RowProductSpecsUpsertWithNestedWhereUniqueInput: RowProductSpecsUpsertWithNestedWhereUniqueInput;
    RowProductSpecsWhereInput: RowProductSpecsWhereInput;
    RowProductSpecsWhereUniqueInput: RowProductSpecsWhereUniqueInput;
    RowProductUpsells: RowProductUpsells;
    RowProductUpsellsConnectInput: RowProductUpsellsConnectInput;
    RowProductUpsellsConnection: RowProductUpsellsConnection;
    RowProductUpsellsCreateInput: RowProductUpsellsCreateInput;
    RowProductUpsellsCreateLocalizationDataInput: RowProductUpsellsCreateLocalizationDataInput;
    RowProductUpsellsCreateLocalizationInput: RowProductUpsellsCreateLocalizationInput;
    RowProductUpsellsCreateLocalizationsInput: RowProductUpsellsCreateLocalizationsInput;
    RowProductUpsellsCreateManyInlineInput: RowProductUpsellsCreateManyInlineInput;
    RowProductUpsellsCreateOneInlineInput: RowProductUpsellsCreateOneInlineInput;
    RowProductUpsellsEdge: RowProductUpsellsEdge;
    RowProductUpsellsManyWhereInput: RowProductUpsellsManyWhereInput;
    RowProductUpsellsUpdateInput: RowProductUpsellsUpdateInput;
    RowProductUpsellsUpdateLocalizationDataInput: RowProductUpsellsUpdateLocalizationDataInput;
    RowProductUpsellsUpdateLocalizationInput: RowProductUpsellsUpdateLocalizationInput;
    RowProductUpsellsUpdateLocalizationsInput: RowProductUpsellsUpdateLocalizationsInput;
    RowProductUpsellsUpdateManyInlineInput: RowProductUpsellsUpdateManyInlineInput;
    RowProductUpsellsUpdateManyInput: RowProductUpsellsUpdateManyInput;
    RowProductUpsellsUpdateManyLocalizationDataInput: RowProductUpsellsUpdateManyLocalizationDataInput;
    RowProductUpsellsUpdateManyLocalizationInput: RowProductUpsellsUpdateManyLocalizationInput;
    RowProductUpsellsUpdateManyLocalizationsInput: RowProductUpsellsUpdateManyLocalizationsInput;
    RowProductUpsellsUpdateManyWithNestedWhereInput: RowProductUpsellsUpdateManyWithNestedWhereInput;
    RowProductUpsellsUpdateOneInlineInput: RowProductUpsellsUpdateOneInlineInput;
    RowProductUpsellsUpdateWithNestedWhereUniqueInput: RowProductUpsellsUpdateWithNestedWhereUniqueInput;
    RowProductUpsellsUpsertInput: RowProductUpsellsUpsertInput;
    RowProductUpsellsUpsertLocalizationInput: RowProductUpsellsUpsertLocalizationInput;
    RowProductUpsellsUpsertWithNestedWhereUniqueInput: RowProductUpsellsUpsertWithNestedWhereUniqueInput;
    RowProductUpsellsWhereInput: RowProductUpsellsWhereInput;
    RowProductUpsellsWhereUniqueInput: RowProductUpsellsWhereUniqueInput;
    RowQuote: RowQuote;
    RowQuoteConnectInput: RowQuoteConnectInput;
    RowQuoteConnection: RowQuoteConnection;
    RowQuoteCreateInput: RowQuoteCreateInput;
    RowQuoteCreateLocalizationDataInput: RowQuoteCreateLocalizationDataInput;
    RowQuoteCreateLocalizationInput: RowQuoteCreateLocalizationInput;
    RowQuoteCreateLocalizationsInput: RowQuoteCreateLocalizationsInput;
    RowQuoteCreateManyInlineInput: RowQuoteCreateManyInlineInput;
    RowQuoteCreateOneInlineInput: RowQuoteCreateOneInlineInput;
    RowQuoteEdge: RowQuoteEdge;
    RowQuoteManyWhereInput: RowQuoteManyWhereInput;
    RowQuoteUpdateInput: RowQuoteUpdateInput;
    RowQuoteUpdateLocalizationDataInput: RowQuoteUpdateLocalizationDataInput;
    RowQuoteUpdateLocalizationInput: RowQuoteUpdateLocalizationInput;
    RowQuoteUpdateLocalizationsInput: RowQuoteUpdateLocalizationsInput;
    RowQuoteUpdateManyInlineInput: RowQuoteUpdateManyInlineInput;
    RowQuoteUpdateManyInput: RowQuoteUpdateManyInput;
    RowQuoteUpdateManyLocalizationDataInput: RowQuoteUpdateManyLocalizationDataInput;
    RowQuoteUpdateManyLocalizationInput: RowQuoteUpdateManyLocalizationInput;
    RowQuoteUpdateManyLocalizationsInput: RowQuoteUpdateManyLocalizationsInput;
    RowQuoteUpdateManyWithNestedWhereInput: RowQuoteUpdateManyWithNestedWhereInput;
    RowQuoteUpdateOneInlineInput: RowQuoteUpdateOneInlineInput;
    RowQuoteUpdateWithNestedWhereUniqueInput: RowQuoteUpdateWithNestedWhereUniqueInput;
    RowQuoteUpsertInput: RowQuoteUpsertInput;
    RowQuoteUpsertLocalizationInput: RowQuoteUpsertLocalizationInput;
    RowQuoteUpsertWithNestedWhereUniqueInput: RowQuoteUpsertWithNestedWhereUniqueInput;
    RowQuoteWhereInput: RowQuoteWhereInput;
    RowQuoteWhereUniqueInput: RowQuoteWhereUniqueInput;
    RowServiceOptions: RowServiceOptions;
    RowServiceOptionsConnectInput: RowServiceOptionsConnectInput;
    RowServiceOptionsConnection: RowServiceOptionsConnection;
    RowServiceOptionsCreateInput: RowServiceOptionsCreateInput;
    RowServiceOptionsCreateLocalizationDataInput: RowServiceOptionsCreateLocalizationDataInput;
    RowServiceOptionsCreateLocalizationInput: RowServiceOptionsCreateLocalizationInput;
    RowServiceOptionsCreateLocalizationsInput: RowServiceOptionsCreateLocalizationsInput;
    RowServiceOptionsCreateManyInlineInput: RowServiceOptionsCreateManyInlineInput;
    RowServiceOptionsCreateOneInlineInput: RowServiceOptionsCreateOneInlineInput;
    RowServiceOptionsEdge: RowServiceOptionsEdge;
    RowServiceOptionsManyWhereInput: RowServiceOptionsManyWhereInput;
    RowServiceOptionsUpdateInput: RowServiceOptionsUpdateInput;
    RowServiceOptionsUpdateLocalizationDataInput: RowServiceOptionsUpdateLocalizationDataInput;
    RowServiceOptionsUpdateLocalizationInput: RowServiceOptionsUpdateLocalizationInput;
    RowServiceOptionsUpdateLocalizationsInput: RowServiceOptionsUpdateLocalizationsInput;
    RowServiceOptionsUpdateManyInlineInput: RowServiceOptionsUpdateManyInlineInput;
    RowServiceOptionsUpdateManyInput: RowServiceOptionsUpdateManyInput;
    RowServiceOptionsUpdateManyLocalizationDataInput: RowServiceOptionsUpdateManyLocalizationDataInput;
    RowServiceOptionsUpdateManyLocalizationInput: RowServiceOptionsUpdateManyLocalizationInput;
    RowServiceOptionsUpdateManyLocalizationsInput: RowServiceOptionsUpdateManyLocalizationsInput;
    RowServiceOptionsUpdateManyWithNestedWhereInput: RowServiceOptionsUpdateManyWithNestedWhereInput;
    RowServiceOptionsUpdateOneInlineInput: RowServiceOptionsUpdateOneInlineInput;
    RowServiceOptionsUpdateWithNestedWhereUniqueInput: RowServiceOptionsUpdateWithNestedWhereUniqueInput;
    RowServiceOptionsUpsertInput: RowServiceOptionsUpsertInput;
    RowServiceOptionsUpsertLocalizationInput: RowServiceOptionsUpsertLocalizationInput;
    RowServiceOptionsUpsertWithNestedWhereUniqueInput: RowServiceOptionsUpsertWithNestedWhereUniqueInput;
    RowServiceOptionsWhereInput: RowServiceOptionsWhereInput;
    RowServiceOptionsWhereUniqueInput: RowServiceOptionsWhereUniqueInput;
    RowSpecialBanner: RowSpecialBanner;
    RowSpecialBannerConnectInput: RowSpecialBannerConnectInput;
    RowSpecialBannerConnection: RowSpecialBannerConnection;
    RowSpecialBannerCreateInput: RowSpecialBannerCreateInput;
    RowSpecialBannerCreateLocalizationDataInput: RowSpecialBannerCreateLocalizationDataInput;
    RowSpecialBannerCreateLocalizationInput: RowSpecialBannerCreateLocalizationInput;
    RowSpecialBannerCreateLocalizationsInput: RowSpecialBannerCreateLocalizationsInput;
    RowSpecialBannerCreateManyInlineInput: RowSpecialBannerCreateManyInlineInput;
    RowSpecialBannerCreateOneInlineInput: RowSpecialBannerCreateOneInlineInput;
    RowSpecialBannerEdge: RowSpecialBannerEdge;
    RowSpecialBannerManyWhereInput: RowSpecialBannerManyWhereInput;
    RowSpecialBannerUpdateInput: RowSpecialBannerUpdateInput;
    RowSpecialBannerUpdateLocalizationDataInput: RowSpecialBannerUpdateLocalizationDataInput;
    RowSpecialBannerUpdateLocalizationInput: RowSpecialBannerUpdateLocalizationInput;
    RowSpecialBannerUpdateLocalizationsInput: RowSpecialBannerUpdateLocalizationsInput;
    RowSpecialBannerUpdateManyInlineInput: RowSpecialBannerUpdateManyInlineInput;
    RowSpecialBannerUpdateManyInput: RowSpecialBannerUpdateManyInput;
    RowSpecialBannerUpdateManyLocalizationDataInput: RowSpecialBannerUpdateManyLocalizationDataInput;
    RowSpecialBannerUpdateManyLocalizationInput: RowSpecialBannerUpdateManyLocalizationInput;
    RowSpecialBannerUpdateManyLocalizationsInput: RowSpecialBannerUpdateManyLocalizationsInput;
    RowSpecialBannerUpdateManyWithNestedWhereInput: RowSpecialBannerUpdateManyWithNestedWhereInput;
    RowSpecialBannerUpdateOneInlineInput: RowSpecialBannerUpdateOneInlineInput;
    RowSpecialBannerUpdateWithNestedWhereUniqueInput: RowSpecialBannerUpdateWithNestedWhereUniqueInput;
    RowSpecialBannerUpsertInput: RowSpecialBannerUpsertInput;
    RowSpecialBannerUpsertLocalizationInput: RowSpecialBannerUpsertLocalizationInput;
    RowSpecialBannerUpsertWithNestedWhereUniqueInput: RowSpecialBannerUpsertWithNestedWhereUniqueInput;
    RowSpecialBannerWhereInput: RowSpecialBannerWhereInput;
    RowSpecialBannerWhereUniqueInput: RowSpecialBannerWhereUniqueInput;
    RowSwipeableGrid: RowSwipeableGrid;
    RowSwipeableGridConnectInput: RowSwipeableGridConnectInput;
    RowSwipeableGridConnection: RowSwipeableGridConnection;
    RowSwipeableGridCreateInput: RowSwipeableGridCreateInput;
    RowSwipeableGridCreateLocalizationDataInput: RowSwipeableGridCreateLocalizationDataInput;
    RowSwipeableGridCreateLocalizationInput: RowSwipeableGridCreateLocalizationInput;
    RowSwipeableGridCreateLocalizationsInput: RowSwipeableGridCreateLocalizationsInput;
    RowSwipeableGridCreateManyInlineInput: RowSwipeableGridCreateManyInlineInput;
    RowSwipeableGridCreateOneInlineInput: RowSwipeableGridCreateOneInlineInput;
    RowSwipeableGridEdge: RowSwipeableGridEdge;
    RowSwipeableGridManyWhereInput: RowSwipeableGridManyWhereInput;
    RowSwipeableGridUpdateInput: RowSwipeableGridUpdateInput;
    RowSwipeableGridUpdateLocalizationDataInput: RowSwipeableGridUpdateLocalizationDataInput;
    RowSwipeableGridUpdateLocalizationInput: RowSwipeableGridUpdateLocalizationInput;
    RowSwipeableGridUpdateLocalizationsInput: RowSwipeableGridUpdateLocalizationsInput;
    RowSwipeableGridUpdateManyInlineInput: RowSwipeableGridUpdateManyInlineInput;
    RowSwipeableGridUpdateManyInput: RowSwipeableGridUpdateManyInput;
    RowSwipeableGridUpdateManyLocalizationDataInput: RowSwipeableGridUpdateManyLocalizationDataInput;
    RowSwipeableGridUpdateManyLocalizationInput: RowSwipeableGridUpdateManyLocalizationInput;
    RowSwipeableGridUpdateManyLocalizationsInput: RowSwipeableGridUpdateManyLocalizationsInput;
    RowSwipeableGridUpdateManyWithNestedWhereInput: RowSwipeableGridUpdateManyWithNestedWhereInput;
    RowSwipeableGridUpdateOneInlineInput: RowSwipeableGridUpdateOneInlineInput;
    RowSwipeableGridUpdateWithNestedWhereUniqueInput: RowSwipeableGridUpdateWithNestedWhereUniqueInput;
    RowSwipeableGridUpsertInput: RowSwipeableGridUpsertInput;
    RowSwipeableGridUpsertLocalizationInput: RowSwipeableGridUpsertLocalizationInput;
    RowSwipeableGridUpsertWithNestedWhereUniqueInput: RowSwipeableGridUpsertWithNestedWhereUniqueInput;
    RowSwipeableGridWhereInput: RowSwipeableGridWhereInput;
    RowSwipeableGridWhereUniqueInput: RowSwipeableGridWhereUniqueInput;
    String: Scalars['String'];
    UnpublishLocaleInput: UnpublishLocaleInput;
    User: User;
    UserConnectInput: UserConnectInput;
    UserConnection: UserConnection;
    UserCreateManyInlineInput: UserCreateManyInlineInput;
    UserCreateOneInlineInput: UserCreateOneInlineInput;
    UserEdge: UserEdge;
    UserManyWhereInput: UserManyWhereInput;
    UserUpdateManyInlineInput: UserUpdateManyInlineInput;
    UserUpdateOneInlineInput: UserUpdateOneInlineInput;
    UserWhereInput: UserWhereInput;
    UserWhereUniqueInput: UserWhereUniqueInput;
    Usps: Usps;
    UspsConnectInput: UspsConnectInput;
    UspsConnection: UspsConnection;
    UspsCreateInput: UspsCreateInput;
    UspsCreateManyInlineInput: UspsCreateManyInlineInput;
    UspsCreateOneInlineInput: UspsCreateOneInlineInput;
    UspsEdge: UspsEdge;
    UspsManyWhereInput: UspsManyWhereInput;
    UspsUpdateInput: UspsUpdateInput;
    UspsUpdateManyInlineInput: UspsUpdateManyInlineInput;
    UspsUpdateManyInput: UspsUpdateManyInput;
    UspsUpdateManyWithNestedWhereInput: UspsUpdateManyWithNestedWhereInput;
    UspsUpdateOneInlineInput: UspsUpdateOneInlineInput;
    UspsUpdateWithNestedWhereUniqueInput: UspsUpdateWithNestedWhereUniqueInput;
    UspsUpsertInput: UspsUpsertInput;
    UspsUpsertWithNestedWhereUniqueInput: UspsUpsertWithNestedWhereUniqueInput;
    UspsWhereInput: UspsWhereInput;
    UspsWhereUniqueInput: UspsWhereUniqueInput;
    Version: Version;
    VersionWhereInput: VersionWhereInput;
    Mutation: {};
    StoreConfig: StoreConfig;
    SendFriendConfiguration: SendFriendConfiguration;
    Cart: Cart;
    AppliedCoupon: AppliedCoupon;
    AvailablePaymentMethod: AvailablePaymentMethod;
    MollieIssuer: MollieIssuer;
    MolliePaymentMethodMeta: MolliePaymentMethodMeta;
    BillingCartAddress: BillingCartAddress;
    CartAddressInterface: ResolversParentTypes['BillingCartAddress'] | ResolversParentTypes['ShippingCartAddress'];
    CartAddressCountry: CartAddressCountry;
    CartAddressRegion: CartAddressRegion;
    GiftMessage: GiftMessage;
    CartItemInterface: ResolversParentTypes['SimpleCartItem'] | ResolversParentTypes['VirtualCartItem'] | ResolversParentTypes['DownloadableCartItem'] | ResolversParentTypes['BundleCartItem'] | ResolversParentTypes['ConfigurableCartItem'];
    CartItemPrices: CartItemPrices;
    Discount: Discount;
    Money: Money;
    ProductInterface: ResolversParentTypes['VirtualProduct'] | ResolversParentTypes['SimpleProduct'] | ResolversParentTypes['DownloadableProduct'] | ResolversParentTypes['BundleProduct'] | ResolversParentTypes['GroupedProduct'] | ResolversParentTypes['ConfigurableProduct'];
    CategoryInterface: ResolversParentTypes['CategoryTree'];
    Breadcrumb: Breadcrumb;
    CmsBlock: CmsBlock;
    ProductAttributeSortInput: ProductAttributeSortInput;
    CategoryProducts: CategoryProducts;
    SearchResultPageInfo: SearchResultPageInfo;
    ComplexTextValue: ComplexTextValue;
    ProductImage: ProductImage;
    MediaGalleryInterface: ResolversParentTypes['ProductImage'] | ResolversParentTypes['ProductVideo'];
    MediaGalleryEntry: MediaGalleryEntry;
    ProductMediaGalleryEntriesContent: ProductMediaGalleryEntriesContent;
    ProductMediaGalleryEntriesVideoContent: ProductMediaGalleryEntriesVideoContent;
    ProductPrices: ProductPrices;
    Price: Price;
    PriceAdjustment: PriceAdjustment;
    PriceRange: PriceRange;
    ProductPrice: ProductPrice;
    ProductDiscount: ProductDiscount;
    FixedProductTax: FixedProductTax;
    TierPrice: TierPrice;
    ProductLinksInterface: ResolversParentTypes['ProductLinks'];
    ProductReviews: ProductReviews;
    ProductReview: ProductReview;
    ProductReviewRating: ProductReviewRating;
    ProductTierPrices: ProductTierPrices;
    UrlRewrite: UrlRewrite;
    HttpQueryParameter: HttpQueryParameter;
    Website: Website;
    CartPrices: CartPrices;
    CartTaxItem: CartTaxItem;
    CartDiscount: CartDiscount;
    SelectedPaymentMethod: SelectedPaymentMethod;
    ShippingCartAddress: ShippingCartAddress;
    AvailableShippingMethod: AvailableShippingMethod;
    CartItemQuantity: CartItemQuantity;
    SelectedShippingMethod: SelectedShippingMethod;
    CategoryFilterInput: CategoryFilterInput;
    FilterEqualTypeInput: FilterEqualTypeInput;
    FilterMatchTypeInput: FilterMatchTypeInput;
    CategoryResult: CategoryResult;
    CategoryTree: CategoryTree;
    CheckoutAgreement: CheckoutAgreement;
    CmsBlocks: CmsBlocks;
    CmsPage: CmsPage;
    CompareList: CompareList;
    ComparableAttribute: ComparableAttribute;
    ComparableItem: ComparableItem;
    ProductAttribute: ProductAttribute;
    Country: Country;
    Region: Region;
    Currency: Currency;
    ExchangeRate: ExchangeRate;
    AttributeInput: AttributeInput;
    CustomAttributeMetadata: CustomAttributeMetadata;
    Attribute: Attribute;
    AttributeOption: AttributeOption;
    Customer: Customer;
    CustomerAddress: CustomerAddress;
    CustomerAddressAttribute: CustomerAddressAttribute;
    CustomerAddressRegion: CustomerAddressRegion;
    CustomerOrdersFilterInput: CustomerOrdersFilterInput;
    FilterStringTypeInput: FilterStringTypeInput;
    CustomerOrders: CustomerOrders;
    CustomerOrder: CustomerOrder;
    OrderAddress: OrderAddress;
    SalesCommentItem: SalesCommentItem;
    CreditMemo: CreditMemo;
    CreditMemoItemInterface: ResolversParentTypes['DownloadableCreditMemoItem'] | ResolversParentTypes['BundleCreditMemoItem'] | ResolversParentTypes['CreditMemoItem'];
    OrderItemInterface: ResolversParentTypes['DownloadableOrderItem'] | ResolversParentTypes['BundleOrderItem'] | ResolversParentTypes['OrderItem'];
    OrderItemOption: OrderItemOption;
    CreditMemoTotal: CreditMemoTotal;
    ShippingHandling: ShippingHandling;
    ShippingDiscount: ShippingDiscount;
    TaxItem: TaxItem;
    Invoice: Invoice;
    InvoiceItemInterface: ResolversParentTypes['DownloadableInvoiceItem'] | ResolversParentTypes['BundleInvoiceItem'] | ResolversParentTypes['InvoiceItem'];
    InvoiceTotal: InvoiceTotal;
    OrderPaymentMethod: OrderPaymentMethod;
    KeyValue: KeyValue;
    OrderShipment: OrderShipment;
    ShipmentItemInterface: ResolversParentTypes['BundleShipmentItem'] | ResolversParentTypes['ShipmentItem'];
    ShipmentTracking: ShipmentTracking;
    OrderTotal: OrderTotal;
    Wishlist: Wishlist;
    WishlistItem: WishlistItem;
    WishlistItems: WishlistItems;
    WishlistItemInterface: ResolversParentTypes['SimpleWishlistItem'] | ResolversParentTypes['VirtualWishlistItem'] | ResolversParentTypes['DownloadableWishlistItem'] | ResolversParentTypes['BundleWishlistItem'] | ResolversParentTypes['GroupedProductWishlistItem'] | ResolversParentTypes['ConfigurableWishlistItem'];
    SelectedCustomizableOption: SelectedCustomizableOption;
    SelectedCustomizableOptionValue: SelectedCustomizableOptionValue;
    CartItemSelectedOptionValuePrice: CartItemSelectedOptionValuePrice;
    CustomerDownloadableProducts: CustomerDownloadableProducts;
    CustomerDownloadableProduct: CustomerDownloadableProduct;
    CustomerPaymentTokens: CustomerPaymentTokens;
    PaymentToken: PaymentToken;
    HostedProUrlInput: HostedProUrlInput;
    HostedProUrl: HostedProUrl;
    PayflowLinkTokenInput: PayflowLinkTokenInput;
    PayflowLinkToken: PayflowLinkToken;
    IsEmailAvailableOutput: IsEmailAvailableOutput;
    MolliePaymentMethodsInput: MolliePaymentMethodsInput;
    MolliePaymentMethodsOutput: MolliePaymentMethodsOutput;
    MolliePaymentMethod: MolliePaymentMethod;
    AreaInput: AreaInput;
    PickupLocationFilterInput: PickupLocationFilterInput;
    FilterTypeInput: FilterTypeInput;
    PickupLocationSortInput: PickupLocationSortInput;
    ProductInfoInput: ProductInfoInput;
    PickupLocations: PickupLocations;
    PickupLocation: PickupLocation;
    ProductReviewRatingsMetadata: ProductReviewRatingsMetadata;
    ProductReviewRatingMetadata: ProductReviewRatingMetadata;
    ProductReviewRatingValueMetadata: ProductReviewRatingValueMetadata;
    ProductAttributeFilterInput: ProductAttributeFilterInput;
    FilterRangeTypeInput: FilterRangeTypeInput;
    Products: Products;
    Aggregation: Aggregation;
    AggregationOption: AggregationOption;
    AggregationOptionInterface: ResolversParentTypes['AggregationOption'];
    LayerFilter: LayerFilter;
    LayerFilterItemInterface: ResolversParentTypes['LayerFilterItem'] | ResolversParentTypes['SwatchLayerFilterItem'];
    SortFields: SortFields;
    SortField: SortField;
    EntityUrl: EntityUrl;
    WishlistOutput: WishlistOutput;
    AddBundleProductsToCartInput: AddBundleProductsToCartInput;
    BundleProductCartItemInput: BundleProductCartItemInput;
    BundleOptionInput: BundleOptionInput;
    CustomizableOptionInput: CustomizableOptionInput;
    CartItemInput: CartItemInput;
    EnteredOptionInput: EnteredOptionInput;
    AddBundleProductsToCartOutput: AddBundleProductsToCartOutput;
    AddConfigurableProductsToCartInput: AddConfigurableProductsToCartInput;
    ConfigurableProductCartItemInput: ConfigurableProductCartItemInput;
    AddConfigurableProductsToCartOutput: AddConfigurableProductsToCartOutput;
    AddDownloadableProductsToCartInput: AddDownloadableProductsToCartInput;
    DownloadableProductCartItemInput: DownloadableProductCartItemInput;
    DownloadableProductLinksInput: DownloadableProductLinksInput;
    AddDownloadableProductsToCartOutput: AddDownloadableProductsToCartOutput;
    AddProductsToCartOutput: AddProductsToCartOutput;
    CartUserInputError: CartUserInputError;
    AddProductsToCompareListInput: AddProductsToCompareListInput;
    WishlistItemInput: WishlistItemInput;
    AddProductsToWishlistOutput: AddProductsToWishlistOutput;
    WishListUserInputError: WishListUserInputError;
    AddSimpleProductsToCartInput: AddSimpleProductsToCartInput;
    SimpleProductCartItemInput: SimpleProductCartItemInput;
    AddSimpleProductsToCartOutput: AddSimpleProductsToCartOutput;
    AddVirtualProductsToCartInput: AddVirtualProductsToCartInput;
    VirtualProductCartItemInput: VirtualProductCartItemInput;
    AddVirtualProductsToCartOutput: AddVirtualProductsToCartOutput;
    ApplyCouponToCartInput: ApplyCouponToCartInput;
    ApplyCouponToCartOutput: ApplyCouponToCartOutput;
    AssignCompareListToCustomerOutput: AssignCompareListToCustomerOutput;
    CreateCompareListInput: CreateCompareListInput;
    CustomerInput: CustomerInput;
    CustomerOutput: CustomerOutput;
    CustomerAddressInput: CustomerAddressInput;
    CustomerAddressAttributeInput: CustomerAddressAttributeInput;
    CustomerAddressRegionInput: CustomerAddressRegionInput;
    CustomerCreateInput: CustomerCreateInput;
    createEmptyCartInput: createEmptyCartInput;
    createKlarnaPaymentsSessionInput: createKlarnaPaymentsSessionInput;
    createKlarnaPaymentsSessionOutput: createKlarnaPaymentsSessionOutput;
    Categories: Categories;
    Assets: Assets;
    MollieTransactionInput: MollieTransactionInput;
    MollieTransactionOutput: MollieTransactionOutput;
    PayflowProTokenInput: PayflowProTokenInput;
    PayflowProUrlInput: PayflowProUrlInput;
    CreatePayflowProTokenOutput: CreatePayflowProTokenOutput;
    PaypalExpressTokenInput: PaypalExpressTokenInput;
    PaypalExpressUrlsInput: PaypalExpressUrlsInput;
    PaypalExpressTokenOutput: PaypalExpressTokenOutput;
    PaypalExpressUrlList: PaypalExpressUrlList;
    CreateProductReviewInput: CreateProductReviewInput;
    ProductReviewRatingInput: ProductReviewRatingInput;
    CreateProductReviewOutput: CreateProductReviewOutput;
    DeleteCompareListOutput: DeleteCompareListOutput;
    DeletePaymentTokenOutput: DeletePaymentTokenOutput;
    CustomerToken: CustomerToken;
    GenerateCustomerTokenAsAdminInput: GenerateCustomerTokenAsAdminInput;
    GenerateCustomerTokenAsAdminOutput: GenerateCustomerTokenAsAdminOutput;
    PayflowProResponseInput: PayflowProResponseInput;
    PayflowProResponseOutput: PayflowProResponseOutput;
    MollieProcessTransactionInput: MollieProcessTransactionInput;
    MollieProcessTransactionOutput: MollieProcessTransactionOutput;
    MollieResetCartInput: MollieResetCartInput;
    MollieResetCartOutput: MollieResetCartOutput;
    PlaceOrderInput: PlaceOrderInput;
    PlaceOrderOutput: PlaceOrderOutput;
    Order: Order;
    RemoveCouponFromCartInput: RemoveCouponFromCartInput;
    RemoveCouponFromCartOutput: RemoveCouponFromCartOutput;
    RemoveItemFromCartInput: RemoveItemFromCartInput;
    RemoveItemFromCartOutput: RemoveItemFromCartOutput;
    RemoveProductsFromCompareListInput: RemoveProductsFromCompareListInput;
    RemoveProductsFromWishlistOutput: RemoveProductsFromWishlistOutput;
    ReorderItemsOutput: ReorderItemsOutput;
    CheckoutUserInputError: CheckoutUserInputError;
    RevokeCustomerTokenOutput: RevokeCustomerTokenOutput;
    SendEmailToFriendInput: SendEmailToFriendInput;
    SendEmailToFriendRecipientInput: SendEmailToFriendRecipientInput;
    SendEmailToFriendSenderInput: SendEmailToFriendSenderInput;
    SendEmailToFriendOutput: SendEmailToFriendOutput;
    SendEmailToFriendRecipient: SendEmailToFriendRecipient;
    SendEmailToFriendSender: SendEmailToFriendSender;
    SetBillingAddressOnCartInput: SetBillingAddressOnCartInput;
    BillingAddressInput: BillingAddressInput;
    CartAddressInput: CartAddressInput;
    SetBillingAddressOnCartOutput: SetBillingAddressOnCartOutput;
    SetGuestEmailOnCartInput: SetGuestEmailOnCartInput;
    SetGuestEmailOnCartOutput: SetGuestEmailOnCartOutput;
    SetPaymentMethodAndPlaceOrderInput: SetPaymentMethodAndPlaceOrderInput;
    PaymentMethodInput: PaymentMethodInput;
    BraintreeInput: BraintreeInput;
    BraintreeCcVaultInput: BraintreeCcVaultInput;
    HostedProInput: HostedProInput;
    KlarnaInput: KlarnaInput;
    PayflowExpressInput: PayflowExpressInput;
    PayflowLinkInput: PayflowLinkInput;
    PayflowProInput: PayflowProInput;
    CreditCardDetailsInput: CreditCardDetailsInput;
    VaultTokenInput: VaultTokenInput;
    PaypalExpressInput: PaypalExpressInput;
    SetPaymentMethodOnCartInput: SetPaymentMethodOnCartInput;
    SetPaymentMethodOnCartOutput: SetPaymentMethodOnCartOutput;
    SetShippingAddressesOnCartInput: SetShippingAddressesOnCartInput;
    ShippingAddressInput: ShippingAddressInput;
    SetShippingAddressesOnCartOutput: SetShippingAddressesOnCartOutput;
    SetShippingMethodsOnCartInput: SetShippingMethodsOnCartInput;
    ShippingMethodInput: ShippingMethodInput;
    SetShippingMethodsOnCartOutput: SetShippingMethodsOnCartOutput;
    SubscribeEmailToNewsletterOutput: SubscribeEmailToNewsletterOutput;
    UpdateCartItemsInput: UpdateCartItemsInput;
    CartItemUpdateInput: CartItemUpdateInput;
    GiftMessageInput: GiftMessageInput;
    UpdateCartItemsOutput: UpdateCartItemsOutput;
    CustomerUpdateInput: CustomerUpdateInput;
    WishlistItemUpdateInput: WishlistItemUpdateInput;
    UpdateProductsInWishlistOutput: UpdateProductsInWishlistOutput;
    ProductLinks: ProductLinks;
    PhysicalProductInterface: ResolversParentTypes['SimpleProduct'] | ResolversParentTypes['BundleProduct'] | ResolversParentTypes['GroupedProduct'] | ResolversParentTypes['ConfigurableProduct'];
    CustomizableAreaOption: CustomizableAreaOption;
    CustomizableOptionInterface: ResolversParentTypes['CustomizableAreaOption'] | ResolversParentTypes['CustomizableDateOption'] | ResolversParentTypes['CustomizableDropDownOption'] | ResolversParentTypes['CustomizableMultipleOption'] | ResolversParentTypes['CustomizableFieldOption'] | ResolversParentTypes['CustomizableFileOption'] | ResolversParentTypes['CustomizableRadioOption'] | ResolversParentTypes['CustomizableCheckboxOption'];
    CustomizableAreaValue: CustomizableAreaValue;
    CustomizableDateOption: CustomizableDateOption;
    CustomizableDateValue: CustomizableDateValue;
    CustomizableDropDownOption: CustomizableDropDownOption;
    CustomizableDropDownValue: CustomizableDropDownValue;
    CustomizableMultipleOption: CustomizableMultipleOption;
    CustomizableMultipleValue: CustomizableMultipleValue;
    CustomizableFieldOption: CustomizableFieldOption;
    CustomizableFieldValue: CustomizableFieldValue;
    CustomizableFileOption: CustomizableFileOption;
    CustomizableFileValue: CustomizableFileValue;
    ProductVideo: ProductVideo;
    CustomizableProductInterface: ResolversParentTypes['VirtualProduct'] | ResolversParentTypes['SimpleProduct'] | ResolversParentTypes['DownloadableProduct'] | ResolversParentTypes['BundleProduct'] | ResolversParentTypes['ConfigurableProduct'];
    CustomizableRadioOption: CustomizableRadioOption;
    CustomizableRadioValue: CustomizableRadioValue;
    CustomizableCheckboxOption: CustomizableCheckboxOption;
    CustomizableCheckboxValue: CustomizableCheckboxValue;
    VirtualProduct: VirtualProduct;
    SimpleProduct: SimpleProduct;
    ProductFilterInput: ProductFilterInput;
    ProductSortInput: ProductSortInput;
    LayerFilterItem: LayerFilterItem;
    SimpleWishlistItem: SimpleWishlistItem;
    VirtualWishlistItem: VirtualWishlistItem;
    SimpleCartItem: SimpleCartItem;
    VirtualCartItem: VirtualCartItem;
    DownloadableCartItem: DownloadableCartItem;
    DownloadableProductLinks: DownloadableProductLinks;
    DownloadableProductSamples: DownloadableProductSamples;
    DownloadableProduct: DownloadableProduct;
    DownloadableOrderItem: DownloadableOrderItem;
    DownloadableItemsLinks: DownloadableItemsLinks;
    DownloadableInvoiceItem: DownloadableInvoiceItem;
    DownloadableCreditMemoItem: DownloadableCreditMemoItem;
    DownloadableWishlistItem: DownloadableWishlistItem;
    BundleCartItem: BundleCartItem;
    SelectedBundleOption: SelectedBundleOption;
    SelectedBundleOptionValue: SelectedBundleOptionValue;
    BundleItem: BundleItem;
    BundleItemOption: BundleItemOption;
    BundleProduct: BundleProduct;
    BundleOrderItem: BundleOrderItem;
    ItemSelectedBundleOption: ItemSelectedBundleOption;
    ItemSelectedBundleOptionValue: ItemSelectedBundleOptionValue;
    BundleInvoiceItem: BundleInvoiceItem;
    BundleShipmentItem: BundleShipmentItem;
    BundleCreditMemoItem: BundleCreditMemoItem;
    BundleWishlistItem: BundleWishlistItem;
    ConfigurableCartItem: ConfigurableCartItem;
    SelectedConfigurableOption: SelectedConfigurableOption;
    SalesItemInterface: SalesItemInterface;
    GroupedProduct: GroupedProduct;
    GroupedProductItem: GroupedProductItem;
    GroupedProductWishlistItem: GroupedProductWishlistItem;
    PaypalExpressToken: PaypalExpressToken;
    PayflowProToken: PayflowProToken;
    ConfigurableProduct: ConfigurableProduct;
    ConfigurableProductOptions: ConfigurableProductOptions;
    ConfigurableProductOptionsValues: ConfigurableProductOptionsValues;
    SwatchDataInterface: ResolversParentTypes['ImageSwatchData'] | ResolversParentTypes['TextSwatchData'] | ResolversParentTypes['ColorSwatchData'];
    ConfigurableProductOptionsSelection: ConfigurableProductOptionsSelection;
    ConfigurableOptionAvailableForSelection: ConfigurableOptionAvailableForSelection;
    ConfigurableVariant: ConfigurableVariant;
    ConfigurableAttributeOption: ConfigurableAttributeOption;
    ConfigurableWishlistItem: ConfigurableWishlistItem;
    OrderItem: OrderItem;
    InvoiceItem: InvoiceItem;
    ShipmentItem: ShipmentItem;
    CreditMemoItem: CreditMemoItem;
    SwatchLayerFilterItemInterface: ResolversParentTypes['SwatchLayerFilterItem'];
    SwatchData: SwatchData;
    SwatchLayerFilterItem: SwatchLayerFilterItem;
    ImageSwatchData: ImageSwatchData;
    TextSwatchData: TextSwatchData;
    ColorSwatchData: ColorSwatchData;
}>;
export declare type QueryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<QueryproductpagesArgs, 'stage' | 'locales'>>;
    footer?: Resolver<Maybe<ResolversTypes['Footer']>, ParentType, ContextType, RequireFields<QueryfooterArgs, 'where' | 'stage' | 'locales'>>;
    usps?: Resolver<Maybe<ResolversTypes['Usps']>, ParentType, ContextType, RequireFields<QueryuspsArgs, 'where' | 'stage' | 'locales'>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<QuerypagesArgs, 'stage' | 'locales'>>;
    pagesConnection?: Resolver<ResolversTypes['PageConnection'], ParentType, ContextType, RequireFields<QuerypagesConnectionArgs, 'stage' | 'locales'>>;
    availableStores?: Resolver<Maybe<Array<Maybe<ResolversTypes['StoreConfig']>>>, ParentType, ContextType, RequireFields<QueryavailableStoresArgs, never>>;
    cart?: Resolver<Maybe<ResolversTypes['Cart']>, ParentType, ContextType, RequireFields<QuerycartArgs, 'cart_id'>>;
    categories?: Resolver<Maybe<ResolversTypes['CategoryResult']>, ParentType, ContextType, RequireFields<QuerycategoriesArgs, 'pageSize' | 'currentPage'>>;
    category?: Resolver<Maybe<ResolversTypes['CategoryTree']>, ParentType, ContextType, RequireFields<QuerycategoryArgs, never>>;
    categoryList?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryTree']>>>, ParentType, ContextType, RequireFields<QuerycategoryListArgs, never>>;
    checkoutAgreements?: Resolver<Maybe<Array<Maybe<ResolversTypes['CheckoutAgreement']>>>, ParentType, ContextType>;
    cmsBlocks?: Resolver<Maybe<ResolversTypes['CmsBlocks']>, ParentType, ContextType, RequireFields<QuerycmsBlocksArgs, never>>;
    cmsPage?: Resolver<Maybe<ResolversTypes['CmsPage']>, ParentType, ContextType, RequireFields<QuerycmsPageArgs, never>>;
    compareList?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType, RequireFields<QuerycompareListArgs, 'uid'>>;
    countries?: Resolver<Maybe<Array<Maybe<ResolversTypes['Country']>>>, ParentType, ContextType>;
    country?: Resolver<Maybe<ResolversTypes['Country']>, ParentType, ContextType, RequireFields<QuerycountryArgs, never>>;
    currency?: Resolver<Maybe<ResolversTypes['Currency']>, ParentType, ContextType>;
    customAttributeMetadata?: Resolver<Maybe<ResolversTypes['CustomAttributeMetadata']>, ParentType, ContextType, RequireFields<QuerycustomAttributeMetadataArgs, 'attributes'>>;
    customer?: Resolver<Maybe<ResolversTypes['Customer']>, ParentType, ContextType>;
    customerCart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    customerDownloadableProducts?: Resolver<Maybe<ResolversTypes['CustomerDownloadableProducts']>, ParentType, ContextType>;
    customerOrders?: Resolver<Maybe<ResolversTypes['CustomerOrders']>, ParentType, ContextType>;
    customerPaymentTokens?: Resolver<Maybe<ResolversTypes['CustomerPaymentTokens']>, ParentType, ContextType>;
    getHostedProUrl?: Resolver<Maybe<ResolversTypes['HostedProUrl']>, ParentType, ContextType, RequireFields<QuerygetHostedProUrlArgs, 'input'>>;
    getPayflowLinkToken?: Resolver<Maybe<ResolversTypes['PayflowLinkToken']>, ParentType, ContextType, RequireFields<QuerygetPayflowLinkTokenArgs, 'input'>>;
    isEmailAvailable?: Resolver<Maybe<ResolversTypes['IsEmailAvailableOutput']>, ParentType, ContextType, RequireFields<QueryisEmailAvailableArgs, 'email'>>;
    mollieCustomerOrder?: Resolver<Maybe<ResolversTypes['CustomerOrder']>, ParentType, ContextType, RequireFields<QuerymollieCustomerOrderArgs, never>>;
    molliePaymentMethods?: Resolver<Maybe<ResolversTypes['MolliePaymentMethodsOutput']>, ParentType, ContextType, RequireFields<QuerymolliePaymentMethodsArgs, never>>;
    pickupLocations?: Resolver<Maybe<ResolversTypes['PickupLocations']>, ParentType, ContextType, RequireFields<QuerypickupLocationsArgs, 'pageSize' | 'currentPage'>>;
    productReviewRatingsMetadata?: Resolver<ResolversTypes['ProductReviewRatingsMetadata'], ParentType, ContextType>;
    products?: Resolver<Maybe<ResolversTypes['Products']>, ParentType, ContextType, RequireFields<QueryproductsArgs, 'pageSize' | 'currentPage'>>;
    storeConfig?: Resolver<Maybe<ResolversTypes['StoreConfig']>, ParentType, ContextType>;
    urlResolver?: Resolver<Maybe<ResolversTypes['EntityUrl']>, ParentType, ContextType, RequireFields<QueryurlResolverArgs, 'url'>>;
    wishlist?: Resolver<Maybe<ResolversTypes['WishlistOutput']>, ParentType, ContextType>;
}>;
export declare type AggregateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Aggregate'] = ResolversParentTypes['Aggregate']> = ResolversObject<{
    count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Asset'] = ResolversParentTypes['Asset']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<AssetlocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<AssetdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<AssetcreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<AssetupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<AssetpublishedAtArgs, 'variation'>>;
    handle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    fileName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    height?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    width?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    size?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    mimeType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    alt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<AssetcreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<AssetupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<AssetpublishedByArgs, never>>;
    assetRowHeroBanner?: Resolver<Array<ResolversTypes['RowHeroBanner']>, ParentType, ContextType, RequireFields<AssetassetRowHeroBannerArgs, never>>;
    rowSpecialBannerAsset?: Resolver<Array<ResolversTypes['RowSpecialBanner']>, ParentType, ContextType, RequireFields<AssetrowSpecialBannerAssetArgs, never>>;
    assetRowProductBackstory?: Resolver<Array<ResolversTypes['RowProductBackstory']>, ParentType, ContextType, RequireFields<AssetassetRowProductBackstoryArgs, never>>;
    assetPage?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<AssetassetPageArgs, never>>;
    assetPageLink?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<AssetassetPageLinkArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<AssethistoryArgs, 'limit' | 'skip'>>;
    url?: Resolver<ResolversTypes['String'], ParentType, ContextType, RequireFields<AsseturlArgs, never>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AssetConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AssetConnection'] = ResolversParentTypes['AssetConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['AssetEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AssetEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AssetEdge'] = ResolversParentTypes['AssetEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['Asset'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type BatchPayloadResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BatchPayload'] = ResolversParentTypes['BatchPayload']> = ResolversObject<{
    count?: Resolver<ResolversTypes['Long'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ColorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Color'] = ResolversParentTypes['Color']> = ResolversObject<{
    hex?: Resolver<ResolversTypes['Hex'], ParentType, ContextType>;
    rgba?: Resolver<ResolversTypes['RGBA'], ParentType, ContextType>;
    css?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
    name: 'Date';
}
export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
    name: 'DateTime';
}
export declare type DocumentVersionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DocumentVersion'] = ResolversParentTypes['DocumentVersion']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    revision?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
    data?: Resolver<Maybe<ResolversTypes['Json']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type FooterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Footer'] = ResolversParentTypes['Footer']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    documentInStages?: Resolver<Array<ResolversTypes['Footer']>, ParentType, ContextType, RequireFields<FooterdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    copyright?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<FootercreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<FooterupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<FooterpublishedByArgs, never>>;
    socialLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<FootersocialLinksArgs, never>>;
    legalLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<FooterlegalLinksArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<FooterhistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type FooterConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FooterConnection'] = ResolversParentTypes['FooterConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['FooterEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type FooterEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FooterEdge'] = ResolversParentTypes['FooterEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['Footer'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface HexScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Hex'], any> {
    name: 'Hex';
}
export interface JsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Json'], any> {
    name: 'Json';
}
export declare type LocationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Location'] = ResolversParentTypes['Location']> = ResolversObject<{
    latitude?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    longitude?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    distance?: Resolver<ResolversTypes['Float'], ParentType, ContextType, RequireFields<LocationdistanceArgs, 'from'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface LongScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Long'], any> {
    name: 'Long';
}
export declare type MagentoCategoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MagentoCategory'] = ResolversParentTypes['MagentoCategory']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['MagentoCategory']>, ParentType, ContextType, RequireFields<MagentoCategorylocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['MagentoCategory']>, ParentType, ContextType, RequireFields<MagentoCategorydocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<MagentoCategorycreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<MagentoCategoryupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<MagentoCategorypublishedAtArgs, 'variation'>>;
    url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    category?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<MagentoCategorycreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<MagentoCategoryupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<MagentoCategorypublishedByArgs, never>>;
    rowProductGrids?: Resolver<Array<ResolversTypes['RowProductGrid']>, ParentType, ContextType, RequireFields<MagentoCategoryrowProductGridsArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<MagentoCategoryhistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MagentoCategoryConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MagentoCategoryConnection'] = ResolversParentTypes['MagentoCategoryConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['MagentoCategoryEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MagentoCategoryEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MagentoCategoryEdge'] = ResolversParentTypes['MagentoCategoryEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['MagentoCategory'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type NodeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Node'] = ResolversParentTypes['Node']> = ResolversObject<{
    __resolveType: TypeResolveFn<'Asset' | 'Footer' | 'MagentoCategory' | 'Page' | 'PageLink' | 'Product' | 'RowBlogContent' | 'RowButtonLinkList' | 'RowColumnOne' | 'RowColumnThree' | 'RowColumnTwo' | 'RowContentLinks' | 'RowHeroBanner' | 'RowProductBackstory' | 'RowProductFeature' | 'RowProductFeatureBoxed' | 'RowProductGrid' | 'RowProductRelated' | 'RowProductReviews' | 'RowProductSpecs' | 'RowProductUpsells' | 'RowQuote' | 'RowServiceOptions' | 'RowSpecialBanner' | 'RowSwipeableGrid' | 'User' | 'Usps', ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
}>;
export declare type PageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Page'] = ResolversParentTypes['Page']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<PagelocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<PagedocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<PagecreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<PageupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<PagepublishedAtArgs, 'variation'>>;
    url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    metaTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    metaDescription?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    date?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
    author?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<PagecreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<PageupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<PagepublishedByArgs, never>>;
    rowButtonLinkLists?: Resolver<Array<ResolversTypes['RowButtonLinkList']>, ParentType, ContextType, RequireFields<PagerowButtonLinkListsArgs, never>>;
    asset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<PageassetArgs, never>>;
    childPages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<PagechildPagesArgs, never>>;
    relatedPages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<PagerelatedPagesArgs, never>>;
    metaRobots?: Resolver<ResolversTypes['MetaRobots'], ParentType, ContextType>;
    content?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, RequireFields<PagecontentArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<PagehistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PageConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageConnection'] = ResolversParentTypes['PageConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['PageEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PageContentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageContent'] = ResolversParentTypes['PageContent']> = ResolversObject<{
    __resolveType: TypeResolveFn<'RowBlogContent' | 'RowButtonLinkList' | 'RowColumnOne' | 'RowColumnThree' | 'RowColumnTwo' | 'RowContentLinks' | 'RowHeroBanner' | 'RowProductBackstory' | 'RowProductGrid' | 'RowQuote' | 'RowServiceOptions' | 'RowSpecialBanner' | 'RowSwipeableGrid', ParentType, ContextType>;
}>;
export declare type PageEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageEdge'] = ResolversParentTypes['PageEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['Page'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PageInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']> = ResolversObject<{
    hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    hasPreviousPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    startCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    endCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    pageSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PageLinkResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageLink'] = ResolversParentTypes['PageLink']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<PageLinklocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<PageLinkdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<PageLinkcreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<PageLinkupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<PageLinkpublishedAtArgs, 'variation'>>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
    url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<PageLinkcreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<PageLinkupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<PageLinkpublishedByArgs, never>>;
    rowHeroBanners?: Resolver<Array<ResolversTypes['RowHeroBanner']>, ParentType, ContextType, RequireFields<PageLinkrowHeroBannersArgs, never>>;
    rowProductGrids?: Resolver<Array<ResolversTypes['RowProductGrid']>, ParentType, ContextType, RequireFields<PageLinkrowProductGridsArgs, never>>;
    rowSpecialBanners?: Resolver<Array<ResolversTypes['RowSpecialBanner']>, ParentType, ContextType, RequireFields<PageLinkrowSpecialBannersArgs, never>>;
    footerSocialLinks?: Resolver<Array<ResolversTypes['Footer']>, ParentType, ContextType, RequireFields<PageLinkfooterSocialLinksArgs, never>>;
    footerLegalLinks?: Resolver<Array<ResolversTypes['Footer']>, ParentType, ContextType, RequireFields<PageLinkfooterLegalLinksArgs, never>>;
    rowServiceOptionsMultiple?: Resolver<Array<ResolversTypes['RowServiceOptions']>, ParentType, ContextType, RequireFields<PageLinkrowServiceOptionsMultipleArgs, never>>;
    rowContentLinks?: Resolver<Maybe<ResolversTypes['RowContentLinks']>, ParentType, ContextType, RequireFields<PageLinkrowContentLinksArgs, never>>;
    asset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<PageLinkassetArgs, never>>;
    uspsMultiple?: Resolver<Array<ResolversTypes['Usps']>, ParentType, ContextType, RequireFields<PageLinkuspsMultipleArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<PageLinkhistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PageLinkConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageLinkConnection'] = ResolversParentTypes['PageLinkConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['PageLinkEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PageLinkEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageLinkEdge'] = ResolversParentTypes['PageLinkEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['PageLink'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Product'] = ResolversParentTypes['Product']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<ProductlocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<ProductdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<ProductcreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<ProductupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<ProductpublishedAtArgs, 'variation'>>;
    url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<ProductcreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<ProductupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<ProductpublishedByArgs, never>>;
    content?: Resolver<Array<ResolversTypes['ProductContent']>, ParentType, ContextType, RequireFields<ProductcontentArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<ProducthistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductConnection'] = ResolversParentTypes['ProductConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['ProductEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductContentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductContent'] = ResolversParentTypes['ProductContent']> = ResolversObject<{
    __resolveType: TypeResolveFn<'RowColumnOne' | 'RowColumnThree' | 'RowColumnTwo' | 'RowContentLinks' | 'RowProductFeature' | 'RowProductFeatureBoxed' | 'RowProductRelated' | 'RowProductReviews' | 'RowProductSpecs' | 'RowProductUpsells' | 'RowQuote' | 'RowSpecialBanner', ParentType, ContextType>;
}>;
export declare type ProductEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductEdge'] = ResolversParentTypes['ProductEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['Product'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RGBAResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RGBA'] = ResolversParentTypes['RGBA']> = ResolversObject<{
    r?: Resolver<ResolversTypes['RGBAHue'], ParentType, ContextType>;
    g?: Resolver<ResolversTypes['RGBAHue'], ParentType, ContextType>;
    b?: Resolver<ResolversTypes['RGBAHue'], ParentType, ContextType>;
    a?: Resolver<ResolversTypes['RGBATransparency'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface RGBAHueScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['RGBAHue'], any> {
    name: 'RGBAHue';
}
export interface RGBATransparencyScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['RGBATransparency'], any> {
    name: 'RGBATransparency';
}
export declare type RichTextResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RichText'] = ResolversParentTypes['RichText']> = ResolversObject<{
    raw?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
    html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    markdown?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export interface RichTextASTScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['RichTextAST'], any> {
    name: 'RichTextAST';
}
export declare type RowBlogContentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowBlogContent'] = ResolversParentTypes['RowBlogContent']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowBlogContent']>, ParentType, ContextType, RequireFields<RowBlogContentlocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowBlogContent']>, ParentType, ContextType, RequireFields<RowBlogContentdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowBlogContentcreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowBlogContentupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowBlogContentpublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    content?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowBlogContentcreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowBlogContentupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowBlogContentpublishedByArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowBlogContentpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowBlogContenthistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowBlogContentConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowBlogContentConnection'] = ResolversParentTypes['RowBlogContentConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowBlogContentEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowBlogContentEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowBlogContentEdge'] = ResolversParentTypes['RowBlogContentEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowBlogContent'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowButtonLinkListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowButtonLinkList'] = ResolversParentTypes['RowButtonLinkList']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowButtonLinkList']>, ParentType, ContextType, RequireFields<RowButtonLinkListlocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowButtonLinkList']>, ParentType, ContextType, RequireFields<RowButtonLinkListdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowButtonLinkListcreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowButtonLinkListupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowButtonLinkListpublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowButtonLinkListcreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowButtonLinkListupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowButtonLinkListpublishedByArgs, never>>;
    links?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowButtonLinkListlinksArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowButtonLinkListpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowButtonLinkListhistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowButtonLinkListConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowButtonLinkListConnection'] = ResolversParentTypes['RowButtonLinkListConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowButtonLinkListEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowButtonLinkListEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowButtonLinkListEdge'] = ResolversParentTypes['RowButtonLinkListEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowButtonLinkList'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowColumnOneResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnOne'] = ResolversParentTypes['RowColumnOne']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowColumnOne']>, ParentType, ContextType, RequireFields<RowColumnOnelocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowColumnOne']>, ParentType, ContextType, RequireFields<RowColumnOnedocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowColumnOnecreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowColumnOneupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowColumnOnepublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    colOne?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowColumnOnecreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowColumnOneupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowColumnOnepublishedByArgs, never>>;
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<RowColumnOneproductpagesArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowColumnOnepagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowColumnOnehistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowColumnOneConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnOneConnection'] = ResolversParentTypes['RowColumnOneConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowColumnOneEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowColumnOneEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnOneEdge'] = ResolversParentTypes['RowColumnOneEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowColumnOne'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowColumnThreeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnThree'] = ResolversParentTypes['RowColumnThree']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowColumnThree']>, ParentType, ContextType, RequireFields<RowColumnThreelocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowColumnThree']>, ParentType, ContextType, RequireFields<RowColumnThreedocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowColumnThreecreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowColumnThreeupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowColumnThreepublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    colOne?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
    colTwo?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
    colThree?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowColumnThreecreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowColumnThreeupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowColumnThreepublishedByArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowColumnThreepagesArgs, never>>;
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<RowColumnThreeproductpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowColumnThreehistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowColumnThreeConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnThreeConnection'] = ResolversParentTypes['RowColumnThreeConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowColumnThreeEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowColumnThreeEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnThreeEdge'] = ResolversParentTypes['RowColumnThreeEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowColumnThree'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowColumnTwoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnTwo'] = ResolversParentTypes['RowColumnTwo']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowColumnTwo']>, ParentType, ContextType, RequireFields<RowColumnTwolocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowColumnTwo']>, ParentType, ContextType, RequireFields<RowColumnTwodocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowColumnTwocreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowColumnTwoupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowColumnTwopublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    colOne?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
    colTwo?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowColumnTwocreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowColumnTwoupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowColumnTwopublishedByArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowColumnTwopagesArgs, never>>;
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<RowColumnTwoproductpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowColumnTwohistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowColumnTwoConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnTwoConnection'] = ResolversParentTypes['RowColumnTwoConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowColumnTwoEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowColumnTwoEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnTwoEdge'] = ResolversParentTypes['RowColumnTwoEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowColumnTwo'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowContentLinksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowContentLinks'] = ResolversParentTypes['RowContentLinks']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowContentLinks']>, ParentType, ContextType, RequireFields<RowContentLinkslocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowContentLinks']>, ParentType, ContextType, RequireFields<RowContentLinksdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowContentLinkscreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowContentLinksupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowContentLinkspublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowContentLinkscreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowContentLinksupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowContentLinkspublishedByArgs, never>>;
    contentLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<RowContentLinkscontentLinksArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowContentLinkspagesArgs, never>>;
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<RowContentLinksproductpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowContentLinkshistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowContentLinksConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowContentLinksConnection'] = ResolversParentTypes['RowContentLinksConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowContentLinksEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowContentLinksEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowContentLinksEdge'] = ResolversParentTypes['RowContentLinksEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowContentLinks'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowHeroBannerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowHeroBanner'] = ResolversParentTypes['RowHeroBanner']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowHeroBanner']>, ParentType, ContextType, RequireFields<RowHeroBannerlocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowHeroBanner']>, ParentType, ContextType, RequireFields<RowHeroBannerdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowHeroBannercreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowHeroBannerupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowHeroBannerpublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    copy?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowHeroBannercreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowHeroBannerupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowHeroBannerpublishedByArgs, never>>;
    asset?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, RequireFields<RowHeroBannerassetArgs, never>>;
    pageLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<RowHeroBannerpageLinksArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowHeroBannerpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowHeroBannerhistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowHeroBannerConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowHeroBannerConnection'] = ResolversParentTypes['RowHeroBannerConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowHeroBannerEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowHeroBannerEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowHeroBannerEdge'] = ResolversParentTypes['RowHeroBannerEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowHeroBanner'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductBackstoryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductBackstory'] = ResolversParentTypes['RowProductBackstory']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowProductBackstory']>, ParentType, ContextType, RequireFields<RowProductBackstorylocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowProductBackstory']>, ParentType, ContextType, RequireFields<RowProductBackstorydocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductBackstorycreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductBackstoryupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowProductBackstorypublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    copy?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductBackstorycreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductBackstoryupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductBackstorypublishedByArgs, never>>;
    asset?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, RequireFields<RowProductBackstoryassetArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowProductBackstorypagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowProductBackstoryhistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductBackstoryConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductBackstoryConnection'] = ResolversParentTypes['RowProductBackstoryConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowProductBackstoryEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductBackstoryEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductBackstoryEdge'] = ResolversParentTypes['RowProductBackstoryEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowProductBackstory'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductFeatureResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductFeature'] = ResolversParentTypes['RowProductFeature']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowProductFeature']>, ParentType, ContextType, RequireFields<RowProductFeaturelocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowProductFeature']>, ParentType, ContextType, RequireFields<RowProductFeaturedocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductFeaturecreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductFeatureupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowProductFeaturepublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    topic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    copy?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductFeaturecreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductFeatureupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductFeaturepublishedByArgs, never>>;
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<RowProductFeatureproductpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowProductFeaturehistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductFeatureBoxedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductFeatureBoxed'] = ResolversParentTypes['RowProductFeatureBoxed']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowProductFeatureBoxed']>, ParentType, ContextType, RequireFields<RowProductFeatureBoxedlocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowProductFeatureBoxed']>, ParentType, ContextType, RequireFields<RowProductFeatureBoxeddocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductFeatureBoxedcreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductFeatureBoxedupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowProductFeatureBoxedpublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    topic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    copy?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductFeatureBoxedcreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductFeatureBoxedupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductFeatureBoxedpublishedByArgs, never>>;
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<RowProductFeatureBoxedproductpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowProductFeatureBoxedhistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductFeatureBoxedConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductFeatureBoxedConnection'] = ResolversParentTypes['RowProductFeatureBoxedConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowProductFeatureBoxedEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductFeatureBoxedEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductFeatureBoxedEdge'] = ResolversParentTypes['RowProductFeatureBoxedEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowProductFeatureBoxed'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductFeatureConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductFeatureConnection'] = ResolversParentTypes['RowProductFeatureConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowProductFeatureEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductFeatureEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductFeatureEdge'] = ResolversParentTypes['RowProductFeatureEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowProductFeature'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductGridResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductGrid'] = ResolversParentTypes['RowProductGrid']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowProductGrid']>, ParentType, ContextType, RequireFields<RowProductGridlocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowProductGrid']>, ParentType, ContextType, RequireFields<RowProductGriddocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductGridcreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductGridupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowProductGridpublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductGridcreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductGridupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductGridpublishedByArgs, never>>;
    pageLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<RowProductGridpageLinksArgs, never>>;
    magentoCategory?: Resolver<Maybe<ResolversTypes['MagentoCategory']>, ParentType, ContextType, RequireFields<RowProductGridmagentoCategoryArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowProductGridpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowProductGridhistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductGridConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductGridConnection'] = ResolversParentTypes['RowProductGridConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowProductGridEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductGridEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductGridEdge'] = ResolversParentTypes['RowProductGridEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowProductGrid'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductRelatedResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductRelated'] = ResolversParentTypes['RowProductRelated']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowProductRelated']>, ParentType, ContextType, RequireFields<RowProductRelatedlocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowProductRelated']>, ParentType, ContextType, RequireFields<RowProductRelateddocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductRelatedcreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductRelatedupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowProductRelatedpublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductRelatedcreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductRelatedupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductRelatedpublishedByArgs, never>>;
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<RowProductRelatedproductpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowProductRelatedhistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductRelatedConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductRelatedConnection'] = ResolversParentTypes['RowProductRelatedConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowProductRelatedEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductRelatedEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductRelatedEdge'] = ResolversParentTypes['RowProductRelatedEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowProductRelated'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductReviewsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductReviews'] = ResolversParentTypes['RowProductReviews']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowProductReviews']>, ParentType, ContextType, RequireFields<RowProductReviewslocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowProductReviews']>, ParentType, ContextType, RequireFields<RowProductReviewsdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductReviewscreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductReviewsupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowProductReviewspublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductReviewscreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductReviewsupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductReviewspublishedByArgs, never>>;
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<RowProductReviewsproductpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowProductReviewshistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductReviewsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductReviewsConnection'] = ResolversParentTypes['RowProductReviewsConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowProductReviewsEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductReviewsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductReviewsEdge'] = ResolversParentTypes['RowProductReviewsEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowProductReviews'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductSpecsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductSpecs'] = ResolversParentTypes['RowProductSpecs']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    documentInStages?: Resolver<Array<ResolversTypes['RowProductSpecs']>, ParentType, ContextType, RequireFields<RowProductSpecsdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductSpecscreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductSpecsupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductSpecspublishedByArgs, never>>;
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<RowProductSpecsproductpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowProductSpecshistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductSpecsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductSpecsConnection'] = ResolversParentTypes['RowProductSpecsConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowProductSpecsEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductSpecsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductSpecsEdge'] = ResolversParentTypes['RowProductSpecsEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowProductSpecs'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductUpsellsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductUpsells'] = ResolversParentTypes['RowProductUpsells']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowProductUpsells']>, ParentType, ContextType, RequireFields<RowProductUpsellslocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowProductUpsells']>, ParentType, ContextType, RequireFields<RowProductUpsellsdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductUpsellscreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductUpsellsupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowProductUpsellspublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductUpsellscreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductUpsellsupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowProductUpsellspublishedByArgs, never>>;
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<RowProductUpsellsproductpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowProductUpsellshistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductUpsellsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductUpsellsConnection'] = ResolversParentTypes['RowProductUpsellsConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowProductUpsellsEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowProductUpsellsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductUpsellsEdge'] = ResolversParentTypes['RowProductUpsellsEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowProductUpsells'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowQuoteResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowQuote'] = ResolversParentTypes['RowQuote']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowQuote']>, ParentType, ContextType, RequireFields<RowQuotelocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowQuote']>, ParentType, ContextType, RequireFields<RowQuotedocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowQuotecreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowQuoteupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowQuotepublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quote?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowQuotecreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowQuoteupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowQuotepublishedByArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowQuotepagesArgs, never>>;
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<RowQuoteproductpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowQuotehistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowQuoteConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowQuoteConnection'] = ResolversParentTypes['RowQuoteConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowQuoteEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowQuoteEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowQuoteEdge'] = ResolversParentTypes['RowQuoteEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowQuote'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowServiceOptionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowServiceOptions'] = ResolversParentTypes['RowServiceOptions']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowServiceOptions']>, ParentType, ContextType, RequireFields<RowServiceOptionslocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowServiceOptions']>, ParentType, ContextType, RequireFields<RowServiceOptionsdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowServiceOptionscreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowServiceOptionsupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowServiceOptionspublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowServiceOptionscreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowServiceOptionsupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowServiceOptionspublishedByArgs, never>>;
    serviceOptions?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<RowServiceOptionsserviceOptionsArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowServiceOptionspagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowServiceOptionshistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowServiceOptionsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowServiceOptionsConnection'] = ResolversParentTypes['RowServiceOptionsConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowServiceOptionsEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowServiceOptionsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowServiceOptionsEdge'] = ResolversParentTypes['RowServiceOptionsEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowServiceOptions'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowSpecialBannerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowSpecialBanner'] = ResolversParentTypes['RowSpecialBanner']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowSpecialBanner']>, ParentType, ContextType, RequireFields<RowSpecialBannerlocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowSpecialBanner']>, ParentType, ContextType, RequireFields<RowSpecialBannerdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowSpecialBannercreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowSpecialBannerupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowSpecialBannerpublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    topic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    copy?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowSpecialBannercreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowSpecialBannerupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowSpecialBannerpublishedByArgs, never>>;
    asset?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, RequireFields<RowSpecialBannerassetArgs, never>>;
    pageLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<RowSpecialBannerpageLinksArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowSpecialBannerpagesArgs, never>>;
    productpages?: Resolver<Array<ResolversTypes['Product']>, ParentType, ContextType, RequireFields<RowSpecialBannerproductpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowSpecialBannerhistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowSpecialBannerConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowSpecialBannerConnection'] = ResolversParentTypes['RowSpecialBannerConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowSpecialBannerEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowSpecialBannerEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowSpecialBannerEdge'] = ResolversParentTypes['RowSpecialBannerEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowSpecialBanner'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowSwipeableGridResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowSwipeableGrid'] = ResolversParentTypes['RowSwipeableGrid']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
    localizations?: Resolver<Array<ResolversTypes['RowSwipeableGrid']>, ParentType, ContextType, RequireFields<RowSwipeableGridlocalizationsArgs, 'locales' | 'includeCurrent'>>;
    documentInStages?: Resolver<Array<ResolversTypes['RowSwipeableGrid']>, ParentType, ContextType, RequireFields<RowSwipeableGriddocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowSwipeableGridcreatedAtArgs, 'variation'>>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowSwipeableGridupdatedAtArgs, 'variation'>>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowSwipeableGridpublishedAtArgs, 'variation'>>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowSwipeableGridcreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowSwipeableGridupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<RowSwipeableGridpublishedByArgs, never>>;
    pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<RowSwipeableGridpagesArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowSwipeableGridhistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowSwipeableGridConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowSwipeableGridConnection'] = ResolversParentTypes['RowSwipeableGridConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['RowSwipeableGridEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RowSwipeableGridEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowSwipeableGridEdge'] = ResolversParentTypes['RowSwipeableGridEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['RowSwipeableGrid'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type UserResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    documentInStages?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType, RequireFields<UserdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    picture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    kind?: Resolver<ResolversTypes['UserKind'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type UserConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UserConnection'] = ResolversParentTypes['UserConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['UserEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type UserEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UserEdge'] = ResolversParentTypes['UserEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type UspsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Usps'] = ResolversParentTypes['Usps']> = ResolversObject<{
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    documentInStages?: Resolver<Array<ResolversTypes['Usps']>, ParentType, ContextType, RequireFields<UspsdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
    updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
    publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
    identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<UspscreatedByArgs, never>>;
    updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<UspsupdatedByArgs, never>>;
    publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<UspspublishedByArgs, never>>;
    uspsMultiple?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<UspsuspsMultipleArgs, never>>;
    history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<UspshistoryArgs, 'limit' | 'skip'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type UspsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UspsConnection'] = ResolversParentTypes['UspsConnection']> = ResolversObject<{
    pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
    edges?: Resolver<Array<ResolversTypes['UspsEdge']>, ParentType, ContextType>;
    aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type UspsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UspsEdge'] = ResolversParentTypes['UspsEdge']> = ResolversObject<{
    node?: Resolver<ResolversTypes['Usps'], ParentType, ContextType>;
    cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type VersionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Version'] = ResolversParentTypes['Version']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
    revision?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MutationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = ResolversObject<{
    addBundleProductsToCart?: Resolver<Maybe<ResolversTypes['AddBundleProductsToCartOutput']>, ParentType, ContextType, RequireFields<MutationaddBundleProductsToCartArgs, never>>;
    addConfigurableProductsToCart?: Resolver<Maybe<ResolversTypes['AddConfigurableProductsToCartOutput']>, ParentType, ContextType, RequireFields<MutationaddConfigurableProductsToCartArgs, never>>;
    addDownloadableProductsToCart?: Resolver<Maybe<ResolversTypes['AddDownloadableProductsToCartOutput']>, ParentType, ContextType, RequireFields<MutationaddDownloadableProductsToCartArgs, never>>;
    addProductsToCart?: Resolver<Maybe<ResolversTypes['AddProductsToCartOutput']>, ParentType, ContextType, RequireFields<MutationaddProductsToCartArgs, 'cartId' | 'cartItems'>>;
    addProductsToCompareList?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType, RequireFields<MutationaddProductsToCompareListArgs, never>>;
    addProductsToWishlist?: Resolver<Maybe<ResolversTypes['AddProductsToWishlistOutput']>, ParentType, ContextType, RequireFields<MutationaddProductsToWishlistArgs, 'wishlistId' | 'wishlistItems'>>;
    addSimpleProductsToCart?: Resolver<Maybe<ResolversTypes['AddSimpleProductsToCartOutput']>, ParentType, ContextType, RequireFields<MutationaddSimpleProductsToCartArgs, never>>;
    addVirtualProductsToCart?: Resolver<Maybe<ResolversTypes['AddVirtualProductsToCartOutput']>, ParentType, ContextType, RequireFields<MutationaddVirtualProductsToCartArgs, never>>;
    applyCouponToCart?: Resolver<Maybe<ResolversTypes['ApplyCouponToCartOutput']>, ParentType, ContextType, RequireFields<MutationapplyCouponToCartArgs, never>>;
    assignCompareListToCustomer?: Resolver<Maybe<ResolversTypes['AssignCompareListToCustomerOutput']>, ParentType, ContextType, RequireFields<MutationassignCompareListToCustomerArgs, 'uid'>>;
    changeCustomerPassword?: Resolver<Maybe<ResolversTypes['Customer']>, ParentType, ContextType, RequireFields<MutationchangeCustomerPasswordArgs, 'currentPassword' | 'newPassword'>>;
    createBraintreeClientToken?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    createCompareList?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType, RequireFields<MutationcreateCompareListArgs, never>>;
    createCustomer?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationcreateCustomerArgs, 'input'>>;
    createCustomerAddress?: Resolver<Maybe<ResolversTypes['CustomerAddress']>, ParentType, ContextType, RequireFields<MutationcreateCustomerAddressArgs, 'input'>>;
    createCustomerV2?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationcreateCustomerV2Args, 'input'>>;
    createEmptyCart?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, RequireFields<MutationcreateEmptyCartArgs, never>>;
    createKlarnaPaymentsSession?: Resolver<Maybe<ResolversTypes['createKlarnaPaymentsSessionOutput']>, ParentType, ContextType, RequireFields<MutationcreateKlarnaPaymentsSessionArgs, never>>;
    createMollieTransaction?: Resolver<Maybe<ResolversTypes['MollieTransactionOutput']>, ParentType, ContextType, RequireFields<MutationcreateMollieTransactionArgs, never>>;
    createPayflowProToken?: Resolver<Maybe<ResolversTypes['CreatePayflowProTokenOutput']>, ParentType, ContextType, RequireFields<MutationcreatePayflowProTokenArgs, 'input'>>;
    createPaypalExpressToken?: Resolver<Maybe<ResolversTypes['PaypalExpressTokenOutput']>, ParentType, ContextType, RequireFields<MutationcreatePaypalExpressTokenArgs, 'input'>>;
    createProductReview?: Resolver<ResolversTypes['CreateProductReviewOutput'], ParentType, ContextType, RequireFields<MutationcreateProductReviewArgs, 'input'>>;
    deleteCompareList?: Resolver<Maybe<ResolversTypes['DeleteCompareListOutput']>, ParentType, ContextType, RequireFields<MutationdeleteCompareListArgs, 'uid'>>;
    deleteCustomerAddress?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationdeleteCustomerAddressArgs, 'id'>>;
    deletePaymentToken?: Resolver<Maybe<ResolversTypes['DeletePaymentTokenOutput']>, ParentType, ContextType, RequireFields<MutationdeletePaymentTokenArgs, 'public_hash'>>;
    generateCustomerToken?: Resolver<Maybe<ResolversTypes['CustomerToken']>, ParentType, ContextType, RequireFields<MutationgenerateCustomerTokenArgs, 'email' | 'password'>>;
    generateCustomerTokenAsAdmin?: Resolver<Maybe<ResolversTypes['GenerateCustomerTokenAsAdminOutput']>, ParentType, ContextType, RequireFields<MutationgenerateCustomerTokenAsAdminArgs, 'input'>>;
    handlePayflowProResponse?: Resolver<Maybe<ResolversTypes['PayflowProResponseOutput']>, ParentType, ContextType, RequireFields<MutationhandlePayflowProResponseArgs, 'input'>>;
    mergeCarts?: Resolver<ResolversTypes['Cart'], ParentType, ContextType, RequireFields<MutationmergeCartsArgs, 'source_cart_id'>>;
    mollieProcessTransaction?: Resolver<Maybe<ResolversTypes['MollieProcessTransactionOutput']>, ParentType, ContextType, RequireFields<MutationmollieProcessTransactionArgs, never>>;
    mollieRestoreCart?: Resolver<Maybe<ResolversTypes['MollieResetCartOutput']>, ParentType, ContextType, RequireFields<MutationmollieRestoreCartArgs, never>>;
    placeOrder?: Resolver<Maybe<ResolversTypes['PlaceOrderOutput']>, ParentType, ContextType, RequireFields<MutationplaceOrderArgs, never>>;
    removeCouponFromCart?: Resolver<Maybe<ResolversTypes['RemoveCouponFromCartOutput']>, ParentType, ContextType, RequireFields<MutationremoveCouponFromCartArgs, never>>;
    removeItemFromCart?: Resolver<Maybe<ResolversTypes['RemoveItemFromCartOutput']>, ParentType, ContextType, RequireFields<MutationremoveItemFromCartArgs, never>>;
    removeProductsFromCompareList?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType, RequireFields<MutationremoveProductsFromCompareListArgs, never>>;
    removeProductsFromWishlist?: Resolver<Maybe<ResolversTypes['RemoveProductsFromWishlistOutput']>, ParentType, ContextType, RequireFields<MutationremoveProductsFromWishlistArgs, 'wishlistId' | 'wishlistItemsIds'>>;
    reorderItems?: Resolver<Maybe<ResolversTypes['ReorderItemsOutput']>, ParentType, ContextType, RequireFields<MutationreorderItemsArgs, 'orderNumber'>>;
    requestPasswordResetEmail?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationrequestPasswordResetEmailArgs, 'email'>>;
    resetPassword?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationresetPasswordArgs, 'email' | 'resetPasswordToken' | 'newPassword'>>;
    revokeCustomerToken?: Resolver<Maybe<ResolversTypes['RevokeCustomerTokenOutput']>, ParentType, ContextType>;
    sendEmailToFriend?: Resolver<Maybe<ResolversTypes['SendEmailToFriendOutput']>, ParentType, ContextType, RequireFields<MutationsendEmailToFriendArgs, never>>;
    setBillingAddressOnCart?: Resolver<Maybe<ResolversTypes['SetBillingAddressOnCartOutput']>, ParentType, ContextType, RequireFields<MutationsetBillingAddressOnCartArgs, never>>;
    setGuestEmailOnCart?: Resolver<Maybe<ResolversTypes['SetGuestEmailOnCartOutput']>, ParentType, ContextType, RequireFields<MutationsetGuestEmailOnCartArgs, never>>;
    setPaymentMethodAndPlaceOrder?: Resolver<Maybe<ResolversTypes['PlaceOrderOutput']>, ParentType, ContextType, RequireFields<MutationsetPaymentMethodAndPlaceOrderArgs, never>>;
    setPaymentMethodOnCart?: Resolver<Maybe<ResolversTypes['SetPaymentMethodOnCartOutput']>, ParentType, ContextType, RequireFields<MutationsetPaymentMethodOnCartArgs, never>>;
    setShippingAddressesOnCart?: Resolver<Maybe<ResolversTypes['SetShippingAddressesOnCartOutput']>, ParentType, ContextType, RequireFields<MutationsetShippingAddressesOnCartArgs, never>>;
    setShippingMethodsOnCart?: Resolver<Maybe<ResolversTypes['SetShippingMethodsOnCartOutput']>, ParentType, ContextType, RequireFields<MutationsetShippingMethodsOnCartArgs, never>>;
    subscribeEmailToNewsletter?: Resolver<Maybe<ResolversTypes['SubscribeEmailToNewsletterOutput']>, ParentType, ContextType, RequireFields<MutationsubscribeEmailToNewsletterArgs, 'email'>>;
    updateCartItems?: Resolver<Maybe<ResolversTypes['UpdateCartItemsOutput']>, ParentType, ContextType, RequireFields<MutationupdateCartItemsArgs, never>>;
    updateCustomer?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationupdateCustomerArgs, 'input'>>;
    updateCustomerAddress?: Resolver<Maybe<ResolversTypes['CustomerAddress']>, ParentType, ContextType, RequireFields<MutationupdateCustomerAddressArgs, 'id'>>;
    updateCustomerEmail?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationupdateCustomerEmailArgs, 'email' | 'password'>>;
    updateCustomerV2?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationupdateCustomerV2Args, 'input'>>;
    updateProductsInWishlist?: Resolver<Maybe<ResolversTypes['UpdateProductsInWishlistOutput']>, ParentType, ContextType, RequireFields<MutationupdateProductsInWishlistArgs, 'wishlistId' | 'wishlistItems'>>;
}>;
export declare type StoreConfigResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['StoreConfig'] = ResolversParentTypes['StoreConfig']> = ResolversObject<{
    absolute_footer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    allow_guests_to_write_product_reviews?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    allow_items?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    allow_order?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    autocomplete_on_storefront?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    base_currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    base_link_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    base_media_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    base_static_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    base_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    braintree_cc_vault_active?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    catalog_default_sort_by?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    category_fixed_product_tax_display_setting?: Resolver<Maybe<ResolversTypes['FixedProductTaxDisplaySettings']>, ParentType, ContextType>;
    category_url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    cms_home_page?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    cms_no_cookies?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    cms_no_route?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    configurable_thumbnail_source?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    copyright?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_display_currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    demonotice?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    front?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    grid_per_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    grid_per_page_values?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    head_includes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    head_shortcut_icon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    header_logo_src?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    is_default_store?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    is_default_store_group?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    list_mode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    list_per_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    list_per_page_values?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    logo_alt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    logo_height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    logo_width?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    magento_wishlist_general_is_enabled?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    minimum_password_length?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    no_route?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    payment_payflowpro_cc_vault_active?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_fixed_product_tax_display_setting?: Resolver<Maybe<ResolversTypes['FixedProductTaxDisplaySettings']>, ParentType, ContextType>;
    product_reviews_enabled?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    required_character_classes_number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    root_category_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    root_category_uid?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
    sales_fixed_product_tax_display_setting?: Resolver<Maybe<ResolversTypes['FixedProductTaxDisplaySettings']>, ParentType, ContextType>;
    secure_base_link_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    secure_base_media_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    secure_base_static_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    secure_base_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    send_friend?: Resolver<Maybe<ResolversTypes['SendFriendConfiguration']>, ParentType, ContextType>;
    show_cms_breadcrumbs?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    store_code?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
    store_group_code?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
    store_group_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    store_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    store_sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    timezone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    title_prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    title_separator?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    title_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    use_store_in_url?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    website_code?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
    website_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    website_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    weight_unit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    welcome?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SendFriendConfigurationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SendFriendConfiguration'] = ResolversParentTypes['SendFriendConfiguration']> = ResolversObject<{
    enabled_for_customers?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    enabled_for_guests?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CartResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Cart'] = ResolversParentTypes['Cart']> = ResolversObject<{
    applied_coupon?: Resolver<Maybe<ResolversTypes['AppliedCoupon']>, ParentType, ContextType>;
    applied_coupons?: Resolver<Maybe<Array<Maybe<ResolversTypes['AppliedCoupon']>>>, ParentType, ContextType>;
    available_payment_methods?: Resolver<Maybe<Array<Maybe<ResolversTypes['AvailablePaymentMethod']>>>, ParentType, ContextType>;
    billing_address?: Resolver<Maybe<ResolversTypes['BillingCartAddress']>, ParentType, ContextType>;
    email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    is_virtual?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemInterface']>>>, ParentType, ContextType>;
    mollie_available_issuers?: Resolver<Maybe<Array<Maybe<ResolversTypes['MollieIssuer']>>>, ParentType, ContextType>;
    prices?: Resolver<Maybe<ResolversTypes['CartPrices']>, ParentType, ContextType>;
    selected_payment_method?: Resolver<Maybe<ResolversTypes['SelectedPaymentMethod']>, ParentType, ContextType>;
    shipping_addresses?: Resolver<Array<Maybe<ResolversTypes['ShippingCartAddress']>>, ParentType, ContextType>;
    total_quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AppliedCouponResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AppliedCoupon'] = ResolversParentTypes['AppliedCoupon']> = ResolversObject<{
    code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AvailablePaymentMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AvailablePaymentMethod'] = ResolversParentTypes['AvailablePaymentMethod']> = ResolversObject<{
    code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    mollie_available_issuers?: Resolver<Maybe<Array<Maybe<ResolversTypes['MollieIssuer']>>>, ParentType, ContextType>;
    mollie_meta?: Resolver<ResolversTypes['MolliePaymentMethodMeta'], ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MollieIssuerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MollieIssuer'] = ResolversParentTypes['MollieIssuer']> = ResolversObject<{
    code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    image?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    svg?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MolliePaymentMethodMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MolliePaymentMethodMeta'] = ResolversParentTypes['MolliePaymentMethodMeta']> = ResolversObject<{
    image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type BillingCartAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BillingCartAddress'] = ResolversParentTypes['BillingCartAddress']> = ResolversObject<{
    city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    country?: Resolver<ResolversTypes['CartAddressCountry'], ParentType, ContextType>;
    customer_notes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    firstname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    lastname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    region?: Resolver<Maybe<ResolversTypes['CartAddressRegion']>, ParentType, ContextType>;
    street?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
    telephone?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CartAddressInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartAddressInterface'] = ResolversParentTypes['CartAddressInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'BillingCartAddress' | 'ShippingCartAddress', ParentType, ContextType>;
    city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    country?: Resolver<ResolversTypes['CartAddressCountry'], ParentType, ContextType>;
    firstname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    lastname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    region?: Resolver<Maybe<ResolversTypes['CartAddressRegion']>, ParentType, ContextType>;
    street?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
    telephone?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
}>;
export declare type CartAddressCountryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartAddressCountry'] = ResolversParentTypes['CartAddressCountry']> = ResolversObject<{
    code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CartAddressRegionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartAddressRegion'] = ResolversParentTypes['CartAddressRegion']> = ResolversObject<{
    code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    region_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type GiftMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GiftMessage'] = ResolversParentTypes['GiftMessage']> = ResolversObject<{
    from?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    to?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CartItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartItemInterface'] = ResolversParentTypes['CartItemInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'SimpleCartItem' | 'VirtualCartItem' | 'DownloadableCartItem' | 'BundleCartItem' | 'ConfigurableCartItem', ParentType, ContextType>;
    id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
    product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
}>;
export declare type CartItemPricesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartItemPrices'] = ResolversParentTypes['CartItemPrices']> = ResolversObject<{
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    row_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    row_total_including_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    total_item_discount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type DiscountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Discount'] = ResolversParentTypes['Discount']> = ResolversObject<{
    amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MoneyResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Money'] = ResolversParentTypes['Money']> = ResolversObject<{
    currency?: Resolver<Maybe<ResolversTypes['CurrencyEnum']>, ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductInterface'] = ResolversParentTypes['ProductInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'VirtualProduct' | 'SimpleProduct' | 'DownloadableProduct' | 'BundleProduct' | 'GroupedProduct' | 'ConfigurableProduct', ParentType, ContextType>;
    activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
    category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
    media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
    meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
    price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
    price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
    print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
    rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<ProductInterfacereviewsArgs, 'pageSize' | 'currentPage'>>;
    sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
    strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
    type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
    url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
}>;
export declare type CategoryInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CategoryInterface'] = ResolversParentTypes['CategoryInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'CategoryTree', ParentType, ContextType>;
    available_sort_by?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
    breadcrumbs?: Resolver<Maybe<Array<Maybe<ResolversTypes['Breadcrumb']>>>, ParentType, ContextType>;
    canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    children_count?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    cms_block?: Resolver<Maybe<ResolversTypes['CmsBlock']>, ParentType, ContextType>;
    created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    custom_layout_update_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_sort_by?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    display_mode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    filter_price_range?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    include_in_menu?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    is_anchor?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    landing_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    level?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    path_in_store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    product_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    products?: Resolver<Maybe<ResolversTypes['CategoryProducts']>, ParentType, ContextType, RequireFields<CategoryInterfaceproductsArgs, 'pageSize' | 'currentPage'>>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;
export declare type BreadcrumbResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Breadcrumb'] = ResolversParentTypes['Breadcrumb']> = ResolversObject<{
    category_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    category_level?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    category_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    category_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    category_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    category_url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CmsBlockResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CmsBlock'] = ResolversParentTypes['CmsBlock']> = ResolversObject<{
    content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    identifier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CategoryProductsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CategoryProducts'] = ResolversParentTypes['CategoryProducts']> = ResolversObject<{
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
    total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SearchResultPageInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SearchResultPageInfo'] = ResolversParentTypes['SearchResultPageInfo']> = ResolversObject<{
    current_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    page_size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    total_pages?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ComplexTextValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ComplexTextValue'] = ResolversParentTypes['ComplexTextValue']> = ResolversObject<{
    html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductImageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductImage'] = ResolversParentTypes['ProductImage']> = ResolversObject<{
    disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MediaGalleryInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MediaGalleryInterface'] = ResolversParentTypes['MediaGalleryInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'ProductImage' | 'ProductVideo', ParentType, ContextType>;
    disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;
export declare type MediaGalleryEntryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MediaGalleryEntry'] = ResolversParentTypes['MediaGalleryEntry']> = ResolversObject<{
    content?: Resolver<Maybe<ResolversTypes['ProductMediaGalleryEntriesContent']>, ParentType, ContextType>;
    disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    media_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    types?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    video_content?: Resolver<Maybe<ResolversTypes['ProductMediaGalleryEntriesVideoContent']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductMediaGalleryEntriesContentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductMediaGalleryEntriesContent'] = ResolversParentTypes['ProductMediaGalleryEntriesContent']> = ResolversObject<{
    base64_encoded_data?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductMediaGalleryEntriesVideoContentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductMediaGalleryEntriesVideoContent'] = ResolversParentTypes['ProductMediaGalleryEntriesVideoContent']> = ResolversObject<{
    media_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    video_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    video_metadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    video_provider?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    video_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    video_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductPricesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductPrices'] = ResolversParentTypes['ProductPrices']> = ResolversObject<{
    maximalPrice?: Resolver<Maybe<ResolversTypes['Price']>, ParentType, ContextType>;
    minimalPrice?: Resolver<Maybe<ResolversTypes['Price']>, ParentType, ContextType>;
    regularPrice?: Resolver<Maybe<ResolversTypes['Price']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PriceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Price'] = ResolversParentTypes['Price']> = ResolversObject<{
    adjustments?: Resolver<Maybe<Array<Maybe<ResolversTypes['PriceAdjustment']>>>, ParentType, ContextType>;
    amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PriceAdjustmentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PriceAdjustment'] = ResolversParentTypes['PriceAdjustment']> = ResolversObject<{
    amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    code?: Resolver<Maybe<ResolversTypes['PriceAdjustmentCodesEnum']>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['PriceAdjustmentDescriptionEnum']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PriceRangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PriceRange'] = ResolversParentTypes['PriceRange']> = ResolversObject<{
    maximum_price?: Resolver<Maybe<ResolversTypes['ProductPrice']>, ParentType, ContextType>;
    minimum_price?: Resolver<ResolversTypes['ProductPrice'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductPriceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductPrice'] = ResolversParentTypes['ProductPrice']> = ResolversObject<{
    discount?: Resolver<Maybe<ResolversTypes['ProductDiscount']>, ParentType, ContextType>;
    final_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    fixed_product_taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['FixedProductTax']>>>, ParentType, ContextType>;
    regular_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductDiscountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductDiscount'] = ResolversParentTypes['ProductDiscount']> = ResolversObject<{
    amount_off?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    percent_off?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type FixedProductTaxResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FixedProductTax'] = ResolversParentTypes['FixedProductTax']> = ResolversObject<{
    amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type TierPriceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TierPrice'] = ResolversParentTypes['TierPrice']> = ResolversObject<{
    discount?: Resolver<Maybe<ResolversTypes['ProductDiscount']>, ParentType, ContextType>;
    final_price?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    quantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductLinksInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductLinksInterface'] = ResolversParentTypes['ProductLinksInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'ProductLinks', ParentType, ContextType>;
    link_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    linked_product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    linked_product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;
export declare type ProductReviewsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductReviews'] = ResolversParentTypes['ProductReviews']> = ResolversObject<{
    items?: Resolver<Array<Maybe<ResolversTypes['ProductReview']>>, ParentType, ContextType>;
    page_info?: Resolver<ResolversTypes['SearchResultPageInfo'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductReviewResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductReview'] = ResolversParentTypes['ProductReview']> = ResolversObject<{
    average_rating?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    created_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    nickname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
    ratings_breakdown?: Resolver<Array<Maybe<ResolversTypes['ProductReviewRating']>>, ParentType, ContextType>;
    summary?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductReviewRatingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductReviewRating'] = ResolversParentTypes['ProductReviewRating']> = ResolversObject<{
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductTierPricesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductTierPrices'] = ResolversParentTypes['ProductTierPrices']> = ResolversObject<{
    customer_group_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    percentage_value?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    website_id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type UrlRewriteResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UrlRewrite'] = ResolversParentTypes['UrlRewrite']> = ResolversObject<{
    parameters?: Resolver<Maybe<Array<Maybe<ResolversTypes['HttpQueryParameter']>>>, ParentType, ContextType>;
    url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type HttpQueryParameterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['HttpQueryParameter'] = ResolversParentTypes['HttpQueryParameter']> = ResolversObject<{
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type WebsiteResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Website'] = ResolversParentTypes['Website']> = ResolversObject<{
    code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_group_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    is_default?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CartPricesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartPrices'] = ResolversParentTypes['CartPrices']> = ResolversObject<{
    applied_taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartTaxItem']>>>, ParentType, ContextType>;
    discount?: Resolver<Maybe<ResolversTypes['CartDiscount']>, ParentType, ContextType>;
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    grand_total?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    subtotal_excluding_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    subtotal_including_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    subtotal_with_discount_excluding_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CartTaxItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartTaxItem'] = ResolversParentTypes['CartTaxItem']> = ResolversObject<{
    amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CartDiscountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartDiscount'] = ResolversParentTypes['CartDiscount']> = ResolversObject<{
    amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    label?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SelectedPaymentMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedPaymentMethod'] = ResolversParentTypes['SelectedPaymentMethod']> = ResolversObject<{
    code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    mollie_meta?: Resolver<ResolversTypes['MolliePaymentMethodMeta'], ParentType, ContextType>;
    purchase_order_number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ShippingCartAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShippingCartAddress'] = ResolversParentTypes['ShippingCartAddress']> = ResolversObject<{
    available_shipping_methods?: Resolver<Maybe<Array<Maybe<ResolversTypes['AvailableShippingMethod']>>>, ParentType, ContextType>;
    cart_items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemQuantity']>>>, ParentType, ContextType>;
    cart_items_v2?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemInterface']>>>, ParentType, ContextType>;
    city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    country?: Resolver<ResolversTypes['CartAddressCountry'], ParentType, ContextType>;
    customer_notes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    firstname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    items_weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    lastname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    pickup_location_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    region?: Resolver<Maybe<ResolversTypes['CartAddressRegion']>, ParentType, ContextType>;
    selected_shipping_method?: Resolver<Maybe<ResolversTypes['SelectedShippingMethod']>, ParentType, ContextType>;
    street?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
    telephone?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AvailableShippingMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AvailableShippingMethod'] = ResolversParentTypes['AvailableShippingMethod']> = ResolversObject<{
    amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    available?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    base_amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    carrier_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    carrier_title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    error_message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    method_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    method_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    price_excl_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    price_incl_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CartItemQuantityResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartItemQuantity'] = ResolversParentTypes['CartItemQuantity']> = ResolversObject<{
    cart_item_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SelectedShippingMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedShippingMethod'] = ResolversParentTypes['SelectedShippingMethod']> = ResolversObject<{
    amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    base_amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    carrier_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    carrier_title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    method_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    method_title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CategoryResultResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CategoryResult'] = ResolversParentTypes['CategoryResult']> = ResolversObject<{
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryTree']>>>, ParentType, ContextType>;
    page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
    total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CategoryTreeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CategoryTree'] = ResolversParentTypes['CategoryTree']> = ResolversObject<{
    available_sort_by?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
    breadcrumbs?: Resolver<Maybe<Array<Maybe<ResolversTypes['Breadcrumb']>>>, ParentType, ContextType>;
    canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    children?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryTree']>>>, ParentType, ContextType>;
    children_count?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    cms_block?: Resolver<Maybe<ResolversTypes['CmsBlock']>, ParentType, ContextType>;
    created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    custom_layout_update_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_sort_by?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    display_mode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    filter_price_range?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    include_in_menu?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    is_anchor?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    landing_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    level?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    path_in_store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    product_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    products?: Resolver<Maybe<ResolversTypes['CategoryProducts']>, ParentType, ContextType, RequireFields<CategoryTreeproductsArgs, 'pageSize' | 'currentPage'>>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CheckoutAgreementResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CheckoutAgreement'] = ResolversParentTypes['CheckoutAgreement']> = ResolversObject<{
    agreement_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    checkbox_text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    content?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    content_height?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    is_html?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    mode?: Resolver<ResolversTypes['CheckoutAgreementMode'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CmsBlocksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CmsBlocks'] = ResolversParentTypes['CmsBlocks']> = ResolversObject<{
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CmsBlock']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CmsPageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CmsPage'] = ResolversParentTypes['CmsPage']> = ResolversObject<{
    content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    content_heading?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    identifier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    page_layout?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CompareListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CompareList'] = ResolversParentTypes['CompareList']> = ResolversObject<{
    attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['ComparableAttribute']>>>, ParentType, ContextType>;
    item_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ComparableItem']>>>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ComparableAttributeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ComparableAttribute'] = ResolversParentTypes['ComparableAttribute']> = ResolversObject<{
    code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ComparableItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ComparableItem'] = ResolversParentTypes['ComparableItem']> = ResolversObject<{
    attributes?: Resolver<Array<Maybe<ResolversTypes['ProductAttribute']>>, ParentType, ContextType>;
    product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductAttributeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductAttribute'] = ResolversParentTypes['ProductAttribute']> = ResolversObject<{
    code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CountryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Country'] = ResolversParentTypes['Country']> = ResolversObject<{
    available_regions?: Resolver<Maybe<Array<Maybe<ResolversTypes['Region']>>>, ParentType, ContextType>;
    full_name_english?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    full_name_locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    three_letter_abbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    two_letter_abbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RegionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Region'] = ResolversParentTypes['Region']> = ResolversObject<{
    code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CurrencyResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Currency'] = ResolversParentTypes['Currency']> = ResolversObject<{
    available_currency_codes?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
    base_currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    base_currency_symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_display_currecy_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_display_currecy_symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_display_currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_display_currency_symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    exchange_rates?: Resolver<Maybe<Array<Maybe<ResolversTypes['ExchangeRate']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ExchangeRateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ExchangeRate'] = ResolversParentTypes['ExchangeRate']> = ResolversObject<{
    currency_to?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    rate?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomAttributeMetadataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomAttributeMetadata'] = ResolversParentTypes['CustomAttributeMetadata']> = ResolversObject<{
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Attribute']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AttributeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Attribute'] = ResolversParentTypes['Attribute']> = ResolversObject<{
    attribute_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    attribute_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['AttributeOption']>>>, ParentType, ContextType>;
    attribute_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    entity_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    input_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AttributeOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AttributeOption'] = ResolversParentTypes['AttributeOption']> = ResolversObject<{
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Customer'] = ResolversParentTypes['Customer']> = ResolversObject<{
    addresses?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomerAddress']>>>, ParentType, ContextType>;
    allow_remote_shopping_assistance?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    compare_list?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType>;
    created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    date_of_birth?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_billing?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    default_shipping?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    dob?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    firstname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    gender?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    group_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    is_subscribed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    lastname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    middlename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    orders?: Resolver<Maybe<ResolversTypes['CustomerOrders']>, ParentType, ContextType, RequireFields<CustomerordersArgs, 'currentPage' | 'pageSize'>>;
    prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<CustomerreviewsArgs, 'pageSize' | 'currentPage'>>;
    suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    taxvat?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
    wishlist_v2?: Resolver<Maybe<ResolversTypes['Wishlist']>, ParentType, ContextType, RequireFields<Customerwishlist_v2Args, 'id'>>;
    wishlists?: Resolver<Array<Maybe<ResolversTypes['Wishlist']>>, ParentType, ContextType, RequireFields<CustomerwishlistsArgs, 'pageSize' | 'currentPage'>>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomerAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerAddress'] = ResolversParentTypes['CustomerAddress']> = ResolversObject<{
    city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    country_code?: Resolver<Maybe<ResolversTypes['CountryCodeEnum']>, ParentType, ContextType>;
    country_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    custom_attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomerAddressAttribute']>>>, ParentType, ContextType>;
    customer_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    default_billing?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    default_shipping?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    extension_attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomerAddressAttribute']>>>, ParentType, ContextType>;
    fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    firstname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    lastname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    middlename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    region?: Resolver<Maybe<ResolversTypes['CustomerAddressRegion']>, ParentType, ContextType>;
    region_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    street?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
    suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    telephone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    vat_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomerAddressAttributeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerAddressAttribute'] = ResolversParentTypes['CustomerAddressAttribute']> = ResolversObject<{
    attribute_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomerAddressRegionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerAddressRegion'] = ResolversParentTypes['CustomerAddressRegion']> = ResolversObject<{
    region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    region_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    region_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomerOrdersResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerOrders'] = ResolversParentTypes['CustomerOrders']> = ResolversObject<{
    items?: Resolver<Array<Maybe<ResolversTypes['CustomerOrder']>>, ParentType, ContextType>;
    page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
    total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomerOrderResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerOrder'] = ResolversParentTypes['CustomerOrder']> = ResolversObject<{
    billing_address?: Resolver<Maybe<ResolversTypes['OrderAddress']>, ParentType, ContextType>;
    carrier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['SalesCommentItem']>>>, ParentType, ContextType>;
    created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    credit_memos?: Resolver<Maybe<Array<Maybe<ResolversTypes['CreditMemo']>>>, ParentType, ContextType>;
    gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
    grand_total?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    increment_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    invoices?: Resolver<Array<Maybe<ResolversTypes['Invoice']>>, ParentType, ContextType>;
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemInterface']>>>, ParentType, ContextType>;
    number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    order_date?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    order_number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    payment_methods?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderPaymentMethod']>>>, ParentType, ContextType>;
    shipments?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderShipment']>>>, ParentType, ContextType>;
    shipping_address?: Resolver<Maybe<ResolversTypes['OrderAddress']>, ParentType, ContextType>;
    shipping_method?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    total?: Resolver<Maybe<ResolversTypes['OrderTotal']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type OrderAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderAddress'] = ResolversParentTypes['OrderAddress']> = ResolversObject<{
    city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    country_code?: Resolver<Maybe<ResolversTypes['CountryCodeEnum']>, ParentType, ContextType>;
    fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    firstname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    lastname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    middlename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    region_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
    street?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
    suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    telephone?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    vat_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SalesCommentItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SalesCommentItem'] = ResolversParentTypes['SalesCommentItem']> = ResolversObject<{
    message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    timestamp?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CreditMemoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditMemo'] = ResolversParentTypes['CreditMemo']> = ResolversObject<{
    comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['SalesCommentItem']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CreditMemoItemInterface']>>>, ParentType, ContextType>;
    number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    total?: Resolver<Maybe<ResolversTypes['CreditMemoTotal']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CreditMemoItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditMemoItemInterface'] = ResolversParentTypes['CreditMemoItemInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'DownloadableCreditMemoItem' | 'BundleCreditMemoItem' | 'CreditMemoItem', ParentType, ContextType>;
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
}>;
export declare type OrderItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderItemInterface'] = ResolversParentTypes['OrderItemInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'DownloadableOrderItem' | 'BundleOrderItem' | 'OrderItem', ParentType, ContextType>;
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    entered_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    quantity_canceled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_ordered?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_returned?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_shipped?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    selected_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
    status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;
export declare type OrderItemOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderItemOption'] = ResolversParentTypes['OrderItemOption']> = ResolversObject<{
    label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CreditMemoTotalResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditMemoTotal'] = ResolversParentTypes['CreditMemoTotal']> = ResolversObject<{
    adjustment?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    base_grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    shipping_handling?: Resolver<Maybe<ResolversTypes['ShippingHandling']>, ParentType, ContextType>;
    subtotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxItem']>>>, ParentType, ContextType>;
    total_shipping?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    total_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ShippingHandlingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShippingHandling'] = ResolversParentTypes['ShippingHandling']> = ResolversObject<{
    amount_excluding_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    amount_including_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['ShippingDiscount']>>>, ParentType, ContextType>;
    taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxItem']>>>, ParentType, ContextType>;
    total_amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ShippingDiscountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShippingDiscount'] = ResolversParentTypes['ShippingDiscount']> = ResolversObject<{
    amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type TaxItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TaxItem'] = ResolversParentTypes['TaxItem']> = ResolversObject<{
    amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    rate?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type InvoiceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Invoice'] = ResolversParentTypes['Invoice']> = ResolversObject<{
    comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['SalesCommentItem']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['InvoiceItemInterface']>>>, ParentType, ContextType>;
    number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    total?: Resolver<Maybe<ResolversTypes['InvoiceTotal']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type InvoiceItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceItemInterface'] = ResolversParentTypes['InvoiceItemInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'DownloadableInvoiceItem' | 'BundleInvoiceItem' | 'InvoiceItem', ParentType, ContextType>;
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
}>;
export declare type InvoiceTotalResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceTotal'] = ResolversParentTypes['InvoiceTotal']> = ResolversObject<{
    base_grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    shipping_handling?: Resolver<Maybe<ResolversTypes['ShippingHandling']>, ParentType, ContextType>;
    subtotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxItem']>>>, ParentType, ContextType>;
    total_shipping?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    total_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type OrderPaymentMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderPaymentMethod'] = ResolversParentTypes['OrderPaymentMethod']> = ResolversObject<{
    additional_data?: Resolver<Maybe<Array<Maybe<ResolversTypes['KeyValue']>>>, ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type KeyValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['KeyValue'] = ResolversParentTypes['KeyValue']> = ResolversObject<{
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type OrderShipmentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderShipment'] = ResolversParentTypes['OrderShipment']> = ResolversObject<{
    comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['SalesCommentItem']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ShipmentItemInterface']>>>, ParentType, ContextType>;
    number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    tracking?: Resolver<Maybe<Array<Maybe<ResolversTypes['ShipmentTracking']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ShipmentItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShipmentItemInterface'] = ResolversParentTypes['ShipmentItemInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'BundleShipmentItem' | 'ShipmentItem', ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quantity_shipped?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
}>;
export declare type ShipmentTrackingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShipmentTracking'] = ResolversParentTypes['ShipmentTracking']> = ResolversObject<{
    carrier?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type OrderTotalResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderTotal'] = ResolversParentTypes['OrderTotal']> = ResolversObject<{
    base_grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    shipping_handling?: Resolver<Maybe<ResolversTypes['ShippingHandling']>, ParentType, ContextType>;
    subtotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxItem']>>>, ParentType, ContextType>;
    total_shipping?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    total_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type WishlistResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Wishlist'] = ResolversParentTypes['Wishlist']> = ResolversObject<{
    id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['WishlistItem']>>>, ParentType, ContextType>;
    items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    items_v2?: Resolver<Maybe<ResolversTypes['WishlistItems']>, ParentType, ContextType, RequireFields<Wishlistitems_v2Args, 'currentPage' | 'pageSize'>>;
    sharing_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type WishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WishlistItem'] = ResolversParentTypes['WishlistItem']> = ResolversObject<{
    added_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
    qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type WishlistItemsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WishlistItems'] = ResolversParentTypes['WishlistItems']> = ResolversObject<{
    items?: Resolver<Array<Maybe<ResolversTypes['WishlistItemInterface']>>, ParentType, ContextType>;
    page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type WishlistItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WishlistItemInterface'] = ResolversParentTypes['WishlistItemInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'SimpleWishlistItem' | 'VirtualWishlistItem' | 'DownloadableWishlistItem' | 'BundleWishlistItem' | 'GroupedProductWishlistItem' | 'ConfigurableWishlistItem', ParentType, ContextType>;
    added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
}>;
export declare type SelectedCustomizableOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedCustomizableOption'] = ResolversParentTypes['SelectedCustomizableOption']> = ResolversObject<{
    customizable_option_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    is_required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    sort_order?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    values?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOptionValue']>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SelectedCustomizableOptionValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedCustomizableOptionValue'] = ResolversParentTypes['SelectedCustomizableOptionValue']> = ResolversObject<{
    customizable_option_value_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    price?: Resolver<ResolversTypes['CartItemSelectedOptionValuePrice'], ParentType, ContextType>;
    value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CartItemSelectedOptionValuePriceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartItemSelectedOptionValuePrice'] = ResolversParentTypes['CartItemSelectedOptionValuePrice']> = ResolversObject<{
    type?: Resolver<ResolversTypes['PriceTypeEnum'], ParentType, ContextType>;
    units?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    value?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomerDownloadableProductsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerDownloadableProducts'] = ResolversParentTypes['CustomerDownloadableProducts']> = ResolversObject<{
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomerDownloadableProduct']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomerDownloadableProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerDownloadableProduct'] = ResolversParentTypes['CustomerDownloadableProduct']> = ResolversObject<{
    date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    download_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    order_increment_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    remaining_downloads?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomerPaymentTokensResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerPaymentTokens'] = ResolversParentTypes['CustomerPaymentTokens']> = ResolversObject<{
    items?: Resolver<Array<Maybe<ResolversTypes['PaymentToken']>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PaymentTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentToken'] = ResolversParentTypes['PaymentToken']> = ResolversObject<{
    details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    payment_method_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    public_hash?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    type?: Resolver<ResolversTypes['PaymentTokenTypeEnum'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type HostedProUrlResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['HostedProUrl'] = ResolversParentTypes['HostedProUrl']> = ResolversObject<{
    secure_form_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PayflowLinkTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PayflowLinkToken'] = ResolversParentTypes['PayflowLinkToken']> = ResolversObject<{
    mode?: Resolver<Maybe<ResolversTypes['PayflowLinkMode']>, ParentType, ContextType>;
    paypal_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    secure_token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    secure_token_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type IsEmailAvailableOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IsEmailAvailableOutput'] = ResolversParentTypes['IsEmailAvailableOutput']> = ResolversObject<{
    is_email_available?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MolliePaymentMethodsOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MolliePaymentMethodsOutput'] = ResolversParentTypes['MolliePaymentMethodsOutput']> = ResolversObject<{
    methods?: Resolver<Maybe<Array<Maybe<ResolversTypes['MolliePaymentMethod']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MolliePaymentMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MolliePaymentMethod'] = ResolversParentTypes['MolliePaymentMethod']> = ResolversObject<{
    code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PickupLocationsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PickupLocations'] = ResolversParentTypes['PickupLocations']> = ResolversObject<{
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['PickupLocation']>>>, ParentType, ContextType>;
    page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
    total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PickupLocationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PickupLocation'] = ResolversParentTypes['PickupLocation']> = ResolversObject<{
    city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    contact_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    country_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    latitude?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    longitude?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    pickup_location_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    region_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    street?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductReviewRatingsMetadataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductReviewRatingsMetadata'] = ResolversParentTypes['ProductReviewRatingsMetadata']> = ResolversObject<{
    items?: Resolver<Array<Maybe<ResolversTypes['ProductReviewRatingMetadata']>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductReviewRatingMetadataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductReviewRatingMetadata'] = ResolversParentTypes['ProductReviewRatingMetadata']> = ResolversObject<{
    id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    values?: Resolver<Array<Maybe<ResolversTypes['ProductReviewRatingValueMetadata']>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductReviewRatingValueMetadataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductReviewRatingValueMetadata'] = ResolversParentTypes['ProductReviewRatingValueMetadata']> = ResolversObject<{
    value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    value_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Products'] = ResolversParentTypes['Products']> = ResolversObject<{
    aggregations?: Resolver<Maybe<Array<Maybe<ResolversTypes['Aggregation']>>>, ParentType, ContextType>;
    filters?: Resolver<Maybe<Array<Maybe<ResolversTypes['LayerFilter']>>>, ParentType, ContextType>;
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
    sort_fields?: Resolver<Maybe<ResolversTypes['SortFields']>, ParentType, ContextType>;
    total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AggregationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Aggregation'] = ResolversParentTypes['Aggregation']> = ResolversObject<{
    attribute_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    options?: Resolver<Maybe<Array<Maybe<ResolversTypes['AggregationOption']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AggregationOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AggregationOption'] = ResolversParentTypes['AggregationOption']> = ResolversObject<{
    count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AggregationOptionInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AggregationOptionInterface'] = ResolversParentTypes['AggregationOptionInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'AggregationOption', ParentType, ContextType>;
    count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
}>;
export declare type LayerFilterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LayerFilter'] = ResolversParentTypes['LayerFilter']> = ResolversObject<{
    filter_items?: Resolver<Maybe<Array<Maybe<ResolversTypes['LayerFilterItemInterface']>>>, ParentType, ContextType>;
    filter_items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    request_var?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type LayerFilterItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LayerFilterItemInterface'] = ResolversParentTypes['LayerFilterItemInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'LayerFilterItem' | 'SwatchLayerFilterItem', ParentType, ContextType>;
    items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    value_string?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;
export declare type SortFieldsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SortFields'] = ResolversParentTypes['SortFields']> = ResolversObject<{
    default?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    options?: Resolver<Maybe<Array<Maybe<ResolversTypes['SortField']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SortFieldResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SortField'] = ResolversParentTypes['SortField']> = ResolversObject<{
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type EntityUrlResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['EntityUrl'] = ResolversParentTypes['EntityUrl']> = ResolversObject<{
    canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    entity_uid?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    redirectCode?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type WishlistOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WishlistOutput'] = ResolversParentTypes['WishlistOutput']> = ResolversObject<{
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['WishlistItem']>>>, ParentType, ContextType>;
    items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sharing_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AddBundleProductsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddBundleProductsToCartOutput'] = ResolversParentTypes['AddBundleProductsToCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AddConfigurableProductsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddConfigurableProductsToCartOutput'] = ResolversParentTypes['AddConfigurableProductsToCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AddDownloadableProductsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddDownloadableProductsToCartOutput'] = ResolversParentTypes['AddDownloadableProductsToCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AddProductsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddProductsToCartOutput'] = ResolversParentTypes['AddProductsToCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    user_errors?: Resolver<Array<Maybe<ResolversTypes['CartUserInputError']>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CartUserInputErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartUserInputError'] = ResolversParentTypes['CartUserInputError']> = ResolversObject<{
    code?: Resolver<ResolversTypes['CartUserInputErrorType'], ParentType, ContextType>;
    message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AddProductsToWishlistOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddProductsToWishlistOutput'] = ResolversParentTypes['AddProductsToWishlistOutput']> = ResolversObject<{
    user_errors?: Resolver<Array<Maybe<ResolversTypes['WishListUserInputError']>>, ParentType, ContextType>;
    wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type WishListUserInputErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WishListUserInputError'] = ResolversParentTypes['WishListUserInputError']> = ResolversObject<{
    code?: Resolver<ResolversTypes['WishListUserInputErrorType'], ParentType, ContextType>;
    message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AddSimpleProductsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddSimpleProductsToCartOutput'] = ResolversParentTypes['AddSimpleProductsToCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AddVirtualProductsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddVirtualProductsToCartOutput'] = ResolversParentTypes['AddVirtualProductsToCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ApplyCouponToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ApplyCouponToCartOutput'] = ResolversParentTypes['ApplyCouponToCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AssignCompareListToCustomerOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AssignCompareListToCustomerOutput'] = ResolversParentTypes['AssignCompareListToCustomerOutput']> = ResolversObject<{
    compare_list?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType>;
    result?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomerOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerOutput'] = ResolversParentTypes['CustomerOutput']> = ResolversObject<{
    customer?: Resolver<ResolversTypes['Customer'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type createKlarnaPaymentsSessionOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['createKlarnaPaymentsSessionOutput'] = ResolversParentTypes['createKlarnaPaymentsSessionOutput']> = ResolversObject<{
    client_token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    payment_method_categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['Categories']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CategoriesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Categories'] = ResolversParentTypes['Categories']> = ResolversObject<{
    asset_urls?: Resolver<Maybe<Array<Maybe<ResolversTypes['Assets']>>>, ParentType, ContextType>;
    identifier?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type AssetsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Assets'] = ResolversParentTypes['Assets']> = ResolversObject<{
    descriptive?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    standard?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MollieTransactionOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MollieTransactionOutput'] = ResolversParentTypes['MollieTransactionOutput']> = ResolversObject<{
    checkout_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CreatePayflowProTokenOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreatePayflowProTokenOutput'] = ResolversParentTypes['CreatePayflowProTokenOutput']> = ResolversObject<{
    response_message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    result?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    result_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    secure_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    secure_token_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PaypalExpressTokenOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaypalExpressTokenOutput'] = ResolversParentTypes['PaypalExpressTokenOutput']> = ResolversObject<{
    paypal_urls?: Resolver<Maybe<ResolversTypes['PaypalExpressUrlList']>, ParentType, ContextType>;
    token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PaypalExpressUrlListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaypalExpressUrlList'] = ResolversParentTypes['PaypalExpressUrlList']> = ResolversObject<{
    edit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    start?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CreateProductReviewOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreateProductReviewOutput'] = ResolversParentTypes['CreateProductReviewOutput']> = ResolversObject<{
    review?: Resolver<ResolversTypes['ProductReview'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type DeleteCompareListOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeleteCompareListOutput'] = ResolversParentTypes['DeleteCompareListOutput']> = ResolversObject<{
    result?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type DeletePaymentTokenOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletePaymentTokenOutput'] = ResolversParentTypes['DeletePaymentTokenOutput']> = ResolversObject<{
    customerPaymentTokens?: Resolver<Maybe<ResolversTypes['CustomerPaymentTokens']>, ParentType, ContextType>;
    result?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomerTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerToken'] = ResolversParentTypes['CustomerToken']> = ResolversObject<{
    token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type GenerateCustomerTokenAsAdminOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GenerateCustomerTokenAsAdminOutput'] = ResolversParentTypes['GenerateCustomerTokenAsAdminOutput']> = ResolversObject<{
    customer_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PayflowProResponseOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PayflowProResponseOutput'] = ResolversParentTypes['PayflowProResponseOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MollieProcessTransactionOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MollieProcessTransactionOutput'] = ResolversParentTypes['MollieProcessTransactionOutput']> = ResolversObject<{
    cart?: Resolver<Maybe<ResolversTypes['Cart']>, ParentType, ContextType>;
    paymentStatus?: Resolver<Maybe<ResolversTypes['PaymentStatusEnum']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type MollieResetCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MollieResetCartOutput'] = ResolversParentTypes['MollieResetCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PlaceOrderOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PlaceOrderOutput'] = ResolversParentTypes['PlaceOrderOutput']> = ResolversObject<{
    order?: Resolver<ResolversTypes['Order'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type OrderResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Order'] = ResolversParentTypes['Order']> = ResolversObject<{
    mollie_payment_token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    mollie_redirect_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    order_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    order_number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RemoveCouponFromCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RemoveCouponFromCartOutput'] = ResolversParentTypes['RemoveCouponFromCartOutput']> = ResolversObject<{
    cart?: Resolver<Maybe<ResolversTypes['Cart']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RemoveItemFromCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RemoveItemFromCartOutput'] = ResolversParentTypes['RemoveItemFromCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RemoveProductsFromWishlistOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RemoveProductsFromWishlistOutput'] = ResolversParentTypes['RemoveProductsFromWishlistOutput']> = ResolversObject<{
    user_errors?: Resolver<Array<Maybe<ResolversTypes['WishListUserInputError']>>, ParentType, ContextType>;
    wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ReorderItemsOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ReorderItemsOutput'] = ResolversParentTypes['ReorderItemsOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    userInputErrors?: Resolver<Array<Maybe<ResolversTypes['CheckoutUserInputError']>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CheckoutUserInputErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CheckoutUserInputError'] = ResolversParentTypes['CheckoutUserInputError']> = ResolversObject<{
    code?: Resolver<ResolversTypes['CheckoutUserInputErrorCodes'], ParentType, ContextType>;
    message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    path?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type RevokeCustomerTokenOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RevokeCustomerTokenOutput'] = ResolversParentTypes['RevokeCustomerTokenOutput']> = ResolversObject<{
    result?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SendEmailToFriendOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SendEmailToFriendOutput'] = ResolversParentTypes['SendEmailToFriendOutput']> = ResolversObject<{
    recipients?: Resolver<Maybe<Array<Maybe<ResolversTypes['SendEmailToFriendRecipient']>>>, ParentType, ContextType>;
    sender?: Resolver<Maybe<ResolversTypes['SendEmailToFriendSender']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SendEmailToFriendRecipientResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SendEmailToFriendRecipient'] = ResolversParentTypes['SendEmailToFriendRecipient']> = ResolversObject<{
    email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SendEmailToFriendSenderResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SendEmailToFriendSender'] = ResolversParentTypes['SendEmailToFriendSender']> = ResolversObject<{
    email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SetBillingAddressOnCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetBillingAddressOnCartOutput'] = ResolversParentTypes['SetBillingAddressOnCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SetGuestEmailOnCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetGuestEmailOnCartOutput'] = ResolversParentTypes['SetGuestEmailOnCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SetPaymentMethodOnCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetPaymentMethodOnCartOutput'] = ResolversParentTypes['SetPaymentMethodOnCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SetShippingAddressesOnCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetShippingAddressesOnCartOutput'] = ResolversParentTypes['SetShippingAddressesOnCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SetShippingMethodsOnCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetShippingMethodsOnCartOutput'] = ResolversParentTypes['SetShippingMethodsOnCartOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SubscribeEmailToNewsletterOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubscribeEmailToNewsletterOutput'] = ResolversParentTypes['SubscribeEmailToNewsletterOutput']> = ResolversObject<{
    status?: Resolver<Maybe<ResolversTypes['SubscriptionStatusesEnum']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type UpdateCartItemsOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UpdateCartItemsOutput'] = ResolversParentTypes['UpdateCartItemsOutput']> = ResolversObject<{
    cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type UpdateProductsInWishlistOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UpdateProductsInWishlistOutput'] = ResolversParentTypes['UpdateProductsInWishlistOutput']> = ResolversObject<{
    user_errors?: Resolver<Array<Maybe<ResolversTypes['WishListUserInputError']>>, ParentType, ContextType>;
    wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductLinksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductLinks'] = ResolversParentTypes['ProductLinks']> = ResolversObject<{
    link_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    linked_product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    linked_product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PhysicalProductInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PhysicalProductInterface'] = ResolversParentTypes['PhysicalProductInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'SimpleProduct' | 'BundleProduct' | 'GroupedProduct' | 'ConfigurableProduct', ParentType, ContextType>;
    weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
}>;
export declare type CustomizableAreaOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableAreaOption'] = ResolversParentTypes['CustomizableAreaOption']> = ResolversObject<{
    option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['CustomizableAreaValue']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableOptionInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableOptionInterface'] = ResolversParentTypes['CustomizableOptionInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'CustomizableAreaOption' | 'CustomizableDateOption' | 'CustomizableDropDownOption' | 'CustomizableMultipleOption' | 'CustomizableFieldOption' | 'CustomizableFileOption' | 'CustomizableRadioOption' | 'CustomizableCheckboxOption', ParentType, ContextType>;
    option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
}>;
export declare type CustomizableAreaValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableAreaValue'] = ResolversParentTypes['CustomizableAreaValue']> = ResolversObject<{
    max_characters?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableDateOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableDateOption'] = ResolversParentTypes['CustomizableDateOption']> = ResolversObject<{
    option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['CustomizableDateValue']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableDateValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableDateValue'] = ResolversParentTypes['CustomizableDateValue']> = ResolversObject<{
    price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableDropDownOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableDropDownOption'] = ResolversParentTypes['CustomizableDropDownOption']> = ResolversObject<{
    option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    value?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableDropDownValue']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableDropDownValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableDropDownValue'] = ResolversParentTypes['CustomizableDropDownValue']> = ResolversObject<{
    option_type_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableMultipleOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableMultipleOption'] = ResolversParentTypes['CustomizableMultipleOption']> = ResolversObject<{
    option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    value?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableMultipleValue']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableMultipleValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableMultipleValue'] = ResolversParentTypes['CustomizableMultipleValue']> = ResolversObject<{
    option_type_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableFieldOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableFieldOption'] = ResolversParentTypes['CustomizableFieldOption']> = ResolversObject<{
    option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['CustomizableFieldValue']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableFieldValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableFieldValue'] = ResolversParentTypes['CustomizableFieldValue']> = ResolversObject<{
    max_characters?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableFileOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableFileOption'] = ResolversParentTypes['CustomizableFileOption']> = ResolversObject<{
    option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['CustomizableFileValue']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableFileValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableFileValue'] = ResolversParentTypes['CustomizableFileValue']> = ResolversObject<{
    file_extension?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    image_size_x?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    image_size_y?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ProductVideoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductVideo'] = ResolversParentTypes['ProductVideo']> = ResolversObject<{
    disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    video_content?: Resolver<Maybe<ResolversTypes['ProductMediaGalleryEntriesVideoContent']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableProductInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableProductInterface'] = ResolversParentTypes['CustomizableProductInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'VirtualProduct' | 'SimpleProduct' | 'DownloadableProduct' | 'BundleProduct' | 'ConfigurableProduct', ParentType, ContextType>;
    options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
}>;
export declare type CustomizableRadioOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableRadioOption'] = ResolversParentTypes['CustomizableRadioOption']> = ResolversObject<{
    option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    value?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableRadioValue']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableRadioValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableRadioValue'] = ResolversParentTypes['CustomizableRadioValue']> = ResolversObject<{
    option_type_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableCheckboxOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableCheckboxOption'] = ResolversParentTypes['CustomizableCheckboxOption']> = ResolversObject<{
    option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    value?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableCheckboxValue']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CustomizableCheckboxValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableCheckboxValue'] = ResolversParentTypes['CustomizableCheckboxValue']> = ResolversObject<{
    option_type_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type VirtualProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VirtualProduct'] = ResolversParentTypes['VirtualProduct']> = ResolversObject<{
    activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
    category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
    media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
    meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
    options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
    price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
    price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
    print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
    rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<VirtualProductreviewsArgs, 'pageSize' | 'currentPage'>>;
    sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
    strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
    type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
    url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SimpleProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SimpleProduct'] = ResolversParentTypes['SimpleProduct']> = ResolversObject<{
    activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
    category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
    media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
    meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
    options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
    price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
    price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
    print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
    rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<SimpleProductreviewsArgs, 'pageSize' | 'currentPage'>>;
    sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
    strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
    type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
    url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
    weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type LayerFilterItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LayerFilterItem'] = ResolversParentTypes['LayerFilterItem']> = ResolversObject<{
    items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    value_string?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SimpleWishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SimpleWishlistItem'] = ResolversParentTypes['SimpleWishlistItem']> = ResolversObject<{
    added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type VirtualWishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VirtualWishlistItem'] = ResolversParentTypes['VirtualWishlistItem']> = ResolversObject<{
    added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SimpleCartItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SimpleCartItem'] = ResolversParentTypes['SimpleCartItem']> = ResolversObject<{
    customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
    gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
    product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type VirtualCartItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VirtualCartItem'] = ResolversParentTypes['VirtualCartItem']> = ResolversObject<{
    customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
    product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type DownloadableCartItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableCartItem'] = ResolversParentTypes['DownloadableCartItem']> = ResolversObject<{
    customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductLinks']>>>, ParentType, ContextType>;
    prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
    product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    samples?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductSamples']>>>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type DownloadableProductLinksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableProductLinks'] = ResolversParentTypes['DownloadableProductLinks']> = ResolversObject<{
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    is_shareable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    link_type?: Resolver<Maybe<ResolversTypes['DownloadableFileTypeEnum']>, ParentType, ContextType>;
    number_of_downloads?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    sample_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sample_type?: Resolver<Maybe<ResolversTypes['DownloadableFileTypeEnum']>, ParentType, ContextType>;
    sample_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type DownloadableProductSamplesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableProductSamples'] = ResolversParentTypes['DownloadableProductSamples']> = ResolversObject<{
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    sample_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sample_type?: Resolver<Maybe<ResolversTypes['DownloadableFileTypeEnum']>, ParentType, ContextType>;
    sample_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type DownloadableProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableProduct'] = ResolversParentTypes['DownloadableProduct']> = ResolversObject<{
    activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
    category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    downloadable_product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductLinks']>>>, ParentType, ContextType>;
    downloadable_product_samples?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductSamples']>>>, ParentType, ContextType>;
    eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    links_purchased_separately?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    links_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
    media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
    meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
    options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
    price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
    price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
    print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
    rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<DownloadableProductreviewsArgs, 'pageSize' | 'currentPage'>>;
    sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
    strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
    type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
    url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type DownloadableOrderItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableOrderItem'] = ResolversParentTypes['DownloadableOrderItem']> = ResolversObject<{
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    downloadable_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableItemsLinks']>>>, ParentType, ContextType>;
    entered_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    quantity_canceled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_ordered?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_returned?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_shipped?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    selected_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
    status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type DownloadableItemsLinksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableItemsLinks'] = ResolversParentTypes['DownloadableItemsLinks']> = ResolversObject<{
    sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type DownloadableInvoiceItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableInvoiceItem'] = ResolversParentTypes['DownloadableInvoiceItem']> = ResolversObject<{
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    downloadable_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableItemsLinks']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type DownloadableCreditMemoItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableCreditMemoItem'] = ResolversParentTypes['DownloadableCreditMemoItem']> = ResolversObject<{
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    downloadable_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableItemsLinks']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type DownloadableWishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableWishlistItem'] = ResolversParentTypes['DownloadableWishlistItem']> = ResolversObject<{
    added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    links_v2?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductLinks']>>>, ParentType, ContextType>;
    product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    samples?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductSamples']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type BundleCartItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleCartItem'] = ResolversParentTypes['BundleCartItem']> = ResolversObject<{
    bundle_options?: Resolver<Array<Maybe<ResolversTypes['SelectedBundleOption']>>, ParentType, ContextType>;
    customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
    gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
    product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SelectedBundleOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedBundleOption'] = ResolversParentTypes['SelectedBundleOption']> = ResolversObject<{
    id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    values?: Resolver<Array<Maybe<ResolversTypes['SelectedBundleOptionValue']>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SelectedBundleOptionValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedBundleOptionValue'] = ResolversParentTypes['SelectedBundleOptionValue']> = ResolversObject<{
    id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    price?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type BundleItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleItem'] = ResolversParentTypes['BundleItem']> = ResolversObject<{
    option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    options?: Resolver<Maybe<Array<Maybe<ResolversTypes['BundleItemOption']>>>, ParentType, ContextType>;
    position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type BundleItemOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleItemOption'] = ResolversParentTypes['BundleItemOption']> = ResolversObject<{
    can_change_quantity?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    is_default?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
    product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
    qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type BundleProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleProduct'] = ResolversParentTypes['BundleProduct']> = ResolversObject<{
    activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
    category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    dynamic_price?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    dynamic_sku?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    dynamic_weight?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['BundleItem']>>>, ParentType, ContextType>;
    manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
    media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
    meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
    options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
    price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
    price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
    price_view?: Resolver<Maybe<ResolversTypes['PriceViewEnum']>, ParentType, ContextType>;
    print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
    rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<BundleProductreviewsArgs, 'pageSize' | 'currentPage'>>;
    sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    ship_bundle_items?: Resolver<Maybe<ResolversTypes['ShipBundleItemsEnum']>, ParentType, ContextType>;
    short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
    strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
    type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
    url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
    weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type BundleOrderItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleOrderItem'] = ResolversParentTypes['BundleOrderItem']> = ResolversObject<{
    bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOption']>>>, ParentType, ContextType>;
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    entered_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    quantity_canceled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_ordered?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_returned?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_shipped?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    selected_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
    status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ItemSelectedBundleOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ItemSelectedBundleOption'] = ResolversParentTypes['ItemSelectedBundleOption']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    values?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOptionValue']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ItemSelectedBundleOptionValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ItemSelectedBundleOptionValue'] = ResolversParentTypes['ItemSelectedBundleOptionValue']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type BundleInvoiceItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleInvoiceItem'] = ResolversParentTypes['BundleInvoiceItem']> = ResolversObject<{
    bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOption']>>>, ParentType, ContextType>;
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type BundleShipmentItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleShipmentItem'] = ResolversParentTypes['BundleShipmentItem']> = ResolversObject<{
    bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOption']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quantity_shipped?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type BundleCreditMemoItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleCreditMemoItem'] = ResolversParentTypes['BundleCreditMemoItem']> = ResolversObject<{
    bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOption']>>>, ParentType, ContextType>;
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type BundleWishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleWishlistItem'] = ResolversParentTypes['BundleWishlistItem']> = ResolversObject<{
    added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['SelectedBundleOption']>>>, ParentType, ContextType>;
    customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ConfigurableCartItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableCartItem'] = ResolversParentTypes['ConfigurableCartItem']> = ResolversObject<{
    configurable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedConfigurableOption']>>, ParentType, ContextType>;
    customizable_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>>, ParentType, ContextType>;
    gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
    product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SelectedConfigurableOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedConfigurableOption'] = ResolversParentTypes['SelectedConfigurableOption']> = ResolversObject<{
    configurable_product_option_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    configurable_product_option_value_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    option_label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    value_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    value_label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SalesItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SalesItemInterface'] = ResolversParentTypes['SalesItemInterface']> = ResolversObject<{
    gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type GroupedProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GroupedProduct'] = ResolversParentTypes['GroupedProduct']> = ResolversObject<{
    activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
    category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    items?: Resolver<Maybe<Array<Maybe<ResolversTypes['GroupedProductItem']>>>, ParentType, ContextType>;
    manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
    media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
    meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
    price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
    price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
    print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
    rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<GroupedProductreviewsArgs, 'pageSize' | 'currentPage'>>;
    sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
    strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
    type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
    url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
    weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type GroupedProductItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GroupedProductItem'] = ResolversParentTypes['GroupedProductItem']> = ResolversObject<{
    position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
    qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type GroupedProductWishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GroupedProductWishlistItem'] = ResolversParentTypes['GroupedProductWishlistItem']> = ResolversObject<{
    added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PaypalExpressTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaypalExpressToken'] = ResolversParentTypes['PaypalExpressToken']> = ResolversObject<{
    paypal_urls?: Resolver<Maybe<ResolversTypes['PaypalExpressUrlList']>, ParentType, ContextType>;
    token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type PayflowProTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PayflowProToken'] = ResolversParentTypes['PayflowProToken']> = ResolversObject<{
    response_message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    result?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    result_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    secure_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    secure_token_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ConfigurableProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableProduct'] = ResolversParentTypes['ConfigurableProduct']> = ResolversObject<{
    activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
    category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    configurable_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOptions']>>>, ParentType, ContextType>;
    configurable_product_options_selection?: Resolver<Maybe<ResolversTypes['ConfigurableProductOptionsSelection']>, ParentType, ContextType, RequireFields<ConfigurableProductconfigurable_product_options_selectionArgs, never>>;
    country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
    media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
    meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
    options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
    price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
    price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
    print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
    rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
    reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<ConfigurableProductreviewsArgs, 'pageSize' | 'currentPage'>>;
    sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
    size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
    strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
    tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
    type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
    url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
    url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    variants?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableVariant']>>>, ParentType, ContextType>;
    websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
    weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ConfigurableProductOptionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableProductOptions'] = ResolversParentTypes['ConfigurableProductOptions']> = ResolversObject<{
    attribute_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    attribute_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    attribute_id_v2?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    attribute_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    product_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    use_default?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    values?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOptionsValues']>>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ConfigurableProductOptionsValuesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableProductOptionsValues'] = ResolversParentTypes['ConfigurableProductOptionsValues']> = ResolversObject<{
    default_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    swatch_data?: Resolver<Maybe<ResolversTypes['SwatchDataInterface']>, ParentType, ContextType>;
    uid?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
    use_default_value?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
    value_index?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SwatchDataInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SwatchDataInterface'] = ResolversParentTypes['SwatchDataInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'ImageSwatchData' | 'TextSwatchData' | 'ColorSwatchData', ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;
export declare type ConfigurableProductOptionsSelectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableProductOptionsSelection'] = ResolversParentTypes['ConfigurableProductOptionsSelection']> = ResolversObject<{
    media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
    options_available_for_selection?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableOptionAvailableForSelection']>>>, ParentType, ContextType>;
    variant?: Resolver<Maybe<ResolversTypes['SimpleProduct']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ConfigurableOptionAvailableForSelectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableOptionAvailableForSelection'] = ResolversParentTypes['ConfigurableOptionAvailableForSelection']> = ResolversObject<{
    attribute_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    option_value_uids?: Resolver<Array<Maybe<ResolversTypes['ID']>>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ConfigurableVariantResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableVariant'] = ResolversParentTypes['ConfigurableVariant']> = ResolversObject<{
    attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableAttributeOption']>>>, ParentType, ContextType>;
    product?: Resolver<Maybe<ResolversTypes['SimpleProduct']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ConfigurableAttributeOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableAttributeOption'] = ResolversParentTypes['ConfigurableAttributeOption']> = ResolversObject<{
    code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    value_index?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ConfigurableWishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableWishlistItem'] = ResolversParentTypes['ConfigurableWishlistItem']> = ResolversObject<{
    added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    child_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    configurable_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['SelectedConfigurableOption']>>>, ParentType, ContextType>;
    customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
    description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
    quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type OrderItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderItem'] = ResolversParentTypes['OrderItem']> = ResolversObject<{
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    entered_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    quantity_canceled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_ordered?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_returned?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    quantity_shipped?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    selected_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
    status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type InvoiceItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceItem'] = ResolversParentTypes['InvoiceItem']> = ResolversObject<{
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ShipmentItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShipmentItem'] = ResolversParentTypes['ShipmentItem']> = ResolversObject<{
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quantity_shipped?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type CreditMemoItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditMemoItem'] = ResolversParentTypes['CreditMemoItem']> = ResolversObject<{
    discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
    id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
    order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
    product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
    product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
    quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SwatchLayerFilterItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SwatchLayerFilterItemInterface'] = ResolversParentTypes['SwatchLayerFilterItemInterface']> = ResolversObject<{
    __resolveType: TypeResolveFn<'SwatchLayerFilterItem', ParentType, ContextType>;
    swatch_data?: Resolver<Maybe<ResolversTypes['SwatchData']>, ParentType, ContextType>;
}>;
export declare type SwatchDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SwatchData'] = ResolversParentTypes['SwatchData']> = ResolversObject<{
    type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type SwatchLayerFilterItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SwatchLayerFilterItem'] = ResolversParentTypes['SwatchLayerFilterItem']> = ResolversObject<{
    items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
    label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    swatch_data?: Resolver<Maybe<ResolversTypes['SwatchData']>, ParentType, ContextType>;
    value_string?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ImageSwatchDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ImageSwatchData'] = ResolversParentTypes['ImageSwatchData']> = ResolversObject<{
    thumbnail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type TextSwatchDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TextSwatchData'] = ResolversParentTypes['TextSwatchData']> = ResolversObject<{
    value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type ColorSwatchDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ColorSwatchData'] = ResolversParentTypes['ColorSwatchData']> = ResolversObject<{
    value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
    __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;
export declare type Resolvers<ContextType = MeshContext> = ResolversObject<{
    Query?: QueryResolvers<ContextType>;
    Aggregate?: AggregateResolvers<ContextType>;
    Asset?: AssetResolvers<ContextType>;
    AssetConnection?: AssetConnectionResolvers<ContextType>;
    AssetEdge?: AssetEdgeResolvers<ContextType>;
    BatchPayload?: BatchPayloadResolvers<ContextType>;
    Color?: ColorResolvers<ContextType>;
    Date?: GraphQLScalarType;
    DateTime?: GraphQLScalarType;
    DocumentVersion?: DocumentVersionResolvers<ContextType>;
    Footer?: FooterResolvers<ContextType>;
    FooterConnection?: FooterConnectionResolvers<ContextType>;
    FooterEdge?: FooterEdgeResolvers<ContextType>;
    Hex?: GraphQLScalarType;
    Json?: GraphQLScalarType;
    Location?: LocationResolvers<ContextType>;
    Long?: GraphQLScalarType;
    MagentoCategory?: MagentoCategoryResolvers<ContextType>;
    MagentoCategoryConnection?: MagentoCategoryConnectionResolvers<ContextType>;
    MagentoCategoryEdge?: MagentoCategoryEdgeResolvers<ContextType>;
    Node?: NodeResolvers<ContextType>;
    Page?: PageResolvers<ContextType>;
    PageConnection?: PageConnectionResolvers<ContextType>;
    PageContent?: PageContentResolvers<ContextType>;
    PageEdge?: PageEdgeResolvers<ContextType>;
    PageInfo?: PageInfoResolvers<ContextType>;
    PageLink?: PageLinkResolvers<ContextType>;
    PageLinkConnection?: PageLinkConnectionResolvers<ContextType>;
    PageLinkEdge?: PageLinkEdgeResolvers<ContextType>;
    Product?: ProductResolvers<ContextType>;
    ProductConnection?: ProductConnectionResolvers<ContextType>;
    ProductContent?: ProductContentResolvers<ContextType>;
    ProductEdge?: ProductEdgeResolvers<ContextType>;
    RGBA?: RGBAResolvers<ContextType>;
    RGBAHue?: GraphQLScalarType;
    RGBATransparency?: GraphQLScalarType;
    RichText?: RichTextResolvers<ContextType>;
    RichTextAST?: GraphQLScalarType;
    RowBlogContent?: RowBlogContentResolvers<ContextType>;
    RowBlogContentConnection?: RowBlogContentConnectionResolvers<ContextType>;
    RowBlogContentEdge?: RowBlogContentEdgeResolvers<ContextType>;
    RowButtonLinkList?: RowButtonLinkListResolvers<ContextType>;
    RowButtonLinkListConnection?: RowButtonLinkListConnectionResolvers<ContextType>;
    RowButtonLinkListEdge?: RowButtonLinkListEdgeResolvers<ContextType>;
    RowColumnOne?: RowColumnOneResolvers<ContextType>;
    RowColumnOneConnection?: RowColumnOneConnectionResolvers<ContextType>;
    RowColumnOneEdge?: RowColumnOneEdgeResolvers<ContextType>;
    RowColumnThree?: RowColumnThreeResolvers<ContextType>;
    RowColumnThreeConnection?: RowColumnThreeConnectionResolvers<ContextType>;
    RowColumnThreeEdge?: RowColumnThreeEdgeResolvers<ContextType>;
    RowColumnTwo?: RowColumnTwoResolvers<ContextType>;
    RowColumnTwoConnection?: RowColumnTwoConnectionResolvers<ContextType>;
    RowColumnTwoEdge?: RowColumnTwoEdgeResolvers<ContextType>;
    RowContentLinks?: RowContentLinksResolvers<ContextType>;
    RowContentLinksConnection?: RowContentLinksConnectionResolvers<ContextType>;
    RowContentLinksEdge?: RowContentLinksEdgeResolvers<ContextType>;
    RowHeroBanner?: RowHeroBannerResolvers<ContextType>;
    RowHeroBannerConnection?: RowHeroBannerConnectionResolvers<ContextType>;
    RowHeroBannerEdge?: RowHeroBannerEdgeResolvers<ContextType>;
    RowProductBackstory?: RowProductBackstoryResolvers<ContextType>;
    RowProductBackstoryConnection?: RowProductBackstoryConnectionResolvers<ContextType>;
    RowProductBackstoryEdge?: RowProductBackstoryEdgeResolvers<ContextType>;
    RowProductFeature?: RowProductFeatureResolvers<ContextType>;
    RowProductFeatureBoxed?: RowProductFeatureBoxedResolvers<ContextType>;
    RowProductFeatureBoxedConnection?: RowProductFeatureBoxedConnectionResolvers<ContextType>;
    RowProductFeatureBoxedEdge?: RowProductFeatureBoxedEdgeResolvers<ContextType>;
    RowProductFeatureConnection?: RowProductFeatureConnectionResolvers<ContextType>;
    RowProductFeatureEdge?: RowProductFeatureEdgeResolvers<ContextType>;
    RowProductGrid?: RowProductGridResolvers<ContextType>;
    RowProductGridConnection?: RowProductGridConnectionResolvers<ContextType>;
    RowProductGridEdge?: RowProductGridEdgeResolvers<ContextType>;
    RowProductRelated?: RowProductRelatedResolvers<ContextType>;
    RowProductRelatedConnection?: RowProductRelatedConnectionResolvers<ContextType>;
    RowProductRelatedEdge?: RowProductRelatedEdgeResolvers<ContextType>;
    RowProductReviews?: RowProductReviewsResolvers<ContextType>;
    RowProductReviewsConnection?: RowProductReviewsConnectionResolvers<ContextType>;
    RowProductReviewsEdge?: RowProductReviewsEdgeResolvers<ContextType>;
    RowProductSpecs?: RowProductSpecsResolvers<ContextType>;
    RowProductSpecsConnection?: RowProductSpecsConnectionResolvers<ContextType>;
    RowProductSpecsEdge?: RowProductSpecsEdgeResolvers<ContextType>;
    RowProductUpsells?: RowProductUpsellsResolvers<ContextType>;
    RowProductUpsellsConnection?: RowProductUpsellsConnectionResolvers<ContextType>;
    RowProductUpsellsEdge?: RowProductUpsellsEdgeResolvers<ContextType>;
    RowQuote?: RowQuoteResolvers<ContextType>;
    RowQuoteConnection?: RowQuoteConnectionResolvers<ContextType>;
    RowQuoteEdge?: RowQuoteEdgeResolvers<ContextType>;
    RowServiceOptions?: RowServiceOptionsResolvers<ContextType>;
    RowServiceOptionsConnection?: RowServiceOptionsConnectionResolvers<ContextType>;
    RowServiceOptionsEdge?: RowServiceOptionsEdgeResolvers<ContextType>;
    RowSpecialBanner?: RowSpecialBannerResolvers<ContextType>;
    RowSpecialBannerConnection?: RowSpecialBannerConnectionResolvers<ContextType>;
    RowSpecialBannerEdge?: RowSpecialBannerEdgeResolvers<ContextType>;
    RowSwipeableGrid?: RowSwipeableGridResolvers<ContextType>;
    RowSwipeableGridConnection?: RowSwipeableGridConnectionResolvers<ContextType>;
    RowSwipeableGridEdge?: RowSwipeableGridEdgeResolvers<ContextType>;
    User?: UserResolvers<ContextType>;
    UserConnection?: UserConnectionResolvers<ContextType>;
    UserEdge?: UserEdgeResolvers<ContextType>;
    Usps?: UspsResolvers<ContextType>;
    UspsConnection?: UspsConnectionResolvers<ContextType>;
    UspsEdge?: UspsEdgeResolvers<ContextType>;
    Version?: VersionResolvers<ContextType>;
    Mutation?: MutationResolvers<ContextType>;
    StoreConfig?: StoreConfigResolvers<ContextType>;
    SendFriendConfiguration?: SendFriendConfigurationResolvers<ContextType>;
    Cart?: CartResolvers<ContextType>;
    AppliedCoupon?: AppliedCouponResolvers<ContextType>;
    AvailablePaymentMethod?: AvailablePaymentMethodResolvers<ContextType>;
    MollieIssuer?: MollieIssuerResolvers<ContextType>;
    MolliePaymentMethodMeta?: MolliePaymentMethodMetaResolvers<ContextType>;
    BillingCartAddress?: BillingCartAddressResolvers<ContextType>;
    CartAddressInterface?: CartAddressInterfaceResolvers<ContextType>;
    CartAddressCountry?: CartAddressCountryResolvers<ContextType>;
    CartAddressRegion?: CartAddressRegionResolvers<ContextType>;
    GiftMessage?: GiftMessageResolvers<ContextType>;
    CartItemInterface?: CartItemInterfaceResolvers<ContextType>;
    CartItemPrices?: CartItemPricesResolvers<ContextType>;
    Discount?: DiscountResolvers<ContextType>;
    Money?: MoneyResolvers<ContextType>;
    ProductInterface?: ProductInterfaceResolvers<ContextType>;
    CategoryInterface?: CategoryInterfaceResolvers<ContextType>;
    Breadcrumb?: BreadcrumbResolvers<ContextType>;
    CmsBlock?: CmsBlockResolvers<ContextType>;
    CategoryProducts?: CategoryProductsResolvers<ContextType>;
    SearchResultPageInfo?: SearchResultPageInfoResolvers<ContextType>;
    ComplexTextValue?: ComplexTextValueResolvers<ContextType>;
    ProductImage?: ProductImageResolvers<ContextType>;
    MediaGalleryInterface?: MediaGalleryInterfaceResolvers<ContextType>;
    MediaGalleryEntry?: MediaGalleryEntryResolvers<ContextType>;
    ProductMediaGalleryEntriesContent?: ProductMediaGalleryEntriesContentResolvers<ContextType>;
    ProductMediaGalleryEntriesVideoContent?: ProductMediaGalleryEntriesVideoContentResolvers<ContextType>;
    ProductPrices?: ProductPricesResolvers<ContextType>;
    Price?: PriceResolvers<ContextType>;
    PriceAdjustment?: PriceAdjustmentResolvers<ContextType>;
    PriceRange?: PriceRangeResolvers<ContextType>;
    ProductPrice?: ProductPriceResolvers<ContextType>;
    ProductDiscount?: ProductDiscountResolvers<ContextType>;
    FixedProductTax?: FixedProductTaxResolvers<ContextType>;
    TierPrice?: TierPriceResolvers<ContextType>;
    ProductLinksInterface?: ProductLinksInterfaceResolvers<ContextType>;
    ProductReviews?: ProductReviewsResolvers<ContextType>;
    ProductReview?: ProductReviewResolvers<ContextType>;
    ProductReviewRating?: ProductReviewRatingResolvers<ContextType>;
    ProductTierPrices?: ProductTierPricesResolvers<ContextType>;
    UrlRewrite?: UrlRewriteResolvers<ContextType>;
    HttpQueryParameter?: HttpQueryParameterResolvers<ContextType>;
    Website?: WebsiteResolvers<ContextType>;
    CartPrices?: CartPricesResolvers<ContextType>;
    CartTaxItem?: CartTaxItemResolvers<ContextType>;
    CartDiscount?: CartDiscountResolvers<ContextType>;
    SelectedPaymentMethod?: SelectedPaymentMethodResolvers<ContextType>;
    ShippingCartAddress?: ShippingCartAddressResolvers<ContextType>;
    AvailableShippingMethod?: AvailableShippingMethodResolvers<ContextType>;
    CartItemQuantity?: CartItemQuantityResolvers<ContextType>;
    SelectedShippingMethod?: SelectedShippingMethodResolvers<ContextType>;
    CategoryResult?: CategoryResultResolvers<ContextType>;
    CategoryTree?: CategoryTreeResolvers<ContextType>;
    CheckoutAgreement?: CheckoutAgreementResolvers<ContextType>;
    CmsBlocks?: CmsBlocksResolvers<ContextType>;
    CmsPage?: CmsPageResolvers<ContextType>;
    CompareList?: CompareListResolvers<ContextType>;
    ComparableAttribute?: ComparableAttributeResolvers<ContextType>;
    ComparableItem?: ComparableItemResolvers<ContextType>;
    ProductAttribute?: ProductAttributeResolvers<ContextType>;
    Country?: CountryResolvers<ContextType>;
    Region?: RegionResolvers<ContextType>;
    Currency?: CurrencyResolvers<ContextType>;
    ExchangeRate?: ExchangeRateResolvers<ContextType>;
    CustomAttributeMetadata?: CustomAttributeMetadataResolvers<ContextType>;
    Attribute?: AttributeResolvers<ContextType>;
    AttributeOption?: AttributeOptionResolvers<ContextType>;
    Customer?: CustomerResolvers<ContextType>;
    CustomerAddress?: CustomerAddressResolvers<ContextType>;
    CustomerAddressAttribute?: CustomerAddressAttributeResolvers<ContextType>;
    CustomerAddressRegion?: CustomerAddressRegionResolvers<ContextType>;
    CustomerOrders?: CustomerOrdersResolvers<ContextType>;
    CustomerOrder?: CustomerOrderResolvers<ContextType>;
    OrderAddress?: OrderAddressResolvers<ContextType>;
    SalesCommentItem?: SalesCommentItemResolvers<ContextType>;
    CreditMemo?: CreditMemoResolvers<ContextType>;
    CreditMemoItemInterface?: CreditMemoItemInterfaceResolvers<ContextType>;
    OrderItemInterface?: OrderItemInterfaceResolvers<ContextType>;
    OrderItemOption?: OrderItemOptionResolvers<ContextType>;
    CreditMemoTotal?: CreditMemoTotalResolvers<ContextType>;
    ShippingHandling?: ShippingHandlingResolvers<ContextType>;
    ShippingDiscount?: ShippingDiscountResolvers<ContextType>;
    TaxItem?: TaxItemResolvers<ContextType>;
    Invoice?: InvoiceResolvers<ContextType>;
    InvoiceItemInterface?: InvoiceItemInterfaceResolvers<ContextType>;
    InvoiceTotal?: InvoiceTotalResolvers<ContextType>;
    OrderPaymentMethod?: OrderPaymentMethodResolvers<ContextType>;
    KeyValue?: KeyValueResolvers<ContextType>;
    OrderShipment?: OrderShipmentResolvers<ContextType>;
    ShipmentItemInterface?: ShipmentItemInterfaceResolvers<ContextType>;
    ShipmentTracking?: ShipmentTrackingResolvers<ContextType>;
    OrderTotal?: OrderTotalResolvers<ContextType>;
    Wishlist?: WishlistResolvers<ContextType>;
    WishlistItem?: WishlistItemResolvers<ContextType>;
    WishlistItems?: WishlistItemsResolvers<ContextType>;
    WishlistItemInterface?: WishlistItemInterfaceResolvers<ContextType>;
    SelectedCustomizableOption?: SelectedCustomizableOptionResolvers<ContextType>;
    SelectedCustomizableOptionValue?: SelectedCustomizableOptionValueResolvers<ContextType>;
    CartItemSelectedOptionValuePrice?: CartItemSelectedOptionValuePriceResolvers<ContextType>;
    CustomerDownloadableProducts?: CustomerDownloadableProductsResolvers<ContextType>;
    CustomerDownloadableProduct?: CustomerDownloadableProductResolvers<ContextType>;
    CustomerPaymentTokens?: CustomerPaymentTokensResolvers<ContextType>;
    PaymentToken?: PaymentTokenResolvers<ContextType>;
    HostedProUrl?: HostedProUrlResolvers<ContextType>;
    PayflowLinkToken?: PayflowLinkTokenResolvers<ContextType>;
    IsEmailAvailableOutput?: IsEmailAvailableOutputResolvers<ContextType>;
    MolliePaymentMethodsOutput?: MolliePaymentMethodsOutputResolvers<ContextType>;
    MolliePaymentMethod?: MolliePaymentMethodResolvers<ContextType>;
    PickupLocations?: PickupLocationsResolvers<ContextType>;
    PickupLocation?: PickupLocationResolvers<ContextType>;
    ProductReviewRatingsMetadata?: ProductReviewRatingsMetadataResolvers<ContextType>;
    ProductReviewRatingMetadata?: ProductReviewRatingMetadataResolvers<ContextType>;
    ProductReviewRatingValueMetadata?: ProductReviewRatingValueMetadataResolvers<ContextType>;
    Products?: ProductsResolvers<ContextType>;
    Aggregation?: AggregationResolvers<ContextType>;
    AggregationOption?: AggregationOptionResolvers<ContextType>;
    AggregationOptionInterface?: AggregationOptionInterfaceResolvers<ContextType>;
    LayerFilter?: LayerFilterResolvers<ContextType>;
    LayerFilterItemInterface?: LayerFilterItemInterfaceResolvers<ContextType>;
    SortFields?: SortFieldsResolvers<ContextType>;
    SortField?: SortFieldResolvers<ContextType>;
    EntityUrl?: EntityUrlResolvers<ContextType>;
    WishlistOutput?: WishlistOutputResolvers<ContextType>;
    AddBundleProductsToCartOutput?: AddBundleProductsToCartOutputResolvers<ContextType>;
    AddConfigurableProductsToCartOutput?: AddConfigurableProductsToCartOutputResolvers<ContextType>;
    AddDownloadableProductsToCartOutput?: AddDownloadableProductsToCartOutputResolvers<ContextType>;
    AddProductsToCartOutput?: AddProductsToCartOutputResolvers<ContextType>;
    CartUserInputError?: CartUserInputErrorResolvers<ContextType>;
    AddProductsToWishlistOutput?: AddProductsToWishlistOutputResolvers<ContextType>;
    WishListUserInputError?: WishListUserInputErrorResolvers<ContextType>;
    AddSimpleProductsToCartOutput?: AddSimpleProductsToCartOutputResolvers<ContextType>;
    AddVirtualProductsToCartOutput?: AddVirtualProductsToCartOutputResolvers<ContextType>;
    ApplyCouponToCartOutput?: ApplyCouponToCartOutputResolvers<ContextType>;
    AssignCompareListToCustomerOutput?: AssignCompareListToCustomerOutputResolvers<ContextType>;
    CustomerOutput?: CustomerOutputResolvers<ContextType>;
    createKlarnaPaymentsSessionOutput?: createKlarnaPaymentsSessionOutputResolvers<ContextType>;
    Categories?: CategoriesResolvers<ContextType>;
    Assets?: AssetsResolvers<ContextType>;
    MollieTransactionOutput?: MollieTransactionOutputResolvers<ContextType>;
    CreatePayflowProTokenOutput?: CreatePayflowProTokenOutputResolvers<ContextType>;
    PaypalExpressTokenOutput?: PaypalExpressTokenOutputResolvers<ContextType>;
    PaypalExpressUrlList?: PaypalExpressUrlListResolvers<ContextType>;
    CreateProductReviewOutput?: CreateProductReviewOutputResolvers<ContextType>;
    DeleteCompareListOutput?: DeleteCompareListOutputResolvers<ContextType>;
    DeletePaymentTokenOutput?: DeletePaymentTokenOutputResolvers<ContextType>;
    CustomerToken?: CustomerTokenResolvers<ContextType>;
    GenerateCustomerTokenAsAdminOutput?: GenerateCustomerTokenAsAdminOutputResolvers<ContextType>;
    PayflowProResponseOutput?: PayflowProResponseOutputResolvers<ContextType>;
    MollieProcessTransactionOutput?: MollieProcessTransactionOutputResolvers<ContextType>;
    MollieResetCartOutput?: MollieResetCartOutputResolvers<ContextType>;
    PlaceOrderOutput?: PlaceOrderOutputResolvers<ContextType>;
    Order?: OrderResolvers<ContextType>;
    RemoveCouponFromCartOutput?: RemoveCouponFromCartOutputResolvers<ContextType>;
    RemoveItemFromCartOutput?: RemoveItemFromCartOutputResolvers<ContextType>;
    RemoveProductsFromWishlistOutput?: RemoveProductsFromWishlistOutputResolvers<ContextType>;
    ReorderItemsOutput?: ReorderItemsOutputResolvers<ContextType>;
    CheckoutUserInputError?: CheckoutUserInputErrorResolvers<ContextType>;
    RevokeCustomerTokenOutput?: RevokeCustomerTokenOutputResolvers<ContextType>;
    SendEmailToFriendOutput?: SendEmailToFriendOutputResolvers<ContextType>;
    SendEmailToFriendRecipient?: SendEmailToFriendRecipientResolvers<ContextType>;
    SendEmailToFriendSender?: SendEmailToFriendSenderResolvers<ContextType>;
    SetBillingAddressOnCartOutput?: SetBillingAddressOnCartOutputResolvers<ContextType>;
    SetGuestEmailOnCartOutput?: SetGuestEmailOnCartOutputResolvers<ContextType>;
    SetPaymentMethodOnCartOutput?: SetPaymentMethodOnCartOutputResolvers<ContextType>;
    SetShippingAddressesOnCartOutput?: SetShippingAddressesOnCartOutputResolvers<ContextType>;
    SetShippingMethodsOnCartOutput?: SetShippingMethodsOnCartOutputResolvers<ContextType>;
    SubscribeEmailToNewsletterOutput?: SubscribeEmailToNewsletterOutputResolvers<ContextType>;
    UpdateCartItemsOutput?: UpdateCartItemsOutputResolvers<ContextType>;
    UpdateProductsInWishlistOutput?: UpdateProductsInWishlistOutputResolvers<ContextType>;
    ProductLinks?: ProductLinksResolvers<ContextType>;
    PhysicalProductInterface?: PhysicalProductInterfaceResolvers<ContextType>;
    CustomizableAreaOption?: CustomizableAreaOptionResolvers<ContextType>;
    CustomizableOptionInterface?: CustomizableOptionInterfaceResolvers<ContextType>;
    CustomizableAreaValue?: CustomizableAreaValueResolvers<ContextType>;
    CustomizableDateOption?: CustomizableDateOptionResolvers<ContextType>;
    CustomizableDateValue?: CustomizableDateValueResolvers<ContextType>;
    CustomizableDropDownOption?: CustomizableDropDownOptionResolvers<ContextType>;
    CustomizableDropDownValue?: CustomizableDropDownValueResolvers<ContextType>;
    CustomizableMultipleOption?: CustomizableMultipleOptionResolvers<ContextType>;
    CustomizableMultipleValue?: CustomizableMultipleValueResolvers<ContextType>;
    CustomizableFieldOption?: CustomizableFieldOptionResolvers<ContextType>;
    CustomizableFieldValue?: CustomizableFieldValueResolvers<ContextType>;
    CustomizableFileOption?: CustomizableFileOptionResolvers<ContextType>;
    CustomizableFileValue?: CustomizableFileValueResolvers<ContextType>;
    ProductVideo?: ProductVideoResolvers<ContextType>;
    CustomizableProductInterface?: CustomizableProductInterfaceResolvers<ContextType>;
    CustomizableRadioOption?: CustomizableRadioOptionResolvers<ContextType>;
    CustomizableRadioValue?: CustomizableRadioValueResolvers<ContextType>;
    CustomizableCheckboxOption?: CustomizableCheckboxOptionResolvers<ContextType>;
    CustomizableCheckboxValue?: CustomizableCheckboxValueResolvers<ContextType>;
    VirtualProduct?: VirtualProductResolvers<ContextType>;
    SimpleProduct?: SimpleProductResolvers<ContextType>;
    LayerFilterItem?: LayerFilterItemResolvers<ContextType>;
    SimpleWishlistItem?: SimpleWishlistItemResolvers<ContextType>;
    VirtualWishlistItem?: VirtualWishlistItemResolvers<ContextType>;
    SimpleCartItem?: SimpleCartItemResolvers<ContextType>;
    VirtualCartItem?: VirtualCartItemResolvers<ContextType>;
    DownloadableCartItem?: DownloadableCartItemResolvers<ContextType>;
    DownloadableProductLinks?: DownloadableProductLinksResolvers<ContextType>;
    DownloadableProductSamples?: DownloadableProductSamplesResolvers<ContextType>;
    DownloadableProduct?: DownloadableProductResolvers<ContextType>;
    DownloadableOrderItem?: DownloadableOrderItemResolvers<ContextType>;
    DownloadableItemsLinks?: DownloadableItemsLinksResolvers<ContextType>;
    DownloadableInvoiceItem?: DownloadableInvoiceItemResolvers<ContextType>;
    DownloadableCreditMemoItem?: DownloadableCreditMemoItemResolvers<ContextType>;
    DownloadableWishlistItem?: DownloadableWishlistItemResolvers<ContextType>;
    BundleCartItem?: BundleCartItemResolvers<ContextType>;
    SelectedBundleOption?: SelectedBundleOptionResolvers<ContextType>;
    SelectedBundleOptionValue?: SelectedBundleOptionValueResolvers<ContextType>;
    BundleItem?: BundleItemResolvers<ContextType>;
    BundleItemOption?: BundleItemOptionResolvers<ContextType>;
    BundleProduct?: BundleProductResolvers<ContextType>;
    BundleOrderItem?: BundleOrderItemResolvers<ContextType>;
    ItemSelectedBundleOption?: ItemSelectedBundleOptionResolvers<ContextType>;
    ItemSelectedBundleOptionValue?: ItemSelectedBundleOptionValueResolvers<ContextType>;
    BundleInvoiceItem?: BundleInvoiceItemResolvers<ContextType>;
    BundleShipmentItem?: BundleShipmentItemResolvers<ContextType>;
    BundleCreditMemoItem?: BundleCreditMemoItemResolvers<ContextType>;
    BundleWishlistItem?: BundleWishlistItemResolvers<ContextType>;
    ConfigurableCartItem?: ConfigurableCartItemResolvers<ContextType>;
    SelectedConfigurableOption?: SelectedConfigurableOptionResolvers<ContextType>;
    SalesItemInterface?: SalesItemInterfaceResolvers<ContextType>;
    GroupedProduct?: GroupedProductResolvers<ContextType>;
    GroupedProductItem?: GroupedProductItemResolvers<ContextType>;
    GroupedProductWishlistItem?: GroupedProductWishlistItemResolvers<ContextType>;
    PaypalExpressToken?: PaypalExpressTokenResolvers<ContextType>;
    PayflowProToken?: PayflowProTokenResolvers<ContextType>;
    ConfigurableProduct?: ConfigurableProductResolvers<ContextType>;
    ConfigurableProductOptions?: ConfigurableProductOptionsResolvers<ContextType>;
    ConfigurableProductOptionsValues?: ConfigurableProductOptionsValuesResolvers<ContextType>;
    SwatchDataInterface?: SwatchDataInterfaceResolvers<ContextType>;
    ConfigurableProductOptionsSelection?: ConfigurableProductOptionsSelectionResolvers<ContextType>;
    ConfigurableOptionAvailableForSelection?: ConfigurableOptionAvailableForSelectionResolvers<ContextType>;
    ConfigurableVariant?: ConfigurableVariantResolvers<ContextType>;
    ConfigurableAttributeOption?: ConfigurableAttributeOptionResolvers<ContextType>;
    ConfigurableWishlistItem?: ConfigurableWishlistItemResolvers<ContextType>;
    OrderItem?: OrderItemResolvers<ContextType>;
    InvoiceItem?: InvoiceItemResolvers<ContextType>;
    ShipmentItem?: ShipmentItemResolvers<ContextType>;
    CreditMemoItem?: CreditMemoItemResolvers<ContextType>;
    SwatchLayerFilterItemInterface?: SwatchLayerFilterItemInterfaceResolvers<ContextType>;
    SwatchData?: SwatchDataResolvers<ContextType>;
    SwatchLayerFilterItem?: SwatchLayerFilterItemResolvers<ContextType>;
    ImageSwatchData?: ImageSwatchDataResolvers<ContextType>;
    TextSwatchData?: TextSwatchDataResolvers<ContextType>;
    ColorSwatchData?: ColorSwatchDataResolvers<ContextType>;
}>;
import { MeshContext as BaseMeshContext, MeshInstance } from '@graphql-mesh/runtime';
import { SelectionSetParamOrFactory } from '@graphql-mesh/types';
export declare type QueryGraphcmsSdk = {
    productpages: (params: {
        root?: any;
        args: QueryproductpagesArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['productpages']>;
    footer: (params: {
        root?: any;
        args: QueryfooterArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['footer']>;
    usps: (params: {
        root?: any;
        args: QueryuspsArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['usps']>;
    pages: (params: {
        root?: any;
        args: QuerypagesArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['pages']>;
    pagesConnection: (params: {
        root?: any;
        args: QuerypagesConnectionArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['pagesConnection']>;
};
export declare type MutationGraphcmsSdk = {};
export declare type SubscriptionGraphcmsSdk = {};
export declare type QueryM2Sdk = {
    availableStores: (params: {
        root?: any;
        args: QueryavailableStoresArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['availableStores']>;
    cart: (params: {
        root?: any;
        args: QuerycartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['cart']>;
    categories: (params: {
        root?: any;
        args: QuerycategoriesArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['categories']>;
    category: (params: {
        root?: any;
        args: QuerycategoryArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['category']>;
    categoryList: (params: {
        root?: any;
        args: QuerycategoryListArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['categoryList']>;
    checkoutAgreements: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['checkoutAgreements']>;
    cmsBlocks: (params: {
        root?: any;
        args: QuerycmsBlocksArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['cmsBlocks']>;
    cmsPage: (params: {
        root?: any;
        args: QuerycmsPageArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['cmsPage']>;
    compareList: (params: {
        root?: any;
        args: QuerycompareListArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['compareList']>;
    countries: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['countries']>;
    country: (params: {
        root?: any;
        args: QuerycountryArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['country']>;
    currency: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['currency']>;
    customAttributeMetadata: (params: {
        root?: any;
        args: QuerycustomAttributeMetadataArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['customAttributeMetadata']>;
    customer: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['customer']>;
    customerCart: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['customerCart']>;
    customerDownloadableProducts: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['customerDownloadableProducts']>;
    customerOrders: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['customerOrders']>;
    customerPaymentTokens: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['customerPaymentTokens']>;
    getHostedProUrl: (params: {
        root?: any;
        args: QuerygetHostedProUrlArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getHostedProUrl']>;
    getPayflowLinkToken: (params: {
        root?: any;
        args: QuerygetPayflowLinkTokenArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['getPayflowLinkToken']>;
    isEmailAvailable: (params: {
        root?: any;
        args: QueryisEmailAvailableArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['isEmailAvailable']>;
    mollieCustomerOrder: (params: {
        root?: any;
        args: QuerymollieCustomerOrderArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['mollieCustomerOrder']>;
    molliePaymentMethods: (params: {
        root?: any;
        args: QuerymolliePaymentMethodsArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['molliePaymentMethods']>;
    pickupLocations: (params: {
        root?: any;
        args: QuerypickupLocationsArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['pickupLocations']>;
    productReviewRatingsMetadata: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['productReviewRatingsMetadata']>;
    products: (params: {
        root?: any;
        args: QueryproductsArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['products']>;
    storeConfig: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['storeConfig']>;
    urlResolver: (params: {
        root?: any;
        args: QueryurlResolverArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['urlResolver']>;
    wishlist: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Query['wishlist']>;
};
export declare type MutationM2Sdk = {
    addBundleProductsToCart: (params: {
        root?: any;
        args: MutationaddBundleProductsToCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['addBundleProductsToCart']>;
    addConfigurableProductsToCart: (params: {
        root?: any;
        args: MutationaddConfigurableProductsToCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['addConfigurableProductsToCart']>;
    addDownloadableProductsToCart: (params: {
        root?: any;
        args: MutationaddDownloadableProductsToCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['addDownloadableProductsToCart']>;
    addProductsToCart: (params: {
        root?: any;
        args: MutationaddProductsToCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['addProductsToCart']>;
    addProductsToCompareList: (params: {
        root?: any;
        args: MutationaddProductsToCompareListArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['addProductsToCompareList']>;
    addProductsToWishlist: (params: {
        root?: any;
        args: MutationaddProductsToWishlistArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['addProductsToWishlist']>;
    addSimpleProductsToCart: (params: {
        root?: any;
        args: MutationaddSimpleProductsToCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['addSimpleProductsToCart']>;
    addVirtualProductsToCart: (params: {
        root?: any;
        args: MutationaddVirtualProductsToCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['addVirtualProductsToCart']>;
    applyCouponToCart: (params: {
        root?: any;
        args: MutationapplyCouponToCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['applyCouponToCart']>;
    assignCompareListToCustomer: (params: {
        root?: any;
        args: MutationassignCompareListToCustomerArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['assignCompareListToCustomer']>;
    changeCustomerPassword: (params: {
        root?: any;
        args: MutationchangeCustomerPasswordArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['changeCustomerPassword']>;
    createBraintreeClientToken: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['createBraintreeClientToken']>;
    createCompareList: (params: {
        root?: any;
        args: MutationcreateCompareListArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['createCompareList']>;
    createCustomer: (params: {
        root?: any;
        args: MutationcreateCustomerArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['createCustomer']>;
    createCustomerAddress: (params: {
        root?: any;
        args: MutationcreateCustomerAddressArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['createCustomerAddress']>;
    createCustomerV2: (params: {
        root?: any;
        args: MutationcreateCustomerV2Args;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['createCustomerV2']>;
    createEmptyCart: (params: {
        root?: any;
        args: MutationcreateEmptyCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['createEmptyCart']>;
    createKlarnaPaymentsSession: (params: {
        root?: any;
        args: MutationcreateKlarnaPaymentsSessionArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['createKlarnaPaymentsSession']>;
    createMollieTransaction: (params: {
        root?: any;
        args: MutationcreateMollieTransactionArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['createMollieTransaction']>;
    createPayflowProToken: (params: {
        root?: any;
        args: MutationcreatePayflowProTokenArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['createPayflowProToken']>;
    createPaypalExpressToken: (params: {
        root?: any;
        args: MutationcreatePaypalExpressTokenArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['createPaypalExpressToken']>;
    createProductReview: (params: {
        root?: any;
        args: MutationcreateProductReviewArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['createProductReview']>;
    deleteCompareList: (params: {
        root?: any;
        args: MutationdeleteCompareListArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteCompareList']>;
    deleteCustomerAddress: (params: {
        root?: any;
        args: MutationdeleteCustomerAddressArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deleteCustomerAddress']>;
    deletePaymentToken: (params: {
        root?: any;
        args: MutationdeletePaymentTokenArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['deletePaymentToken']>;
    generateCustomerToken: (params: {
        root?: any;
        args: MutationgenerateCustomerTokenArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['generateCustomerToken']>;
    generateCustomerTokenAsAdmin: (params: {
        root?: any;
        args: MutationgenerateCustomerTokenAsAdminArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['generateCustomerTokenAsAdmin']>;
    handlePayflowProResponse: (params: {
        root?: any;
        args: MutationhandlePayflowProResponseArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['handlePayflowProResponse']>;
    mergeCarts: (params: {
        root?: any;
        args: MutationmergeCartsArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['mergeCarts']>;
    mollieProcessTransaction: (params: {
        root?: any;
        args: MutationmollieProcessTransactionArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['mollieProcessTransaction']>;
    mollieRestoreCart: (params: {
        root?: any;
        args: MutationmollieRestoreCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['mollieRestoreCart']>;
    placeOrder: (params: {
        root?: any;
        args: MutationplaceOrderArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['placeOrder']>;
    removeCouponFromCart: (params: {
        root?: any;
        args: MutationremoveCouponFromCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['removeCouponFromCart']>;
    removeItemFromCart: (params: {
        root?: any;
        args: MutationremoveItemFromCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['removeItemFromCart']>;
    removeProductsFromCompareList: (params: {
        root?: any;
        args: MutationremoveProductsFromCompareListArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['removeProductsFromCompareList']>;
    removeProductsFromWishlist: (params: {
        root?: any;
        args: MutationremoveProductsFromWishlistArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['removeProductsFromWishlist']>;
    reorderItems: (params: {
        root?: any;
        args: MutationreorderItemsArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['reorderItems']>;
    requestPasswordResetEmail: (params: {
        root?: any;
        args: MutationrequestPasswordResetEmailArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['requestPasswordResetEmail']>;
    resetPassword: (params: {
        root?: any;
        args: MutationresetPasswordArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['resetPassword']>;
    revokeCustomerToken: (params: {
        root?: any;
        args?: {};
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['revokeCustomerToken']>;
    sendEmailToFriend: (params: {
        root?: any;
        args: MutationsendEmailToFriendArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['sendEmailToFriend']>;
    setBillingAddressOnCart: (params: {
        root?: any;
        args: MutationsetBillingAddressOnCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['setBillingAddressOnCart']>;
    setGuestEmailOnCart: (params: {
        root?: any;
        args: MutationsetGuestEmailOnCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['setGuestEmailOnCart']>;
    setPaymentMethodAndPlaceOrder: (params: {
        root?: any;
        args: MutationsetPaymentMethodAndPlaceOrderArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['setPaymentMethodAndPlaceOrder']>;
    setPaymentMethodOnCart: (params: {
        root?: any;
        args: MutationsetPaymentMethodOnCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['setPaymentMethodOnCart']>;
    setShippingAddressesOnCart: (params: {
        root?: any;
        args: MutationsetShippingAddressesOnCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['setShippingAddressesOnCart']>;
    setShippingMethodsOnCart: (params: {
        root?: any;
        args: MutationsetShippingMethodsOnCartArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['setShippingMethodsOnCart']>;
    subscribeEmailToNewsletter: (params: {
        root?: any;
        args: MutationsubscribeEmailToNewsletterArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['subscribeEmailToNewsletter']>;
    updateCartItems: (params: {
        root?: any;
        args: MutationupdateCartItemsArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['updateCartItems']>;
    updateCustomer: (params: {
        root?: any;
        args: MutationupdateCustomerArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['updateCustomer']>;
    updateCustomerAddress: (params: {
        root?: any;
        args: MutationupdateCustomerAddressArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['updateCustomerAddress']>;
    updateCustomerEmail: (params: {
        root?: any;
        args: MutationupdateCustomerEmailArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['updateCustomerEmail']>;
    updateCustomerV2: (params: {
        root?: any;
        args: MutationupdateCustomerV2Args;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['updateCustomerV2']>;
    updateProductsInWishlist: (params: {
        root?: any;
        args: MutationupdateProductsInWishlistArgs;
        context: MeshContext;
        info: GraphQLResolveInfo;
        selectionSet?: SelectionSetParamOrFactory;
    }) => Promise<Mutation['updateProductsInWishlist']>;
};
export declare type SubscriptionM2Sdk = {};
export declare type GraphcmsContext = {
    ["graphcms"]: {
        Query: QueryGraphcmsSdk;
        Mutation: MutationGraphcmsSdk;
        Subscription: SubscriptionGraphcmsSdk;
    };
};
export declare type M2Context = {
    ["m2"]: {
        Query: QueryM2Sdk;
        Mutation: MutationM2Sdk;
        Subscription: SubscriptionM2Sdk;
    };
};
export declare type MeshContext = GraphcmsContext & M2Context & BaseMeshContext;
import { GetMeshOptions } from '@graphql-mesh/runtime';
import { YamlConfig } from '@graphql-mesh/types';
export declare const rawConfig: YamlConfig.Config;
export declare function getMeshOptions(): GetMeshOptions;
export declare const documentsInSDL: any[];
export declare function getBuiltMesh(): Promise<MeshInstance>;
export declare function getMeshSDK(): Promise<{}>;
export declare type Requester<C = {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>;
export declare function getSdk<C>(requester: Requester<C>): {};
export declare type Sdk = ReturnType<typeof getSdk>;
