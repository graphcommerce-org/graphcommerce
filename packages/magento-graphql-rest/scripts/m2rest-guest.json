{
  "openapi": "3.0.0",
  "info": {
    "version": "2.4.7",
    "title": "Commerce Guest REST endpoints - All inclusive",
    "description": "The schemas documented here are autogenerated from an instance of Adobe Commerce with B2B. Each schema represents a specific user role (Admin, Customer, and Guest) and determines which endpoints are accessible. Use the version switcher to select an Adobe Commerce version and corresponding API.\n\nYou can also <a href=\"https://developer.adobe.com/commerce/webapi/rest/quick-reference/generate-local\" target=\"_blank\">generate a local API reference</a> based on your own Adobe Commerce configuration, which allows you to see API documentation for your specific Adobe Commerce modules, third-party modules, and extension attributes.\n"
  },
  "tags": [
    {
      "name": "applepay/auth"
    },
    {
      "name": "carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}"
    },
    {
      "name": "carts/guest-carts/{cartId}/giftCards"
    },
    {
      "name": "carts/guest-carts/{cartId}/giftCards/{giftCardCode}"
    },
    {
      "name": "customers"
    },
    {
      "name": "customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}"
    },
    {
      "name": "customers/isEmailAvailable"
    },
    {
      "name": "customers/password"
    },
    {
      "name": "customers/resetPassword"
    },
    {
      "name": "directory/countries"
    },
    {
      "name": "directory/countries/{countryId}"
    },
    {
      "name": "directory/currency"
    },
    {
      "name": "guest-carts"
    },
    {
      "name": "guest-carts/{cartId}"
    },
    {
      "name": "guest-carts/{cartId}/billing-address"
    },
    {
      "name": "guest-carts/{cartId}/collect-totals"
    },
    {
      "name": "guest-carts/{cartId}/coupons"
    },
    {
      "name": "guest-carts/{cartId}/coupons/{couponCode}"
    },
    {
      "name": "guest-carts/{cartId}/estimate-shipping-methods"
    },
    {
      "name": "guest-carts/{cartId}/gift-message"
    },
    {
      "name": "guest-carts/{cartId}/gift-message/{itemId}"
    },
    {
      "name": "guest-carts/{cartId}/items"
    },
    {
      "name": "guest-carts/{cartId}/items/{itemId}"
    },
    {
      "name": "guest-carts/{cartId}/order"
    },
    {
      "name": "guest-carts/{cartId}/payment-information"
    },
    {
      "name": "guest-carts/{cartId}/payment-methods"
    },
    {
      "name": "guest-carts/{cartId}/payment-order"
    },
    {
      "name": "guest-carts/{cartId}/payment-order/{id}"
    },
    {
      "name": "guest-carts/{cartId}/selected-payment-method"
    },
    {
      "name": "guest-carts/{cartId}/set-payment-information"
    },
    {
      "name": "guest-carts/{cartId}/shipping-information"
    },
    {
      "name": "guest-carts/{cartId}/shipping-methods"
    },
    {
      "name": "guest-carts/{cartId}/totals"
    },
    {
      "name": "guest-carts/{cartId}/totals-information"
    },
    {
      "name": "guest-giftregistry/{cartId}/estimate-shipping-methods"
    },
    {
      "name": "integration/admin/token"
    },
    {
      "name": "integration/customer/token"
    },
    {
      "name": "inventory/in-store-pickup/pickup-locations/"
    },
    {
      "name": "payments-config/{location}"
    },
    {
      "name": "payments-config/apple-pay/{location}"
    },
    {
      "name": "payments-config/hosted-fields/{location}"
    },
    {
      "name": "payments-config/smart-buttons/{location}"
    },
    {
      "name": "payments-sdk/{location}"
    },
    {
      "name": "payments-sdk/{location}/{methodCode}"
    },
    {
      "name": "products-render-info"
    },
    {
      "name": "search"
    },
    {
      "name": "tfa/provider/authy/activate"
    },
    {
      "name": "tfa/provider/authy/authenticate"
    },
    {
      "name": "tfa/provider/authy/authenticate-onetouch"
    },
    {
      "name": "tfa/provider/authy/configure"
    },
    {
      "name": "tfa/provider/authy/send-token/{via}"
    },
    {
      "name": "tfa/provider/duo_security/activate"
    },
    {
      "name": "tfa/provider/duo_security/authenticate"
    },
    {
      "name": "tfa/provider/duo_security/configure"
    },
    {
      "name": "tfa/provider/duo_security/get-authentication-data"
    },
    {
      "name": "tfa/provider/google/activate"
    },
    {
      "name": "tfa/provider/google/authenticate"
    },
    {
      "name": "tfa/provider/google/configure"
    },
    {
      "name": "tfa/provider/u2fkey/activate"
    },
    {
      "name": "tfa/provider/u2fkey/authentication-challenge"
    },
    {
      "name": "tfa/provider/u2fkey/configure"
    },
    {
      "name": "tfa/provider/u2fkey/verify"
    },
    {
      "name": "tfa/tfat-providers-to-activate"
    },
    {
      "name": "tfa/tfat-user-providers"
    }
  ],
  "paths": {
    "/V1/applepay/auth": {
      "get": {
        "tags": ["applepay/auth"],
        "description": "Returns details required to be able to submit a payment with apple pay.",
        "operationId": "GetV1ApplepayAuth",
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/pay-pal-braintree-data-auth-data-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/pay-pal-braintree-data-auth-data-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "applepay/auth"
      }
    },
    "/V1/carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}": {
      "get": {
        "tags": ["carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}"],
        "description": "Check gift card balance if added to the cart.",
        "operationId": "GetV1CartsGuestcartsCartIdCheckGiftCardGiftCardCode",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "giftCardCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "number"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "number"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}"
      }
    },
    "/V1/carts/guest-carts/{cartId}/giftCards": {
      "post": {
        "tags": ["carts/guest-carts/{cartId}/giftCards"],
        "description": "Add gift card to the cart.",
        "operationId": "PostV1CartsGuestcartsCartIdGiftCards",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["giftCardAccountData"],
                "properties": {
                  "giftCardAccountData": {
                    "$ref": "#/components/schemas/gift-card-account-data-gift-card-account-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["giftCardAccountData"],
                "properties": {
                  "giftCardAccountData": {
                    "$ref": "#/components/schemas/gift-card-account-data-gift-card-account-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "carts/guest-carts/{cartId}/giftCards"
      }
    },
    "/V1/carts/guest-carts/{cartId}/giftCards/{giftCardCode}": {
      "delete": {
        "tags": ["carts/guest-carts/{cartId}/giftCards/{giftCardCode}"],
        "description": "Remove GiftCard Account entity.",
        "operationId": "DeleteV1CartsGuestcartsCartIdGiftCardsGiftCardCode",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "giftCardCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "carts/guest-carts/{cartId}/giftCards/{giftCardCode}"
      }
    },
    "/V1/customers": {
      "post": {
        "tags": ["customers"],
        "description": "Create customer account. Perform necessary business operations like sending email.",
        "operationId": "PostV1Customers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["customer"],
                "properties": {
                  "customer": {
                    "$ref": "#/components/schemas/customer-data-customer-interface"
                  },
                  "password": {
                    "type": "string"
                  },
                  "redirectUrl": {
                    "type": "string"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["customer"],
                "properties": {
                  "customer": {
                    "$ref": "#/components/schemas/customer-data-customer-interface"
                  },
                  "password": {
                    "type": "string"
                  },
                  "redirectUrl": {
                    "type": "string"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/customer-data-customer-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/customer-data-customer-interface"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "customers"
      }
    },
    "/V1/customers/isEmailAvailable": {
      "post": {
        "tags": ["customers/isEmailAvailable"],
        "description": "Check if given email is associated with a customer account in given website.",
        "operationId": "PostV1CustomersIsEmailAvailable",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["customerEmail"],
                "properties": {
                  "customerEmail": {
                    "type": "string"
                  },
                  "websiteId": {
                    "type": "integer",
                    "description": "If not set, will use the current websiteId"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["customerEmail"],
                "properties": {
                  "customerEmail": {
                    "type": "string"
                  },
                  "websiteId": {
                    "type": "integer",
                    "description": "If not set, will use the current websiteId"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "customers/isEmailAvailable"
      }
    },
    "/V1/customers/password": {
      "put": {
        "tags": ["customers/password"],
        "description": "Send an email to the customer with a password reset link.",
        "operationId": "PutV1CustomersPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["email", "template"],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "template": {
                    "type": "string"
                  },
                  "websiteId": {
                    "type": "integer"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["email", "template"],
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "template": {
                    "type": "string"
                  },
                  "websiteId": {
                    "type": "integer"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "description": "true on success"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean",
                  "description": "true on success"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "customers/password"
      }
    },
    "/V1/customers/resetPassword": {
      "post": {
        "tags": ["customers/resetPassword"],
        "description": "Reset customer password.",
        "operationId": "PostV1CustomersResetPassword",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["email", "resetToken", "newPassword"],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "If empty value given then the customer will be matched by the RP token."
                  },
                  "resetToken": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["email", "resetToken", "newPassword"],
                "properties": {
                  "email": {
                    "type": "string",
                    "description": "If empty value given then the customer will be matched by the RP token."
                  },
                  "resetToken": {
                    "type": "string"
                  },
                  "newPassword": {
                    "type": "string"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "description": "true on success"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean",
                  "description": "true on success"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "customers/resetPassword"
      }
    },
    "/V1/customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}": {
      "get": {
        "tags": ["customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}"],
        "description": "Check if password reset token is valid.",
        "operationId": "GetV1CustomersCustomerIdPasswordResetLinkTokenResetPasswordLinkToken",
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "description": "If null is given then a customer will be matched by the RP token.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "resetPasswordLinkToken",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "description": "True if the token is valid"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean",
                  "description": "True if the token is valid"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}"
      }
    },
    "/V1/directory/countries": {
      "get": {
        "tags": ["directory/countries"],
        "description": "Get all countries and regions information for the store.",
        "operationId": "GetV1DirectoryCountries",
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/directory-data-country-information-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/directory-data-country-information-interface"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "directory/countries"
      }
    },
    "/V1/directory/countries/{countryId}": {
      "get": {
        "tags": ["directory/countries/{countryId}"],
        "description": "Get country and region information for the store.",
        "operationId": "GetV1DirectoryCountriesCountryId",
        "parameters": [
          {
            "name": "countryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/directory-data-country-information-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/directory-data-country-information-interface"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "directory/countries/{countryId}"
      }
    },
    "/V1/directory/currency": {
      "get": {
        "tags": ["directory/currency"],
        "description": "Get currency information for the store.",
        "operationId": "GetV1DirectoryCurrency",
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/directory-data-currency-information-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/directory-data-currency-information-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "directory/currency"
      }
    },
    "/V1/guest-carts": {
      "post": {
        "tags": ["guest-carts"],
        "description": "Enable an customer or guest user to create an empty cart and quote for an anonymous customer.",
        "operationId": "PostV1Guestcarts",
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Cart ID."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "description": "Cart ID."
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts"
      }
    },
    "/V1/guest-carts/{cartId}": {
      "get": {
        "tags": ["guest-carts/{cartId}"],
        "description": "Enable a guest user to return information for a specified cart.",
        "operationId": "GetV1GuestcartsCartId",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-cart-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-cart-interface"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}"
      }
    },
    "/V1/guest-carts/{cartId}/billing-address": {
      "get": {
        "tags": ["guest-carts/{cartId}/billing-address"],
        "description": "Return the billing address for a specified quote.",
        "operationId": "GetV1GuestcartsCartIdBillingaddress",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-address-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-address-interface"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/billing-address"
      },
      "post": {
        "tags": ["guest-carts/{cartId}/billing-address"],
        "description": "Assign a specified billing address to a specified cart.",
        "operationId": "PostV1GuestcartsCartIdBillingaddress",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["address"],
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/quote-data-address-interface"
                  },
                  "useForShipping": {
                    "type": "boolean"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["address"],
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/quote-data-address-interface"
                  },
                  "useForShipping": {
                    "type": "boolean"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "Address ID."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer",
                  "description": "Address ID."
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/billing-address"
      }
    },
    "/V1/guest-carts/{cartId}/collect-totals": {
      "put": {
        "tags": ["guest-carts/{cartId}/collect-totals"],
        "description": "Set shipping/billing methods and additional data for cart and collect totals for guest.",
        "operationId": "PutV1GuestcartsCartIdCollecttotals",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["paymentMethod"],
                "properties": {
                  "paymentMethod": {
                    "$ref": "#/components/schemas/quote-data-payment-interface"
                  },
                  "shippingCarrierCode": {
                    "type": "string",
                    "description": "The carrier code."
                  },
                  "shippingMethodCode": {
                    "type": "string",
                    "description": "The shipping method code."
                  },
                  "additionalData": {
                    "$ref": "#/components/schemas/quote-data-totals-additional-data-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["paymentMethod"],
                "properties": {
                  "paymentMethod": {
                    "$ref": "#/components/schemas/quote-data-payment-interface"
                  },
                  "shippingCarrierCode": {
                    "type": "string",
                    "description": "The carrier code."
                  },
                  "shippingMethodCode": {
                    "type": "string",
                    "description": "The shipping method code."
                  },
                  "additionalData": {
                    "$ref": "#/components/schemas/quote-data-totals-additional-data-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-totals-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-totals-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/collect-totals"
      }
    },
    "/V1/guest-carts/{cartId}/coupons": {
      "get": {
        "tags": ["guest-carts/{cartId}/coupons"],
        "description": "Return information for a coupon in a specified cart.",
        "operationId": "GetV1GuestcartsCartIdCoupons",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "The coupon code data."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "description": "The coupon code data."
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/coupons"
      },
      "delete": {
        "tags": ["guest-carts/{cartId}/coupons"],
        "description": "Delete a coupon from a specified cart.",
        "operationId": "DeleteV1GuestcartsCartIdCoupons",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/coupons"
      }
    },
    "/V1/guest-carts/{cartId}/coupons/{couponCode}": {
      "put": {
        "tags": ["guest-carts/{cartId}/coupons/{couponCode}"],
        "description": "Add a coupon by code to a specified cart.",
        "operationId": "PutV1GuestcartsCartIdCouponsCouponCode",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "couponCode",
            "in": "path",
            "required": true,
            "description": "The coupon code data.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/coupons/{couponCode}"
      }
    },
    "/V1/guest-carts/{cartId}/estimate-shipping-methods": {
      "post": {
        "tags": ["guest-carts/{cartId}/estimate-shipping-methods"],
        "description": "Estimate shipping by address and return list of available shipping methods",
        "operationId": "PostV1GuestcartsCartIdEstimateshippingmethods",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["address"],
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/quote-data-address-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["address"],
                "properties": {
                  "address": {
                    "$ref": "#/components/schemas/quote-data-address-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "An array of shipping methods",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-shipping-method-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "description": "An array of shipping methods",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-shipping-method-interface"
                  }
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/estimate-shipping-methods"
      }
    },
    "/V1/guest-carts/{cartId}/gift-message": {
      "get": {
        "tags": ["guest-carts/{cartId}/gift-message"],
        "description": "Return the gift message for a specified order.",
        "operationId": "GetV1GuestcartsCartIdGiftmessage",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The shopping cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gift-message-data-message-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/gift-message-data-message-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/gift-message"
      },
      "post": {
        "tags": ["guest-carts/{cartId}/gift-message"],
        "description": "Set the gift message for an entire order.",
        "operationId": "PostV1GuestcartsCartIdGiftmessage",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1GuestcartsCartIdGiftmessagePostv1guestcartscartidgiftmessagebody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/gift-message"
      }
    },
    "/V1/guest-carts/{cartId}/gift-message/{itemId}": {
      "get": {
        "tags": ["guest-carts/{cartId}/gift-message/{itemId}"],
        "description": "Return the gift message for a specified item in a specified shopping cart.",
        "operationId": "GetV1GuestcartsCartIdGiftmessageItemId",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The shopping cart ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "The item ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/gift-message-data-message-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/gift-message-data-message-interface"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/gift-message/{itemId}"
      },
      "post": {
        "tags": ["guest-carts/{cartId}/gift-message/{itemId}"],
        "description": "Set the gift message for a specified item in a specified shopping cart.",
        "operationId": "PostV1GuestcartsCartIdGiftmessageItemId",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "The item ID.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1GuestcartsCartIdGiftmessagePostv1guestcartscartidgiftmessagebody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/gift-message/{itemId}"
      }
    },
    "/V1/guest-carts/{cartId}/items": {
      "get": {
        "tags": ["guest-carts/{cartId}/items"],
        "description": "List items that are assigned to a specified cart.",
        "operationId": "GetV1GuestcartsCartIdItems",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array of items.",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-cart-item-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "description": "Array of items.",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-cart-item-interface"
                  }
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/items"
      },
      "post": {
        "tags": ["guest-carts/{cartId}/items"],
        "description": "Add/update the specified cart item.",
        "operationId": "PostV1GuestcartsCartIdItems",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1GuestcartsCartIdItemsPostv1guestcartscartiditemsbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-cart-item-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-cart-item-interface"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/items"
      }
    },
    "/V1/guest-carts/{cartId}/items/{itemId}": {
      "put": {
        "tags": ["guest-carts/{cartId}/items/{itemId}"],
        "description": "Add/update the specified cart item.",
        "operationId": "PutV1GuestcartsCartIdItemsItemId",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1GuestcartsCartIdItemsPostv1guestcartscartiditemsbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-cart-item-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-cart-item-interface"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/items/{itemId}"
      },
      "delete": {
        "tags": ["guest-carts/{cartId}/items/{itemId}"],
        "description": "Remove the specified item from the specified cart.",
        "operationId": "DeleteV1GuestcartsCartIdItemsItemId",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "description": "The item ID of the item to be removed.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/items/{itemId}"
      }
    },
    "/V1/guest-carts/{cartId}/order": {
      "put": {
        "tags": ["guest-carts/{cartId}/order"],
        "description": "Place an order for a specified cart.",
        "operationId": "PutV1GuestcartsCartIdOrder",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "paymentMethod": {
                    "$ref": "#/components/schemas/quote-data-payment-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "properties": {
                  "paymentMethod": {
                    "$ref": "#/components/schemas/quote-data-payment-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/order"
      }
    },
    "/V1/guest-carts/{cartId}/payment-information": {
      "post": {
        "tags": ["guest-carts/{cartId}/payment-information"],
        "description": "Set payment information and place order for a specified cart.",
        "operationId": "PostV1GuestcartsCartIdPaymentinformation",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1GuestcartsCartIdPaymentinformationPostv1guestcartscartidpaymentinformationbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/payment-information"
      },
      "get": {
        "tags": ["guest-carts/{cartId}/payment-information"],
        "description": "Get payment information",
        "operationId": "GetV1GuestcartsCartIdPaymentinformation",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkout-data-payment-details-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/checkout-data-payment-details-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/payment-information"
      }
    },
    "/V1/guest-carts/{cartId}/payment-methods": {
      "get": {
        "tags": ["guest-carts/{cartId}/payment-methods"],
        "description": "List available payment methods for a specified shopping cart. This call returns an array of objects, but detailed information about each object’s attributes might not be included.  See https://developer.adobe.com/commerce/webapi/rest/attributes#GuestPaymentMethodManagementInterface to determine which call to use to get detailed information about all attributes for an object.",
        "operationId": "GetV1GuestcartsCartIdPaymentmethods",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "Array of payment methods.",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-payment-method-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "description": "Array of payment methods.",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-payment-method-interface"
                  }
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/payment-methods"
      }
    },
    "/V1/guest-carts/{cartId}/payment-order": {
      "post": {
        "tags": ["guest-carts/{cartId}/payment-order"],
        "description": "Create a payment order for guest customer",
        "operationId": "PostV1GuestcartsCartIdPaymentorder",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["methodCode", "paymentSource", "location"],
                "properties": {
                  "methodCode": {
                    "type": "string"
                  },
                  "paymentSource": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "vaultIntent": {
                    "type": "boolean"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["methodCode", "paymentSource", "location"],
                "properties": {
                  "methodCode": {
                    "type": "string"
                  },
                  "paymentSource": {
                    "type": "string"
                  },
                  "location": {
                    "type": "string"
                  },
                  "vaultIntent": {
                    "type": "boolean"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-order-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-order-interface"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/payment-order"
      }
    },
    "/V1/guest-carts/{cartId}/payment-order/{id}": {
      "get": {
        "tags": ["guest-carts/{cartId}/payment-order/{id}"],
        "description": "Get payment order for guest customer",
        "operationId": "GetV1GuestcartsCartIdPaymentorderId",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-order-details-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-order-details-interface"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/payment-order/{id}"
      },
      "post": {
        "tags": ["guest-carts/{cartId}/payment-order/{id}"],
        "description": "Sync payment order for guest customer",
        "operationId": "PostV1GuestcartsCartIdPaymentorderId",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "boolean"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/payment-order/{id}"
      }
    },
    "/V1/guest-carts/{cartId}/selected-payment-method": {
      "get": {
        "tags": ["guest-carts/{cartId}/selected-payment-method"],
        "description": "Return the payment method for a specified shopping cart.",
        "operationId": "GetV1GuestcartsCartIdSelectedpaymentmethod",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-payment-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-payment-interface"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/selected-payment-method"
      },
      "put": {
        "tags": ["guest-carts/{cartId}/selected-payment-method"],
        "description": "Add a specified payment method to a specified shopping cart.",
        "operationId": "PutV1GuestcartsCartIdSelectedpaymentmethod",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["method"],
                "properties": {
                  "method": {
                    "$ref": "#/components/schemas/quote-data-payment-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["method"],
                "properties": {
                  "method": {
                    "$ref": "#/components/schemas/quote-data-payment-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "Payment method ID."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer",
                  "description": "Payment method ID."
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/selected-payment-method"
      }
    },
    "/V1/guest-carts/{cartId}/set-payment-information": {
      "post": {
        "tags": ["guest-carts/{cartId}/set-payment-information"],
        "description": "Set payment information for a specified cart.",
        "operationId": "PostV1GuestcartsCartIdSetpaymentinformation",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1GuestcartsCartIdPaymentinformationPostv1guestcartscartidpaymentinformationbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              },
              "application/xml": {
                "schema": {
                  "type": "integer",
                  "description": "Order ID."
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/set-payment-information"
      }
    },
    "/V1/guest-carts/{cartId}/shipping-information": {
      "post": {
        "tags": ["guest-carts/{cartId}/shipping-information"],
        "description": "",
        "operationId": "PostV1GuestcartsCartIdShippinginformation",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["addressInformation"],
                "properties": {
                  "addressInformation": {
                    "$ref": "#/components/schemas/checkout-data-shipping-information-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["addressInformation"],
                "properties": {
                  "addressInformation": {
                    "$ref": "#/components/schemas/checkout-data-shipping-information-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/checkout-data-payment-details-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/checkout-data-payment-details-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/shipping-information"
      }
    },
    "/V1/guest-carts/{cartId}/shipping-methods": {
      "get": {
        "tags": ["guest-carts/{cartId}/shipping-methods"],
        "description": "List applicable shipping methods for a specified quote.",
        "operationId": "GetV1GuestcartsCartIdShippingmethods",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The shopping cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "An array of shipping methods.",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-shipping-method-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "description": "An array of shipping methods.",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-shipping-method-interface"
                  }
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/shipping-methods"
      }
    },
    "/V1/guest-carts/{cartId}/totals": {
      "get": {
        "tags": ["guest-carts/{cartId}/totals"],
        "description": "Return quote totals data for a specified cart.",
        "operationId": "GetV1GuestcartsCartIdTotals",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-totals-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-totals-interface"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/totals"
      }
    },
    "/V1/guest-carts/{cartId}/totals-information": {
      "post": {
        "tags": ["guest-carts/{cartId}/totals-information"],
        "description": "Calculate quote totals based on address and shipping method.",
        "operationId": "PostV1GuestcartsCartIdTotalsinformation",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["addressInformation"],
                "properties": {
                  "addressInformation": {
                    "$ref": "#/components/schemas/checkout-data-totals-information-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["addressInformation"],
                "properties": {
                  "addressInformation": {
                    "$ref": "#/components/schemas/checkout-data-totals-information-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-totals-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/quote-data-totals-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-carts/{cartId}/totals-information"
      }
    },
    "/V1/guest-giftregistry/{cartId}/estimate-shipping-methods": {
      "post": {
        "tags": ["guest-giftregistry/{cartId}/estimate-shipping-methods"],
        "description": "Estimate shipping",
        "operationId": "PostV1GuestgiftregistryCartIdEstimateshippingmethods",
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "description": "The shopping cart ID.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["registryId"],
                "properties": {
                  "registryId": {
                    "type": "integer",
                    "description": "The estimate registry id"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["registryId"],
                "properties": {
                  "registryId": {
                    "type": "integer",
                    "description": "The estimate registry id"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "description": "An array of shipping methods.",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-shipping-method-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "description": "An array of shipping methods.",
                  "items": {
                    "$ref": "#/components/schemas/quote-data-shipping-method-interface"
                  }
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "guest-giftregistry/{cartId}/estimate-shipping-methods"
      }
    },
    "/V1/integration/admin/token": {
      "post": {
        "tags": ["integration/admin/token"],
        "description": "Create access token for admin given the admin credentials.",
        "operationId": "PostV1IntegrationAdminToken",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1IntegrationAdminTokenPostv1integrationadmintokenbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Token created"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "description": "Token created"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "integration/admin/token"
      }
    },
    "/V1/integration/customer/token": {
      "post": {
        "tags": ["integration/customer/token"],
        "description": "Create access token for admin given the customer credentials.",
        "operationId": "PostV1IntegrationCustomerToken",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1IntegrationAdminTokenPostv1integrationadmintokenbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Token created"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "description": "Token created"
                }
              }
            }
          },
          "400": {
            "description": "400 Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "integration/customer/token"
      }
    },
    "/V1/inventory/in-store-pickup/pickup-locations/": {
      "get": {
        "tags": ["inventory/in-store-pickup/pickup-locations/"],
        "description": "Get Pickup Locations according to the results of filtration by Search Request.",
        "operationId": "GetV1InventoryInstorepickupPickuplocations",
        "parameters": [
          {
            "name": "searchRequest[area][radius]",
            "in": "query",
            "description": "Search radius in KM.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "searchRequest[area][searchTerm]",
            "in": "query",
            "description": "Search term string.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][country][value]",
            "in": "query",
            "description": "Value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][country][conditionType]",
            "in": "query",
            "description": "Condition Type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][postcode][value]",
            "in": "query",
            "description": "Value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][postcode][conditionType]",
            "in": "query",
            "description": "Condition Type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][region][value]",
            "in": "query",
            "description": "Value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][region][conditionType]",
            "in": "query",
            "description": "Condition Type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][regionId][value]",
            "in": "query",
            "description": "Value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][regionId][conditionType]",
            "in": "query",
            "description": "Condition Type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][city][value]",
            "in": "query",
            "description": "Value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][city][conditionType]",
            "in": "query",
            "description": "Condition Type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][street][value]",
            "in": "query",
            "description": "Value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][street][conditionType]",
            "in": "query",
            "description": "Condition Type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][name][value]",
            "in": "query",
            "description": "Value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][name][conditionType]",
            "in": "query",
            "description": "Condition Type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][pickupLocationCode][value]",
            "in": "query",
            "description": "Value.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[filters][pickupLocationCode][conditionType]",
            "in": "query",
            "description": "Condition Type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[pageSize]",
            "in": "query",
            "description": "Page size.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "searchRequest[currentPage]",
            "in": "query",
            "description": "Current page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "searchRequest[scopeType]",
            "in": "query",
            "description": "Sales Channel Type.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[scopeCode]",
            "in": "query",
            "description": "Sales Channel code.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[sort][0][field]",
            "in": "query",
            "description": "Sorting field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[sort][0][direction]",
            "in": "query",
            "description": "Sorting direction.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchRequest[extensionAttributes][productsInfo][0][sku]",
            "in": "query",
            "description": "Product SKU.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-result-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-result-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "inventory/in-store-pickup/pickup-locations/"
      }
    },
    "/V1/payments-config/apple-pay/{location}": {
      "get": {
        "tags": ["payments-config/apple-pay/{location}"],
        "description": "Get Apple Pay Config.",
        "operationId": "GetV1PaymentsconfigApplepayLocation",
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "required": true,
            "description": "sdk location.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-apple-pay-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-apple-pay-interface"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "payments-config/apple-pay/{location}"
      }
    },
    "/V1/payments-config/hosted-fields/{location}": {
      "get": {
        "tags": ["payments-config/hosted-fields/{location}"],
        "description": "Get Hosted Fields Config.",
        "operationId": "GetV1PaymentsconfigHostedfieldsLocation",
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "required": true,
            "description": "sdk location.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-hosted-fields-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-hosted-fields-interface"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "payments-config/hosted-fields/{location}"
      }
    },
    "/V1/payments-config/smart-buttons/{location}": {
      "get": {
        "tags": ["payments-config/smart-buttons/{location}"],
        "description": "Get Smart Buttons Config.",
        "operationId": "GetV1PaymentsconfigSmartbuttonsLocation",
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "required": true,
            "description": "sdk location.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-smart-buttons-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-smart-buttons-interface"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "payments-config/smart-buttons/{location}"
      }
    },
    "/V1/payments-config/{location}": {
      "get": {
        "tags": ["payments-config/{location}"],
        "description": "Get Config.",
        "operationId": "GetV1PaymentsconfigLocation",
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "required": true,
            "description": "sdk location.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-payment-config-response-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-payment-config-response-interface"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "payments-config/{location}"
      }
    },
    "/V1/payments-sdk/{location}": {
      "get": {
        "tags": ["payments-sdk/{location}"],
        "description": "Get payment sdk url by location",
        "operationId": "GetV1PaymentssdkLocation",
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/payment-services-paypal-data-payment-sdk-params-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/payment-services-paypal-data-payment-sdk-params-interface"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "payments-sdk/{location}"
      }
    },
    "/V1/payments-sdk/{location}/{methodCode}": {
      "get": {
        "tags": ["payments-sdk/{location}/{methodCode}"],
        "description": "Get payment sdk url by location and methodCode",
        "operationId": "GetV1PaymentssdkLocationMethodCode",
        "parameters": [
          {
            "name": "location",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "methodCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-sdk-params-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/payment-services-paypal-data-payment-sdk-params-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "payments-sdk/{location}/{methodCode}"
      }
    },
    "/V1/products-render-info": {
      "get": {
        "tags": ["products-render-info"],
        "description": "Collect and retrieve the list of product render info. This info contains raw prices and formatted prices, product name, stock status, store_id, etc.",
        "operationId": "GetV1Productsrenderinfo",
        "parameters": [
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "description": "Field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "description": "Value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "description": "Condition type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "description": "Sorting field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "description": "Sorting direction.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "description": "Page size.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "description": "Current page.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "storeId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "currencyCode",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/catalog-data-product-render-search-results-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/catalog-data-product-render-search-results-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "products-render-info"
      }
    },
    "/V1/search": {
      "get": {
        "tags": ["search"],
        "description": "Make Full Text Search and return found Documents",
        "operationId": "GetV1Search",
        "parameters": [
          {
            "name": "searchCriteria[requestName]",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][field]",
            "in": "query",
            "description": "Field",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][value]",
            "in": "query",
            "description": "Value",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[filterGroups][0][filters][0][conditionType]",
            "in": "query",
            "description": "Condition type",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[sortOrders][0][field]",
            "in": "query",
            "description": "Sorting field.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[sortOrders][0][direction]",
            "in": "query",
            "description": "Sorting direction.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "searchCriteria[pageSize]",
            "in": "query",
            "description": "Page size.",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "searchCriteria[currentPage]",
            "in": "query",
            "description": "Current page.",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/framework-search-search-result-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/framework-search-search-result-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "search"
      }
    },
    "/V1/tfa/provider/authy/activate": {
      "post": {
        "tags": ["tfa/provider/authy/activate"],
        "description": "Activate the provider and get an admin token",
        "operationId": "PostV1TfaProviderAuthyActivate",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1TfaProviderAuthyActivatePostv1tfaproviderauthyactivatebody"
        },
        "responses": {
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/authy/activate"
      }
    },
    "/V1/tfa/provider/authy/authenticate": {
      "post": {
        "tags": ["tfa/provider/authy/authenticate"],
        "description": "Get an admin token using authy 2fa",
        "operationId": "PostV1TfaProviderAuthyAuthenticate",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1TfaProviderAuthyAuthenticatePostv1tfaproviderauthyauthenticatebody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "$otp"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string",
                  "description": "$otp"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/authy/authenticate"
      }
    },
    "/V1/tfa/provider/authy/authenticate-onetouch": {
      "post": {
        "tags": ["tfa/provider/authy/authenticate-onetouch"],
        "description": "Authenticate using the present one touch response and get an admin token",
        "operationId": "PostV1TfaProviderAuthyAuthenticateonetouch",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1IntegrationAdminTokenPostv1integrationadmintokenbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/authy/authenticate-onetouch"
      }
    },
    "/V1/tfa/provider/authy/configure": {
      "post": {
        "tags": ["tfa/provider/authy/configure"],
        "description": "Get the information required to configure google",
        "operationId": "PostV1TfaProviderAuthyConfigure",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["tfaToken", "deviceData"],
                "properties": {
                  "tfaToken": {
                    "type": "string"
                  },
                  "deviceData": {
                    "$ref": "#/components/schemas/two-factor-auth-data-authy-device-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["tfaToken", "deviceData"],
                "properties": {
                  "tfaToken": {
                    "type": "string"
                  },
                  "deviceData": {
                    "$ref": "#/components/schemas/two-factor-auth-data-authy-device-interface"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/two-factor-auth-data-authy-registration-prompt-response-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/two-factor-auth-data-authy-registration-prompt-response-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/authy/configure"
      }
    },
    "/V1/tfa/provider/authy/send-token/{via}": {
      "post": {
        "tags": ["tfa/provider/authy/send-token/{via}"],
        "description": "Send a one time password to a device using authy",
        "operationId": "PostV1TfaProviderAuthySendtokenVia",
        "parameters": [
          {
            "name": "via",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1IntegrationAdminTokenPostv1integrationadmintokenbody"
        },
        "responses": {
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/authy/send-token/{via}"
      }
    },
    "/V1/tfa/provider/duo_security/activate": {
      "post": {
        "tags": ["tfa/provider/duo_security/activate"],
        "description": "Activate the provider and get an admin token",
        "operationId": "PostV1TfaProviderDuo_securityActivate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["tfaToken", "signatureResponse"],
                "properties": {
                  "tfaToken": {
                    "type": "string"
                  },
                  "signatureResponse": {
                    "type": "string"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["tfaToken", "signatureResponse"],
                "properties": {
                  "tfaToken": {
                    "type": "string"
                  },
                  "signatureResponse": {
                    "type": "string"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/duo_security/activate"
      }
    },
    "/V1/tfa/provider/duo_security/authenticate": {
      "post": {
        "tags": ["tfa/provider/duo_security/authenticate"],
        "description": "Authenticate and get an admin token",
        "operationId": "PostV1TfaProviderDuo_securityAuthenticate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["username", "password", "signatureResponse"],
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "signatureResponse": {
                    "type": "string"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["username", "password", "signatureResponse"],
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "signatureResponse": {
                    "type": "string"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/duo_security/authenticate"
      }
    },
    "/V1/tfa/provider/duo_security/configure": {
      "post": {
        "tags": ["tfa/provider/duo_security/configure"],
        "description": "Get the information required to configure duo",
        "operationId": "PostV1TfaProviderDuo_securityConfigure",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1TfaProviderDuo_securityConfigurePostv1tfaproviderduoSecurityconfigurebody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/two-factor-auth-data-duo-data-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/two-factor-auth-data-duo-data-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/duo_security/configure"
      }
    },
    "/V1/tfa/provider/duo_security/get-authentication-data": {
      "post": {
        "tags": ["tfa/provider/duo_security/get-authentication-data"],
        "description": "Get the information required to configure duo",
        "operationId": "PostV1TfaProviderDuo_securityGetauthenticationdata",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1IntegrationAdminTokenPostv1integrationadmintokenbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/two-factor-auth-data-duo-data-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/two-factor-auth-data-duo-data-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/duo_security/get-authentication-data"
      }
    },
    "/V1/tfa/provider/google/activate": {
      "post": {
        "tags": ["tfa/provider/google/activate"],
        "description": "Activate the provider and get an admin token",
        "operationId": "PostV1TfaProviderGoogleActivate",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1TfaProviderAuthyActivatePostv1tfaproviderauthyactivatebody"
        },
        "responses": {
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/google/activate"
      }
    },
    "/V1/tfa/provider/google/authenticate": {
      "post": {
        "tags": ["tfa/provider/google/authenticate"],
        "description": "Get an admin token by authenticating using google",
        "operationId": "PostV1TfaProviderGoogleAuthenticate",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1TfaProviderAuthyAuthenticatePostv1tfaproviderauthyauthenticatebody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/google/authenticate"
      }
    },
    "/V1/tfa/provider/google/configure": {
      "post": {
        "tags": ["tfa/provider/google/configure"],
        "description": "Get the information required to configure google",
        "operationId": "PostV1TfaProviderGoogleConfigure",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1TfaProviderDuo_securityConfigurePostv1tfaproviderduoSecurityconfigurebody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/two-factor-auth-data-google-configure-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/two-factor-auth-data-google-configure-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/google/configure"
      }
    },
    "/V1/tfa/provider/u2fkey/activate": {
      "post": {
        "tags": ["tfa/provider/u2fkey/activate"],
        "description": "Activate the provider and get a token",
        "operationId": "PostV1TfaProviderU2fkeyActivate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["tfaToken", "publicKeyCredentialJson"],
                "properties": {
                  "tfaToken": {
                    "type": "string"
                  },
                  "publicKeyCredentialJson": {
                    "type": "string"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["tfaToken", "publicKeyCredentialJson"],
                "properties": {
                  "tfaToken": {
                    "type": "string"
                  },
                  "publicKeyCredentialJson": {
                    "type": "string"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/u2fkey/activate"
      }
    },
    "/V1/tfa/provider/u2fkey/authentication-challenge": {
      "post": {
        "tags": ["tfa/provider/u2fkey/authentication-challenge"],
        "description": "Get the information to initiate a WebAuthn registration ceremony",
        "operationId": "PostV1TfaProviderU2fkeyAuthenticationchallenge",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1IntegrationAdminTokenPostv1integrationadmintokenbody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/two-factor-auth-data-u2f-web-authn-request-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/two-factor-auth-data-u2f-web-authn-request-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/u2fkey/authentication-challenge"
      }
    },
    "/V1/tfa/provider/u2fkey/configure": {
      "post": {
        "tags": ["tfa/provider/u2fkey/configure"],
        "description": "Get the information to initiate a WebAuthn registration ceremony",
        "operationId": "PostV1TfaProviderU2fkeyConfigure",
        "requestBody": {
          "$ref": "#/components/requestBodies/PostV1TfaProviderDuo_securityConfigurePostv1tfaproviderduoSecurityconfigurebody"
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/two-factor-auth-data-u2f-web-authn-request-interface"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/two-factor-auth-data-u2f-web-authn-request-interface"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/u2fkey/configure"
      }
    },
    "/V1/tfa/provider/u2fkey/verify": {
      "post": {
        "tags": ["tfa/provider/u2fkey/verify"],
        "description": "Authenticate with the provider and get a token",
        "operationId": "PostV1TfaProviderU2fkeyVerify",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "required": ["username", "password", "publicKeyCredentialJson"],
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "publicKeyCredentialJson": {
                    "type": "string"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            },
            "application/xml": {
              "schema": {
                "required": ["username", "password", "publicKeyCredentialJson"],
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  },
                  "publicKeyCredentialJson": {
                    "type": "string"
                  }
                },
                "type": "object",
                "xml": {
                  "name": "request"
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/provider/u2fkey/verify"
      }
    },
    "/V1/tfa/tfat-providers-to-activate": {
      "get": {
        "tags": ["tfa/tfat-providers-to-activate"],
        "description": "Get the providers that the user still needs to configure",
        "operationId": "GetV1TfaTfatproviderstoactivate",
        "parameters": [
          {
            "name": "tfaToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/two-factor-auth-provider-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/two-factor-auth-provider-interface"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/tfat-providers-to-activate"
      }
    },
    "/V1/tfa/tfat-user-providers": {
      "get": {
        "tags": ["tfa/tfat-user-providers"],
        "description": "Get the providers that the user is able to use for 2fa",
        "operationId": "GetV1TfaTfatuserproviders",
        "parameters": [
          {
            "name": "tfaToken",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "200 Success.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/two-factor-auth-provider-interface"
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/two-factor-auth-provider-interface"
                  }
                }
              }
            }
          },
          "default": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/error-response"
                }
              }
            }
          }
        },
        "summary": "tfa/tfat-user-providers"
      }
    }
  },
  "x-tagGroups": [
    {
      "name": "applepay",
      "tags": ["applepay/auth"]
    },
    {
      "name": "carts",
      "tags": [
        "carts/guest-carts/{cartId}/checkGiftCard/{giftCardCode}",
        "carts/guest-carts/{cartId}/giftCards",
        "carts/guest-carts/{cartId}/giftCards/{giftCardCode}"
      ]
    },
    {
      "name": "customers",
      "tags": [
        "customers",
        "customers/isEmailAvailable",
        "customers/password",
        "customers/resetPassword",
        "customers/{customerId}/password/resetLinkToken/{resetPasswordLinkToken}"
      ]
    },
    {
      "name": "directory",
      "tags": ["directory/countries", "directory/countries/{countryId}", "directory/currency"]
    },
    {
      "name": "guest carts",
      "tags": [
        "guest-carts",
        "guest-carts/{cartId}",
        "guest-carts/{cartId}/billing-address",
        "guest-carts/{cartId}/collect-totals",
        "guest-carts/{cartId}/coupons",
        "guest-carts/{cartId}/coupons/{couponCode}",
        "guest-carts/{cartId}/estimate-shipping-methods",
        "guest-carts/{cartId}/gift-message",
        "guest-carts/{cartId}/gift-message/{itemId}",
        "guest-carts/{cartId}/items",
        "guest-carts/{cartId}/items/{itemId}",
        "guest-carts/{cartId}/order",
        "guest-carts/{cartId}/payment-information",
        "guest-carts/{cartId}/payment-methods",
        "guest-carts/{cartId}/payment-order",
        "guest-carts/{cartId}/payment-order/{id}",
        "guest-carts/{cartId}/selected-payment-method",
        "guest-carts/{cartId}/set-payment-information",
        "guest-carts/{cartId}/shipping-information",
        "guest-carts/{cartId}/shipping-methods",
        "guest-carts/{cartId}/totals",
        "guest-carts/{cartId}/totals-information"
      ]
    },
    {
      "name": "guest giftregistry",
      "tags": ["guest-giftregistry/{cartId}/estimate-shipping-methods"]
    },
    {
      "name": "integration",
      "tags": ["integration/admin/token", "integration/customer/token"]
    },
    {
      "name": "inventory",
      "tags": ["inventory/in-store-pickup/pickup-locations/"]
    },
    {
      "name": "payments config",
      "tags": [
        "payments-config/apple-pay/{location}",
        "payments-config/hosted-fields/{location}",
        "payments-config/smart-buttons/{location}",
        "payments-config/{location}"
      ]
    },
    {
      "name": "payments sdk",
      "tags": ["payments-sdk/{location}", "payments-sdk/{location}/{methodCode}"]
    },
    {
      "name": "products render info",
      "tags": ["products-render-info"]
    },
    {
      "name": "search",
      "tags": ["search"]
    },
    {
      "name": "tfa",
      "tags": [
        "tfa/provider/authy/activate",
        "tfa/provider/authy/authenticate",
        "tfa/provider/authy/authenticate-onetouch",
        "tfa/provider/authy/configure",
        "tfa/provider/authy/send-token/{via}",
        "tfa/provider/duo_security/activate",
        "tfa/provider/duo_security/authenticate",
        "tfa/provider/duo_security/configure",
        "tfa/provider/duo_security/get-authentication-data",
        "tfa/provider/google/activate",
        "tfa/provider/google/authenticate",
        "tfa/provider/google/configure",
        "tfa/provider/u2fkey/activate",
        "tfa/provider/u2fkey/authentication-challenge",
        "tfa/provider/u2fkey/configure",
        "tfa/provider/u2fkey/verify",
        "tfa/tfat-providers-to-activate",
        "tfa/tfat-user-providers"
      ]
    }
  ],
  "servers": [
    {
      "url": "http://example.com/rest/default"
    }
  ],
  "components": {
    "requestBodies": {
      "PostV1GuestcartsCartIdItemsPostv1guestcartscartiditemsbody": {
        "content": {
          "application/json": {
            "schema": {
              "required": ["cartItem"],
              "properties": {
                "cartItem": {
                  "$ref": "#/components/schemas/quote-data-cart-item-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          },
          "application/xml": {
            "schema": {
              "required": ["cartItem"],
              "properties": {
                "cartItem": {
                  "$ref": "#/components/schemas/quote-data-cart-item-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        }
      },
      "PostV1TfaProviderDuo_securityConfigurePostv1tfaproviderduoSecurityconfigurebody": {
        "content": {
          "application/json": {
            "schema": {
              "required": ["tfaToken"],
              "properties": {
                "tfaToken": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          },
          "application/xml": {
            "schema": {
              "required": ["tfaToken"],
              "properties": {
                "tfaToken": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        }
      },
      "PostV1IntegrationAdminTokenPostv1integrationadmintokenbody": {
        "content": {
          "application/json": {
            "schema": {
              "required": ["username", "password"],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          },
          "application/xml": {
            "schema": {
              "required": ["username", "password"],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        }
      },
      "PostV1GuestcartsCartIdGiftmessagePostv1guestcartscartidgiftmessagebody": {
        "content": {
          "application/json": {
            "schema": {
              "required": ["giftMessage"],
              "properties": {
                "giftMessage": {
                  "$ref": "#/components/schemas/gift-message-data-message-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          },
          "application/xml": {
            "schema": {
              "required": ["giftMessage"],
              "properties": {
                "giftMessage": {
                  "$ref": "#/components/schemas/gift-message-data-message-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        }
      },
      "PostV1GuestcartsCartIdPaymentinformationPostv1guestcartscartidpaymentinformationbody": {
        "content": {
          "application/json": {
            "schema": {
              "required": ["email", "paymentMethod"],
              "properties": {
                "email": {
                  "type": "string"
                },
                "paymentMethod": {
                  "$ref": "#/components/schemas/quote-data-payment-interface"
                },
                "billingAddress": {
                  "$ref": "#/components/schemas/quote-data-address-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          },
          "application/xml": {
            "schema": {
              "required": ["email", "paymentMethod"],
              "properties": {
                "email": {
                  "type": "string"
                },
                "paymentMethod": {
                  "$ref": "#/components/schemas/quote-data-payment-interface"
                },
                "billingAddress": {
                  "$ref": "#/components/schemas/quote-data-address-interface"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        }
      },
      "PostV1TfaProviderAuthyActivatePostv1tfaproviderauthyactivatebody": {
        "content": {
          "application/json": {
            "schema": {
              "required": ["tfaToken", "otp"],
              "properties": {
                "tfaToken": {
                  "type": "string"
                },
                "otp": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          },
          "application/xml": {
            "schema": {
              "required": ["tfaToken", "otp"],
              "properties": {
                "tfaToken": {
                  "type": "string"
                },
                "otp": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        }
      },
      "PostV1TfaProviderAuthyAuthenticatePostv1tfaproviderauthyauthenticatebody": {
        "content": {
          "application/json": {
            "schema": {
              "required": ["username", "password", "otp"],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "otp": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          },
          "application/xml": {
            "schema": {
              "required": ["username", "password", "otp"],
              "properties": {
                "username": {
                  "type": "string"
                },
                "password": {
                  "type": "string"
                },
                "otp": {
                  "type": "string"
                }
              },
              "type": "object",
              "xml": {
                "name": "request"
              }
            }
          }
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      }
    },
    "schemas": {
      "error-response": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "errors": {
            "$ref": "#/components/schemas/error-errors"
          },
          "code": {
            "type": "integer",
            "description": "Error code"
          },
          "parameters": {
            "$ref": "#/components/schemas/error-parameters"
          },
          "trace": {
            "type": "string",
            "description": "Stack trace"
          }
        },
        "required": ["message"]
      },
      "error-errors": {
        "type": "array",
        "description": "Errors list",
        "items": {
          "$ref": "#/components/schemas/error-errors-item"
        }
      },
      "error-errors-item": {
        "type": "object",
        "description": "Error details",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message"
          },
          "parameters": {
            "$ref": "#/components/schemas/error-parameters"
          }
        }
      },
      "error-parameters": {
        "type": "array",
        "description": "Error parameters list",
        "items": {
          "$ref": "#/components/schemas/error-parameters-item"
        }
      },
      "error-parameters-item": {
        "type": "object",
        "description": "Error parameters item",
        "properties": {
          "resources": {
            "type": "string",
            "description": "ACL resource"
          },
          "fieldName": {
            "type": "string",
            "description": "Missing or invalid field name"
          },
          "fieldValue": {
            "type": "string",
            "description": "Incorrect field value"
          }
        }
      },
      "directory-data-currency-information-interface": {
        "type": "object",
        "description": "Currency Information interface.",
        "properties": {
          "base_currency_code": {
            "type": "string",
            "description": "The base currency code for the store."
          },
          "base_currency_symbol": {
            "type": "string",
            "description": "The currency symbol of the base currency for the store."
          },
          "default_display_currency_code": {
            "type": "string",
            "description": "The default display currency code for the store."
          },
          "default_display_currency_symbol": {
            "type": "string",
            "description": "The currency symbol of the default display currency for the store."
          },
          "available_currency_codes": {
            "type": "array",
            "description": "The list of allowed currency codes for the store.",
            "items": {
              "type": "string"
            }
          },
          "exchange_rates": {
            "type": "array",
            "description": "The list of exchange rate information for the store.",
            "items": {
              "$ref": "#/components/schemas/directory-data-exchange-rate-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/directory-data-currency-information-extension-interface"
          }
        },
        "required": [
          "base_currency_code",
          "base_currency_symbol",
          "default_display_currency_code",
          "default_display_currency_symbol",
          "available_currency_codes",
          "exchange_rates"
        ]
      },
      "directory-data-exchange-rate-interface": {
        "type": "object",
        "description": "Exchange Rate interface.",
        "properties": {
          "currency_to": {
            "type": "string",
            "description": "The currency code associated with the exchange rate."
          },
          "rate": {
            "type": "number",
            "description": "The exchange rate for the associated currency and the store's base currency."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/directory-data-exchange-rate-extension-interface"
          }
        },
        "required": ["currency_to", "rate"]
      },
      "directory-data-exchange-rate-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\ExchangeRateInterface"
      },
      "directory-data-currency-information-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CurrencyInformationInterface"
      },
      "directory-data-country-information-interface": {
        "type": "object",
        "description": "Country Information interface.",
        "properties": {
          "id": {
            "type": "string",
            "description": "The country id for the store."
          },
          "two_letter_abbreviation": {
            "type": "string",
            "description": "The country 2 letter abbreviation for the store."
          },
          "three_letter_abbreviation": {
            "type": "string",
            "description": "The country 3 letter abbreviation for the store."
          },
          "full_name_locale": {
            "type": "string",
            "description": "The country full name (in store locale) for the store."
          },
          "full_name_english": {
            "type": "string",
            "description": "The country full name (in English) for the store."
          },
          "available_regions": {
            "type": "array",
            "description": "The available regions for the store.",
            "items": {
              "$ref": "#/components/schemas/directory-data-region-information-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/directory-data-country-information-extension-interface"
          }
        },
        "required": [
          "id",
          "two_letter_abbreviation",
          "three_letter_abbreviation",
          "full_name_locale",
          "full_name_english"
        ]
      },
      "directory-data-region-information-interface": {
        "type": "object",
        "description": "Region Information interface.",
        "properties": {
          "id": {
            "type": "string",
            "description": "Region id"
          },
          "code": {
            "type": "string",
            "description": "Region code"
          },
          "name": {
            "type": "string",
            "description": "Region name"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/directory-data-region-information-extension-interface"
          }
        },
        "required": ["id", "code", "name"]
      },
      "directory-data-region-information-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\RegionInformationInterface"
      },
      "directory-data-country-information-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Directory\\Api\\Data\\CountryInformationInterface"
      },
      "customer-data-customer-interface": {
        "type": "object",
        "description": "Customer entity interface for API handling.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Customer id"
          },
          "group_id": {
            "type": "integer",
            "description": "Group id"
          },
          "default_billing": {
            "type": "string",
            "description": "Default billing address id"
          },
          "default_shipping": {
            "type": "string",
            "description": "Default shipping address id"
          },
          "confirmation": {
            "type": "string",
            "description": "Confirmation"
          },
          "created_at": {
            "type": "string",
            "description": "Created at time"
          },
          "updated_at": {
            "type": "string",
            "description": "Updated at time"
          },
          "created_in": {
            "type": "string",
            "description": "Created in area"
          },
          "dob": {
            "type": "string",
            "description": "In keeping with current security and privacy best practices, be sure you are aware of any potential legal and security risks associated with the storage of customers’ full date of birth (month, day, year) along with other personal identifiers (e.g., full name) before collecting or processing such data."
          },
          "email": {
            "type": "string",
            "description": "Email address"
          },
          "firstname": {
            "type": "string",
            "description": "First name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "middlename": {
            "type": "string",
            "description": "Middle name"
          },
          "prefix": {
            "type": "string",
            "description": "Prefix"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix"
          },
          "gender": {
            "type": "integer",
            "description": "Gender"
          },
          "store_id": {
            "type": "integer",
            "description": "Store id"
          },
          "taxvat": {
            "type": "string",
            "description": "Tax Vat"
          },
          "website_id": {
            "type": "integer",
            "description": "Website id"
          },
          "addresses": {
            "type": "array",
            "description": "Customer addresses.",
            "items": {
              "$ref": "#/components/schemas/customer-data-address-interface"
            }
          },
          "disable_auto_group_change": {
            "type": "integer",
            "description": "Disable auto group change flag."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/customer-data-customer-extension-interface"
          },
          "custom_attributes": {
            "type": "array",
            "description": "Custom attributes values.",
            "items": {
              "$ref": "#/components/schemas/framework-attribute-interface"
            }
          }
        },
        "required": ["email", "firstname", "lastname"]
      },
      "customer-data-address-interface": {
        "type": "object",
        "description": "Customer address interface.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "ID"
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer ID"
          },
          "region": {
            "$ref": "#/components/schemas/customer-data-region-interface"
          },
          "region_id": {
            "type": "integer",
            "description": "Region ID"
          },
          "country_id": {
            "type": "string",
            "description": "Country code in ISO_3166-2 format"
          },
          "street": {
            "type": "array",
            "description": "Street",
            "items": {
              "type": "string"
            }
          },
          "company": {
            "type": "string",
            "description": "Company"
          },
          "telephone": {
            "type": "string",
            "description": "Telephone number"
          },
          "fax": {
            "type": "string",
            "description": "Fax number"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode"
          },
          "city": {
            "type": "string",
            "description": "City name"
          },
          "firstname": {
            "type": "string",
            "description": "First name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "middlename": {
            "type": "string",
            "description": "Middle name"
          },
          "prefix": {
            "type": "string",
            "description": "Prefix"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix"
          },
          "vat_id": {
            "type": "string",
            "description": "Vat id"
          },
          "default_shipping": {
            "type": "boolean",
            "description": "If this address is default shipping address."
          },
          "default_billing": {
            "type": "boolean",
            "description": "If this address is default billing address"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/customer-data-address-extension-interface"
          },
          "custom_attributes": {
            "type": "array",
            "description": "Custom attributes values.",
            "items": {
              "$ref": "#/components/schemas/framework-attribute-interface"
            }
          }
        }
      },
      "customer-data-region-interface": {
        "type": "object",
        "description": "Customer address region interface.",
        "properties": {
          "region_code": {
            "type": "string",
            "description": "Region code"
          },
          "region": {
            "type": "string",
            "description": "Region"
          },
          "region_id": {
            "type": "integer",
            "description": "Region id"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/customer-data-region-extension-interface"
          }
        },
        "required": ["region_code", "region", "region_id"]
      },
      "customer-data-region-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\RegionInterface"
      },
      "customer-data-address-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\AddressInterface"
      },
      "framework-attribute-interface": {
        "type": "object",
        "description": "Interface for custom attribute value.",
        "properties": {
          "attribute_code": {
            "type": "string",
            "description": "Attribute code"
          },
          "value": {
            "type": "string",
            "description": "Attribute value"
          }
        },
        "required": ["attribute_code", "value"]
      },
      "customer-data-customer-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Customer\\Api\\Data\\CustomerInterface",
        "properties": {
          "company_attributes": {
            "$ref": "#/components/schemas/company-data-company-customer-interface"
          },
          "is_subscribed": {
            "type": "boolean"
          },
          "assistance_allowed": {
            "type": "integer"
          }
        }
      },
      "company-data-company-customer-interface": {
        "type": "object",
        "description": "Extended customer custom attributes interface.",
        "properties": {
          "customer_id": {
            "type": "integer",
            "description": "Customer ID."
          },
          "company_id": {
            "type": "integer",
            "description": "Company ID."
          },
          "job_title": {
            "type": "string",
            "description": "Get job title."
          },
          "status": {
            "type": "integer",
            "description": "Customer status."
          },
          "telephone": {
            "type": "string",
            "description": "Get telephone."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/company-data-company-customer-extension-interface"
          }
        }
      },
      "company-data-company-customer-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Company\\Api\\Data\\CompanyCustomerInterface"
      },
      "framework-search-search-result-interface": {
        "type": "object",
        "description": "Interface SearchResultInterface",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/framework-search-document-interface"
            }
          },
          "aggregations": {
            "$ref": "#/components/schemas/framework-search-aggregation-interface"
          },
          "search_criteria": {
            "$ref": "#/components/schemas/framework-search-search-criteria-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": ["items", "aggregations", "search_criteria", "total_count"]
      },
      "framework-search-document-interface": {
        "type": "object",
        "description": "Interface Search Document",
        "properties": {
          "id": {
            "type": "integer"
          },
          "custom_attributes": {
            "type": "array",
            "description": "Custom attributes values.",
            "items": {
              "$ref": "#/components/schemas/framework-attribute-interface"
            }
          }
        },
        "required": ["id"]
      },
      "framework-search-aggregation-interface": {
        "type": "object",
        "description": "Interface Aggregation to get faceted data",
        "properties": {
          "buckets": {
            "type": "array",
            "description": "All Document fields",
            "items": {
              "$ref": "#/components/schemas/framework-search-bucket-interface"
            }
          },
          "bucket_names": {
            "type": "array",
            "description": "Document field names",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["buckets", "bucket_names"]
      },
      "framework-search-bucket-interface": {
        "type": "object",
        "description": "Interface for facet Bucket",
        "properties": {
          "name": {
            "type": "string",
            "description": "Field name"
          },
          "values": {
            "type": "array",
            "description": "Field values",
            "items": {
              "$ref": "#/components/schemas/framework-search-aggregation-value-interface"
            }
          }
        },
        "required": ["name", "values"]
      },
      "framework-search-aggregation-value-interface": {
        "type": "object",
        "description": "Interface Aggregation Value",
        "properties": {
          "value": {
            "type": "string",
            "description": "Aggregation"
          },
          "metrics": {
            "type": "array",
            "description": "Metrics",
            "items": {
              "type": "string"
            }
          }
        },
        "required": ["value", "metrics"]
      },
      "framework-search-search-criteria-interface": {
        "type": "object",
        "description": "Interface SearchCriteriaInterface",
        "properties": {
          "request_name": {
            "type": "string"
          },
          "filter_groups": {
            "type": "array",
            "description": "A list of filter groups.",
            "items": {
              "$ref": "#/components/schemas/framework-search-filter-group"
            }
          },
          "sort_orders": {
            "type": "array",
            "description": "Sort order.",
            "items": {
              "$ref": "#/components/schemas/framework-sort-order"
            }
          },
          "page_size": {
            "type": "integer",
            "description": "Page size."
          },
          "current_page": {
            "type": "integer",
            "description": "Current page."
          }
        },
        "required": ["request_name", "filter_groups"]
      },
      "framework-search-filter-group": {
        "type": "object",
        "description": "Groups two or more filters together using a logical OR",
        "properties": {
          "filters": {
            "type": "array",
            "description": "A list of filters in this group",
            "items": {
              "$ref": "#/components/schemas/framework-filter"
            }
          }
        }
      },
      "framework-filter": {
        "type": "object",
        "description": "Filter which can be used by any methods from service layer.",
        "properties": {
          "field": {
            "type": "string",
            "description": "Field"
          },
          "value": {
            "type": "string",
            "description": "Value"
          },
          "condition_type": {
            "type": "string",
            "description": "Condition type"
          }
        },
        "required": ["field", "value"]
      },
      "framework-sort-order": {
        "type": "object",
        "description": "Data object for sort order.",
        "properties": {
          "field": {
            "type": "string",
            "description": "Sorting field."
          },
          "direction": {
            "type": "string",
            "description": "Sorting direction."
          }
        },
        "required": ["field", "direction"]
      },
      "catalog-data-product-render-search-results-interface": {
        "type": "object",
        "description": "Dto that holds render information about products",
        "properties": {
          "items": {
            "type": "array",
            "description": "List of products rendered information",
            "items": {
              "$ref": "#/components/schemas/catalog-data-product-render-interface"
            }
          }
        },
        "required": ["items"]
      },
      "catalog-data-product-render-interface": {
        "type": "object",
        "description": "Represents Data Object which holds enough information to render product This information is put into part as Add To Cart or Add to Compare Data or Price Data",
        "properties": {
          "add_to_cart_button": {
            "$ref": "#/components/schemas/catalog-data-product-render-button-interface"
          },
          "add_to_compare_button": {
            "$ref": "#/components/schemas/catalog-data-product-render-button-interface"
          },
          "price_info": {
            "$ref": "#/components/schemas/catalog-data-product-render-price-info-interface"
          },
          "images": {
            "type": "array",
            "description": "Enough information, that needed to render image on front",
            "items": {
              "$ref": "#/components/schemas/catalog-data-product-render-image-interface"
            }
          },
          "url": {
            "type": "string",
            "description": "Product url"
          },
          "id": {
            "type": "integer",
            "description": "Product identifier"
          },
          "name": {
            "type": "string",
            "description": "Product name"
          },
          "type": {
            "type": "string",
            "description": "Product type. Such as bundle, grouped, simple, etc..."
          },
          "is_salable": {
            "type": "string",
            "description": "Information about product saleability (In Stock)"
          },
          "store_id": {
            "type": "integer",
            "description": "Information about current store id or requested store id"
          },
          "currency_code": {
            "type": "string",
            "description": "Current or desired currency code to product"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/catalog-data-product-render-extension-interface"
          }
        },
        "required": [
          "add_to_cart_button",
          "add_to_compare_button",
          "price_info",
          "images",
          "url",
          "id",
          "name",
          "type",
          "is_salable",
          "store_id",
          "currency_code",
          "extension_attributes"
        ]
      },
      "catalog-data-product-render-button-interface": {
        "type": "object",
        "description": "Button interface. This interface represents all manner of product buttons: add to cart, add to compare, etc... The buttons describes by this interface should have interaction with backend",
        "properties": {
          "post_data": {
            "type": "string",
            "description": "Post data"
          },
          "url": {
            "type": "string",
            "description": "Url, needed to add product to cart"
          },
          "required_options": {
            "type": "boolean",
            "description": "Flag whether a product has options or not"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/catalog-data-product-render-button-extension-interface"
          }
        },
        "required": ["post_data", "url", "required_options"]
      },
      "catalog-data-product-render-button-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\ButtonInterface"
      },
      "catalog-data-product-render-price-info-interface": {
        "type": "object",
        "description": "Price interface.",
        "properties": {
          "final_price": {
            "type": "number",
            "description": "Final price"
          },
          "max_price": {
            "type": "number",
            "description": "Max price of a product"
          },
          "max_regular_price": {
            "type": "number",
            "description": "Max regular price"
          },
          "minimal_regular_price": {
            "type": "number",
            "description": "Minimal regular price"
          },
          "special_price": {
            "type": "number",
            "description": "Special price"
          },
          "minimal_price": {
            "type": "number",
            "description": "Minimal price"
          },
          "regular_price": {
            "type": "number",
            "description": "Regular price"
          },
          "formatted_prices": {
            "$ref": "#/components/schemas/catalog-data-product-render-formatted-price-info-interface"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/catalog-data-product-render-price-info-extension-interface"
          }
        },
        "required": [
          "final_price",
          "max_price",
          "max_regular_price",
          "minimal_regular_price",
          "special_price",
          "minimal_price",
          "regular_price",
          "formatted_prices"
        ]
      },
      "catalog-data-product-render-formatted-price-info-interface": {
        "type": "object",
        "description": "Formatted Price interface. Aggregate formatted html with price representations. E.g.: <span class=\"price\">$9.00</span> Consider currency, rounding and html",
        "properties": {
          "final_price": {
            "type": "string",
            "description": "Html with final price"
          },
          "max_price": {
            "type": "string",
            "description": "Max price of a product"
          },
          "minimal_price": {
            "type": "string",
            "description": "The minimal price of the product or variation"
          },
          "max_regular_price": {
            "type": "string",
            "description": "Max regular price"
          },
          "minimal_regular_price": {
            "type": "string",
            "description": "Minimal regular price"
          },
          "special_price": {
            "type": "string",
            "description": "Special price"
          },
          "regular_price": {
            "type": "string",
            "description": "Price - is price of product without discounts and special price with taxes and fixed product tax"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/catalog-data-product-render-formatted-price-info-extension-interface"
          }
        },
        "required": [
          "final_price",
          "max_price",
          "minimal_price",
          "max_regular_price",
          "minimal_regular_price",
          "special_price",
          "regular_price"
        ]
      },
      "catalog-data-product-render-formatted-price-info-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\FormattedPriceInfoInterface"
      },
      "catalog-data-product-render-price-info-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\PriceInfoInterface",
        "properties": {
          "msrp": {
            "$ref": "#/components/schemas/msrp-data-product-render-msrp-price-info-interface"
          },
          "tax_adjustments": {
            "$ref": "#/components/schemas/catalog-data-product-render-price-info-interface"
          },
          "weee_attributes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/weee-data-product-render-weee-adjustment-attribute-interface"
            }
          },
          "weee_adjustment": {
            "type": "string"
          }
        }
      },
      "msrp-data-product-render-msrp-price-info-interface": {
        "type": "object",
        "description": "Price interface.",
        "properties": {
          "msrp_price": {
            "type": "string"
          },
          "is_applicable": {
            "type": "string"
          },
          "is_shown_price_on_gesture": {
            "type": "string"
          },
          "msrp_message": {
            "type": "string"
          },
          "explanation_message": {
            "type": "string"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/msrp-data-product-render-msrp-price-info-extension-interface"
          }
        },
        "required": [
          "msrp_price",
          "is_applicable",
          "is_shown_price_on_gesture",
          "msrp_message",
          "explanation_message"
        ]
      },
      "msrp-data-product-render-msrp-price-info-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Msrp\\Api\\Data\\ProductRender\\MsrpPriceInfoInterface"
      },
      "weee-data-product-render-weee-adjustment-attribute-interface": {
        "type": "object",
        "description": "List of all weee attributes, their amounts, etc.., that product has",
        "properties": {
          "amount": {
            "type": "string",
            "description": "Weee attribute amount"
          },
          "tax_amount": {
            "type": "string",
            "description": "Tax which is calculated to fixed product tax attribute"
          },
          "tax_amount_incl_tax": {
            "type": "string",
            "description": "Tax amount of weee attribute"
          },
          "amount_excl_tax": {
            "type": "string",
            "description": "Product amount exclude tax"
          },
          "attribute_code": {
            "type": "string",
            "description": "Weee attribute code"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/weee-data-product-render-weee-adjustment-attribute-extension-interface"
          }
        },
        "required": [
          "amount",
          "tax_amount",
          "tax_amount_incl_tax",
          "amount_excl_tax",
          "attribute_code",
          "extension_attributes"
        ]
      },
      "weee-data-product-render-weee-adjustment-attribute-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Weee\\Api\\Data\\ProductRender\\WeeeAdjustmentAttributeInterface"
      },
      "catalog-data-product-render-image-interface": {
        "type": "object",
        "description": "Product Render image interface. Represents physical characteristics of image, that can be used in product listing or product view",
        "properties": {
          "url": {
            "type": "string",
            "description": "Image url"
          },
          "code": {
            "type": "string",
            "description": "Image code"
          },
          "height": {
            "type": "number",
            "description": "Image height"
          },
          "width": {
            "type": "number",
            "description": "Image width in px"
          },
          "label": {
            "type": "string",
            "description": "Image label"
          },
          "resized_width": {
            "type": "number",
            "description": "Resize width"
          },
          "resized_height": {
            "type": "number",
            "description": "Resize height"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/catalog-data-product-render-image-extension-interface"
          }
        },
        "required": ["url", "code", "height", "width", "label", "resized_width", "resized_height"]
      },
      "catalog-data-product-render-image-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRender\\ImageInterface"
      },
      "catalog-data-product-render-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\ProductRenderInterface",
        "properties": {
          "wishlist_button": {
            "$ref": "#/components/schemas/catalog-data-product-render-button-interface"
          },
          "review_html": {
            "type": "string"
          }
        }
      },
      "quote-data-cart-interface": {
        "type": "object",
        "description": "Interface CartInterface",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Cart/quote ID."
          },
          "created_at": {
            "type": "string",
            "description": "Cart creation date and time. Otherwise, null."
          },
          "updated_at": {
            "type": "string",
            "description": "Cart last update date and time. Otherwise, null."
          },
          "converted_at": {
            "type": "string",
            "description": "Cart conversion date and time. Otherwise, null."
          },
          "is_active": {
            "type": "boolean",
            "description": "Active status flag value. Otherwise, null."
          },
          "is_virtual": {
            "type": "boolean",
            "description": "Virtual flag value. Otherwise, null."
          },
          "items": {
            "type": "array",
            "description": "Array of items. Otherwise, null.",
            "items": {
              "$ref": "#/components/schemas/quote-data-cart-item-interface"
            }
          },
          "items_count": {
            "type": "integer",
            "description": "Number of different items or products in the cart. Otherwise, null."
          },
          "items_qty": {
            "type": "number",
            "description": "Total quantity of all cart items. Otherwise, null."
          },
          "customer": {
            "$ref": "#/components/schemas/customer-data-customer-interface"
          },
          "billing_address": {
            "$ref": "#/components/schemas/quote-data-address-interface"
          },
          "reserved_order_id": {
            "type": "string",
            "description": "Reserved order ID. Otherwise, null."
          },
          "orig_order_id": {
            "type": "integer",
            "description": "Original order ID. Otherwise, null."
          },
          "currency": {
            "$ref": "#/components/schemas/quote-data-currency-interface"
          },
          "customer_is_guest": {
            "type": "boolean",
            "description": "For guest customers, false for logged in customers"
          },
          "customer_note": {
            "type": "string",
            "description": "Notice text"
          },
          "customer_note_notify": {
            "type": "boolean",
            "description": "Customer notification flag"
          },
          "customer_tax_class_id": {
            "type": "integer",
            "description": "Customer tax class ID."
          },
          "store_id": {
            "type": "integer",
            "description": "Store identifier"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-cart-extension-interface"
          }
        },
        "required": ["id", "customer", "store_id"]
      },
      "quote-data-cart-item-interface": {
        "type": "object",
        "description": "Interface CartItemInterface",
        "properties": {
          "item_id": {
            "type": "integer",
            "description": "Item ID. Otherwise, null."
          },
          "sku": {
            "type": "string",
            "description": "Product SKU. Otherwise, null."
          },
          "qty": {
            "type": "number",
            "description": "Product quantity."
          },
          "name": {
            "type": "string",
            "description": "Product name. Otherwise, null."
          },
          "price": {
            "type": "number",
            "description": "Product price. Otherwise, null."
          },
          "product_type": {
            "type": "string",
            "description": "Product type. Otherwise, null."
          },
          "quote_id": {
            "type": "string",
            "description": "Quote id."
          },
          "product_option": {
            "$ref": "#/components/schemas/quote-data-product-option-interface"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-cart-item-extension-interface"
          }
        },
        "required": ["qty", "quote_id"]
      },
      "quote-data-product-option-interface": {
        "type": "object",
        "description": "Product option interface",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-product-option-extension-interface"
          }
        }
      },
      "quote-data-product-option-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ProductOptionInterface",
        "properties": {
          "custom_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/catalog-data-custom-option-interface"
            }
          },
          "bundle_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/bundle-data-bundle-option-interface"
            }
          },
          "downloadable_option": {
            "$ref": "#/components/schemas/downloadable-data-downloadable-option-interface"
          },
          "giftcard_item_option": {
            "$ref": "#/components/schemas/gift-card-data-gift-card-option-interface"
          },
          "configurable_item_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/configurable-product-data-configurable-item-option-value-interface"
            }
          },
          "grouped_options": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/grouped-product-data-grouped-options-interface"
            }
          }
        }
      },
      "catalog-data-custom-option-interface": {
        "type": "object",
        "description": "Interface CustomOptionInterface",
        "properties": {
          "option_id": {
            "type": "string",
            "description": "Option id"
          },
          "option_value": {
            "type": "string",
            "description": "Option value"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/catalog-data-custom-option-extension-interface"
          }
        },
        "required": ["option_id", "option_value"]
      },
      "catalog-data-custom-option-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Catalog\\Api\\Data\\CustomOptionInterface",
        "properties": {
          "file_info": {
            "$ref": "#/components/schemas/framework-data-image-content-interface"
          }
        }
      },
      "framework-data-image-content-interface": {
        "type": "object",
        "description": "Image Content data interface",
        "properties": {
          "base64_encoded_data": {
            "type": "string",
            "description": "Media data (base64 encoded content)"
          },
          "type": {
            "type": "string",
            "description": "MIME type"
          },
          "name": {
            "type": "string",
            "description": "Image name"
          }
        },
        "required": ["base64_encoded_data", "type", "name"]
      },
      "bundle-data-bundle-option-interface": {
        "type": "object",
        "description": "Interface BundleOptionInterface",
        "properties": {
          "option_id": {
            "type": "integer",
            "description": "Bundle option id."
          },
          "option_qty": {
            "type": "integer",
            "description": "Bundle option quantity."
          },
          "option_selections": {
            "type": "array",
            "description": "Bundle option selection ids.",
            "items": {
              "type": "integer"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/bundle-data-bundle-option-extension-interface"
          }
        },
        "required": ["option_id", "option_qty", "option_selections"]
      },
      "bundle-data-bundle-option-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Bundle\\Api\\Data\\BundleOptionInterface"
      },
      "downloadable-data-downloadable-option-interface": {
        "type": "object",
        "description": "Downloadable Option",
        "properties": {
          "downloadable_links": {
            "type": "array",
            "description": "The list of downloadable links",
            "items": {
              "type": "integer"
            }
          }
        },
        "required": ["downloadable_links"]
      },
      "gift-card-data-gift-card-option-interface": {
        "type": "object",
        "description": "Interface GiftCardOptionInterface",
        "properties": {
          "giftcard_amount": {
            "type": "string",
            "description": "Gift card amount."
          },
          "custom_giftcard_amount": {
            "type": "number",
            "description": "Gift card open amount value."
          },
          "giftcard_sender_name": {
            "type": "string",
            "description": "Gift card sender name."
          },
          "giftcard_recipient_name": {
            "type": "string",
            "description": "Gift card recipient name."
          },
          "giftcard_sender_email": {
            "type": "string",
            "description": "Gift card sender email."
          },
          "giftcard_recipient_email": {
            "type": "string",
            "description": "Gift card recipient email."
          },
          "giftcard_message": {
            "type": "string",
            "description": "Giftcard message."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/gift-card-data-gift-card-option-extension-interface"
          }
        },
        "required": [
          "giftcard_amount",
          "giftcard_sender_name",
          "giftcard_recipient_name",
          "giftcard_sender_email",
          "giftcard_recipient_email"
        ]
      },
      "gift-card-data-gift-card-option-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\GiftCard\\Api\\Data\\GiftCardOptionInterface",
        "properties": {
          "giftcard_created_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "configurable-product-data-configurable-item-option-value-interface": {
        "type": "object",
        "description": "Interface ConfigurableItemOptionValueInterface",
        "properties": {
          "option_id": {
            "type": "string",
            "description": "Option SKU"
          },
          "option_value": {
            "type": "integer",
            "description": "Item id"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/configurable-product-data-configurable-item-option-value-extension-interface"
          }
        },
        "required": ["option_id"]
      },
      "configurable-product-data-configurable-item-option-value-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\ConfigurableProduct\\Api\\Data\\ConfigurableItemOptionValueInterface"
      },
      "grouped-product-data-grouped-options-interface": {
        "type": "object",
        "description": "Represents `product item id with qty` of a grouped product.",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Associated product id"
          },
          "qty": {
            "type": "integer",
            "description": "Associated product qty"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/grouped-product-data-grouped-options-extension-interface"
          }
        }
      },
      "grouped-product-data-grouped-options-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\GroupedProduct\\Api\\Data\\GroupedOptionsInterface"
      },
      "quote-data-cart-item-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CartItemInterface",
        "properties": {
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sales-rule-data-rule-discount-interface"
            }
          },
          "negotiable_quote_item": {
            "$ref": "#/components/schemas/negotiable-quote-data-negotiable-quote-item-interface"
          }
        }
      },
      "sales-rule-data-rule-discount-interface": {
        "type": "object",
        "description": "Rule discount Interface",
        "properties": {
          "discount_data": {
            "$ref": "#/components/schemas/sales-rule-data-discount-data-interface"
          },
          "rule_label": {
            "type": "string",
            "description": "Rule Label"
          },
          "rule_i_d": {
            "type": "integer",
            "description": "Rule ID"
          }
        },
        "required": ["discount_data", "rule_label", "rule_i_d"]
      },
      "sales-rule-data-discount-data-interface": {
        "type": "object",
        "description": "Discount Data Interface",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Amount"
          },
          "base_amount": {
            "type": "number",
            "description": "Base Amount"
          },
          "original_amount": {
            "type": "number",
            "description": "Original Amount"
          },
          "base_original_amount": {
            "type": "number",
            "description": "Base Original Amount"
          }
        },
        "required": ["amount", "base_amount", "original_amount", "base_original_amount"]
      },
      "negotiable-quote-data-negotiable-quote-item-interface": {
        "type": "object",
        "description": "Interface CompanyQuoteConfigInterface",
        "properties": {
          "item_id": {
            "type": "integer",
            "description": "Quote item id"
          },
          "original_price": {
            "type": "number",
            "description": "Quote item original price"
          },
          "original_tax_amount": {
            "type": "number",
            "description": "Quote item original tax amount"
          },
          "original_discount_amount": {
            "type": "number",
            "description": "Quote item original discount amount"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/negotiable-quote-data-negotiable-quote-item-extension-interface"
          }
        },
        "required": ["item_id", "original_price", "original_tax_amount", "original_discount_amount"]
      },
      "negotiable-quote-data-negotiable-quote-item-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\NegotiableQuoteItemInterface",
        "properties": {
          "negotiated_price_type": {
            "type": "integer"
          },
          "negotiated_price_value": {
            "type": "number"
          },
          "last_item_notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/negotiable-quote-data-item-note-interface"
            }
          }
        }
      },
      "negotiable-quote-data-item-note-interface": {
        "type": "object",
        "description": "Interface ItemNoteInterface",
        "properties": {
          "note_id": {
            "type": "integer",
            "description": "Note ID."
          },
          "negotiable_quote_item_id": {
            "type": "integer",
            "description": "Negotiable quote item Id"
          },
          "creator_type": {
            "type": "integer",
            "description": "The note creator type."
          },
          "creator_id": {
            "type": "integer",
            "description": "Note creator ID."
          },
          "note": {
            "type": "string",
            "description": "Note."
          },
          "created_at": {
            "type": "string",
            "description": "Comment created at."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/negotiable-quote-data-item-note-extension-interface"
          }
        },
        "required": ["negotiable_quote_item_id", "creator_type", "creator_id", "note"]
      },
      "negotiable-quote-data-item-note-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\ItemNoteInterface"
      },
      "quote-data-address-interface": {
        "type": "object",
        "description": "Interface AddressInterface",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Id"
          },
          "region": {
            "type": "string",
            "description": "Region name"
          },
          "region_id": {
            "type": "integer",
            "description": "Region id"
          },
          "region_code": {
            "type": "string",
            "description": "Region code"
          },
          "country_id": {
            "type": "string",
            "description": "Country id"
          },
          "street": {
            "type": "array",
            "description": "Street",
            "items": {
              "type": "string"
            }
          },
          "company": {
            "type": "string",
            "description": "Company"
          },
          "telephone": {
            "type": "string",
            "description": "Telephone number"
          },
          "fax": {
            "type": "string",
            "description": "Fax number"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode"
          },
          "city": {
            "type": "string",
            "description": "City name"
          },
          "firstname": {
            "type": "string",
            "description": "First name"
          },
          "lastname": {
            "type": "string",
            "description": "Last name"
          },
          "middlename": {
            "type": "string",
            "description": "Middle name"
          },
          "prefix": {
            "type": "string",
            "description": "Prefix"
          },
          "suffix": {
            "type": "string",
            "description": "Suffix"
          },
          "vat_id": {
            "type": "string",
            "description": "Vat id"
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer id"
          },
          "email": {
            "type": "string",
            "description": "Billing/shipping email"
          },
          "same_as_billing": {
            "type": "integer",
            "description": "Same as billing flag"
          },
          "customer_address_id": {
            "type": "integer",
            "description": "Customer address id"
          },
          "save_in_address_book": {
            "type": "integer",
            "description": "Save in address book flag"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-address-extension-interface"
          },
          "custom_attributes": {
            "type": "array",
            "description": "Custom attributes values.",
            "items": {
              "$ref": "#/components/schemas/framework-attribute-interface"
            }
          }
        },
        "required": [
          "region",
          "region_id",
          "region_code",
          "country_id",
          "street",
          "telephone",
          "postcode",
          "city",
          "firstname",
          "lastname",
          "email"
        ]
      },
      "quote-data-address-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\AddressInterface",
        "properties": {
          "discounts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sales-rule-data-rule-discount-interface"
            }
          },
          "gift_registry_id": {
            "type": "integer"
          },
          "pickup_location_code": {
            "type": "string"
          }
        }
      },
      "quote-data-currency-interface": {
        "type": "object",
        "description": "Interface CurrencyInterface",
        "properties": {
          "global_currency_code": {
            "type": "string",
            "description": "Global currency code"
          },
          "base_currency_code": {
            "type": "string",
            "description": "Base currency code"
          },
          "store_currency_code": {
            "type": "string",
            "description": "Store currency code"
          },
          "quote_currency_code": {
            "type": "string",
            "description": "Quote currency code"
          },
          "store_to_base_rate": {
            "type": "number",
            "description": "Store currency to base currency rate"
          },
          "store_to_quote_rate": {
            "type": "number",
            "description": "Store currency to quote currency rate"
          },
          "base_to_global_rate": {
            "type": "number",
            "description": "Base currency to global currency rate"
          },
          "base_to_quote_rate": {
            "type": "number",
            "description": "Base currency to quote currency rate"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-currency-extension-interface"
          }
        }
      },
      "quote-data-currency-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CurrencyInterface"
      },
      "quote-data-cart-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\CartInterface",
        "properties": {
          "shipping_assignments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/quote-data-shipping-assignment-interface"
            }
          },
          "negotiable_quote": {
            "$ref": "#/components/schemas/negotiable-quote-data-negotiable-quote-interface"
          },
          "coupon_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "quote-data-shipping-assignment-interface": {
        "type": "object",
        "description": "Interface ShippingAssignmentInterface",
        "properties": {
          "shipping": {
            "$ref": "#/components/schemas/quote-data-shipping-interface"
          },
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/quote-data-cart-item-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-shipping-assignment-extension-interface"
          }
        },
        "required": ["shipping", "items"]
      },
      "quote-data-shipping-interface": {
        "type": "object",
        "description": "Interface ShippingInterface",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/quote-data-address-interface"
          },
          "method": {
            "type": "string",
            "description": "Shipping method"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-shipping-extension-interface"
          }
        },
        "required": ["address", "method"]
      },
      "quote-data-shipping-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingInterface"
      },
      "quote-data-shipping-assignment-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingAssignmentInterface"
      },
      "negotiable-quote-data-negotiable-quote-interface": {
        "type": "object",
        "description": "Interface NegotiableQuoteInterface",
        "properties": {
          "quote_id": {
            "type": "integer",
            "description": "Negotiable quote ID."
          },
          "is_regular_quote": {
            "type": "boolean",
            "description": "Is regular quote."
          },
          "status": {
            "type": "string",
            "description": "Negotiable quote status."
          },
          "negotiated_price_type": {
            "type": "integer",
            "description": "Negotiated price type."
          },
          "negotiated_price_value": {
            "type": "number",
            "description": "Negotiated price value."
          },
          "shipping_price": {
            "type": "number",
            "description": "Proposed shipping price."
          },
          "quote_name": {
            "type": "string",
            "description": "Negotiable quote name."
          },
          "expiration_period": {
            "type": "string",
            "description": "Expiration period."
          },
          "email_notification_status": {
            "type": "integer",
            "description": "Email notification status."
          },
          "has_unconfirmed_changes": {
            "type": "boolean",
            "description": "Has unconfirmed changes."
          },
          "is_shipping_tax_changed": {
            "type": "boolean",
            "description": "Shipping tax changes."
          },
          "is_customer_price_changed": {
            "type": "boolean",
            "description": "Customer price changes."
          },
          "notifications": {
            "type": "integer",
            "description": "Quote notifications."
          },
          "applied_rule_ids": {
            "type": "string",
            "description": "Quote rules."
          },
          "is_address_draft": {
            "type": "boolean",
            "description": "Is address draft."
          },
          "deleted_sku": {
            "type": "string",
            "description": "Deleted products sku."
          },
          "creator_id": {
            "type": "integer",
            "description": "Quote creator id."
          },
          "creator_type": {
            "type": "integer",
            "description": "Quote creator type."
          },
          "original_total_price": {
            "type": "number",
            "description": "Quote original total price."
          },
          "base_original_total_price": {
            "type": "number",
            "description": "Quote original total price in base currency."
          },
          "negotiated_total_price": {
            "type": "number",
            "description": "Quote negotiated total price."
          },
          "base_negotiated_total_price": {
            "type": "number",
            "description": "Quote negotiated total price in base currency."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/negotiable-quote-data-negotiable-quote-extension-interface"
          }
        },
        "required": [
          "quote_id",
          "is_regular_quote",
          "status",
          "negotiated_price_type",
          "negotiated_price_value",
          "shipping_price",
          "quote_name",
          "expiration_period",
          "email_notification_status",
          "has_unconfirmed_changes",
          "is_shipping_tax_changed",
          "is_customer_price_changed",
          "notifications",
          "applied_rule_ids",
          "is_address_draft",
          "deleted_sku",
          "creator_id",
          "creator_type"
        ]
      },
      "negotiable-quote-data-negotiable-quote-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\NegotiableQuoteInterface"
      },
      "quote-data-payment-interface": {
        "type": "object",
        "description": "Interface PaymentInterface",
        "properties": {
          "po_number": {
            "type": "string",
            "description": "Purchase order number"
          },
          "method": {
            "type": "string",
            "description": "Payment method code"
          },
          "additional_data": {
            "type": "array",
            "description": "Payment additional details",
            "items": {
              "type": "string"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-payment-extension-interface"
          }
        },
        "required": ["method"]
      },
      "quote-data-payment-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\PaymentInterface",
        "properties": {
          "agreement_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "quote-data-shipping-method-interface": {
        "type": "object",
        "description": "Interface ShippingMethodInterface",
        "properties": {
          "carrier_code": {
            "type": "string",
            "description": "Shipping carrier code."
          },
          "method_code": {
            "type": "string",
            "description": "Shipping method code."
          },
          "carrier_title": {
            "type": "string",
            "description": "Shipping carrier title. Otherwise, null."
          },
          "method_title": {
            "type": "string",
            "description": "Shipping method title. Otherwise, null."
          },
          "amount": {
            "type": "number",
            "description": "Shipping amount in store currency."
          },
          "base_amount": {
            "type": "number",
            "description": "Shipping amount in base currency."
          },
          "available": {
            "type": "boolean",
            "description": "The value of the availability flag for the current shipping method."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-shipping-method-extension-interface"
          },
          "error_message": {
            "type": "string",
            "description": "Shipping Error message."
          },
          "price_excl_tax": {
            "type": "number",
            "description": "Shipping price excl tax."
          },
          "price_incl_tax": {
            "type": "number",
            "description": "Shipping price incl tax."
          }
        },
        "required": [
          "carrier_code",
          "method_code",
          "amount",
          "base_amount",
          "available",
          "error_message",
          "price_excl_tax",
          "price_incl_tax"
        ]
      },
      "quote-data-shipping-method-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\ShippingMethodInterface"
      },
      "quote-data-payment-method-interface": {
        "type": "object",
        "description": "Interface PaymentMethodInterface",
        "properties": {
          "code": {
            "type": "string",
            "description": "Payment method code"
          },
          "title": {
            "type": "string",
            "description": "Payment method title"
          }
        },
        "required": ["code", "title"]
      },
      "quote-data-totals-additional-data-interface": {
        "type": "object",
        "description": "Additional data for totals collection.",
        "properties": {
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-totals-additional-data-extension-interface"
          },
          "custom_attributes": {
            "type": "array",
            "description": "Custom attributes values.",
            "items": {
              "$ref": "#/components/schemas/framework-attribute-interface"
            }
          }
        }
      },
      "quote-data-totals-additional-data-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsAdditionalDataInterface",
        "properties": {
          "gift_messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/gift-message-data-message-interface"
            }
          }
        }
      },
      "gift-message-data-message-interface": {
        "type": "object",
        "description": "Interface MessageInterface",
        "properties": {
          "gift_message_id": {
            "type": "integer",
            "description": "Gift message ID. Otherwise, null."
          },
          "customer_id": {
            "type": "integer",
            "description": "Customer ID. Otherwise, null."
          },
          "sender": {
            "type": "string",
            "description": "Sender name."
          },
          "recipient": {
            "type": "string",
            "description": "Recipient name."
          },
          "message": {
            "type": "string",
            "description": "Message text."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/gift-message-data-message-extension-interface"
          }
        },
        "required": ["sender", "recipient", "message"]
      },
      "gift-message-data-message-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\GiftMessage\\Api\\Data\\MessageInterface",
        "properties": {
          "entity_id": {
            "type": "string"
          },
          "entity_type": {
            "type": "string"
          },
          "wrapping_id": {
            "type": "integer"
          },
          "wrapping_allow_gift_receipt": {
            "type": "boolean"
          },
          "wrapping_add_printed_card": {
            "type": "boolean"
          }
        }
      },
      "quote-data-totals-interface": {
        "type": "object",
        "description": "Interface TotalsInterface",
        "properties": {
          "grand_total": {
            "type": "number",
            "description": "Grand total in quote currency"
          },
          "base_grand_total": {
            "type": "number",
            "description": "Grand total in base currency"
          },
          "subtotal": {
            "type": "number",
            "description": "Subtotal in quote currency"
          },
          "base_subtotal": {
            "type": "number",
            "description": "Subtotal in base currency"
          },
          "discount_amount": {
            "type": "number",
            "description": "Discount amount in quote currency"
          },
          "base_discount_amount": {
            "type": "number",
            "description": "Discount amount in base currency"
          },
          "subtotal_with_discount": {
            "type": "number",
            "description": "Subtotal in quote currency with applied discount"
          },
          "base_subtotal_with_discount": {
            "type": "number",
            "description": "Subtotal in base currency with applied discount"
          },
          "shipping_amount": {
            "type": "number",
            "description": "Shipping amount in quote currency"
          },
          "base_shipping_amount": {
            "type": "number",
            "description": "Shipping amount in base currency"
          },
          "shipping_discount_amount": {
            "type": "number",
            "description": "Shipping discount amount in quote currency"
          },
          "base_shipping_discount_amount": {
            "type": "number",
            "description": "Shipping discount amount in base currency"
          },
          "tax_amount": {
            "type": "number",
            "description": "Tax amount in quote currency"
          },
          "base_tax_amount": {
            "type": "number",
            "description": "Tax amount in base currency"
          },
          "weee_tax_applied_amount": {
            "type": "number",
            "description": "Item weee tax applied amount in quote currency."
          },
          "shipping_tax_amount": {
            "type": "number",
            "description": "Shipping tax amount in quote currency"
          },
          "base_shipping_tax_amount": {
            "type": "number",
            "description": "Shipping tax amount in base currency"
          },
          "subtotal_incl_tax": {
            "type": "number",
            "description": "Subtotal including tax in quote currency"
          },
          "base_subtotal_incl_tax": {
            "type": "number",
            "description": "Subtotal including tax in base currency"
          },
          "shipping_incl_tax": {
            "type": "number",
            "description": "Shipping including tax in quote currency"
          },
          "base_shipping_incl_tax": {
            "type": "number",
            "description": "Shipping including tax in base currency"
          },
          "base_currency_code": {
            "type": "string",
            "description": "Base currency code"
          },
          "quote_currency_code": {
            "type": "string",
            "description": "Quote currency code"
          },
          "coupon_code": {
            "type": "string",
            "description": "Applied coupon code"
          },
          "items_qty": {
            "type": "integer",
            "description": "Items qty"
          },
          "items": {
            "type": "array",
            "description": "Totals by items",
            "items": {
              "$ref": "#/components/schemas/quote-data-totals-item-interface"
            }
          },
          "total_segments": {
            "type": "array",
            "description": "Dynamically calculated totals",
            "items": {
              "$ref": "#/components/schemas/quote-data-total-segment-interface"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-totals-extension-interface"
          }
        },
        "required": ["weee_tax_applied_amount", "total_segments"]
      },
      "quote-data-totals-item-interface": {
        "type": "object",
        "description": "Interface TotalsItemInterface",
        "properties": {
          "item_id": {
            "type": "integer",
            "description": "Item id"
          },
          "price": {
            "type": "number",
            "description": "Item price in quote currency."
          },
          "base_price": {
            "type": "number",
            "description": "Item price in base currency."
          },
          "qty": {
            "type": "number",
            "description": "Item quantity."
          },
          "row_total": {
            "type": "number",
            "description": "Row total in quote currency."
          },
          "base_row_total": {
            "type": "number",
            "description": "Row total in base currency."
          },
          "row_total_with_discount": {
            "type": "number",
            "description": "Row total with discount in quote currency. Otherwise, null."
          },
          "tax_amount": {
            "type": "number",
            "description": "Tax amount in quote currency. Otherwise, null."
          },
          "base_tax_amount": {
            "type": "number",
            "description": "Tax amount in base currency. Otherwise, null."
          },
          "tax_percent": {
            "type": "number",
            "description": "Tax percent. Otherwise, null."
          },
          "discount_amount": {
            "type": "number",
            "description": "Discount amount in quote currency. Otherwise, null."
          },
          "base_discount_amount": {
            "type": "number",
            "description": "Discount amount in base currency. Otherwise, null."
          },
          "discount_percent": {
            "type": "number",
            "description": "Discount percent. Otherwise, null."
          },
          "price_incl_tax": {
            "type": "number",
            "description": "Price including tax in quote currency. Otherwise, null."
          },
          "base_price_incl_tax": {
            "type": "number",
            "description": "Price including tax in base currency. Otherwise, null."
          },
          "row_total_incl_tax": {
            "type": "number",
            "description": "Row total including tax in quote currency. Otherwise, null."
          },
          "base_row_total_incl_tax": {
            "type": "number",
            "description": "Row total including tax in base currency. Otherwise, null."
          },
          "options": {
            "type": "string",
            "description": "Item price in quote currency."
          },
          "weee_tax_applied_amount": {
            "type": "number",
            "description": "Item weee tax applied amount in quote currency."
          },
          "weee_tax_applied": {
            "type": "string",
            "description": "Item weee tax applied in quote currency."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-totals-item-extension-interface"
          },
          "name": {
            "type": "string",
            "description": "Product name. Otherwise, null."
          }
        },
        "required": [
          "item_id",
          "price",
          "base_price",
          "qty",
          "row_total",
          "base_row_total",
          "options",
          "weee_tax_applied_amount",
          "weee_tax_applied"
        ]
      },
      "quote-data-totals-item-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsItemInterface",
        "properties": {
          "negotiable_quote_item_totals": {
            "$ref": "#/components/schemas/negotiable-quote-data-negotiable-quote-item-totals-interface"
          }
        }
      },
      "negotiable-quote-data-negotiable-quote-item-totals-interface": {
        "type": "object",
        "description": "Extension attribute for quote item totals model.",
        "properties": {
          "cost": {
            "type": "number",
            "description": "Cost for quote item."
          },
          "catalog_price": {
            "type": "number",
            "description": "Catalog price for quote item."
          },
          "base_catalog_price": {
            "type": "number",
            "description": "Catalog price for quote item in base currency."
          },
          "catalog_price_incl_tax": {
            "type": "number",
            "description": "Catalog price with included tax for quote item."
          },
          "base_catalog_price_incl_tax": {
            "type": "number",
            "description": "Catalog price with included tax for quote item in base currency."
          },
          "cart_price": {
            "type": "number",
            "description": "Cart price for quote item."
          },
          "base_cart_price": {
            "type": "number",
            "description": "Cart price for quote item in base currency."
          },
          "cart_tax": {
            "type": "number",
            "description": "Tax from catalog price for quote item."
          },
          "base_cart_tax": {
            "type": "number",
            "description": "Tax from catalog price for quote item in base currency."
          },
          "cart_price_incl_tax": {
            "type": "number",
            "description": "Cart price with included tax for quote item."
          },
          "base_cart_price_incl_tax": {
            "type": "number",
            "description": "Cart price with included tax for quote item in base currency."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/negotiable-quote-data-negotiable-quote-item-totals-extension-interface"
          }
        },
        "required": [
          "cost",
          "catalog_price",
          "base_catalog_price",
          "catalog_price_incl_tax",
          "base_catalog_price_incl_tax",
          "cart_price",
          "base_cart_price",
          "cart_tax",
          "base_cart_tax",
          "cart_price_incl_tax",
          "base_cart_price_incl_tax"
        ]
      },
      "negotiable-quote-data-negotiable-quote-item-totals-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\NegotiableQuote\\Api\\Data\\NegotiableQuoteItemTotalsInterface"
      },
      "quote-data-total-segment-interface": {
        "type": "object",
        "description": "Interface TotalsInterface",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code"
          },
          "title": {
            "type": "string",
            "description": "Total title"
          },
          "value": {
            "type": "number",
            "description": "Total value"
          },
          "area": {
            "type": "string",
            "description": "Display area code."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/quote-data-total-segment-extension-interface"
          }
        },
        "required": ["code", "value"]
      },
      "quote-data-total-segment-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalSegmentInterface",
        "properties": {
          "tax_grandtotal_details": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/tax-data-grand-total-details-interface"
            }
          },
          "gift_cards": {
            "type": "string"
          },
          "gw_order_id": {
            "type": "string"
          },
          "gw_item_ids": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "gw_allow_gift_receipt": {
            "type": "string"
          },
          "gw_add_card": {
            "type": "string"
          },
          "gw_price": {
            "type": "string"
          },
          "gw_base_price": {
            "type": "string"
          },
          "gw_items_price": {
            "type": "string"
          },
          "gw_items_base_price": {
            "type": "string"
          },
          "gw_card_price": {
            "type": "string"
          },
          "gw_card_base_price": {
            "type": "string"
          },
          "gw_base_tax_amount": {
            "type": "string"
          },
          "gw_tax_amount": {
            "type": "string"
          },
          "gw_items_base_tax_amount": {
            "type": "string"
          },
          "gw_items_tax_amount": {
            "type": "string"
          },
          "gw_card_base_tax_amount": {
            "type": "string"
          },
          "gw_card_tax_amount": {
            "type": "string"
          },
          "gw_price_incl_tax": {
            "type": "string"
          },
          "gw_base_price_incl_tax": {
            "type": "string"
          },
          "gw_card_price_incl_tax": {
            "type": "string"
          },
          "gw_card_base_price_incl_tax": {
            "type": "string"
          },
          "gw_items_price_incl_tax": {
            "type": "string"
          },
          "gw_items_base_price_incl_tax": {
            "type": "string"
          }
        }
      },
      "tax-data-grand-total-details-interface": {
        "type": "object",
        "description": "Interface GrandTotalDetailsInterface",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Tax amount value"
          },
          "rates": {
            "type": "array",
            "description": "Tax rates info",
            "items": {
              "$ref": "#/components/schemas/tax-data-grand-total-rates-interface"
            }
          },
          "group_id": {
            "type": "integer",
            "description": "Group identifier"
          }
        },
        "required": ["amount", "rates", "group_id"]
      },
      "tax-data-grand-total-rates-interface": {
        "type": "object",
        "description": "Interface GrandTotalRatesInterface",
        "properties": {
          "percent": {
            "type": "string",
            "description": "Tax percentage value"
          },
          "title": {
            "type": "string",
            "description": "Rate title"
          }
        },
        "required": ["percent", "title"]
      },
      "quote-data-totals-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Quote\\Api\\Data\\TotalsInterface",
        "properties": {
          "coupon_label": {
            "type": "string"
          },
          "negotiable_quote_totals": {
            "$ref": "#/components/schemas/negotiable-quote-data-negotiable-quote-totals-interface"
          },
          "base_customer_balance_amount": {
            "type": "number"
          },
          "customer_balance_amount": {
            "type": "number"
          },
          "coupon_codes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "coupons_labels": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "reward_points_balance": {
            "type": "number"
          },
          "reward_currency_amount": {
            "type": "number"
          },
          "base_reward_currency_amount": {
            "type": "number"
          }
        }
      },
      "negotiable-quote-data-negotiable-quote-totals-interface": {
        "type": "object",
        "description": "Extension attribute for quote totals model.",
        "properties": {
          "items_count": {
            "type": "integer",
            "description": "The number of different items or products in the cart."
          },
          "quote_status": {
            "type": "string",
            "description": "Negotiable quote status."
          },
          "created_at": {
            "type": "string",
            "description": "The cart creation date and time."
          },
          "updated_at": {
            "type": "string",
            "description": "The cart last update date and time."
          },
          "customer_group": {
            "type": "integer",
            "description": "Customer group id."
          },
          "base_to_quote_rate": {
            "type": "number",
            "description": "Base currency to quote currency rate."
          },
          "cost_total": {
            "type": "number",
            "description": "Total cost for quote."
          },
          "base_cost_total": {
            "type": "number",
            "description": "Total cost for quote in base currency."
          },
          "original_total": {
            "type": "number",
            "description": "Original quote total."
          },
          "base_original_total": {
            "type": "number",
            "description": "Original quote total in base currency."
          },
          "original_tax": {
            "type": "number",
            "description": "Original tax amount for quote."
          },
          "base_original_tax": {
            "type": "number",
            "description": "Original tax amount for quote in base currency."
          },
          "original_price_incl_tax": {
            "type": "number",
            "description": "Original price with included tax for quote."
          },
          "base_original_price_incl_tax": {
            "type": "number",
            "description": "Original price with included tax for quote in base currency."
          },
          "negotiated_price_type": {
            "type": "integer",
            "description": "Negotiable quote type."
          },
          "negotiated_price_value": {
            "type": "number",
            "description": "Negotiable price value for quote."
          }
        },
        "required": [
          "items_count",
          "quote_status",
          "created_at",
          "updated_at",
          "customer_group",
          "base_to_quote_rate",
          "cost_total",
          "base_cost_total",
          "original_total",
          "base_original_total",
          "original_tax",
          "base_original_tax",
          "original_price_incl_tax",
          "base_original_price_incl_tax",
          "negotiated_price_type",
          "negotiated_price_value"
        ]
      },
      "checkout-data-shipping-information-interface": {
        "type": "object",
        "description": "Interface ShippingInformationInterface",
        "properties": {
          "shipping_address": {
            "$ref": "#/components/schemas/quote-data-address-interface"
          },
          "billing_address": {
            "$ref": "#/components/schemas/quote-data-address-interface"
          },
          "shipping_method_code": {
            "type": "string",
            "description": "Shipping method code"
          },
          "shipping_carrier_code": {
            "type": "string",
            "description": "Carrier code"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/checkout-data-shipping-information-extension-interface"
          },
          "custom_attributes": {
            "type": "array",
            "description": "Custom attributes values.",
            "items": {
              "$ref": "#/components/schemas/framework-attribute-interface"
            }
          }
        },
        "required": ["shipping_address", "shipping_method_code", "shipping_carrier_code"]
      },
      "checkout-data-shipping-information-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\ShippingInformationInterface"
      },
      "checkout-data-payment-details-interface": {
        "type": "object",
        "description": "Interface PaymentDetailsInterface",
        "properties": {
          "payment_methods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/quote-data-payment-method-interface"
            }
          },
          "totals": {
            "$ref": "#/components/schemas/quote-data-totals-interface"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/checkout-data-payment-details-extension-interface"
          }
        },
        "required": ["payment_methods", "totals"]
      },
      "checkout-data-payment-details-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\PaymentDetailsInterface"
      },
      "checkout-data-totals-information-interface": {
        "type": "object",
        "description": "Interface TotalsInformationInterface",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/quote-data-address-interface"
          },
          "shipping_method_code": {
            "type": "string",
            "description": "Shipping method code"
          },
          "shipping_carrier_code": {
            "type": "string",
            "description": "Carrier code"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/checkout-data-totals-information-extension-interface"
          },
          "custom_attributes": {
            "type": "array",
            "description": "Custom attributes values.",
            "items": {
              "$ref": "#/components/schemas/framework-attribute-interface"
            }
          }
        },
        "required": ["address"]
      },
      "checkout-data-totals-information-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\Checkout\\Api\\Data\\TotalsInformationInterface"
      },
      "two-factor-auth-provider-interface": {
        "type": "object",
        "description": "2FA provider interface",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "True if this provider has been enabled by admin"
          },
          "engine": {
            "$ref": "#/components/schemas/two-factor-auth-engine-interface"
          },
          "code": {
            "type": "string",
            "description": "Provider code"
          },
          "name": {
            "type": "string",
            "description": "Provider name"
          },
          "icon": {
            "type": "string",
            "description": "Icon"
          },
          "reset_allowed": {
            "type": "boolean",
            "description": "True if this provider configuration can be reset"
          },
          "configure_action": {
            "type": "string",
            "description": "Configure action"
          },
          "auth_action": {
            "type": "string",
            "description": "Auth action"
          },
          "extra_actions": {
            "type": "array",
            "description": "Allowed extra actions",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "enabled",
          "engine",
          "code",
          "name",
          "icon",
          "reset_allowed",
          "configure_action",
          "auth_action",
          "extra_actions"
        ]
      },
      "two-factor-auth-engine-interface": {
        "type": "object",
        "description": "2FA engine interface",
        "properties": {
          "enabled": {
            "type": "boolean",
            "description": "True if this provider has been enabled by admin"
          }
        },
        "required": ["enabled"]
      },
      "two-factor-auth-data-google-configure-interface": {
        "type": "object",
        "description": "Google configuration data interface",
        "properties": {
          "qr_code_base64": {
            "type": "string",
            "description": "Value for QR code base 64"
          },
          "secret_code": {
            "type": "string",
            "description": "Value for secret code"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/two-factor-auth-data-google-configure-extension-interface"
          }
        },
        "required": ["qr_code_base64", "secret_code"]
      },
      "two-factor-auth-data-google-configure-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\TwoFactorAuth\\Api\\Data\\GoogleConfigureInterface"
      },
      "two-factor-auth-data-authy-device-interface": {
        "type": "object",
        "description": "Authy device data interface",
        "properties": {
          "country": {
            "type": "string",
            "description": "The country"
          },
          "phone_number": {
            "type": "string",
            "description": "The phone number"
          },
          "method": {
            "type": "string",
            "description": "The method to authenticate with"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/two-factor-auth-data-authy-device-extension-interface"
          }
        },
        "required": ["country", "phone_number", "method"]
      },
      "two-factor-auth-data-authy-device-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\TwoFactorAuth\\Api\\Data\\AuthyDeviceInterface"
      },
      "two-factor-auth-data-authy-registration-prompt-response-interface": {
        "type": "object",
        "description": "Response for device registration prompt",
        "properties": {
          "message": {
            "type": "string",
            "description": "The message"
          },
          "expiration_seconds": {
            "type": "string",
            "description": "The seconds to expire"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/two-factor-auth-data-authy-registration-prompt-response-extension-interface"
          }
        },
        "required": ["message", "expiration_seconds"]
      },
      "two-factor-auth-data-authy-registration-prompt-response-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\TwoFactorAuth\\Api\\Data\\AuthyRegistrationPromptResponseInterface"
      },
      "two-factor-auth-data-u2f-web-authn-request-interface": {
        "type": "object",
        "description": "Represents a WebAuthn dataset",
        "properties": {
          "credential_request_options_json": {
            "type": "string",
            "description": "The needed data to initiate a WebAuthn registration ceremony"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/two-factor-auth-data-u2f-web-authn-request-extension-interface"
          }
        },
        "required": ["credential_request_options_json"]
      },
      "two-factor-auth-data-u2f-web-authn-request-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\TwoFactorAuth\\Api\\Data\\U2fWebAuthnRequestInterface"
      },
      "two-factor-auth-data-duo-data-interface": {
        "type": "object",
        "description": "Represents the data needed to use duo",
        "properties": {
          "signature": {
            "type": "string",
            "description": "The signature"
          },
          "api_hostname": {
            "type": "string",
            "description": "The api hostname"
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/two-factor-auth-data-duo-data-extension-interface"
          }
        },
        "required": ["signature", "api_hostname"]
      },
      "two-factor-auth-data-duo-data-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\TwoFactorAuth\\Api\\Data\\DuoDataInterface"
      },
      "gift-card-account-data-gift-card-account-interface": {
        "type": "object",
        "description": "Gift Card Account data",
        "properties": {
          "gift_cards": {
            "type": "array",
            "description": "Cards codes.",
            "items": {
              "type": "string"
            }
          },
          "gift_cards_amount": {
            "type": "number",
            "description": "Cards amount in quote currency."
          },
          "base_gift_cards_amount": {
            "type": "number",
            "description": "Cards amount in base currency."
          },
          "gift_cards_amount_used": {
            "type": "number",
            "description": "Cards amount used in quote currency."
          },
          "base_gift_cards_amount_used": {
            "type": "number",
            "description": "Cards amount used in base currency."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/gift-card-account-data-gift-card-account-extension-interface"
          }
        },
        "required": [
          "gift_cards_amount",
          "base_gift_cards_amount",
          "gift_cards_amount_used",
          "base_gift_cards_amount_used"
        ]
      },
      "gift-card-account-data-gift-card-account-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\GiftCardAccount\\Api\\Data\\GiftCardAccountInterface"
      },
      "inventory-in-store-pickup-api-data-search-result-interface": {
        "type": "object",
        "description": "Search results for providing pickup locations.",
        "properties": {
          "items": {
            "type": "array",
            "description": "Items list.",
            "items": {
              "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-pickup-location-interface"
            }
          },
          "search_request": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-interface"
          },
          "total_count": {
            "type": "integer",
            "description": "Total count."
          }
        },
        "required": ["items", "search_request", "total_count"]
      },
      "inventory-in-store-pickup-api-data-pickup-location-interface": {
        "type": "object",
        "description": "Represents sources projection on In-Store Pickup context. Realisation must follow immutable DTO concept. Partial immutability done according to restriction of current Extension Attributes implementation.",
        "properties": {
          "pickup_location_code": {
            "type": "string",
            "description": "Source code of Pickup Location."
          },
          "name": {
            "type": "string",
            "description": "Pickup Location name."
          },
          "email": {
            "type": "string",
            "description": "Pickup Location contact email."
          },
          "fax": {
            "type": "string",
            "description": "Fax contact info."
          },
          "contact_name": {
            "type": "string",
            "description": "Pickup Location contact name."
          },
          "description": {
            "type": "string",
            "description": "Pickup Location description."
          },
          "latitude": {
            "type": "number",
            "description": "Pickup Location latitude."
          },
          "longitude": {
            "type": "number",
            "description": "Pickup Location longitude."
          },
          "country_id": {
            "type": "string",
            "description": "Pickup Location country ID."
          },
          "region_id": {
            "type": "integer",
            "description": "Pickup Location region ID."
          },
          "region": {
            "type": "string",
            "description": "Pickup Location region."
          },
          "city": {
            "type": "string",
            "description": "Pickup Location city."
          },
          "street": {
            "type": "string",
            "description": "Pickup Location street."
          },
          "postcode": {
            "type": "string",
            "description": "Pickup Location postcode."
          },
          "phone": {
            "type": "string",
            "description": "Pickup Location phone."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-pickup-location-extension-interface"
          }
        },
        "required": ["pickup_location_code"]
      },
      "inventory-in-store-pickup-api-data-pickup-location-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\InventoryInStorePickupApi\\Api\\Data\\PickupLocationInterface"
      },
      "inventory-in-store-pickup-api-data-search-request-interface": {
        "type": "object",
        "description": "Endpoint used to search Pickup Locations by different parameters: - by attribute filters fields @see \\Magento\\InventoryInStorePickupApi\\Api\\Data\\SearchRequest\\FiltersInterface - by distance to the address @see \\Magento\\InventoryInStorePickupApi\\Api\\Data\\SearchRequest\\AreaInterface Also, endpoint supports paging and sort orders.",
        "properties": {
          "area": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-area-interface"
          },
          "filters": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-filters-interface"
          },
          "page_size": {
            "type": "integer",
            "description": "Page size."
          },
          "current_page": {
            "type": "integer",
            "description": "Current page."
          },
          "scope_type": {
            "type": "string",
            "description": "Sales Channel Type."
          },
          "scope_code": {
            "type": "string",
            "description": "Sales Channel code."
          },
          "sort": {
            "type": "array",
            "description": "Sort Order.",
            "items": {
              "$ref": "#/components/schemas/framework-sort-order"
            }
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-extension-interface"
          }
        },
        "required": ["current_page", "scope_type", "scope_code"]
      },
      "inventory-in-store-pickup-api-data-search-request-area-interface": {
        "type": "object",
        "description": "Filter by Distance to the Address. Pickup Locations will be filtered by distance according to the geo-position of the entered address. Required fields for the address are country and one of the field: region or city or postcode.",
        "properties": {
          "radius": {
            "type": "integer",
            "description": "Search radius in KM."
          },
          "search_term": {
            "type": "string",
            "description": "Search term string."
          }
        },
        "required": ["radius", "search_term"]
      },
      "inventory-in-store-pickup-api-data-search-request-filters-interface": {
        "type": "object",
        "description": "Filter to filter by Fields. Each field may be filtered with different condition type. Supported condition types restricted by @see \\Magento\\Framework\\Api\\SearchCriteriaInterface",
        "properties": {
          "country": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-filter-interface"
          },
          "postcode": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-filter-interface"
          },
          "region": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-filter-interface"
          },
          "region_id": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-filter-interface"
          },
          "city": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-filter-interface"
          },
          "street": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-filter-interface"
          },
          "name": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-filter-interface"
          },
          "pickup_location_code": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-filter-interface"
          }
        }
      },
      "inventory-in-store-pickup-api-data-search-request-filter-interface": {
        "type": "object",
        "description": "Filter for Pickup Location search.",
        "properties": {
          "value": {
            "type": "string",
            "description": "Value."
          },
          "condition_type": {
            "type": "string",
            "description": "Condition Type."
          }
        },
        "required": ["value", "condition_type"]
      },
      "inventory-in-store-pickup-api-data-search-request-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\InventoryInStorePickupApi\\Api\\Data\\SearchRequestInterface",
        "properties": {
          "products_info": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-product-info-interface"
            }
          }
        }
      },
      "inventory-in-store-pickup-api-data-search-request-product-info-interface": {
        "type": "object",
        "description": "Product Info Data Transfer Object.",
        "properties": {
          "sku": {
            "type": "string",
            "description": "Product SKU."
          },
          "extension_attributes": {
            "$ref": "#/components/schemas/inventory-in-store-pickup-api-data-search-request-product-info-extension-interface"
          }
        },
        "required": ["sku"]
      },
      "inventory-in-store-pickup-api-data-search-request-product-info-extension-interface": {
        "type": "object",
        "description": "ExtensionInterface class for @see \\Magento\\InventoryInStorePickupApi\\Api\\Data\\SearchRequest\\ProductInfoInterface"
      },
      "payment-services-paypal-payment-config-response-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "apple_pay": {
            "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-apple-pay-interface"
          },
          "hosted_fields": {
            "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-hosted-fields-interface"
          },
          "smart_buttons": {
            "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-smart-buttons-interface"
          }
        },
        "required": ["apple_pay", "hosted_fields", "smart_buttons"]
      },
      "payment-services-paypal-data-payment-config-apple-pay-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "button_styles": {
            "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-button-styles-interface"
          },
          "payment_source": {
            "type": "string",
            "description": "PaymentSource"
          },
          "code": {
            "type": "string",
            "description": "Code"
          },
          "sdk_params": {
            "type": "array",
            "description": "SDK params",
            "items": {
              "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-sdk-params-interface"
            }
          },
          "is_visible": {
            "type": "boolean",
            "description": "Visible"
          },
          "sort_order": {
            "type": "string",
            "description": "Sort Order"
          },
          "payment_intent": {
            "type": "string",
            "description": "Payment intent"
          },
          "title": {
            "type": "string",
            "description": "Title"
          }
        },
        "required": [
          "button_styles",
          "payment_source",
          "code",
          "sdk_params",
          "is_visible",
          "sort_order",
          "payment_intent",
          "title"
        ]
      },
      "payment-services-paypal-data-payment-config-button-styles-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "layout": {
            "type": "string",
            "description": "Layout"
          },
          "color": {
            "type": "string",
            "description": "Color"
          },
          "shape": {
            "type": "string",
            "description": "Shape"
          },
          "label": {
            "type": "string",
            "description": "Label"
          },
          "tagline": {
            "type": "boolean",
            "description": "ShowTagline"
          },
          "height": {
            "type": "integer",
            "description": "Height"
          },
          "use_default_height": {
            "type": "boolean",
            "description": "Height"
          }
        },
        "required": ["layout", "color", "shape", "label", "tagline", "height", "use_default_height"]
      },
      "payment-services-paypal-data-payment-config-sdk-params-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "name": {
            "type": "string",
            "description": "Code"
          },
          "value": {
            "type": "string",
            "description": "Config"
          }
        },
        "required": ["name", "value"]
      },
      "payment-services-paypal-data-payment-config-hosted-fields-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "payment_source": {
            "type": "string",
            "description": "Payment Source"
          },
          "three_d_s": {
            "type": "string",
            "description": "ThreeDS"
          },
          "is_vault_enabled": {
            "type": "boolean",
            "description": "HasIsVaultEnabled"
          },
          "cc_vault_code": {
            "type": "string",
            "description": "CcVaultCode"
          },
          "requires_card_details": {
            "type": "boolean",
            "description": "RequiresCardDetails"
          },
          "code": {
            "type": "string",
            "description": "Code"
          },
          "sdk_params": {
            "type": "array",
            "description": "SDK params",
            "items": {
              "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-sdk-params-interface"
            }
          },
          "is_visible": {
            "type": "boolean",
            "description": "Visible"
          },
          "sort_order": {
            "type": "string",
            "description": "Sort Order"
          },
          "payment_intent": {
            "type": "string",
            "description": "Payment intent"
          },
          "title": {
            "type": "string",
            "description": "Title"
          }
        },
        "required": [
          "payment_source",
          "three_d_s",
          "is_vault_enabled",
          "cc_vault_code",
          "requires_card_details",
          "code",
          "sdk_params",
          "is_visible",
          "sort_order",
          "payment_intent",
          "title"
        ]
      },
      "payment-services-paypal-data-payment-config-smart-buttons-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "display_message": {
            "type": "boolean",
            "description": "CanDisplayMessage"
          },
          "display_venmo": {
            "type": "boolean",
            "description": "Venmo"
          },
          "message_styles": {
            "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-smart-buttons-message-styles-interface"
          },
          "button_styles": {
            "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-button-styles-interface"
          },
          "code": {
            "type": "string",
            "description": "Code"
          },
          "sdk_params": {
            "type": "array",
            "description": "SDK params",
            "items": {
              "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-sdk-params-interface"
            }
          },
          "is_visible": {
            "type": "boolean",
            "description": "Visible"
          },
          "sort_order": {
            "type": "string",
            "description": "Sort Order"
          },
          "payment_intent": {
            "type": "string",
            "description": "Payment intent"
          },
          "title": {
            "type": "string",
            "description": "Title"
          }
        },
        "required": [
          "display_message",
          "display_venmo",
          "message_styles",
          "button_styles",
          "code",
          "sdk_params",
          "is_visible",
          "sort_order",
          "payment_intent",
          "title"
        ]
      },
      "payment-services-paypal-data-payment-config-smart-buttons-message-styles-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "layout": {
            "type": "string",
            "description": "CanDisplayMessage"
          },
          "logo": {
            "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-smart-buttons-logo-interface"
          }
        },
        "required": ["layout", "logo"]
      },
      "payment-services-paypal-data-payment-config-smart-buttons-logo-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "type": {
            "type": "string",
            "description": "CanDisplayMessage"
          }
        },
        "required": ["type"]
      },
      "payment-services-paypal-data-payment-order-interface": {
        "type": "object",
        "description": "Interface PaymentOrderInterface",
        "properties": {
          "id": {
            "type": "string",
            "description": "Payment order id"
          },
          "mp_order_id": {
            "type": "string",
            "description": "Payment order mpOrderId"
          },
          "status": {
            "type": "string",
            "description": "Payment order status"
          }
        },
        "required": ["id", "mp_order_id", "status"]
      },
      "payment-services-paypal-data-payment-order-details-interface": {
        "type": "object",
        "description": "Interface PaymentOrderDetailsInterface",
        "properties": {
          "payment_source_details": {
            "$ref": "#/components/schemas/payment-services-paypal-data-payment-source-details-interface"
          },
          "id": {
            "type": "string",
            "description": "Payment order id"
          },
          "mp_order_id": {
            "type": "string",
            "description": "Payment order mpOrderId"
          },
          "status": {
            "type": "string",
            "description": "Payment order status"
          }
        },
        "required": ["payment_source_details", "id", "mp_order_id", "status"]
      },
      "payment-services-paypal-data-payment-source-details-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "card": {
            "$ref": "#/components/schemas/payment-services-paypal-data-payment-card-details-interface"
          }
        },
        "required": ["card"]
      },
      "payment-services-paypal-data-payment-card-details-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name"
          },
          "last_digits": {
            "type": "string",
            "description": "Last digits"
          },
          "card_expiry_month": {
            "type": "string",
            "description": "Card expiry month"
          },
          "card_expiry_year": {
            "type": "string",
            "description": "Card expiry year"
          },
          "bin_details": {
            "$ref": "#/components/schemas/payment-services-paypal-data-payment-card-bin-details-interface"
          }
        },
        "required": ["name", "last_digits", "card_expiry_month", "card_expiry_year", "bin_details"]
      },
      "payment-services-paypal-data-payment-card-bin-details-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "bin": {
            "type": "string",
            "description": "Bin"
          }
        },
        "required": ["bin"]
      },
      "payment-services-paypal-data-payment-sdk-params-interface": {
        "type": "object",
        "description": "",
        "properties": {
          "code": {
            "type": "string",
            "description": "The payments sdk code"
          },
          "params": {
            "type": "array",
            "description": "The payments sdk params",
            "items": {
              "$ref": "#/components/schemas/payment-services-paypal-data-payment-config-sdk-params-interface"
            }
          }
        },
        "required": ["code", "params"]
      },
      "pay-pal-braintree-data-auth-data-interface": {
        "type": "object",
        "description": "Interface AuthDataInterface",
        "properties": {
          "client_token": {
            "type": "string",
            "description": "Client token"
          },
          "display_name": {
            "type": "string",
            "description": "Display name"
          },
          "action_success": {
            "type": "string",
            "description": "To success page"
          },
          "logged_in": {
            "type": "boolean"
          },
          "store_code": {
            "type": "string",
            "description": "Current store code"
          }
        },
        "required": ["display_name", "action_success", "logged_in", "store_code"]
      }
    }
  }
}
