import { ApolloErrorAlert } from '@graphcommerce/ecommerce-ui'
import { PageOptions } from '@graphcommerce/framer-next-pages'
import { PageMeta, StoreConfigDocument } from '@graphcommerce/magento-store'
import { FullPageMessage, GetStaticProps } from '@graphcommerce/next-ui'
import { i18n } from '@lingui/core'
import { Trans } from '@lingui/react'
import { Box, CircularProgress, Container } from '@mui/material'
import { useRouter } from 'next/router'
import { LayoutDocument, LayoutMinimal, LayoutMinimalProps } from '../components/Layout'
import { useOciCart } from '../components/OCI/hooks/useOciCart'
import { graphqlSharedClient, graphqlSsrClient } from '../lib/graphql/graphqlSsrClient'

type Props = Record<string, unknown>
type GetPageStaticProps = GetStaticProps<LayoutMinimalProps, Props>

function CheckoutProcessToken() {
  const {
    query: { username, password, HOOK_URL: hookUrl },
    isReady,
  } = useRouter()
  const { loading, error } = useOciCart()

  const missingParam = isReady && (!username || !password || !hookUrl)
  const isLoading = loading || !isReady

  return (
    <>
      <PageMeta title={i18n._(/* i18n */ 'OCI Login')} metaRobots={['noindex']} />
      {isLoading && (
        <FullPageMessage icon={<CircularProgress />} title={<Trans id='Loading' />}>
          <Trans id='This may take a second' />
        </FullPageMessage>
      )}

      {!isLoading && (
        <Container maxWidth='lg'>
          {(missingParam || !!error) && (
            <FullPageMessage icon='' title={<Trans id='Error' />}>
              <Box
                sx={(theme) => ({
                  display: 'flex',
                  flexDirection: 'column',
                  gap: theme.spacings.xs,
                  alignItems: 'center',
                })}
              >
                {missingParam && (
                  <Trans id='Missing required parameters. Please check your URL and try again.' />
                )}

                {!!error && (
                  <Trans id='Something went wrong while getting your cart. Please go back and try again.' />
                )}
              </Box>
            </FullPageMessage>
          )}

          <ApolloErrorAlert error={error} sx={{ display: 'flex', justifyContent: 'center' }} />
        </Container>
      )}
    </>
  )
}

const pageOptions: PageOptions<LayoutMinimalProps> = {
  Layout: LayoutMinimal,
}
CheckoutProcessToken.pageOptions = pageOptions

export default CheckoutProcessToken

export const getStaticProps: GetPageStaticProps = async ({ locale }) => {
  const client = graphqlSharedClient(locale)
  const conf = client.query({ query: StoreConfigDocument })
  const staticClient = graphqlSsrClient(locale)

  const layout = staticClient.query({ query: LayoutDocument, fetchPolicy: 'cache-first' })

  return {
    props: {
      ...(await layout).data,
      apolloState: await conf.then(() => client.cache.extract()),
    },
  }
}
