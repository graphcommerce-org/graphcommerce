// @ts-nocheck
import { GraphQLResolveInfo, SelectionSetNode, FieldNode, GraphQLScalarType, GraphQLScalarTypeConfig } from 'graphql';

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
export type RequireFields<T, K extends keyof T> = Omit<T, K> & { [P in K]-?: NonNullable<T[P]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
  DateTime: any;
  Hex: any;
  Json: any;
  Long: any;
  RGBAHue: any;
  RGBATransparency: any;
  RichTextAST: any;
};

export type Query = {
  /** Fetches an object given its ID */
  node?: Maybe<Node>;
  /** Retrieve multiple rowServiceOptionsMultiple */
  rowServiceOptionsMultiple: Array<RowServiceOptions>;
  /** Retrieve a single rowServiceOptions */
  rowServiceOptions?: Maybe<RowServiceOptions>;
  /** Retrieve multiple rowServiceOptionsMultiple using the Relay connection interface */
  rowServiceOptionsMultipleConnection: RowServiceOptionsConnection;
  /** Retrieve document version */
  rowServiceOptionsVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pageLinks */
  pageLinks: Array<PageLink>;
  /** Retrieve a single pageLink */
  pageLink?: Maybe<PageLink>;
  /** Retrieve multiple pageLinks using the Relay connection interface */
  pageLinksConnection: PageLinkConnection;
  /** Retrieve document version */
  pageLinkVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple footers */
  footers: Array<Footer>;
  /** Retrieve a single footer */
  footer?: Maybe<Footer>;
  /** Retrieve multiple footers using the Relay connection interface */
  footersConnection: FooterConnection;
  /** Retrieve document version */
  footerVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowButtonLinkLists */
  rowButtonLinkLists: Array<RowButtonLinkList>;
  /** Retrieve a single rowButtonLinkList */
  rowButtonLinkList?: Maybe<RowButtonLinkList>;
  /** Retrieve multiple rowButtonLinkLists using the Relay connection interface */
  rowButtonLinkListsConnection: RowButtonLinkListConnection;
  /** Retrieve document version */
  rowButtonLinkListVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowQuotes */
  rowQuotes: Array<RowQuote>;
  /** Retrieve a single rowQuote */
  rowQuote?: Maybe<RowQuote>;
  /** Retrieve multiple rowQuotes using the Relay connection interface */
  rowQuotesConnection: RowQuoteConnection;
  /** Retrieve document version */
  rowQuoteVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowBlogContents */
  rowBlogContents: Array<RowBlogContent>;
  /** Retrieve a single rowBlogContent */
  rowBlogContent?: Maybe<RowBlogContent>;
  /** Retrieve multiple rowBlogContents using the Relay connection interface */
  rowBlogContentsConnection: RowBlogContentConnection;
  /** Retrieve document version */
  rowBlogContentVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple uspsMultiple */
  uspsMultiple: Array<Usps>;
  /** Retrieve a single usps */
  usps?: Maybe<Usps>;
  /** Retrieve multiple uspsMultiple using the Relay connection interface */
  uspsMultipleConnection: UspsConnection;
  /** Retrieve document version */
  uspsVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowContentLinksMultiple */
  rowContentLinksMultiple: Array<RowContentLinks>;
  /** Retrieve a single rowContentLinks */
  rowContentLinks?: Maybe<RowContentLinks>;
  /** Retrieve multiple rowContentLinksMultiple using the Relay connection interface */
  rowContentLinksMultipleConnection: RowContentLinksConnection;
  /** Retrieve document version */
  rowContentLinksVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowColumnOnes */
  rowColumnOnes: Array<RowColumnOne>;
  /** Retrieve a single rowColumnOne */
  rowColumnOne?: Maybe<RowColumnOne>;
  /** Retrieve multiple rowColumnOnes using the Relay connection interface */
  rowColumnOnesConnection: RowColumnOneConnection;
  /** Retrieve document version */
  rowColumnOneVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowColumnTwos */
  rowColumnTwos: Array<RowColumnTwo>;
  /** Retrieve a single rowColumnTwo */
  rowColumnTwo?: Maybe<RowColumnTwo>;
  /** Retrieve multiple rowColumnTwos using the Relay connection interface */
  rowColumnTwosConnection: RowColumnTwoConnection;
  /** Retrieve document version */
  rowColumnTwoVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowColumnThrees */
  rowColumnThrees: Array<RowColumnThree>;
  /** Retrieve a single rowColumnThree */
  rowColumnThree?: Maybe<RowColumnThree>;
  /** Retrieve multiple rowColumnThrees using the Relay connection interface */
  rowColumnThreesConnection: RowColumnThreeConnection;
  /** Retrieve document version */
  rowColumnThreeVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pages */
  pages: Array<Page>;
  /** Retrieve a single page */
  page?: Maybe<Page>;
  /** Retrieve multiple pages using the Relay connection interface */
  pagesConnection: PageConnection;
  /** Retrieve document version */
  pageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple assets */
  assets: Array<Asset>;
  /** Retrieve a single asset */
  asset?: Maybe<Asset>;
  /** Retrieve multiple assets using the Relay connection interface */
  assetsConnection: AssetConnection;
  /** Retrieve document version */
  assetVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple users */
  users: Array<User>;
  /** Retrieve a single user */
  user?: Maybe<User>;
  /** Retrieve multiple users using the Relay connection interface */
  usersConnection: UserConnection;
  /** Retrieve multiple rowSpecialBanners */
  rowSpecialBanners: Array<RowSpecialBanner>;
  /** Retrieve a single rowSpecialBanner */
  rowSpecialBanner?: Maybe<RowSpecialBanner>;
  /** Retrieve multiple rowSpecialBanners using the Relay connection interface */
  rowSpecialBannersConnection: RowSpecialBannerConnection;
  /** Retrieve document version */
  rowSpecialBannerVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowProductMultiple */
  rowProductMultiple: Array<RowProduct>;
  /** Retrieve a single rowProduct */
  rowProduct?: Maybe<RowProduct>;
  /** Retrieve multiple rowProductMultiple using the Relay connection interface */
  rowProductMultipleConnection: RowProductConnection;
  /** Retrieve document version */
  rowProductVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowHeroBanners */
  rowHeroBanners: Array<RowHeroBanner>;
  /** Retrieve a single rowHeroBanner */
  rowHeroBanner?: Maybe<RowHeroBanner>;
  /** Retrieve multiple rowHeroBanners using the Relay connection interface */
  rowHeroBannersConnection: RowHeroBannerConnection;
  /** Retrieve document version */
  rowHeroBannerVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple scheduledOperations */
  scheduledOperations: Array<ScheduledOperation>;
  /** Retrieve a single scheduledOperation */
  scheduledOperation?: Maybe<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations using the Relay connection interface */
  scheduledOperationsConnection: ScheduledOperationConnection;
  /** Retrieve multiple scheduledReleases */
  scheduledReleases: Array<ScheduledRelease>;
  /** Retrieve a single scheduledRelease */
  scheduledRelease?: Maybe<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases using the Relay connection interface */
  scheduledReleasesConnection: ScheduledReleaseConnection;
  /** Retrieve multiple banners */
  banners: Array<Banner>;
  /** Retrieve a single banner */
  banner?: Maybe<Banner>;
  /** Retrieve multiple banners using the Relay connection interface */
  bannersConnection: BannerConnection;
  /** Retrieve document version */
  bannerVersion?: Maybe<DocumentVersion>;
  /** Get a list of available store views and their config information. */
  availableStores?: Maybe<Array<Maybe<StoreConfig>>>;
  /** Returns information about shopping cart */
  cart?: Maybe<Cart>;
  categories?: Maybe<CategoryResult>;
  /**
   * The category query searches for categories that match the criteria specified in the search and filter attributes.
   * @deprecated Use 'categoryList' query instead of 'category' query
   */
  category?: Maybe<CategoryTree>;
  /** Returns an array of categories based on the specified filters. */
  categoryList?: Maybe<Array<Maybe<CategoryTree>>>;
  /** Retrieves an array of configuration data for the chat widget. */
  chatData?: Maybe<ChatData>;
  /** The Checkout Agreements information */
  checkoutAgreements?: Maybe<Array<Maybe<CheckoutAgreement>>>;
  /** The CMS block query returns information about CMS blocks */
  cmsBlocks?: Maybe<CmsBlocks>;
  /** The CMS page query returns information about a CMS page */
  cmsPage?: Maybe<CmsPage>;
  /** Return products that have been added to the specified compare list */
  compareList?: Maybe<CompareList>;
  /** The countries query provides information for all countries. */
  countries?: Maybe<Array<Maybe<Country>>>;
  /** The countries query provides information for a single country. */
  country?: Maybe<Country>;
  /** The currency query returns information about store currency. */
  currency?: Maybe<Currency>;
  /** The customAttributeMetadata query returns the attribute type, given an attribute code and entity type */
  customAttributeMetadata?: Maybe<CustomAttributeMetadata>;
  /** The customer query returns information about a customer account */
  customer?: Maybe<Customer>;
  /** Returns information about the customer shopping cart */
  customerCart: Cart;
  /** The query returns the contents of a customer's downloadable products */
  customerDownloadableProducts?: Maybe<CustomerDownloadableProducts>;
  /** @deprecated Use orders from customer instead */
  customerOrders?: Maybe<CustomerOrders>;
  /** Return a list of customer payment tokens */
  customerPaymentTokens?: Maybe<CustomerPaymentTokens>;
  /** Returns status of Easy Email Capture for Checkout. */
  emailCaptureCheckout?: Maybe<IsConfigSettingEnabledOutput>;
  /** Returns status of Easy Email Capture for Newsletter. */
  emailCaptureNewsletter?: Maybe<IsConfigSettingEnabledOutput>;
  /** Retrieve secure PayPal url for Payments Pro Hosted Solution transaction. */
  getHostedProUrl?: Maybe<HostedProUrl>;
  /** Retrieve payment credentials for transaction. Use this query for Payflow Link and Payments Advanced payment methods. */
  getPayflowLinkToken?: Maybe<PayflowLinkToken>;
  isEmailAvailable?: Maybe<IsEmailAvailableOutput>;
  mollieCustomerOrder?: Maybe<CustomerOrder>;
  molliePaymentMethods?: Maybe<MolliePaymentMethodsOutput>;
  /** Retrieves information about an order by order id. */
  orderData?: Maybe<Order>;
  /** The pickup locations query searches for locations that match the search request requirements. */
  pickupLocations?: Maybe<PickupLocations>;
  /** Retrieves metadata required by clients to render the Reviews section. */
  productReviewRatingsMetadata: ProductReviewRatingsMetadata;
  /** The products query searches for products that match the criteria specified in the search and filter attributes. */
  products?: Maybe<Products>;
  /** Return the full details for a specified product, category, or CMS page given the specified url_key, appended by the url_suffix, if one exists */
  route?: Maybe<RoutableInterface>;
  /** The store config query */
  storeConfig?: Maybe<StoreConfig>;
  /** Retrieves an array of configuration data for different types of tracking. */
  trackingData?: Maybe<TrackingData>;
  /**
   * The urlResolver query returns the relative URL for a specified product, category or CMS page, using as input a url_key appended by the url_suffix, if one exists
   * @deprecated Use the 'route' query instead
   */
  urlResolver?: Maybe<EntityUrl>;
  /**
   * The wishlist query returns the contents of a customer's wish list
   * @deprecated Moved under `Customer` `wishlist`
   */
  wishlist?: Maybe<WishlistOutput>;
  currentCartId?: Maybe<CurrentCartId>;
  customerToken?: Maybe<CustomerToken>;
};


export type QuerynodeArgs = {
  id: Scalars['ID'];
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowServiceOptionsMultipleArgs = {
  where?: InputMaybe<RowServiceOptionsWhereInput>;
  orderBy?: InputMaybe<RowServiceOptionsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowServiceOptionsArgs = {
  where: RowServiceOptionsWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowServiceOptionsMultipleConnectionArgs = {
  where?: InputMaybe<RowServiceOptionsWhereInput>;
  orderBy?: InputMaybe<RowServiceOptionsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowServiceOptionsVersionArgs = {
  where: VersionWhereInput;
};


export type QuerypageLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerypageLinkArgs = {
  where: PageLinkWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerypageLinksConnectionArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerypageLinkVersionArgs = {
  where: VersionWhereInput;
};


export type QueryfootersArgs = {
  where?: InputMaybe<FooterWhereInput>;
  orderBy?: InputMaybe<FooterOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryfooterArgs = {
  where: FooterWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryfootersConnectionArgs = {
  where?: InputMaybe<FooterWhereInput>;
  orderBy?: InputMaybe<FooterOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryfooterVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowButtonLinkListsArgs = {
  where?: InputMaybe<RowButtonLinkListWhereInput>;
  orderBy?: InputMaybe<RowButtonLinkListOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowButtonLinkListArgs = {
  where: RowButtonLinkListWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowButtonLinkListsConnectionArgs = {
  where?: InputMaybe<RowButtonLinkListWhereInput>;
  orderBy?: InputMaybe<RowButtonLinkListOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowButtonLinkListVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowQuotesArgs = {
  where?: InputMaybe<RowQuoteWhereInput>;
  orderBy?: InputMaybe<RowQuoteOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowQuoteArgs = {
  where: RowQuoteWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowQuotesConnectionArgs = {
  where?: InputMaybe<RowQuoteWhereInput>;
  orderBy?: InputMaybe<RowQuoteOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowQuoteVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowBlogContentsArgs = {
  where?: InputMaybe<RowBlogContentWhereInput>;
  orderBy?: InputMaybe<RowBlogContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowBlogContentArgs = {
  where: RowBlogContentWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowBlogContentsConnectionArgs = {
  where?: InputMaybe<RowBlogContentWhereInput>;
  orderBy?: InputMaybe<RowBlogContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowBlogContentVersionArgs = {
  where: VersionWhereInput;
};


export type QueryuspsMultipleArgs = {
  where?: InputMaybe<UspsWhereInput>;
  orderBy?: InputMaybe<UspsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryuspsArgs = {
  where: UspsWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryuspsMultipleConnectionArgs = {
  where?: InputMaybe<UspsWhereInput>;
  orderBy?: InputMaybe<UspsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryuspsVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowContentLinksMultipleArgs = {
  where?: InputMaybe<RowContentLinksWhereInput>;
  orderBy?: InputMaybe<RowContentLinksOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowContentLinksArgs = {
  where: RowContentLinksWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowContentLinksMultipleConnectionArgs = {
  where?: InputMaybe<RowContentLinksWhereInput>;
  orderBy?: InputMaybe<RowContentLinksOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowContentLinksVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowColumnOnesArgs = {
  where?: InputMaybe<RowColumnOneWhereInput>;
  orderBy?: InputMaybe<RowColumnOneOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnOneArgs = {
  where: RowColumnOneWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnOnesConnectionArgs = {
  where?: InputMaybe<RowColumnOneWhereInput>;
  orderBy?: InputMaybe<RowColumnOneOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnOneVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowColumnTwosArgs = {
  where?: InputMaybe<RowColumnTwoWhereInput>;
  orderBy?: InputMaybe<RowColumnTwoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnTwoArgs = {
  where: RowColumnTwoWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnTwosConnectionArgs = {
  where?: InputMaybe<RowColumnTwoWhereInput>;
  orderBy?: InputMaybe<RowColumnTwoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnTwoVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowColumnThreesArgs = {
  where?: InputMaybe<RowColumnThreeWhereInput>;
  orderBy?: InputMaybe<RowColumnThreeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnThreeArgs = {
  where: RowColumnThreeWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnThreesConnectionArgs = {
  where?: InputMaybe<RowColumnThreeWhereInput>;
  orderBy?: InputMaybe<RowColumnThreeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnThreeVersionArgs = {
  where: VersionWhereInput;
};


export type QuerypagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerypageArgs = {
  where: PageWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerypagesConnectionArgs = {
  where?: InputMaybe<PageWhereInput>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerypageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryassetsArgs = {
  where?: InputMaybe<AssetWhereInput>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryassetArgs = {
  where: AssetWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryassetsConnectionArgs = {
  where?: InputMaybe<AssetWhereInput>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryassetVersionArgs = {
  where: VersionWhereInput;
};


export type QueryusersArgs = {
  where?: InputMaybe<UserWhereInput>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryuserArgs = {
  where: UserWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryusersConnectionArgs = {
  where?: InputMaybe<UserWhereInput>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowSpecialBannersArgs = {
  where?: InputMaybe<RowSpecialBannerWhereInput>;
  orderBy?: InputMaybe<RowSpecialBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowSpecialBannerArgs = {
  where: RowSpecialBannerWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowSpecialBannersConnectionArgs = {
  where?: InputMaybe<RowSpecialBannerWhereInput>;
  orderBy?: InputMaybe<RowSpecialBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowSpecialBannerVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowProductMultipleArgs = {
  where?: InputMaybe<RowProductWhereInput>;
  orderBy?: InputMaybe<RowProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowProductArgs = {
  where: RowProductWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowProductMultipleConnectionArgs = {
  where?: InputMaybe<RowProductWhereInput>;
  orderBy?: InputMaybe<RowProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowProductVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowHeroBannersArgs = {
  where?: InputMaybe<RowHeroBannerWhereInput>;
  orderBy?: InputMaybe<RowHeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowHeroBannerArgs = {
  where: RowHeroBannerWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowHeroBannersConnectionArgs = {
  where?: InputMaybe<RowHeroBannerWhereInput>;
  orderBy?: InputMaybe<RowHeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowHeroBannerVersionArgs = {
  where: VersionWhereInput;
};


export type QueryscheduledOperationsArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryscheduledOperationArgs = {
  where: ScheduledOperationWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryscheduledOperationsConnectionArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryscheduledReleasesArgs = {
  where?: InputMaybe<ScheduledReleaseWhereInput>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryscheduledReleaseArgs = {
  where: ScheduledReleaseWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryscheduledReleasesConnectionArgs = {
  where?: InputMaybe<ScheduledReleaseWhereInput>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerybannersArgs = {
  where?: InputMaybe<BannerWhereInput>;
  orderBy?: InputMaybe<BannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerybannerArgs = {
  where: BannerWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerybannersConnectionArgs = {
  where?: InputMaybe<BannerWhereInput>;
  orderBy?: InputMaybe<BannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerybannerVersionArgs = {
  where: VersionWhereInput;
};


export type QueryavailableStoresArgs = {
  useCurrentGroup?: InputMaybe<Scalars['Boolean']>;
};


export type QuerycartArgs = {
  cart_id: Scalars['String'];
};


export type QuerycategoriesArgs = {
  filters?: InputMaybe<CategoryFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};


export type QuerycategoryArgs = {
  id?: InputMaybe<Scalars['Int']>;
};


export type QuerycategoryListArgs = {
  filters?: InputMaybe<CategoryFilterInput>;
};


export type QuerycmsBlocksArgs = {
  identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


export type QuerycmsPageArgs = {
  id?: InputMaybe<Scalars['Int']>;
  identifier?: InputMaybe<Scalars['String']>;
};


export type QuerycompareListArgs = {
  uid: Scalars['ID'];
};


export type QuerycountryArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QuerycustomAttributeMetadataArgs = {
  attributes: Array<AttributeInput>;
};


export type QuerygetHostedProUrlArgs = {
  input: HostedProUrlInput;
};


export type QuerygetPayflowLinkTokenArgs = {
  input: PayflowLinkTokenInput;
};


export type QueryisEmailAvailableArgs = {
  email: Scalars['String'];
};


export type QuerymollieCustomerOrderArgs = {
  hash?: InputMaybe<Scalars['String']>;
};


export type QuerymolliePaymentMethodsArgs = {
  input?: InputMaybe<MolliePaymentMethodsInput>;
};


export type QueryorderDataArgs = {
  orderId: Scalars['String'];
};


export type QuerypickupLocationsArgs = {
  area?: InputMaybe<AreaInput>;
  filters?: InputMaybe<PickupLocationFilterInput>;
  sort?: InputMaybe<PickupLocationSortInput>;
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
  productsInfo?: InputMaybe<Array<InputMaybe<ProductInfoInput>>>;
};


export type QueryproductsArgs = {
  search?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ProductAttributeFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};


export type QueryrouteArgs = {
  url: Scalars['String'];
};


export type QueryurlResolverArgs = {
  url: Scalars['String'];
};

export type Mutation = {
  addBundleProductsToCart?: Maybe<AddBundleProductsToCartOutput>;
  addConfigurableProductsToCart?: Maybe<AddConfigurableProductsToCartOutput>;
  addDownloadableProductsToCart?: Maybe<AddDownloadableProductsToCartOutput>;
  /** Add any type of product to the cart */
  addProductsToCart?: Maybe<AddProductsToCartOutput>;
  /** Add products to the specified compare list */
  addProductsToCompareList?: Maybe<CompareList>;
  /** Adds one or more products to the specified wish list. This mutation supports all product types */
  addProductsToWishlist?: Maybe<AddProductsToWishlistOutput>;
  addSimpleProductsToCart?: Maybe<AddSimpleProductsToCartOutput>;
  addVirtualProductsToCart?: Maybe<AddVirtualProductsToCartOutput>;
  /** Add items in the specified wishlist to the customer's cart */
  addWishlistItemsToCart?: Maybe<AddWishlistItemsToCartOutput>;
  applyCouponToCart?: Maybe<ApplyCouponToCartOutput>;
  /** Assign the specified compare list to the logged in customer */
  assignCompareListToCustomer?: Maybe<AssignCompareListToCustomerOutput>;
  /** Changes the password for the logged-in customer */
  changeCustomerPassword?: Maybe<Customer>;
  /** Creates Client Token for Braintree Javascript SDK initialization. */
  createBraintreeClientToken: Scalars['String'];
  /** Creates a new compare list. The compare list is saved for logged in customers */
  createCompareList?: Maybe<CompareList>;
  /** Create customer account */
  createCustomer?: Maybe<CustomerOutput>;
  /** Create customer address */
  createCustomerAddress?: Maybe<CustomerAddress>;
  /** Create customer account */
  createCustomerV2?: Maybe<CustomerOutput>;
  /** Creates an empty shopping cart for a guest or logged in user */
  createEmptyCart?: Maybe<Scalars['String']>;
  /** Creates a Klarna Payments Session. */
  createKlarnaPaymentsSession?: Maybe<createKlarnaPaymentsSessionOutput>;
  /** @deprecated Using the Order.mollie_redirect_url attribuut */
  createMollieTransaction?: Maybe<MollieTransactionOutput>;
  /** Initiates a transaction and receives a token. Use this mutation for Payflow Pro and Payments Pro payment methods */
  createPayflowProToken?: Maybe<CreatePayflowProTokenOutput>;
  /** Initiates an Express Checkout transaction and receives a token. Use this mutation for Express Checkout and Payments Standard payment methods. */
  createPaypalExpressToken?: Maybe<PaypalExpressTokenOutput>;
  /** Creates a product review for the specified SKU */
  createProductReview: CreateProductReviewOutput;
  /** Delete the specified compare list */
  deleteCompareList?: Maybe<DeleteCompareListOutput>;
  /** Delete customer address */
  deleteCustomerAddress?: Maybe<Scalars['Boolean']>;
  /** Delete a customer payment token */
  deletePaymentToken?: Maybe<DeletePaymentTokenOutput>;
  /** Retrieve the customer token */
  generateCustomerToken?: Maybe<CustomerToken>;
  /** Request a customer token so that an administrator can perform remote shopping assistance */
  generateCustomerTokenAsAdmin?: Maybe<GenerateCustomerTokenAsAdminOutput>;
  /** Handles payment response and saves payment in Quote. Use this mutations for Payflow Pro and Payments Pro payment methods. */
  handlePayflowProResponse?: Maybe<PayflowProResponseOutput>;
  /** Merges the source cart into the destination cart */
  mergeCarts: Cart;
  mollieProcessTransaction?: Maybe<MollieProcessTransactionOutput>;
  mollieRestoreCart?: Maybe<MollieResetCartOutput>;
  placeOrder?: Maybe<PlaceOrderOutput>;
  removeCouponFromCart?: Maybe<RemoveCouponFromCartOutput>;
  removeItemFromCart?: Maybe<RemoveItemFromCartOutput>;
  /** Remove products from the specified compare list */
  removeProductsFromCompareList?: Maybe<CompareList>;
  /** Removes one or more products from the specified wish list */
  removeProductsFromWishlist?: Maybe<RemoveProductsFromWishlistOutput>;
  /** Adds all products from a customer's previous order to the cart. */
  reorderItems?: Maybe<ReorderItemsOutput>;
  /** Request an email with a reset password token for the registered customer identified by the specified email. */
  requestPasswordResetEmail?: Maybe<Scalars['Boolean']>;
  /** Reset a customer's password using the reset password token that the customer received in an email after requesting it using requestPasswordResetEmail. */
  resetPassword?: Maybe<Scalars['Boolean']>;
  /** Revoke the customer token */
  revokeCustomerToken?: Maybe<RevokeCustomerTokenOutput>;
  /** Recommends Product by Sending Single/Multiple Email */
  sendEmailToFriend?: Maybe<SendEmailToFriendOutput>;
  setBillingAddressOnCart?: Maybe<SetBillingAddressOnCartOutput>;
  setGuestEmailOnCart?: Maybe<SetGuestEmailOnCartOutput>;
  /** @deprecated Should use setPaymentMethodOnCart and placeOrder mutations in single request. */
  setPaymentMethodAndPlaceOrder?: Maybe<PlaceOrderOutput>;
  setPaymentMethodOnCart?: Maybe<SetPaymentMethodOnCartOutput>;
  setShippingAddressesOnCart?: Maybe<SetShippingAddressesOnCartOutput>;
  setShippingMethodsOnCart?: Maybe<SetShippingMethodsOnCartOutput>;
  /** Subscribes the specified email to a newsletter */
  subscribeEmailToNewsletter?: Maybe<SubscribeEmailToNewsletterOutput>;
  updateCartItems?: Maybe<UpdateCartItemsOutput>;
  /** Sends chat profile data to Engagement Cloud. */
  updateChatProfile?: Maybe<Scalars['Boolean']>;
  /** Deprecated. Use UpdateCustomerV2 instead. */
  updateCustomer?: Maybe<CustomerOutput>;
  /** Update customer address */
  updateCustomerAddress?: Maybe<CustomerAddress>;
  updateCustomerEmail?: Maybe<CustomerOutput>;
  /** Update the customer's personal information */
  updateCustomerV2?: Maybe<CustomerOutput>;
  /** Updates one or more products in the specified wish list */
  updateProductsInWishlist?: Maybe<UpdateProductsInWishlistOutput>;
  /** Updates the email address of a quote. */
  updateQuoteEmail?: Maybe<Scalars['Boolean']>;
};


export type MutationaddBundleProductsToCartArgs = {
  input?: InputMaybe<AddBundleProductsToCartInput>;
};


export type MutationaddConfigurableProductsToCartArgs = {
  input?: InputMaybe<AddConfigurableProductsToCartInput>;
};


export type MutationaddDownloadableProductsToCartArgs = {
  input?: InputMaybe<AddDownloadableProductsToCartInput>;
};


export type MutationaddProductsToCartArgs = {
  cartId: Scalars['String'];
  cartItems: Array<CartItemInput>;
};


export type MutationaddProductsToCompareListArgs = {
  input?: InputMaybe<AddProductsToCompareListInput>;
};


export type MutationaddProductsToWishlistArgs = {
  wishlistId: Scalars['ID'];
  wishlistItems: Array<WishlistItemInput>;
};


export type MutationaddSimpleProductsToCartArgs = {
  input?: InputMaybe<AddSimpleProductsToCartInput>;
};


export type MutationaddVirtualProductsToCartArgs = {
  input?: InputMaybe<AddVirtualProductsToCartInput>;
};


export type MutationaddWishlistItemsToCartArgs = {
  wishlistId: Scalars['ID'];
  wishlistItemIds?: InputMaybe<Array<Scalars['ID']>>;
};


export type MutationapplyCouponToCartArgs = {
  input?: InputMaybe<ApplyCouponToCartInput>;
};


export type MutationassignCompareListToCustomerArgs = {
  uid: Scalars['ID'];
};


export type MutationchangeCustomerPasswordArgs = {
  currentPassword: Scalars['String'];
  newPassword: Scalars['String'];
};


export type MutationcreateCompareListArgs = {
  input?: InputMaybe<CreateCompareListInput>;
};


export type MutationcreateCustomerArgs = {
  input: CustomerInput;
};


export type MutationcreateCustomerAddressArgs = {
  input: CustomerAddressInput;
};


export type MutationcreateCustomerV2Args = {
  input: CustomerCreateInput;
};


export type MutationcreateEmptyCartArgs = {
  input?: InputMaybe<createEmptyCartInput>;
};


export type MutationcreateKlarnaPaymentsSessionArgs = {
  input?: InputMaybe<createKlarnaPaymentsSessionInput>;
};


export type MutationcreateMollieTransactionArgs = {
  input?: InputMaybe<MollieTransactionInput>;
};


export type MutationcreatePayflowProTokenArgs = {
  input: PayflowProTokenInput;
};


export type MutationcreatePaypalExpressTokenArgs = {
  input: PaypalExpressTokenInput;
};


export type MutationcreateProductReviewArgs = {
  input: CreateProductReviewInput;
};


export type MutationdeleteCompareListArgs = {
  uid: Scalars['ID'];
};


export type MutationdeleteCustomerAddressArgs = {
  id: Scalars['Int'];
};


export type MutationdeletePaymentTokenArgs = {
  public_hash: Scalars['String'];
};


export type MutationgenerateCustomerTokenArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationgenerateCustomerTokenAsAdminArgs = {
  input: GenerateCustomerTokenAsAdminInput;
};


export type MutationhandlePayflowProResponseArgs = {
  input: PayflowProResponseInput;
};


export type MutationmergeCartsArgs = {
  source_cart_id: Scalars['String'];
  destination_cart_id?: InputMaybe<Scalars['String']>;
};


export type MutationmollieProcessTransactionArgs = {
  input?: InputMaybe<MollieProcessTransactionInput>;
};


export type MutationmollieRestoreCartArgs = {
  input?: InputMaybe<MollieResetCartInput>;
};


export type MutationplaceOrderArgs = {
  input?: InputMaybe<PlaceOrderInput>;
};


export type MutationremoveCouponFromCartArgs = {
  input?: InputMaybe<RemoveCouponFromCartInput>;
};


export type MutationremoveItemFromCartArgs = {
  input?: InputMaybe<RemoveItemFromCartInput>;
};


export type MutationremoveProductsFromCompareListArgs = {
  input?: InputMaybe<RemoveProductsFromCompareListInput>;
};


export type MutationremoveProductsFromWishlistArgs = {
  wishlistId: Scalars['ID'];
  wishlistItemsIds: Array<Scalars['ID']>;
};


export type MutationreorderItemsArgs = {
  orderNumber: Scalars['String'];
};


export type MutationrequestPasswordResetEmailArgs = {
  email: Scalars['String'];
};


export type MutationresetPasswordArgs = {
  email: Scalars['String'];
  resetPasswordToken: Scalars['String'];
  newPassword: Scalars['String'];
};


export type MutationsendEmailToFriendArgs = {
  input?: InputMaybe<SendEmailToFriendInput>;
};


export type MutationsetBillingAddressOnCartArgs = {
  input?: InputMaybe<SetBillingAddressOnCartInput>;
};


export type MutationsetGuestEmailOnCartArgs = {
  input?: InputMaybe<SetGuestEmailOnCartInput>;
};


export type MutationsetPaymentMethodAndPlaceOrderArgs = {
  input?: InputMaybe<SetPaymentMethodAndPlaceOrderInput>;
};


export type MutationsetPaymentMethodOnCartArgs = {
  input?: InputMaybe<SetPaymentMethodOnCartInput>;
};


export type MutationsetShippingAddressesOnCartArgs = {
  input?: InputMaybe<SetShippingAddressesOnCartInput>;
};


export type MutationsetShippingMethodsOnCartArgs = {
  input?: InputMaybe<SetShippingMethodsOnCartInput>;
};


export type MutationsubscribeEmailToNewsletterArgs = {
  email: Scalars['String'];
};


export type MutationupdateCartItemsArgs = {
  input?: InputMaybe<UpdateCartItemsInput>;
};


export type MutationupdateChatProfileArgs = {
  profileId: Scalars['String'];
  email?: InputMaybe<Scalars['String']>;
  firstname?: InputMaybe<Scalars['String']>;
  lastname?: InputMaybe<Scalars['String']>;
};


export type MutationupdateCustomerArgs = {
  input: CustomerInput;
};


export type MutationupdateCustomerAddressArgs = {
  id: Scalars['Int'];
  input?: InputMaybe<CustomerAddressInput>;
};


export type MutationupdateCustomerEmailArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationupdateCustomerV2Args = {
  input: CustomerUpdateInput;
};


export type MutationupdateProductsInWishlistArgs = {
  wishlistId: Scalars['ID'];
  wishlistItems: Array<WishlistItemUpdateInput>;
};


export type MutationupdateQuoteEmailArgs = {
  email: Scalars['String'];
  cartId: Scalars['String'];
};

export type Aggregate = {
  count: Scalars['Int'];
};

/** Asset system model */
export type Asset = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Asset>;
  /** Get the document in other stages */
  documentInStages: Array<Asset>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** The file handle */
  handle: Scalars['String'];
  /** The file name */
  fileName: Scalars['String'];
  /** The height of the file */
  height?: Maybe<Scalars['Float']>;
  /** The file width */
  width?: Maybe<Scalars['Float']>;
  /** The file size */
  size?: Maybe<Scalars['Float']>;
  /** The mime type of the file */
  mimeType?: Maybe<Scalars['String']>;
  alt?: Maybe<Scalars['String']>;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  assetRowHeroBanner: Array<RowHeroBanner>;
  rowSpecialBannerAsset: Array<RowSpecialBanner>;
  assetPage: Array<Page>;
  assetPageLink: Array<PageLink>;
  assetRowProduct: Array<RowProduct>;
  imageBanner: Array<Banner>;
  scheduledIn: Array<ScheduledOperation>;
  /** List of Asset versions */
  history: Array<Version>;
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String'];
};


/** Asset system model */
export type AssetlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


/** Asset system model */
export type AssetdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


/** Asset system model */
export type AssetcreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetcreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetassetRowHeroBannerArgs = {
  where?: InputMaybe<RowHeroBannerWhereInput>;
  orderBy?: InputMaybe<RowHeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetrowSpecialBannerAssetArgs = {
  where?: InputMaybe<RowSpecialBannerWhereInput>;
  orderBy?: InputMaybe<RowSpecialBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetassetPageArgs = {
  where?: InputMaybe<PageWhereInput>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetassetPageLinkArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetassetRowProductArgs = {
  where?: InputMaybe<RowProductWhereInput>;
  orderBy?: InputMaybe<RowProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetimageBannerArgs = {
  where?: InputMaybe<BannerWhereInput>;
  orderBy?: InputMaybe<BannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssethistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** Asset system model */
export type AsseturlArgs = {
  transformation?: InputMaybe<AssetTransformationInput>;
};

export type AssetConnectInput = {
  /** Document to connect */
  where: AssetWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type AssetConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<AssetEdge>;
  aggregate: Aggregate;
};

export type AssetCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  handle: Scalars['String'];
  fileName: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** alt input for default locale (en) */
  alt?: InputMaybe<Scalars['String']>;
  assetRowHeroBanner?: InputMaybe<RowHeroBannerCreateManyInlineInput>;
  rowSpecialBannerAsset?: InputMaybe<RowSpecialBannerCreateManyInlineInput>;
  assetPage?: InputMaybe<PageCreateManyInlineInput>;
  assetPageLink?: InputMaybe<PageLinkCreateManyInlineInput>;
  assetRowProduct?: InputMaybe<RowProductCreateManyInlineInput>;
  imageBanner?: InputMaybe<BannerCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<AssetCreateLocalizationsInput>;
};

export type AssetCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  handle: Scalars['String'];
  fileName: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
};

export type AssetCreateLocalizationInput = {
  /** Localization input */
  data: AssetCreateLocalizationDataInput;
  locale: Locale;
};

export type AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
};

export type AssetCreateManyInlineInput = {
  /** Create and connect multiple existing Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetWhereUniqueInput>>;
};

export type AssetCreateOneInlineInput = {
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
  /** Connect one existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
};

/** An edge in a connection. */
export type AssetEdge = {
  /** The item at the end of the edge. */
  node: Asset;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type AssetManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  assetRowHeroBanner_every?: InputMaybe<RowHeroBannerWhereInput>;
  assetRowHeroBanner_some?: InputMaybe<RowHeroBannerWhereInput>;
  assetRowHeroBanner_none?: InputMaybe<RowHeroBannerWhereInput>;
  rowSpecialBannerAsset_every?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBannerAsset_some?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBannerAsset_none?: InputMaybe<RowSpecialBannerWhereInput>;
  assetPage_every?: InputMaybe<PageWhereInput>;
  assetPage_some?: InputMaybe<PageWhereInput>;
  assetPage_none?: InputMaybe<PageWhereInput>;
  assetPageLink_every?: InputMaybe<PageLinkWhereInput>;
  assetPageLink_some?: InputMaybe<PageLinkWhereInput>;
  assetPageLink_none?: InputMaybe<PageLinkWhereInput>;
  assetRowProduct_every?: InputMaybe<RowProductWhereInput>;
  assetRowProduct_some?: InputMaybe<RowProductWhereInput>;
  assetRowProduct_none?: InputMaybe<RowProductWhereInput>;
  imageBanner_every?: InputMaybe<BannerWhereInput>;
  imageBanner_some?: InputMaybe<BannerWhereInput>;
  imageBanner_none?: InputMaybe<BannerWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

export type AssetOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'handle_ASC'
  | 'handle_DESC'
  | 'fileName_ASC'
  | 'fileName_DESC'
  | 'height_ASC'
  | 'height_DESC'
  | 'width_ASC'
  | 'width_DESC'
  | 'size_ASC'
  | 'size_DESC'
  | 'mimeType_ASC'
  | 'mimeType_DESC'
  | 'alt_ASC'
  | 'alt_DESC';

/** Transformations for Assets */
export type AssetTransformationInput = {
  image?: InputMaybe<ImageTransformationInput>;
  document?: InputMaybe<DocumentTransformationInput>;
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions?: InputMaybe<Scalars['Boolean']>;
};

export type AssetUpdateInput = {
  handle?: InputMaybe<Scalars['String']>;
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** alt input for default locale (en) */
  alt?: InputMaybe<Scalars['String']>;
  assetRowHeroBanner?: InputMaybe<RowHeroBannerUpdateManyInlineInput>;
  rowSpecialBannerAsset?: InputMaybe<RowSpecialBannerUpdateManyInlineInput>;
  assetPage?: InputMaybe<PageUpdateManyInlineInput>;
  assetPageLink?: InputMaybe<PageLinkUpdateManyInlineInput>;
  assetRowProduct?: InputMaybe<RowProductUpdateManyInlineInput>;
  imageBanner?: InputMaybe<BannerUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<AssetUpdateLocalizationsInput>;
};

export type AssetUpdateLocalizationDataInput = {
  handle?: InputMaybe<Scalars['String']>;
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
};

export type AssetUpdateLocalizationInput = {
  data: AssetUpdateLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<AssetUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type AssetUpdateManyInlineInput = {
  /** Create and connect multiple Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetConnectInput>>;
  /** Override currently-connected documents with multiple existing Asset documents */
  set?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Update multiple Asset documents */
  update?: InputMaybe<Array<AssetUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Asset documents */
  upsert?: InputMaybe<Array<AssetUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple Asset documents */
  disconnect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Delete multiple Asset documents */
  delete?: InputMaybe<Array<AssetWhereUniqueInput>>;
};

export type AssetUpdateManyInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** alt input for default locale (en) */
  alt?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<AssetUpdateManyLocalizationsInput>;
};

export type AssetUpdateManyLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
};

export type AssetUpdateManyLocalizationInput = {
  data: AssetUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateManyLocalizationInput>>;
};

export type AssetUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: AssetWhereInput;
  /** Update many input */
  data: AssetUpdateManyInput;
};

export type AssetUpdateOneInlineInput = {
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
  /** Update single Asset document */
  update?: InputMaybe<AssetUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Asset document */
  upsert?: InputMaybe<AssetUpsertWithNestedWhereUniqueInput>;
  /** Connect existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Disconnect currently connected Asset document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected Asset document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type AssetUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: AssetWhereUniqueInput;
  /** Document to update */
  data: AssetUpdateInput;
};

export type AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: AssetCreateInput;
  /** Update document if it exists */
  update: AssetUpdateInput;
};

export type AssetUpsertLocalizationInput = {
  update: AssetUpdateLocalizationDataInput;
  create: AssetCreateLocalizationDataInput;
  locale: Locale;
};

export type AssetUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: AssetWhereUniqueInput;
  /** Upsert data */
  data: AssetUpsertInput;
};

/** Identifies documents */
export type AssetWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  fileName?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  fileName_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fileName_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  fileName_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  fileName_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  fileName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  fileName_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  fileName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  fileName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  fileName_not_ends_with?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  height_not?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  height_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  height_not_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  height_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  height_lte?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  height_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  height_gte?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  width_not?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  width_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  width_not_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  width_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  width_lte?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  width_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  width_gte?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  size_not?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  size_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  size_not_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  size_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  size_lte?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  size_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  size_gte?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  mimeType_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mimeType_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  mimeType_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  mimeType_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mimeType_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mimeType_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  mimeType_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mimeType_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  mimeType_not_ends_with?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  alt_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  alt_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  alt_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  alt_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  alt_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  alt_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  alt_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  alt_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  alt_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  assetRowHeroBanner_every?: InputMaybe<RowHeroBannerWhereInput>;
  assetRowHeroBanner_some?: InputMaybe<RowHeroBannerWhereInput>;
  assetRowHeroBanner_none?: InputMaybe<RowHeroBannerWhereInput>;
  rowSpecialBannerAsset_every?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBannerAsset_some?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBannerAsset_none?: InputMaybe<RowSpecialBannerWhereInput>;
  assetPage_every?: InputMaybe<PageWhereInput>;
  assetPage_some?: InputMaybe<PageWhereInput>;
  assetPage_none?: InputMaybe<PageWhereInput>;
  assetPageLink_every?: InputMaybe<PageLinkWhereInput>;
  assetPageLink_some?: InputMaybe<PageLinkWhereInput>;
  assetPageLink_none?: InputMaybe<PageLinkWhereInput>;
  assetRowProduct_every?: InputMaybe<RowProductWhereInput>;
  assetRowProduct_some?: InputMaybe<RowProductWhereInput>;
  assetRowProduct_none?: InputMaybe<RowProductWhereInput>;
  imageBanner_every?: InputMaybe<BannerWhereInput>;
  imageBanner_some?: InputMaybe<BannerWhereInput>;
  imageBanner_none?: InputMaybe<BannerWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

/** References Asset record uniquely */
export type AssetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Banner = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Banner>;
  /** Get the document in other stages */
  documentInStages: Array<Banner>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  copy: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  image?: Maybe<Asset>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of Banner versions */
  history: Array<Version>;
};


export type BannerlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type BannerdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type BannercreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type BannerupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type BannerpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type BannercreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerimageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerpagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerhistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type BannerConnectInput = {
  /** Document to connect */
  where: BannerWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type BannerConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<BannerEdge>;
  aggregate: Aggregate;
};

export type BannerCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** copy input for default locale (en) */
  copy: Scalars['RichTextAST'];
  image?: InputMaybe<AssetCreateOneInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<BannerCreateLocalizationsInput>;
};

export type BannerCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  copy: Scalars['RichTextAST'];
};

export type BannerCreateLocalizationInput = {
  /** Localization input */
  data: BannerCreateLocalizationDataInput;
  locale: Locale;
};

export type BannerCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<BannerCreateLocalizationInput>>;
};

export type BannerCreateManyInlineInput = {
  /** Create and connect multiple existing Banner documents */
  create?: InputMaybe<Array<BannerCreateInput>>;
  /** Connect multiple existing Banner documents */
  connect?: InputMaybe<Array<BannerWhereUniqueInput>>;
};

export type BannerCreateOneInlineInput = {
  /** Create and connect one Banner document */
  create?: InputMaybe<BannerCreateInput>;
  /** Connect one existing Banner document */
  connect?: InputMaybe<BannerWhereUniqueInput>;
};

/** An edge in a connection. */
export type BannerEdge = {
  /** The item at the end of the edge. */
  node: Banner;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type BannerManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BannerWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  image?: InputMaybe<AssetWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type BannerOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type BannerUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** copy input for default locale (en) */
  copy?: InputMaybe<Scalars['RichTextAST']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<BannerUpdateLocalizationsInput>;
};

export type BannerUpdateLocalizationDataInput = {
  copy?: InputMaybe<Scalars['RichTextAST']>;
};

export type BannerUpdateLocalizationInput = {
  data: BannerUpdateLocalizationDataInput;
  locale: Locale;
};

export type BannerUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<BannerCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<BannerUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<BannerUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type BannerUpdateManyInlineInput = {
  /** Create and connect multiple Banner documents */
  create?: InputMaybe<Array<BannerCreateInput>>;
  /** Connect multiple existing Banner documents */
  connect?: InputMaybe<Array<BannerConnectInput>>;
  /** Override currently-connected documents with multiple existing Banner documents */
  set?: InputMaybe<Array<BannerWhereUniqueInput>>;
  /** Update multiple Banner documents */
  update?: InputMaybe<Array<BannerUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Banner documents */
  upsert?: InputMaybe<Array<BannerUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple Banner documents */
  disconnect?: InputMaybe<Array<BannerWhereUniqueInput>>;
  /** Delete multiple Banner documents */
  delete?: InputMaybe<Array<BannerWhereUniqueInput>>;
};

export type BannerUpdateManyInput = {
  /** copy input for default locale (en) */
  copy?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<BannerUpdateManyLocalizationsInput>;
};

export type BannerUpdateManyLocalizationDataInput = {
  copy?: InputMaybe<Scalars['RichTextAST']>;
};

export type BannerUpdateManyLocalizationInput = {
  data: BannerUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type BannerUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<BannerUpdateManyLocalizationInput>>;
};

export type BannerUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: BannerWhereInput;
  /** Update many input */
  data: BannerUpdateManyInput;
};

export type BannerUpdateOneInlineInput = {
  /** Create and connect one Banner document */
  create?: InputMaybe<BannerCreateInput>;
  /** Update single Banner document */
  update?: InputMaybe<BannerUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Banner document */
  upsert?: InputMaybe<BannerUpsertWithNestedWhereUniqueInput>;
  /** Connect existing Banner document */
  connect?: InputMaybe<BannerWhereUniqueInput>;
  /** Disconnect currently connected Banner document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected Banner document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type BannerUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: BannerWhereUniqueInput;
  /** Document to update */
  data: BannerUpdateInput;
};

export type BannerUpsertInput = {
  /** Create document if it didn't exist */
  create: BannerCreateInput;
  /** Update document if it exists */
  update: BannerUpdateInput;
};

export type BannerUpsertLocalizationInput = {
  update: BannerUpdateLocalizationDataInput;
  create: BannerCreateLocalizationDataInput;
  locale: Locale;
};

export type BannerUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: BannerWhereUniqueInput;
  /** Upsert data */
  data: BannerUpsertInput;
};

/** Identifies documents */
export type BannerWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BannerWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  image?: InputMaybe<AssetWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References Banner record uniquely */
export type BannerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type BatchPayload = {
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long'];
};

/** Representing a color value comprising of HEX, RGBA and css color values */
export type Color = {
  hex: Scalars['Hex'];
  rgba: RGBA;
  css: Scalars['String'];
};

/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */
export type ColorInput = {
  hex?: InputMaybe<Scalars['Hex']>;
  rgba?: InputMaybe<RGBAInput>;
};

export type ConnectPositionInput = {
  /** Connect document after specified document */
  after?: InputMaybe<Scalars['ID']>;
  /** Connect document before specified document */
  before?: InputMaybe<Scalars['ID']>;
  /** Connect document at first position */
  start?: InputMaybe<Scalars['Boolean']>;
  /** Connect document at last position */
  end?: InputMaybe<Scalars['Boolean']>;
};

export type DocumentFileTypes =
  | 'jpg'
  | 'odp'
  | 'ods'
  | 'odt'
  | 'png'
  | 'svg'
  | 'txt'
  | 'webp'
  | 'docx'
  | 'pdf'
  | 'html'
  | 'doc'
  | 'xlsx'
  | 'xls'
  | 'pptx'
  | 'ppt';

export type DocumentOutputInput = {
  /**
   * Transforms a document into a desired file type.
   * See this matrix for format support:
   *
   * PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
   * DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
   * DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
   * ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
   * XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
   * XLSX:	jpg, pdf, ods, png, svg, xls, and webp
   * ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
   * PPT:	jpg, odp, pdf, png, svg, pptx, and webp
   * PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
   * ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
   * BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
   * PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * SVG:	jpg, odp, ods, odt, pdf, png, and webp
   * HTML:	jpg, odt, pdf, svg, txt, and webp
   * TXT:	jpg, html, odt, pdf, svg, and webp
   */
  format?: InputMaybe<DocumentFileTypes>;
};

/** Transformations for Documents */
export type DocumentTransformationInput = {
  /** Changes the output for the file. */
  output?: InputMaybe<DocumentOutputInput>;
};

export type DocumentVersion = {
  id: Scalars['ID'];
  stage: Stage;
  revision: Scalars['Int'];
  createdAt: Scalars['DateTime'];
  data?: Maybe<Scalars['Json']>;
};

export type Footer = Node & {
  /** System stage field */
  stage: Stage;
  /** Get the document in other stages */
  documentInStages: Array<Footer>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  copyright?: Maybe<Scalars['String']>;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  socialLinks: Array<PageLink>;
  legalLinks: Array<PageLink>;
  scheduledIn: Array<ScheduledOperation>;
  /** List of Footer versions */
  history: Array<Version>;
};


export type FooterdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type FootercreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FootersocialLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterlegalLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterhistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type FooterConnectInput = {
  /** Document to connect */
  where: FooterWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type FooterConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<FooterEdge>;
  aggregate: Aggregate;
};

export type FooterCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  copyright?: InputMaybe<Scalars['String']>;
  socialLinks?: InputMaybe<PageLinkCreateManyInlineInput>;
  legalLinks?: InputMaybe<PageLinkCreateManyInlineInput>;
};

export type FooterCreateManyInlineInput = {
  /** Create and connect multiple existing Footer documents */
  create?: InputMaybe<Array<FooterCreateInput>>;
  /** Connect multiple existing Footer documents */
  connect?: InputMaybe<Array<FooterWhereUniqueInput>>;
};

export type FooterCreateOneInlineInput = {
  /** Create and connect one Footer document */
  create?: InputMaybe<FooterCreateInput>;
  /** Connect one existing Footer document */
  connect?: InputMaybe<FooterWhereUniqueInput>;
};

/** An edge in a connection. */
export type FooterEdge = {
  /** The item at the end of the edge. */
  node: Footer;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type FooterManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  copyright?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  copyright_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  copyright_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  copyright_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  copyright_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  copyright_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  copyright_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  copyright_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  copyright_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  copyright_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  socialLinks_every?: InputMaybe<PageLinkWhereInput>;
  socialLinks_some?: InputMaybe<PageLinkWhereInput>;
  socialLinks_none?: InputMaybe<PageLinkWhereInput>;
  legalLinks_every?: InputMaybe<PageLinkWhereInput>;
  legalLinks_some?: InputMaybe<PageLinkWhereInput>;
  legalLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

export type FooterOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'copyright_ASC'
  | 'copyright_DESC';

export type FooterUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  copyright?: InputMaybe<Scalars['String']>;
  socialLinks?: InputMaybe<PageLinkUpdateManyInlineInput>;
  legalLinks?: InputMaybe<PageLinkUpdateManyInlineInput>;
};

export type FooterUpdateManyInlineInput = {
  /** Create and connect multiple Footer documents */
  create?: InputMaybe<Array<FooterCreateInput>>;
  /** Connect multiple existing Footer documents */
  connect?: InputMaybe<Array<FooterConnectInput>>;
  /** Override currently-connected documents with multiple existing Footer documents */
  set?: InputMaybe<Array<FooterWhereUniqueInput>>;
  /** Update multiple Footer documents */
  update?: InputMaybe<Array<FooterUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Footer documents */
  upsert?: InputMaybe<Array<FooterUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple Footer documents */
  disconnect?: InputMaybe<Array<FooterWhereUniqueInput>>;
  /** Delete multiple Footer documents */
  delete?: InputMaybe<Array<FooterWhereUniqueInput>>;
};

export type FooterUpdateManyInput = {
  copyright?: InputMaybe<Scalars['String']>;
};

export type FooterUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: FooterWhereInput;
  /** Update many input */
  data: FooterUpdateManyInput;
};

export type FooterUpdateOneInlineInput = {
  /** Create and connect one Footer document */
  create?: InputMaybe<FooterCreateInput>;
  /** Update single Footer document */
  update?: InputMaybe<FooterUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Footer document */
  upsert?: InputMaybe<FooterUpsertWithNestedWhereUniqueInput>;
  /** Connect existing Footer document */
  connect?: InputMaybe<FooterWhereUniqueInput>;
  /** Disconnect currently connected Footer document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected Footer document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type FooterUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: FooterWhereUniqueInput;
  /** Document to update */
  data: FooterUpdateInput;
};

export type FooterUpsertInput = {
  /** Create document if it didn't exist */
  create: FooterCreateInput;
  /** Update document if it exists */
  update: FooterUpdateInput;
};

export type FooterUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: FooterWhereUniqueInput;
  /** Upsert data */
  data: FooterUpsertInput;
};

/** Identifies documents */
export type FooterWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  copyright?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  copyright_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  copyright_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  copyright_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  copyright_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  copyright_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  copyright_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  copyright_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  copyright_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  copyright_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  socialLinks_every?: InputMaybe<PageLinkWhereInput>;
  socialLinks_some?: InputMaybe<PageLinkWhereInput>;
  socialLinks_none?: InputMaybe<PageLinkWhereInput>;
  legalLinks_every?: InputMaybe<PageLinkWhereInput>;
  legalLinks_some?: InputMaybe<PageLinkWhereInput>;
  legalLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

/** References Footer record uniquely */
export type FooterWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type ImageFit =
  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
  | 'clip'
  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
  | 'crop'
  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
  | 'scale'
  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
  | 'max';

export type ImageResizeInput = {
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width?: InputMaybe<Scalars['Int']>;
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height?: InputMaybe<Scalars['Int']>;
  /** The default value for the fit parameter is fit:clip. */
  fit?: InputMaybe<ImageFit>;
};

/** Transformations for Images */
export type ImageTransformationInput = {
  /** Resizes the image */
  resize?: InputMaybe<ImageResizeInput>;
};

/** Locale system enumeration */
export type Locale =
  /** System locale */
  | 'en';

/** Representing a geolocation point with latitude and longitude */
export type Location = {
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
  distance: Scalars['Float'];
};


/** Representing a geolocation point with latitude and longitude */
export type LocationdistanceArgs = {
  from: LocationInput;
};

/** Input for a geolocation point with latitude and longitude */
export type LocationInput = {
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
};

export type MetaRobots =
  | 'INDEX_FOLLOW'
  | 'INDEX_NOFOLLOW'
  | 'NOINDEX_FOLLOW'
  | 'NOINDEX_NOFOLLOW';

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID'];
  /** The Stage of an object */
  stage: Stage;
};

export type Page = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Page>;
  /** Get the document in other stages */
  documentInStages: Array<Page>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  url: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  metaTitle: Scalars['String'];
  metaDescription: Scalars['String'];
  date?: Maybe<Scalars['DateTime']>;
  author?: Maybe<Scalars['String']>;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** 9:6 for general usage */
  asset?: Maybe<Asset>;
  relatedPages: Array<Page>;
  rowButtonLinkLists: Array<RowButtonLinkList>;
  childPages: Array<Page>;
  metaRobots: MetaRobots;
  scheduledIn: Array<ScheduledOperation>;
  content: Array<PageContent>;
  /** List of Page versions */
  history: Array<Version>;
};


export type PagelocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type PagedocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type PagecreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PagepublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PagecreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PagepublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageassetArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PagerelatedPagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PagerowButtonLinkListsArgs = {
  where?: InputMaybe<RowButtonLinkListWhereInput>;
  orderBy?: InputMaybe<RowButtonLinkListOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PagechildPagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PagescheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PagecontentArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PagehistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type PageConnectInput = {
  /** Document to connect */
  where: PageWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type PageConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<PageEdge>;
  aggregate: Aggregate;
};

export type PageContent = Banner | RowBlogContent | RowButtonLinkList | RowColumnOne | RowColumnThree | RowColumnTwo | RowContentLinks | RowHeroBanner | RowProduct | RowQuote | RowServiceOptions | RowSpecialBanner;

export type PageContentConnectInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerConnectInput>;
  RowColumnOne?: InputMaybe<RowColumnOneConnectInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoConnectInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeConnectInput>;
  RowQuote?: InputMaybe<RowQuoteConnectInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerConnectInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListConnectInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsConnectInput>;
  RowBlogContent?: InputMaybe<RowBlogContentConnectInput>;
  RowContentLinks?: InputMaybe<RowContentLinksConnectInput>;
  RowProduct?: InputMaybe<RowProductConnectInput>;
  Banner?: InputMaybe<BannerConnectInput>;
};

export type PageContentCreateInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerCreateInput>;
  RowColumnOne?: InputMaybe<RowColumnOneCreateInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoCreateInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeCreateInput>;
  RowQuote?: InputMaybe<RowQuoteCreateInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerCreateInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListCreateInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsCreateInput>;
  RowBlogContent?: InputMaybe<RowBlogContentCreateInput>;
  RowContentLinks?: InputMaybe<RowContentLinksCreateInput>;
  RowProduct?: InputMaybe<RowProductCreateInput>;
  Banner?: InputMaybe<BannerCreateInput>;
};

export type PageContentCreateManyInlineInput = {
  /** Create and connect multiple existing PageContent documents */
  create?: InputMaybe<Array<PageContentCreateInput>>;
  /** Connect multiple existing PageContent documents */
  connect?: InputMaybe<Array<PageContentWhereUniqueInput>>;
};

export type PageContentCreateOneInlineInput = {
  /** Create and connect one PageContent document */
  create?: InputMaybe<PageContentCreateInput>;
  /** Connect one existing PageContent document */
  connect?: InputMaybe<PageContentWhereUniqueInput>;
};

export type PageContentUpdateInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerUpdateInput>;
  RowColumnOne?: InputMaybe<RowColumnOneUpdateInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoUpdateInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeUpdateInput>;
  RowQuote?: InputMaybe<RowQuoteUpdateInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerUpdateInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListUpdateInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsUpdateInput>;
  RowBlogContent?: InputMaybe<RowBlogContentUpdateInput>;
  RowContentLinks?: InputMaybe<RowContentLinksUpdateInput>;
  RowProduct?: InputMaybe<RowProductUpdateInput>;
  Banner?: InputMaybe<BannerUpdateInput>;
};

export type PageContentUpdateManyInlineInput = {
  /** Create and connect multiple PageContent documents */
  create?: InputMaybe<Array<PageContentCreateInput>>;
  /** Connect multiple existing PageContent documents */
  connect?: InputMaybe<Array<PageContentConnectInput>>;
  /** Override currently-connected documents with multiple existing PageContent documents */
  set?: InputMaybe<Array<PageContentWhereUniqueInput>>;
  /** Update multiple PageContent documents */
  update?: InputMaybe<Array<PageContentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageContent documents */
  upsert?: InputMaybe<Array<PageContentUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple PageContent documents */
  disconnect?: InputMaybe<Array<PageContentWhereUniqueInput>>;
  /** Delete multiple PageContent documents */
  delete?: InputMaybe<Array<PageContentWhereUniqueInput>>;
};

export type PageContentUpdateManyWithNestedWhereInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerUpdateManyWithNestedWhereInput>;
  RowColumnOne?: InputMaybe<RowColumnOneUpdateManyWithNestedWhereInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoUpdateManyWithNestedWhereInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeUpdateManyWithNestedWhereInput>;
  RowQuote?: InputMaybe<RowQuoteUpdateManyWithNestedWhereInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerUpdateManyWithNestedWhereInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListUpdateManyWithNestedWhereInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsUpdateManyWithNestedWhereInput>;
  RowBlogContent?: InputMaybe<RowBlogContentUpdateManyWithNestedWhereInput>;
  RowContentLinks?: InputMaybe<RowContentLinksUpdateManyWithNestedWhereInput>;
  RowProduct?: InputMaybe<RowProductUpdateManyWithNestedWhereInput>;
  Banner?: InputMaybe<BannerUpdateManyWithNestedWhereInput>;
};

export type PageContentUpdateOneInlineInput = {
  /** Create and connect one PageContent document */
  create?: InputMaybe<PageContentCreateInput>;
  /** Update single PageContent document */
  update?: InputMaybe<PageContentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageContent document */
  upsert?: InputMaybe<PageContentUpsertWithNestedWhereUniqueInput>;
  /** Connect existing PageContent document */
  connect?: InputMaybe<PageContentWhereUniqueInput>;
  /** Disconnect currently connected PageContent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected PageContent document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type PageContentUpdateWithNestedWhereUniqueInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerUpdateWithNestedWhereUniqueInput>;
  RowColumnOne?: InputMaybe<RowColumnOneUpdateWithNestedWhereUniqueInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>;
  RowQuote?: InputMaybe<RowQuoteUpdateWithNestedWhereUniqueInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerUpdateWithNestedWhereUniqueInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListUpdateWithNestedWhereUniqueInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsUpdateWithNestedWhereUniqueInput>;
  RowBlogContent?: InputMaybe<RowBlogContentUpdateWithNestedWhereUniqueInput>;
  RowContentLinks?: InputMaybe<RowContentLinksUpdateWithNestedWhereUniqueInput>;
  RowProduct?: InputMaybe<RowProductUpdateWithNestedWhereUniqueInput>;
  Banner?: InputMaybe<BannerUpdateWithNestedWhereUniqueInput>;
};

export type PageContentUpsertWithNestedWhereUniqueInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerUpsertWithNestedWhereUniqueInput>;
  RowColumnOne?: InputMaybe<RowColumnOneUpsertWithNestedWhereUniqueInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>;
  RowQuote?: InputMaybe<RowQuoteUpsertWithNestedWhereUniqueInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerUpsertWithNestedWhereUniqueInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListUpsertWithNestedWhereUniqueInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsUpsertWithNestedWhereUniqueInput>;
  RowBlogContent?: InputMaybe<RowBlogContentUpsertWithNestedWhereUniqueInput>;
  RowContentLinks?: InputMaybe<RowContentLinksUpsertWithNestedWhereUniqueInput>;
  RowProduct?: InputMaybe<RowProductUpsertWithNestedWhereUniqueInput>;
  Banner?: InputMaybe<BannerUpsertWithNestedWhereUniqueInput>;
};

export type PageContentWhereInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerWhereInput>;
  RowColumnOne?: InputMaybe<RowColumnOneWhereInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoWhereInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeWhereInput>;
  RowQuote?: InputMaybe<RowQuoteWhereInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerWhereInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListWhereInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsWhereInput>;
  RowBlogContent?: InputMaybe<RowBlogContentWhereInput>;
  RowContentLinks?: InputMaybe<RowContentLinksWhereInput>;
  RowProduct?: InputMaybe<RowProductWhereInput>;
  Banner?: InputMaybe<BannerWhereInput>;
};

export type PageContentWhereUniqueInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerWhereUniqueInput>;
  RowColumnOne?: InputMaybe<RowColumnOneWhereUniqueInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoWhereUniqueInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeWhereUniqueInput>;
  RowQuote?: InputMaybe<RowQuoteWhereUniqueInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerWhereUniqueInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListWhereUniqueInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsWhereUniqueInput>;
  RowBlogContent?: InputMaybe<RowBlogContentWhereUniqueInput>;
  RowContentLinks?: InputMaybe<RowContentLinksWhereUniqueInput>;
  RowProduct?: InputMaybe<RowProductWhereUniqueInput>;
  Banner?: InputMaybe<BannerWhereUniqueInput>;
};

export type PageCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** url input for default locale (en) */
  url: Scalars['String'];
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** metaTitle input for default locale (en) */
  metaTitle: Scalars['String'];
  /** metaDescription input for default locale (en) */
  metaDescription: Scalars['String'];
  date?: InputMaybe<Scalars['DateTime']>;
  /** author input for default locale (en) */
  author?: InputMaybe<Scalars['String']>;
  asset?: InputMaybe<AssetCreateOneInlineInput>;
  relatedPages?: InputMaybe<PageCreateManyInlineInput>;
  rowButtonLinkLists?: InputMaybe<RowButtonLinkListCreateManyInlineInput>;
  childPages?: InputMaybe<PageCreateManyInlineInput>;
  /** metaRobots input for default locale (en) */
  metaRobots: MetaRobots;
  content?: InputMaybe<PageContentCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<PageCreateLocalizationsInput>;
};

export type PageCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  url: Scalars['String'];
  title?: InputMaybe<Scalars['String']>;
  metaTitle: Scalars['String'];
  metaDescription: Scalars['String'];
  author?: InputMaybe<Scalars['String']>;
  metaRobots: MetaRobots;
};

export type PageCreateLocalizationInput = {
  /** Localization input */
  data: PageCreateLocalizationDataInput;
  locale: Locale;
};

export type PageCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<PageCreateLocalizationInput>>;
};

export type PageCreateManyInlineInput = {
  /** Create and connect multiple existing Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageWhereUniqueInput>>;
};

export type PageCreateOneInlineInput = {
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
  /** Connect one existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
};

/** An edge in a connection. */
export type PageEdge = {
  /** The item at the end of the edge. */
  node: Page;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** Number of items in the current page. */
  pageSize?: Maybe<Scalars['Int']>;
};

export type PageLink = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<PageLink>;
  /** Get the document in other stages */
  documentInStages: Array<PageLink>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  title: Scalars['String'];
  description?: Maybe<RichText>;
  url: Scalars['String'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  rowHeroBanners: Array<RowHeroBanner>;
  rowSpecialBanners: Array<RowSpecialBanner>;
  footerSocialLinks: Array<Footer>;
  footerLegalLinks: Array<Footer>;
  rowServiceOptionsMultiple: Array<RowServiceOptions>;
  rowContentLinks?: Maybe<RowContentLinks>;
  asset?: Maybe<Asset>;
  uspsMultiple: Array<Usps>;
  rowProductMultiple: Array<RowProduct>;
  scheduledIn: Array<ScheduledOperation>;
  /** List of PageLink versions */
  history: Array<Version>;
};


export type PageLinklocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type PageLinkdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type PageLinkcreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageLinkupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageLinkpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageLinkcreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkrowHeroBannersArgs = {
  where?: InputMaybe<RowHeroBannerWhereInput>;
  orderBy?: InputMaybe<RowHeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkrowSpecialBannersArgs = {
  where?: InputMaybe<RowSpecialBannerWhereInput>;
  orderBy?: InputMaybe<RowSpecialBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkfooterSocialLinksArgs = {
  where?: InputMaybe<FooterWhereInput>;
  orderBy?: InputMaybe<FooterOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkfooterLegalLinksArgs = {
  where?: InputMaybe<FooterWhereInput>;
  orderBy?: InputMaybe<FooterOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkrowServiceOptionsMultipleArgs = {
  where?: InputMaybe<RowServiceOptionsWhereInput>;
  orderBy?: InputMaybe<RowServiceOptionsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkrowContentLinksArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkassetArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkuspsMultipleArgs = {
  where?: InputMaybe<UspsWhereInput>;
  orderBy?: InputMaybe<UspsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkrowProductMultipleArgs = {
  where?: InputMaybe<RowProductWhereInput>;
  orderBy?: InputMaybe<RowProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkhistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type PageLinkConnectInput = {
  /** Document to connect */
  where: PageLinkWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type PageLinkConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<PageLinkEdge>;
  aggregate: Aggregate;
};

export type PageLinkCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** title input for default locale (en) */
  title: Scalars['String'];
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  /** url input for default locale (en) */
  url: Scalars['String'];
  rowHeroBanners?: InputMaybe<RowHeroBannerCreateManyInlineInput>;
  rowSpecialBanners?: InputMaybe<RowSpecialBannerCreateManyInlineInput>;
  footerSocialLinks?: InputMaybe<FooterCreateManyInlineInput>;
  footerLegalLinks?: InputMaybe<FooterCreateManyInlineInput>;
  rowServiceOptionsMultiple?: InputMaybe<RowServiceOptionsCreateManyInlineInput>;
  rowContentLinks?: InputMaybe<RowContentLinksCreateOneInlineInput>;
  asset?: InputMaybe<AssetCreateOneInlineInput>;
  uspsMultiple?: InputMaybe<UspsCreateManyInlineInput>;
  rowProductMultiple?: InputMaybe<RowProductCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<PageLinkCreateLocalizationsInput>;
};

export type PageLinkCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  title: Scalars['String'];
  description?: InputMaybe<Scalars['RichTextAST']>;
  url: Scalars['String'];
};

export type PageLinkCreateLocalizationInput = {
  /** Localization input */
  data: PageLinkCreateLocalizationDataInput;
  locale: Locale;
};

export type PageLinkCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<PageLinkCreateLocalizationInput>>;
};

export type PageLinkCreateManyInlineInput = {
  /** Create and connect multiple existing PageLink documents */
  create?: InputMaybe<Array<PageLinkCreateInput>>;
  /** Connect multiple existing PageLink documents */
  connect?: InputMaybe<Array<PageLinkWhereUniqueInput>>;
};

export type PageLinkCreateOneInlineInput = {
  /** Create and connect one PageLink document */
  create?: InputMaybe<PageLinkCreateInput>;
  /** Connect one existing PageLink document */
  connect?: InputMaybe<PageLinkWhereUniqueInput>;
};

/** An edge in a connection. */
export type PageLinkEdge = {
  /** The item at the end of the edge. */
  node: PageLink;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type PageLinkManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageLinkWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  rowHeroBanners_every?: InputMaybe<RowHeroBannerWhereInput>;
  rowHeroBanners_some?: InputMaybe<RowHeroBannerWhereInput>;
  rowHeroBanners_none?: InputMaybe<RowHeroBannerWhereInput>;
  rowSpecialBanners_every?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBanners_some?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBanners_none?: InputMaybe<RowSpecialBannerWhereInput>;
  footerSocialLinks_every?: InputMaybe<FooterWhereInput>;
  footerSocialLinks_some?: InputMaybe<FooterWhereInput>;
  footerSocialLinks_none?: InputMaybe<FooterWhereInput>;
  footerLegalLinks_every?: InputMaybe<FooterWhereInput>;
  footerLegalLinks_some?: InputMaybe<FooterWhereInput>;
  footerLegalLinks_none?: InputMaybe<FooterWhereInput>;
  rowServiceOptionsMultiple_every?: InputMaybe<RowServiceOptionsWhereInput>;
  rowServiceOptionsMultiple_some?: InputMaybe<RowServiceOptionsWhereInput>;
  rowServiceOptionsMultiple_none?: InputMaybe<RowServiceOptionsWhereInput>;
  rowContentLinks?: InputMaybe<RowContentLinksWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  uspsMultiple_every?: InputMaybe<UspsWhereInput>;
  uspsMultiple_some?: InputMaybe<UspsWhereInput>;
  uspsMultiple_none?: InputMaybe<UspsWhereInput>;
  rowProductMultiple_every?: InputMaybe<RowProductWhereInput>;
  rowProductMultiple_some?: InputMaybe<RowProductWhereInput>;
  rowProductMultiple_none?: InputMaybe<RowProductWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

export type PageLinkOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'url_ASC'
  | 'url_DESC';

export type PageLinkUpdateInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  /** url input for default locale (en) */
  url?: InputMaybe<Scalars['String']>;
  rowHeroBanners?: InputMaybe<RowHeroBannerUpdateManyInlineInput>;
  rowSpecialBanners?: InputMaybe<RowSpecialBannerUpdateManyInlineInput>;
  footerSocialLinks?: InputMaybe<FooterUpdateManyInlineInput>;
  footerLegalLinks?: InputMaybe<FooterUpdateManyInlineInput>;
  rowServiceOptionsMultiple?: InputMaybe<RowServiceOptionsUpdateManyInlineInput>;
  rowContentLinks?: InputMaybe<RowContentLinksUpdateOneInlineInput>;
  asset?: InputMaybe<AssetUpdateOneInlineInput>;
  uspsMultiple?: InputMaybe<UspsUpdateManyInlineInput>;
  rowProductMultiple?: InputMaybe<RowProductUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<PageLinkUpdateLocalizationsInput>;
};

export type PageLinkUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  url?: InputMaybe<Scalars['String']>;
};

export type PageLinkUpdateLocalizationInput = {
  data: PageLinkUpdateLocalizationDataInput;
  locale: Locale;
};

export type PageLinkUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<PageLinkCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<PageLinkUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<PageLinkUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type PageLinkUpdateManyInlineInput = {
  /** Create and connect multiple PageLink documents */
  create?: InputMaybe<Array<PageLinkCreateInput>>;
  /** Connect multiple existing PageLink documents */
  connect?: InputMaybe<Array<PageLinkConnectInput>>;
  /** Override currently-connected documents with multiple existing PageLink documents */
  set?: InputMaybe<Array<PageLinkWhereUniqueInput>>;
  /** Update multiple PageLink documents */
  update?: InputMaybe<Array<PageLinkUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageLink documents */
  upsert?: InputMaybe<Array<PageLinkUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple PageLink documents */
  disconnect?: InputMaybe<Array<PageLinkWhereUniqueInput>>;
  /** Delete multiple PageLink documents */
  delete?: InputMaybe<Array<PageLinkWhereUniqueInput>>;
};

export type PageLinkUpdateManyInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  /** url input for default locale (en) */
  url?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<PageLinkUpdateManyLocalizationsInput>;
};

export type PageLinkUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  url?: InputMaybe<Scalars['String']>;
};

export type PageLinkUpdateManyLocalizationInput = {
  data: PageLinkUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type PageLinkUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<PageLinkUpdateManyLocalizationInput>>;
};

export type PageLinkUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: PageLinkWhereInput;
  /** Update many input */
  data: PageLinkUpdateManyInput;
};

export type PageLinkUpdateOneInlineInput = {
  /** Create and connect one PageLink document */
  create?: InputMaybe<PageLinkCreateInput>;
  /** Update single PageLink document */
  update?: InputMaybe<PageLinkUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageLink document */
  upsert?: InputMaybe<PageLinkUpsertWithNestedWhereUniqueInput>;
  /** Connect existing PageLink document */
  connect?: InputMaybe<PageLinkWhereUniqueInput>;
  /** Disconnect currently connected PageLink document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected PageLink document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type PageLinkUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PageLinkWhereUniqueInput;
  /** Document to update */
  data: PageLinkUpdateInput;
};

export type PageLinkUpsertInput = {
  /** Create document if it didn't exist */
  create: PageLinkCreateInput;
  /** Update document if it exists */
  update: PageLinkUpdateInput;
};

export type PageLinkUpsertLocalizationInput = {
  update: PageLinkUpdateLocalizationDataInput;
  create: PageLinkCreateLocalizationDataInput;
  locale: Locale;
};

export type PageLinkUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PageLinkWhereUniqueInput;
  /** Upsert data */
  data: PageLinkUpsertInput;
};

/** Identifies documents */
export type PageLinkWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageLinkWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  rowHeroBanners_every?: InputMaybe<RowHeroBannerWhereInput>;
  rowHeroBanners_some?: InputMaybe<RowHeroBannerWhereInput>;
  rowHeroBanners_none?: InputMaybe<RowHeroBannerWhereInput>;
  rowSpecialBanners_every?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBanners_some?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBanners_none?: InputMaybe<RowSpecialBannerWhereInput>;
  footerSocialLinks_every?: InputMaybe<FooterWhereInput>;
  footerSocialLinks_some?: InputMaybe<FooterWhereInput>;
  footerSocialLinks_none?: InputMaybe<FooterWhereInput>;
  footerLegalLinks_every?: InputMaybe<FooterWhereInput>;
  footerLegalLinks_some?: InputMaybe<FooterWhereInput>;
  footerLegalLinks_none?: InputMaybe<FooterWhereInput>;
  rowServiceOptionsMultiple_every?: InputMaybe<RowServiceOptionsWhereInput>;
  rowServiceOptionsMultiple_some?: InputMaybe<RowServiceOptionsWhereInput>;
  rowServiceOptionsMultiple_none?: InputMaybe<RowServiceOptionsWhereInput>;
  rowContentLinks?: InputMaybe<RowContentLinksWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  uspsMultiple_every?: InputMaybe<UspsWhereInput>;
  uspsMultiple_some?: InputMaybe<UspsWhereInput>;
  uspsMultiple_none?: InputMaybe<UspsWhereInput>;
  rowProductMultiple_every?: InputMaybe<RowProductWhereInput>;
  rowProductMultiple_some?: InputMaybe<RowProductWhereInput>;
  rowProductMultiple_none?: InputMaybe<RowProductWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

/** References PageLink record uniquely */
export type PageLinkWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Identifies documents */
export type PageManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  relatedPages_every?: InputMaybe<PageWhereInput>;
  relatedPages_some?: InputMaybe<PageWhereInput>;
  relatedPages_none?: InputMaybe<PageWhereInput>;
  rowButtonLinkLists_every?: InputMaybe<RowButtonLinkListWhereInput>;
  rowButtonLinkLists_some?: InputMaybe<RowButtonLinkListWhereInput>;
  rowButtonLinkLists_none?: InputMaybe<RowButtonLinkListWhereInput>;
  childPages_every?: InputMaybe<PageWhereInput>;
  childPages_some?: InputMaybe<PageWhereInput>;
  childPages_none?: InputMaybe<PageWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

export type PageOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'metaTitle_ASC'
  | 'metaTitle_DESC'
  | 'metaDescription_ASC'
  | 'metaDescription_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'author_ASC'
  | 'author_DESC'
  | 'metaRobots_ASC'
  | 'metaRobots_DESC';

export type PageUpdateInput = {
  /** url input for default locale (en) */
  url?: InputMaybe<Scalars['String']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** metaTitle input for default locale (en) */
  metaTitle?: InputMaybe<Scalars['String']>;
  /** metaDescription input for default locale (en) */
  metaDescription?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** author input for default locale (en) */
  author?: InputMaybe<Scalars['String']>;
  asset?: InputMaybe<AssetUpdateOneInlineInput>;
  relatedPages?: InputMaybe<PageUpdateManyInlineInput>;
  rowButtonLinkLists?: InputMaybe<RowButtonLinkListUpdateManyInlineInput>;
  childPages?: InputMaybe<PageUpdateManyInlineInput>;
  /** metaRobots input for default locale (en) */
  metaRobots?: InputMaybe<MetaRobots>;
  content?: InputMaybe<PageContentUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<PageUpdateLocalizationsInput>;
};

export type PageUpdateLocalizationDataInput = {
  url?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  metaTitle?: InputMaybe<Scalars['String']>;
  metaDescription?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  metaRobots?: InputMaybe<MetaRobots>;
};

export type PageUpdateLocalizationInput = {
  data: PageUpdateLocalizationDataInput;
  locale: Locale;
};

export type PageUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<PageCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<PageUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<PageUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type PageUpdateManyInlineInput = {
  /** Create and connect multiple Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageConnectInput>>;
  /** Override currently-connected documents with multiple existing Page documents */
  set?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Update multiple Page documents */
  update?: InputMaybe<Array<PageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Page documents */
  upsert?: InputMaybe<Array<PageUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple Page documents */
  disconnect?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Delete multiple Page documents */
  delete?: InputMaybe<Array<PageWhereUniqueInput>>;
};

export type PageUpdateManyInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** metaTitle input for default locale (en) */
  metaTitle?: InputMaybe<Scalars['String']>;
  /** metaDescription input for default locale (en) */
  metaDescription?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** author input for default locale (en) */
  author?: InputMaybe<Scalars['String']>;
  /** metaRobots input for default locale (en) */
  metaRobots?: InputMaybe<MetaRobots>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<PageUpdateManyLocalizationsInput>;
};

export type PageUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
  metaTitle?: InputMaybe<Scalars['String']>;
  metaDescription?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  metaRobots?: InputMaybe<MetaRobots>;
};

export type PageUpdateManyLocalizationInput = {
  data: PageUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type PageUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<PageUpdateManyLocalizationInput>>;
};

export type PageUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: PageWhereInput;
  /** Update many input */
  data: PageUpdateManyInput;
};

export type PageUpdateOneInlineInput = {
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
  /** Update single Page document */
  update?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Page document */
  upsert?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
  /** Connect existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
  /** Disconnect currently connected Page document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected Page document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type PageUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PageWhereUniqueInput;
  /** Document to update */
  data: PageUpdateInput;
};

export type PageUpsertInput = {
  /** Create document if it didn't exist */
  create: PageCreateInput;
  /** Update document if it exists */
  update: PageUpdateInput;
};

export type PageUpsertLocalizationInput = {
  update: PageUpdateLocalizationDataInput;
  create: PageCreateLocalizationDataInput;
  locale: Locale;
};

export type PageUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PageWhereUniqueInput;
  /** Upsert data */
  data: PageUpsertInput;
};

/** Identifies documents */
export type PageWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  metaTitle?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  metaTitle_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaTitle_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  metaTitle_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  metaTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaTitle_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  metaTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  metaDescription?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  metaDescription_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaDescription_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  metaDescription_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  metaDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaDescription_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  metaDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  author?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  author_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  author_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  author_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  author_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  author_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  author_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  author_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  author_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  author_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  relatedPages_every?: InputMaybe<PageWhereInput>;
  relatedPages_some?: InputMaybe<PageWhereInput>;
  relatedPages_none?: InputMaybe<PageWhereInput>;
  rowButtonLinkLists_every?: InputMaybe<RowButtonLinkListWhereInput>;
  rowButtonLinkLists_some?: InputMaybe<RowButtonLinkListWhereInput>;
  rowButtonLinkLists_none?: InputMaybe<RowButtonLinkListWhereInput>;
  childPages_every?: InputMaybe<PageWhereInput>;
  childPages_some?: InputMaybe<PageWhereInput>;
  childPages_none?: InputMaybe<PageWhereInput>;
  metaRobots?: InputMaybe<MetaRobots>;
  /** All values that are not equal to given value. */
  metaRobots_not?: InputMaybe<MetaRobots>;
  /** All values that are contained in given list. */
  metaRobots_in?: InputMaybe<Array<MetaRobots>>;
  /** All values that are not contained in given list. */
  metaRobots_not_in?: InputMaybe<Array<MetaRobots>>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

/** References Page record uniquely */
export type PageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PublishLocaleInput = {
  /** Locales to publish */
  locale: Locale;
  /** Stages to publish selected locales to */
  stages: Array<Stage>;
};

/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RGBA = {
  r: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  b: Scalars['RGBAHue'];
  a: Scalars['RGBATransparency'];
};

/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RGBAInput = {
  r: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  b: Scalars['RGBAHue'];
  a: Scalars['RGBATransparency'];
};

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type RichText = {
  /** Returns AST representation */
  raw: Scalars['RichTextAST'];
  /** Returns HTMl representation */
  html: Scalars['String'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};

export type RowBlogContent = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowBlogContent>;
  /** Get the document in other stages */
  documentInStages: Array<RowBlogContent>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  content?: Maybe<RichText>;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowBlogContent versions */
  history: Array<Version>;
};


export type RowBlogContentlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowBlogContentdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowBlogContentcreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowBlogContentupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowBlogContentpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowBlogContentcreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowBlogContentupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowBlogContentpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowBlogContentscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowBlogContentpagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowBlogContenthistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowBlogContentConnectInput = {
  /** Document to connect */
  where: RowBlogContentWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowBlogContentConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowBlogContentEdge>;
  aggregate: Aggregate;
};

export type RowBlogContentCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** content input for default locale (en) */
  content?: InputMaybe<Scalars['RichTextAST']>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowBlogContentCreateLocalizationsInput>;
};

export type RowBlogContentCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  content?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowBlogContentCreateLocalizationInput = {
  /** Localization input */
  data: RowBlogContentCreateLocalizationDataInput;
  locale: Locale;
};

export type RowBlogContentCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowBlogContentCreateLocalizationInput>>;
};

export type RowBlogContentCreateManyInlineInput = {
  /** Create and connect multiple existing RowBlogContent documents */
  create?: InputMaybe<Array<RowBlogContentCreateInput>>;
  /** Connect multiple existing RowBlogContent documents */
  connect?: InputMaybe<Array<RowBlogContentWhereUniqueInput>>;
};

export type RowBlogContentCreateOneInlineInput = {
  /** Create and connect one RowBlogContent document */
  create?: InputMaybe<RowBlogContentCreateInput>;
  /** Connect one existing RowBlogContent document */
  connect?: InputMaybe<RowBlogContentWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowBlogContentEdge = {
  /** The item at the end of the edge. */
  node: RowBlogContent;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowBlogContentManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowBlogContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowBlogContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowBlogContentWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowBlogContentOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type RowBlogContentUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** content input for default locale (en) */
  content?: InputMaybe<Scalars['RichTextAST']>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowBlogContentUpdateLocalizationsInput>;
};

export type RowBlogContentUpdateLocalizationDataInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowBlogContentUpdateLocalizationInput = {
  data: RowBlogContentUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowBlogContentUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowBlogContentCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowBlogContentUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowBlogContentUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowBlogContentUpdateManyInlineInput = {
  /** Create and connect multiple RowBlogContent documents */
  create?: InputMaybe<Array<RowBlogContentCreateInput>>;
  /** Connect multiple existing RowBlogContent documents */
  connect?: InputMaybe<Array<RowBlogContentConnectInput>>;
  /** Override currently-connected documents with multiple existing RowBlogContent documents */
  set?: InputMaybe<Array<RowBlogContentWhereUniqueInput>>;
  /** Update multiple RowBlogContent documents */
  update?: InputMaybe<Array<RowBlogContentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowBlogContent documents */
  upsert?: InputMaybe<Array<RowBlogContentUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowBlogContent documents */
  disconnect?: InputMaybe<Array<RowBlogContentWhereUniqueInput>>;
  /** Delete multiple RowBlogContent documents */
  delete?: InputMaybe<Array<RowBlogContentWhereUniqueInput>>;
};

export type RowBlogContentUpdateManyInput = {
  /** content input for default locale (en) */
  content?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowBlogContentUpdateManyLocalizationsInput>;
};

export type RowBlogContentUpdateManyLocalizationDataInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowBlogContentUpdateManyLocalizationInput = {
  data: RowBlogContentUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowBlogContentUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowBlogContentUpdateManyLocalizationInput>>;
};

export type RowBlogContentUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowBlogContentWhereInput;
  /** Update many input */
  data: RowBlogContentUpdateManyInput;
};

export type RowBlogContentUpdateOneInlineInput = {
  /** Create and connect one RowBlogContent document */
  create?: InputMaybe<RowBlogContentCreateInput>;
  /** Update single RowBlogContent document */
  update?: InputMaybe<RowBlogContentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowBlogContent document */
  upsert?: InputMaybe<RowBlogContentUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowBlogContent document */
  connect?: InputMaybe<RowBlogContentWhereUniqueInput>;
  /** Disconnect currently connected RowBlogContent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowBlogContent document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowBlogContentUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowBlogContentWhereUniqueInput;
  /** Document to update */
  data: RowBlogContentUpdateInput;
};

export type RowBlogContentUpsertInput = {
  /** Create document if it didn't exist */
  create: RowBlogContentCreateInput;
  /** Update document if it exists */
  update: RowBlogContentUpdateInput;
};

export type RowBlogContentUpsertLocalizationInput = {
  update: RowBlogContentUpdateLocalizationDataInput;
  create: RowBlogContentCreateLocalizationDataInput;
  locale: Locale;
};

export type RowBlogContentUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowBlogContentWhereUniqueInput;
  /** Upsert data */
  data: RowBlogContentUpsertInput;
};

/** Identifies documents */
export type RowBlogContentWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowBlogContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowBlogContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowBlogContentWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowBlogContent record uniquely */
export type RowBlogContentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowButtonLinkList = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowButtonLinkList>;
  /** Get the document in other stages */
  documentInStages: Array<RowButtonLinkList>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  title: Scalars['String'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  links: Array<Page>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowButtonLinkList versions */
  history: Array<Version>;
};


export type RowButtonLinkListlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowButtonLinkListdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowButtonLinkListcreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowButtonLinkListupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowButtonLinkListpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowButtonLinkListcreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowButtonLinkListupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowButtonLinkListpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowButtonLinkListlinksArgs = {
  where?: InputMaybe<PageWhereInput>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowButtonLinkListscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowButtonLinkListpagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowButtonLinkListhistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowButtonLinkListConnectInput = {
  /** Document to connect */
  where: RowButtonLinkListWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowButtonLinkListConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowButtonLinkListEdge>;
  aggregate: Aggregate;
};

export type RowButtonLinkListCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** title input for default locale (en) */
  title: Scalars['String'];
  links?: InputMaybe<PageCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowButtonLinkListCreateLocalizationsInput>;
};

export type RowButtonLinkListCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  title: Scalars['String'];
};

export type RowButtonLinkListCreateLocalizationInput = {
  /** Localization input */
  data: RowButtonLinkListCreateLocalizationDataInput;
  locale: Locale;
};

export type RowButtonLinkListCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowButtonLinkListCreateLocalizationInput>>;
};

export type RowButtonLinkListCreateManyInlineInput = {
  /** Create and connect multiple existing RowButtonLinkList documents */
  create?: InputMaybe<Array<RowButtonLinkListCreateInput>>;
  /** Connect multiple existing RowButtonLinkList documents */
  connect?: InputMaybe<Array<RowButtonLinkListWhereUniqueInput>>;
};

export type RowButtonLinkListCreateOneInlineInput = {
  /** Create and connect one RowButtonLinkList document */
  create?: InputMaybe<RowButtonLinkListCreateInput>;
  /** Connect one existing RowButtonLinkList document */
  connect?: InputMaybe<RowButtonLinkListWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowButtonLinkListEdge = {
  /** The item at the end of the edge. */
  node: RowButtonLinkList;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowButtonLinkListManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowButtonLinkListWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowButtonLinkListWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowButtonLinkListWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  links_every?: InputMaybe<PageWhereInput>;
  links_some?: InputMaybe<PageWhereInput>;
  links_none?: InputMaybe<PageWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowButtonLinkListOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'title_ASC'
  | 'title_DESC';

export type RowButtonLinkListUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  links?: InputMaybe<PageUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowButtonLinkListUpdateLocalizationsInput>;
};

export type RowButtonLinkListUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type RowButtonLinkListUpdateLocalizationInput = {
  data: RowButtonLinkListUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowButtonLinkListUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowButtonLinkListCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowButtonLinkListUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowButtonLinkListUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowButtonLinkListUpdateManyInlineInput = {
  /** Create and connect multiple RowButtonLinkList documents */
  create?: InputMaybe<Array<RowButtonLinkListCreateInput>>;
  /** Connect multiple existing RowButtonLinkList documents */
  connect?: InputMaybe<Array<RowButtonLinkListConnectInput>>;
  /** Override currently-connected documents with multiple existing RowButtonLinkList documents */
  set?: InputMaybe<Array<RowButtonLinkListWhereUniqueInput>>;
  /** Update multiple RowButtonLinkList documents */
  update?: InputMaybe<Array<RowButtonLinkListUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowButtonLinkList documents */
  upsert?: InputMaybe<Array<RowButtonLinkListUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowButtonLinkList documents */
  disconnect?: InputMaybe<Array<RowButtonLinkListWhereUniqueInput>>;
  /** Delete multiple RowButtonLinkList documents */
  delete?: InputMaybe<Array<RowButtonLinkListWhereUniqueInput>>;
};

export type RowButtonLinkListUpdateManyInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowButtonLinkListUpdateManyLocalizationsInput>;
};

export type RowButtonLinkListUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type RowButtonLinkListUpdateManyLocalizationInput = {
  data: RowButtonLinkListUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowButtonLinkListUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowButtonLinkListUpdateManyLocalizationInput>>;
};

export type RowButtonLinkListUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowButtonLinkListWhereInput;
  /** Update many input */
  data: RowButtonLinkListUpdateManyInput;
};

export type RowButtonLinkListUpdateOneInlineInput = {
  /** Create and connect one RowButtonLinkList document */
  create?: InputMaybe<RowButtonLinkListCreateInput>;
  /** Update single RowButtonLinkList document */
  update?: InputMaybe<RowButtonLinkListUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowButtonLinkList document */
  upsert?: InputMaybe<RowButtonLinkListUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowButtonLinkList document */
  connect?: InputMaybe<RowButtonLinkListWhereUniqueInput>;
  /** Disconnect currently connected RowButtonLinkList document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowButtonLinkList document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowButtonLinkListUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowButtonLinkListWhereUniqueInput;
  /** Document to update */
  data: RowButtonLinkListUpdateInput;
};

export type RowButtonLinkListUpsertInput = {
  /** Create document if it didn't exist */
  create: RowButtonLinkListCreateInput;
  /** Update document if it exists */
  update: RowButtonLinkListUpdateInput;
};

export type RowButtonLinkListUpsertLocalizationInput = {
  update: RowButtonLinkListUpdateLocalizationDataInput;
  create: RowButtonLinkListCreateLocalizationDataInput;
  locale: Locale;
};

export type RowButtonLinkListUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowButtonLinkListWhereUniqueInput;
  /** Upsert data */
  data: RowButtonLinkListUpsertInput;
};

/** Identifies documents */
export type RowButtonLinkListWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowButtonLinkListWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowButtonLinkListWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowButtonLinkListWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  links_every?: InputMaybe<PageWhereInput>;
  links_some?: InputMaybe<PageWhereInput>;
  links_none?: InputMaybe<PageWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowButtonLinkList record uniquely */
export type RowButtonLinkListWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowColumnOne = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowColumnOne>;
  /** Get the document in other stages */
  documentInStages: Array<RowColumnOne>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  colOne: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowColumnOne versions */
  history: Array<Version>;
};


export type RowColumnOnelocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowColumnOnedocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowColumnOnecreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnOneupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnOnepublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnOnecreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnOneupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnOnepublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnOnescheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnOnepagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnOnehistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowColumnOneConnectInput = {
  /** Document to connect */
  where: RowColumnOneWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowColumnOneConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowColumnOneEdge>;
  aggregate: Aggregate;
};

export type RowColumnOneCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** colOne input for default locale (en) */
  colOne: Scalars['RichTextAST'];
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowColumnOneCreateLocalizationsInput>;
};

export type RowColumnOneCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  colOne: Scalars['RichTextAST'];
};

export type RowColumnOneCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnOneCreateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnOneCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowColumnOneCreateLocalizationInput>>;
};

export type RowColumnOneCreateManyInlineInput = {
  /** Create and connect multiple existing RowColumnOne documents */
  create?: InputMaybe<Array<RowColumnOneCreateInput>>;
  /** Connect multiple existing RowColumnOne documents */
  connect?: InputMaybe<Array<RowColumnOneWhereUniqueInput>>;
};

export type RowColumnOneCreateOneInlineInput = {
  /** Create and connect one RowColumnOne document */
  create?: InputMaybe<RowColumnOneCreateInput>;
  /** Connect one existing RowColumnOne document */
  connect?: InputMaybe<RowColumnOneWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowColumnOneEdge = {
  /** The item at the end of the edge. */
  node: RowColumnOne;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowColumnOneManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowColumnOneWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowColumnOneWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowColumnOneWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowColumnOneOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type RowColumnOneUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** colOne input for default locale (en) */
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowColumnOneUpdateLocalizationsInput>;
};

export type RowColumnOneUpdateLocalizationDataInput = {
  colOne?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowColumnOneUpdateLocalizationInput = {
  data: RowColumnOneUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnOneUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowColumnOneCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowColumnOneUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowColumnOneUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowColumnOneUpdateManyInlineInput = {
  /** Create and connect multiple RowColumnOne documents */
  create?: InputMaybe<Array<RowColumnOneCreateInput>>;
  /** Connect multiple existing RowColumnOne documents */
  connect?: InputMaybe<Array<RowColumnOneConnectInput>>;
  /** Override currently-connected documents with multiple existing RowColumnOne documents */
  set?: InputMaybe<Array<RowColumnOneWhereUniqueInput>>;
  /** Update multiple RowColumnOne documents */
  update?: InputMaybe<Array<RowColumnOneUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowColumnOne documents */
  upsert?: InputMaybe<Array<RowColumnOneUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowColumnOne documents */
  disconnect?: InputMaybe<Array<RowColumnOneWhereUniqueInput>>;
  /** Delete multiple RowColumnOne documents */
  delete?: InputMaybe<Array<RowColumnOneWhereUniqueInput>>;
};

export type RowColumnOneUpdateManyInput = {
  /** colOne input for default locale (en) */
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowColumnOneUpdateManyLocalizationsInput>;
};

export type RowColumnOneUpdateManyLocalizationDataInput = {
  colOne?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowColumnOneUpdateManyLocalizationInput = {
  data: RowColumnOneUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowColumnOneUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowColumnOneUpdateManyLocalizationInput>>;
};

export type RowColumnOneUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowColumnOneWhereInput;
  /** Update many input */
  data: RowColumnOneUpdateManyInput;
};

export type RowColumnOneUpdateOneInlineInput = {
  /** Create and connect one RowColumnOne document */
  create?: InputMaybe<RowColumnOneCreateInput>;
  /** Update single RowColumnOne document */
  update?: InputMaybe<RowColumnOneUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowColumnOne document */
  upsert?: InputMaybe<RowColumnOneUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowColumnOne document */
  connect?: InputMaybe<RowColumnOneWhereUniqueInput>;
  /** Disconnect currently connected RowColumnOne document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowColumnOne document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowColumnOneUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnOneWhereUniqueInput;
  /** Document to update */
  data: RowColumnOneUpdateInput;
};

export type RowColumnOneUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnOneCreateInput;
  /** Update document if it exists */
  update: RowColumnOneUpdateInput;
};

export type RowColumnOneUpsertLocalizationInput = {
  update: RowColumnOneUpdateLocalizationDataInput;
  create: RowColumnOneCreateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnOneUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnOneWhereUniqueInput;
  /** Upsert data */
  data: RowColumnOneUpsertInput;
};

/** Identifies documents */
export type RowColumnOneWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowColumnOneWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowColumnOneWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowColumnOneWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowColumnOne record uniquely */
export type RowColumnOneWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowColumnThree = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowColumnThree>;
  /** Get the document in other stages */
  documentInStages: Array<RowColumnThree>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  colOne: RichText;
  colTwo: RichText;
  colThree: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowColumnThree versions */
  history: Array<Version>;
};


export type RowColumnThreelocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowColumnThreedocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowColumnThreecreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnThreeupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnThreepublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnThreecreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnThreeupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnThreepublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnThreescheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnThreepagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnThreehistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowColumnThreeConnectInput = {
  /** Document to connect */
  where: RowColumnThreeWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowColumnThreeConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowColumnThreeEdge>;
  aggregate: Aggregate;
};

export type RowColumnThreeCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** colOne input for default locale (en) */
  colOne: Scalars['RichTextAST'];
  /** colTwo input for default locale (en) */
  colTwo: Scalars['RichTextAST'];
  /** colThree input for default locale (en) */
  colThree: Scalars['RichTextAST'];
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowColumnThreeCreateLocalizationsInput>;
};

export type RowColumnThreeCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  colOne: Scalars['RichTextAST'];
  colTwo: Scalars['RichTextAST'];
  colThree: Scalars['RichTextAST'];
};

export type RowColumnThreeCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnThreeCreateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnThreeCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowColumnThreeCreateLocalizationInput>>;
};

export type RowColumnThreeCreateManyInlineInput = {
  /** Create and connect multiple existing RowColumnThree documents */
  create?: InputMaybe<Array<RowColumnThreeCreateInput>>;
  /** Connect multiple existing RowColumnThree documents */
  connect?: InputMaybe<Array<RowColumnThreeWhereUniqueInput>>;
};

export type RowColumnThreeCreateOneInlineInput = {
  /** Create and connect one RowColumnThree document */
  create?: InputMaybe<RowColumnThreeCreateInput>;
  /** Connect one existing RowColumnThree document */
  connect?: InputMaybe<RowColumnThreeWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowColumnThreeEdge = {
  /** The item at the end of the edge. */
  node: RowColumnThree;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowColumnThreeManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowColumnThreeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowColumnThreeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowColumnThreeWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowColumnThreeOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type RowColumnThreeUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** colOne input for default locale (en) */
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  /** colTwo input for default locale (en) */
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
  /** colThree input for default locale (en) */
  colThree?: InputMaybe<Scalars['RichTextAST']>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowColumnThreeUpdateLocalizationsInput>;
};

export type RowColumnThreeUpdateLocalizationDataInput = {
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
  colThree?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowColumnThreeUpdateLocalizationInput = {
  data: RowColumnThreeUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnThreeUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowColumnThreeCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowColumnThreeUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowColumnThreeUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowColumnThreeUpdateManyInlineInput = {
  /** Create and connect multiple RowColumnThree documents */
  create?: InputMaybe<Array<RowColumnThreeCreateInput>>;
  /** Connect multiple existing RowColumnThree documents */
  connect?: InputMaybe<Array<RowColumnThreeConnectInput>>;
  /** Override currently-connected documents with multiple existing RowColumnThree documents */
  set?: InputMaybe<Array<RowColumnThreeWhereUniqueInput>>;
  /** Update multiple RowColumnThree documents */
  update?: InputMaybe<Array<RowColumnThreeUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowColumnThree documents */
  upsert?: InputMaybe<Array<RowColumnThreeUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowColumnThree documents */
  disconnect?: InputMaybe<Array<RowColumnThreeWhereUniqueInput>>;
  /** Delete multiple RowColumnThree documents */
  delete?: InputMaybe<Array<RowColumnThreeWhereUniqueInput>>;
};

export type RowColumnThreeUpdateManyInput = {
  /** colOne input for default locale (en) */
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  /** colTwo input for default locale (en) */
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
  /** colThree input for default locale (en) */
  colThree?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowColumnThreeUpdateManyLocalizationsInput>;
};

export type RowColumnThreeUpdateManyLocalizationDataInput = {
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
  colThree?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowColumnThreeUpdateManyLocalizationInput = {
  data: RowColumnThreeUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowColumnThreeUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowColumnThreeUpdateManyLocalizationInput>>;
};

export type RowColumnThreeUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowColumnThreeWhereInput;
  /** Update many input */
  data: RowColumnThreeUpdateManyInput;
};

export type RowColumnThreeUpdateOneInlineInput = {
  /** Create and connect one RowColumnThree document */
  create?: InputMaybe<RowColumnThreeCreateInput>;
  /** Update single RowColumnThree document */
  update?: InputMaybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowColumnThree document */
  upsert?: InputMaybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowColumnThree document */
  connect?: InputMaybe<RowColumnThreeWhereUniqueInput>;
  /** Disconnect currently connected RowColumnThree document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowColumnThree document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowColumnThreeUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnThreeWhereUniqueInput;
  /** Document to update */
  data: RowColumnThreeUpdateInput;
};

export type RowColumnThreeUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnThreeCreateInput;
  /** Update document if it exists */
  update: RowColumnThreeUpdateInput;
};

export type RowColumnThreeUpsertLocalizationInput = {
  update: RowColumnThreeUpdateLocalizationDataInput;
  create: RowColumnThreeCreateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnThreeUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnThreeWhereUniqueInput;
  /** Upsert data */
  data: RowColumnThreeUpsertInput;
};

/** Identifies documents */
export type RowColumnThreeWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowColumnThreeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowColumnThreeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowColumnThreeWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowColumnThree record uniquely */
export type RowColumnThreeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowColumnTwo = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowColumnTwo>;
  /** Get the document in other stages */
  documentInStages: Array<RowColumnTwo>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  colOne: RichText;
  colTwo: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowColumnTwo versions */
  history: Array<Version>;
};


export type RowColumnTwolocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowColumnTwodocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowColumnTwocreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnTwoupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnTwopublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnTwocreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnTwoupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnTwopublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnTwoscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnTwopagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnTwohistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowColumnTwoConnectInput = {
  /** Document to connect */
  where: RowColumnTwoWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowColumnTwoConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowColumnTwoEdge>;
  aggregate: Aggregate;
};

export type RowColumnTwoCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** colOne input for default locale (en) */
  colOne: Scalars['RichTextAST'];
  /** colTwo input for default locale (en) */
  colTwo: Scalars['RichTextAST'];
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowColumnTwoCreateLocalizationsInput>;
};

export type RowColumnTwoCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  colOne: Scalars['RichTextAST'];
  colTwo: Scalars['RichTextAST'];
};

export type RowColumnTwoCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnTwoCreateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnTwoCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowColumnTwoCreateLocalizationInput>>;
};

export type RowColumnTwoCreateManyInlineInput = {
  /** Create and connect multiple existing RowColumnTwo documents */
  create?: InputMaybe<Array<RowColumnTwoCreateInput>>;
  /** Connect multiple existing RowColumnTwo documents */
  connect?: InputMaybe<Array<RowColumnTwoWhereUniqueInput>>;
};

export type RowColumnTwoCreateOneInlineInput = {
  /** Create and connect one RowColumnTwo document */
  create?: InputMaybe<RowColumnTwoCreateInput>;
  /** Connect one existing RowColumnTwo document */
  connect?: InputMaybe<RowColumnTwoWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowColumnTwoEdge = {
  /** The item at the end of the edge. */
  node: RowColumnTwo;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowColumnTwoManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowColumnTwoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowColumnTwoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowColumnTwoWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowColumnTwoOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type RowColumnTwoUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** colOne input for default locale (en) */
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  /** colTwo input for default locale (en) */
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowColumnTwoUpdateLocalizationsInput>;
};

export type RowColumnTwoUpdateLocalizationDataInput = {
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowColumnTwoUpdateLocalizationInput = {
  data: RowColumnTwoUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnTwoUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowColumnTwoCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowColumnTwoUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowColumnTwoUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowColumnTwoUpdateManyInlineInput = {
  /** Create and connect multiple RowColumnTwo documents */
  create?: InputMaybe<Array<RowColumnTwoCreateInput>>;
  /** Connect multiple existing RowColumnTwo documents */
  connect?: InputMaybe<Array<RowColumnTwoConnectInput>>;
  /** Override currently-connected documents with multiple existing RowColumnTwo documents */
  set?: InputMaybe<Array<RowColumnTwoWhereUniqueInput>>;
  /** Update multiple RowColumnTwo documents */
  update?: InputMaybe<Array<RowColumnTwoUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowColumnTwo documents */
  upsert?: InputMaybe<Array<RowColumnTwoUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowColumnTwo documents */
  disconnect?: InputMaybe<Array<RowColumnTwoWhereUniqueInput>>;
  /** Delete multiple RowColumnTwo documents */
  delete?: InputMaybe<Array<RowColumnTwoWhereUniqueInput>>;
};

export type RowColumnTwoUpdateManyInput = {
  /** colOne input for default locale (en) */
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  /** colTwo input for default locale (en) */
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowColumnTwoUpdateManyLocalizationsInput>;
};

export type RowColumnTwoUpdateManyLocalizationDataInput = {
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowColumnTwoUpdateManyLocalizationInput = {
  data: RowColumnTwoUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowColumnTwoUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowColumnTwoUpdateManyLocalizationInput>>;
};

export type RowColumnTwoUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowColumnTwoWhereInput;
  /** Update many input */
  data: RowColumnTwoUpdateManyInput;
};

export type RowColumnTwoUpdateOneInlineInput = {
  /** Create and connect one RowColumnTwo document */
  create?: InputMaybe<RowColumnTwoCreateInput>;
  /** Update single RowColumnTwo document */
  update?: InputMaybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowColumnTwo document */
  upsert?: InputMaybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowColumnTwo document */
  connect?: InputMaybe<RowColumnTwoWhereUniqueInput>;
  /** Disconnect currently connected RowColumnTwo document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowColumnTwo document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowColumnTwoUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnTwoWhereUniqueInput;
  /** Document to update */
  data: RowColumnTwoUpdateInput;
};

export type RowColumnTwoUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnTwoCreateInput;
  /** Update document if it exists */
  update: RowColumnTwoUpdateInput;
};

export type RowColumnTwoUpsertLocalizationInput = {
  update: RowColumnTwoUpdateLocalizationDataInput;
  create: RowColumnTwoCreateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnTwoUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnTwoWhereUniqueInput;
  /** Upsert data */
  data: RowColumnTwoUpsertInput;
};

/** Identifies documents */
export type RowColumnTwoWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowColumnTwoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowColumnTwoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowColumnTwoWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowColumnTwo record uniquely */
export type RowColumnTwoWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowContentLinks = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowContentLinks>;
  /** Get the document in other stages */
  documentInStages: Array<RowContentLinks>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  title: Scalars['String'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  contentLinks: Array<PageLink>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowContentLinks versions */
  history: Array<Version>;
};


export type RowContentLinkslocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowContentLinksdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowContentLinkscreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowContentLinksupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowContentLinkspublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowContentLinkscreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowContentLinksupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowContentLinkspublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowContentLinkscontentLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowContentLinksscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowContentLinkspagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowContentLinkshistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowContentLinksConnectInput = {
  /** Document to connect */
  where: RowContentLinksWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowContentLinksConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowContentLinksEdge>;
  aggregate: Aggregate;
};

export type RowContentLinksCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** title input for default locale (en) */
  title: Scalars['String'];
  contentLinks?: InputMaybe<PageLinkCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowContentLinksCreateLocalizationsInput>;
};

export type RowContentLinksCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  title: Scalars['String'];
};

export type RowContentLinksCreateLocalizationInput = {
  /** Localization input */
  data: RowContentLinksCreateLocalizationDataInput;
  locale: Locale;
};

export type RowContentLinksCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowContentLinksCreateLocalizationInput>>;
};

export type RowContentLinksCreateManyInlineInput = {
  /** Create and connect multiple existing RowContentLinks documents */
  create?: InputMaybe<Array<RowContentLinksCreateInput>>;
  /** Connect multiple existing RowContentLinks documents */
  connect?: InputMaybe<Array<RowContentLinksWhereUniqueInput>>;
};

export type RowContentLinksCreateOneInlineInput = {
  /** Create and connect one RowContentLinks document */
  create?: InputMaybe<RowContentLinksCreateInput>;
  /** Connect one existing RowContentLinks document */
  connect?: InputMaybe<RowContentLinksWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowContentLinksEdge = {
  /** The item at the end of the edge. */
  node: RowContentLinks;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowContentLinksManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowContentLinksWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowContentLinksWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowContentLinksWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  contentLinks_every?: InputMaybe<PageLinkWhereInput>;
  contentLinks_some?: InputMaybe<PageLinkWhereInput>;
  contentLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowContentLinksOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'title_ASC'
  | 'title_DESC';

export type RowContentLinksUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  contentLinks?: InputMaybe<PageLinkUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowContentLinksUpdateLocalizationsInput>;
};

export type RowContentLinksUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type RowContentLinksUpdateLocalizationInput = {
  data: RowContentLinksUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowContentLinksUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowContentLinksCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowContentLinksUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowContentLinksUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowContentLinksUpdateManyInlineInput = {
  /** Create and connect multiple RowContentLinks documents */
  create?: InputMaybe<Array<RowContentLinksCreateInput>>;
  /** Connect multiple existing RowContentLinks documents */
  connect?: InputMaybe<Array<RowContentLinksConnectInput>>;
  /** Override currently-connected documents with multiple existing RowContentLinks documents */
  set?: InputMaybe<Array<RowContentLinksWhereUniqueInput>>;
  /** Update multiple RowContentLinks documents */
  update?: InputMaybe<Array<RowContentLinksUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowContentLinks documents */
  upsert?: InputMaybe<Array<RowContentLinksUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowContentLinks documents */
  disconnect?: InputMaybe<Array<RowContentLinksWhereUniqueInput>>;
  /** Delete multiple RowContentLinks documents */
  delete?: InputMaybe<Array<RowContentLinksWhereUniqueInput>>;
};

export type RowContentLinksUpdateManyInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowContentLinksUpdateManyLocalizationsInput>;
};

export type RowContentLinksUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type RowContentLinksUpdateManyLocalizationInput = {
  data: RowContentLinksUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowContentLinksUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowContentLinksUpdateManyLocalizationInput>>;
};

export type RowContentLinksUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowContentLinksWhereInput;
  /** Update many input */
  data: RowContentLinksUpdateManyInput;
};

export type RowContentLinksUpdateOneInlineInput = {
  /** Create and connect one RowContentLinks document */
  create?: InputMaybe<RowContentLinksCreateInput>;
  /** Update single RowContentLinks document */
  update?: InputMaybe<RowContentLinksUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowContentLinks document */
  upsert?: InputMaybe<RowContentLinksUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowContentLinks document */
  connect?: InputMaybe<RowContentLinksWhereUniqueInput>;
  /** Disconnect currently connected RowContentLinks document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowContentLinks document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowContentLinksUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowContentLinksWhereUniqueInput;
  /** Document to update */
  data: RowContentLinksUpdateInput;
};

export type RowContentLinksUpsertInput = {
  /** Create document if it didn't exist */
  create: RowContentLinksCreateInput;
  /** Update document if it exists */
  update: RowContentLinksUpdateInput;
};

export type RowContentLinksUpsertLocalizationInput = {
  update: RowContentLinksUpdateLocalizationDataInput;
  create: RowContentLinksCreateLocalizationDataInput;
  locale: Locale;
};

export type RowContentLinksUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowContentLinksWhereUniqueInput;
  /** Upsert data */
  data: RowContentLinksUpsertInput;
};

/** Identifies documents */
export type RowContentLinksWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowContentLinksWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowContentLinksWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowContentLinksWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  contentLinks_every?: InputMaybe<PageLinkWhereInput>;
  contentLinks_some?: InputMaybe<PageLinkWhereInput>;
  contentLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowContentLinks record uniquely */
export type RowContentLinksWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowHeroBanner = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowHeroBanner>;
  /** Get the document in other stages */
  documentInStages: Array<RowHeroBanner>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  copy: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Video, landscape */
  asset: Asset;
  pageLinks: Array<PageLink>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowHeroBanner versions */
  history: Array<Version>;
};


export type RowHeroBannerlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowHeroBannerdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowHeroBannercreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowHeroBannerupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowHeroBannerpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowHeroBannercreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerassetArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerpageLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerpagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerhistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowHeroBannerConnectInput = {
  /** Document to connect */
  where: RowHeroBannerWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowHeroBannerConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowHeroBannerEdge>;
  aggregate: Aggregate;
};

export type RowHeroBannerCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** copy input for default locale (en) */
  copy: Scalars['RichTextAST'];
  asset: AssetCreateOneInlineInput;
  pageLinks?: InputMaybe<PageLinkCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowHeroBannerCreateLocalizationsInput>;
};

export type RowHeroBannerCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  copy: Scalars['RichTextAST'];
};

export type RowHeroBannerCreateLocalizationInput = {
  /** Localization input */
  data: RowHeroBannerCreateLocalizationDataInput;
  locale: Locale;
};

export type RowHeroBannerCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowHeroBannerCreateLocalizationInput>>;
};

export type RowHeroBannerCreateManyInlineInput = {
  /** Create and connect multiple existing RowHeroBanner documents */
  create?: InputMaybe<Array<RowHeroBannerCreateInput>>;
  /** Connect multiple existing RowHeroBanner documents */
  connect?: InputMaybe<Array<RowHeroBannerWhereUniqueInput>>;
};

export type RowHeroBannerCreateOneInlineInput = {
  /** Create and connect one RowHeroBanner document */
  create?: InputMaybe<RowHeroBannerCreateInput>;
  /** Connect one existing RowHeroBanner document */
  connect?: InputMaybe<RowHeroBannerWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowHeroBannerEdge = {
  /** The item at the end of the edge. */
  node: RowHeroBanner;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowHeroBannerManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowHeroBannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowHeroBannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowHeroBannerWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  pageLinks_every?: InputMaybe<PageLinkWhereInput>;
  pageLinks_some?: InputMaybe<PageLinkWhereInput>;
  pageLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowHeroBannerOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type RowHeroBannerUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** copy input for default locale (en) */
  copy?: InputMaybe<Scalars['RichTextAST']>;
  asset?: InputMaybe<AssetUpdateOneInlineInput>;
  pageLinks?: InputMaybe<PageLinkUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowHeroBannerUpdateLocalizationsInput>;
};

export type RowHeroBannerUpdateLocalizationDataInput = {
  copy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowHeroBannerUpdateLocalizationInput = {
  data: RowHeroBannerUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowHeroBannerUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowHeroBannerCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowHeroBannerUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowHeroBannerUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowHeroBannerUpdateManyInlineInput = {
  /** Create and connect multiple RowHeroBanner documents */
  create?: InputMaybe<Array<RowHeroBannerCreateInput>>;
  /** Connect multiple existing RowHeroBanner documents */
  connect?: InputMaybe<Array<RowHeroBannerConnectInput>>;
  /** Override currently-connected documents with multiple existing RowHeroBanner documents */
  set?: InputMaybe<Array<RowHeroBannerWhereUniqueInput>>;
  /** Update multiple RowHeroBanner documents */
  update?: InputMaybe<Array<RowHeroBannerUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowHeroBanner documents */
  upsert?: InputMaybe<Array<RowHeroBannerUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowHeroBanner documents */
  disconnect?: InputMaybe<Array<RowHeroBannerWhereUniqueInput>>;
  /** Delete multiple RowHeroBanner documents */
  delete?: InputMaybe<Array<RowHeroBannerWhereUniqueInput>>;
};

export type RowHeroBannerUpdateManyInput = {
  /** copy input for default locale (en) */
  copy?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowHeroBannerUpdateManyLocalizationsInput>;
};

export type RowHeroBannerUpdateManyLocalizationDataInput = {
  copy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowHeroBannerUpdateManyLocalizationInput = {
  data: RowHeroBannerUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowHeroBannerUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowHeroBannerUpdateManyLocalizationInput>>;
};

export type RowHeroBannerUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowHeroBannerWhereInput;
  /** Update many input */
  data: RowHeroBannerUpdateManyInput;
};

export type RowHeroBannerUpdateOneInlineInput = {
  /** Create and connect one RowHeroBanner document */
  create?: InputMaybe<RowHeroBannerCreateInput>;
  /** Update single RowHeroBanner document */
  update?: InputMaybe<RowHeroBannerUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowHeroBanner document */
  upsert?: InputMaybe<RowHeroBannerUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowHeroBanner document */
  connect?: InputMaybe<RowHeroBannerWhereUniqueInput>;
  /** Disconnect currently connected RowHeroBanner document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowHeroBanner document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowHeroBannerUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowHeroBannerWhereUniqueInput;
  /** Document to update */
  data: RowHeroBannerUpdateInput;
};

export type RowHeroBannerUpsertInput = {
  /** Create document if it didn't exist */
  create: RowHeroBannerCreateInput;
  /** Update document if it exists */
  update: RowHeroBannerUpdateInput;
};

export type RowHeroBannerUpsertLocalizationInput = {
  update: RowHeroBannerUpdateLocalizationDataInput;
  create: RowHeroBannerCreateLocalizationDataInput;
  locale: Locale;
};

export type RowHeroBannerUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowHeroBannerWhereUniqueInput;
  /** Upsert data */
  data: RowHeroBannerUpsertInput;
};

/** Identifies documents */
export type RowHeroBannerWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowHeroBannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowHeroBannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowHeroBannerWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  pageLinks_every?: InputMaybe<PageLinkWhereInput>;
  pageLinks_some?: InputMaybe<PageLinkWhereInput>;
  pageLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowHeroBanner record uniquely */
export type RowHeroBannerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowProduct = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowProduct>;
  /** Get the document in other stages */
  documentInStages: Array<RowProduct>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  title: Scalars['String'];
  productCopy?: Maybe<RichText>;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  pageLinks: Array<PageLink>;
  asset?: Maybe<Asset>;
  /** Row Product component to render */
  variant?: Maybe<RowProductVariants>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowProduct versions */
  history: Array<Version>;
};


export type RowProductlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowProductdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowProductcreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowProductupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowProductpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowProductcreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProductupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProductpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProductpageLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProductassetArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProductscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProductpagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProducthistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowProductConnectInput = {
  /** Document to connect */
  where: RowProductWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowProductConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowProductEdge>;
  aggregate: Aggregate;
};

export type RowProductCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** title input for default locale (en) */
  title: Scalars['String'];
  /** productCopy input for default locale (en) */
  productCopy?: InputMaybe<Scalars['RichTextAST']>;
  pageLinks?: InputMaybe<PageLinkCreateManyInlineInput>;
  asset?: InputMaybe<AssetCreateOneInlineInput>;
  variant?: InputMaybe<RowProductVariants>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowProductCreateLocalizationsInput>;
};

export type RowProductCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  title: Scalars['String'];
  productCopy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowProductCreateLocalizationInput = {
  /** Localization input */
  data: RowProductCreateLocalizationDataInput;
  locale: Locale;
};

export type RowProductCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowProductCreateLocalizationInput>>;
};

export type RowProductCreateManyInlineInput = {
  /** Create and connect multiple existing RowProduct documents */
  create?: InputMaybe<Array<RowProductCreateInput>>;
  /** Connect multiple existing RowProduct documents */
  connect?: InputMaybe<Array<RowProductWhereUniqueInput>>;
};

export type RowProductCreateOneInlineInput = {
  /** Create and connect one RowProduct document */
  create?: InputMaybe<RowProductCreateInput>;
  /** Connect one existing RowProduct document */
  connect?: InputMaybe<RowProductWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowProductEdge = {
  /** The item at the end of the edge. */
  node: RowProduct;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowProductManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowProductWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowProductWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowProductWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  pageLinks_every?: InputMaybe<PageLinkWhereInput>;
  pageLinks_some?: InputMaybe<PageLinkWhereInput>;
  pageLinks_none?: InputMaybe<PageLinkWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  variant?: InputMaybe<RowProductVariants>;
  /** All values that are not equal to given value. */
  variant_not?: InputMaybe<RowProductVariants>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<RowProductVariants>>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<RowProductVariants>>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowProductOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'variant_ASC'
  | 'variant_DESC';

export type RowProductUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** productCopy input for default locale (en) */
  productCopy?: InputMaybe<Scalars['RichTextAST']>;
  pageLinks?: InputMaybe<PageLinkUpdateManyInlineInput>;
  asset?: InputMaybe<AssetUpdateOneInlineInput>;
  variant?: InputMaybe<RowProductVariants>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowProductUpdateLocalizationsInput>;
};

export type RowProductUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
  productCopy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowProductUpdateLocalizationInput = {
  data: RowProductUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowProductUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowProductCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowProductUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowProductUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowProductUpdateManyInlineInput = {
  /** Create and connect multiple RowProduct documents */
  create?: InputMaybe<Array<RowProductCreateInput>>;
  /** Connect multiple existing RowProduct documents */
  connect?: InputMaybe<Array<RowProductConnectInput>>;
  /** Override currently-connected documents with multiple existing RowProduct documents */
  set?: InputMaybe<Array<RowProductWhereUniqueInput>>;
  /** Update multiple RowProduct documents */
  update?: InputMaybe<Array<RowProductUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowProduct documents */
  upsert?: InputMaybe<Array<RowProductUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowProduct documents */
  disconnect?: InputMaybe<Array<RowProductWhereUniqueInput>>;
  /** Delete multiple RowProduct documents */
  delete?: InputMaybe<Array<RowProductWhereUniqueInput>>;
};

export type RowProductUpdateManyInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** productCopy input for default locale (en) */
  productCopy?: InputMaybe<Scalars['RichTextAST']>;
  variant?: InputMaybe<RowProductVariants>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowProductUpdateManyLocalizationsInput>;
};

export type RowProductUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
  productCopy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowProductUpdateManyLocalizationInput = {
  data: RowProductUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowProductUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowProductUpdateManyLocalizationInput>>;
};

export type RowProductUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowProductWhereInput;
  /** Update many input */
  data: RowProductUpdateManyInput;
};

export type RowProductUpdateOneInlineInput = {
  /** Create and connect one RowProduct document */
  create?: InputMaybe<RowProductCreateInput>;
  /** Update single RowProduct document */
  update?: InputMaybe<RowProductUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowProduct document */
  upsert?: InputMaybe<RowProductUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowProduct document */
  connect?: InputMaybe<RowProductWhereUniqueInput>;
  /** Disconnect currently connected RowProduct document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowProduct document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowProductUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowProductWhereUniqueInput;
  /** Document to update */
  data: RowProductUpdateInput;
};

export type RowProductUpsertInput = {
  /** Create document if it didn't exist */
  create: RowProductCreateInput;
  /** Update document if it exists */
  update: RowProductUpdateInput;
};

export type RowProductUpsertLocalizationInput = {
  update: RowProductUpdateLocalizationDataInput;
  create: RowProductCreateLocalizationDataInput;
  locale: Locale;
};

export type RowProductUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowProductWhereUniqueInput;
  /** Upsert data */
  data: RowProductUpsertInput;
};

/** All different kind of possible Row Product components to render */
export type RowProductVariants =
  | 'Backstory'
  | 'Feature'
  | 'FeatureBoxed'
  | 'Grid'
  | 'Related'
  | 'Reviews'
  | 'Specs'
  | 'Upsells'
  | 'Swipeable';

/** Identifies documents */
export type RowProductWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowProductWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowProductWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowProductWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  pageLinks_every?: InputMaybe<PageLinkWhereInput>;
  pageLinks_some?: InputMaybe<PageLinkWhereInput>;
  pageLinks_none?: InputMaybe<PageLinkWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  variant?: InputMaybe<RowProductVariants>;
  /** All values that are not equal to given value. */
  variant_not?: InputMaybe<RowProductVariants>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<RowProductVariants>>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<RowProductVariants>>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowProduct record uniquely */
export type RowProductWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowQuote = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowQuote>;
  /** Get the document in other stages */
  documentInStages: Array<RowQuote>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  quote: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowQuote versions */
  history: Array<Version>;
};


export type RowQuotelocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowQuotedocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowQuotecreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowQuoteupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowQuotepublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowQuotecreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowQuoteupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowQuotepublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowQuotescheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowQuotepagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowQuotehistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowQuoteConnectInput = {
  /** Document to connect */
  where: RowQuoteWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowQuoteConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowQuoteEdge>;
  aggregate: Aggregate;
};

export type RowQuoteCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** quote input for default locale (en) */
  quote: Scalars['RichTextAST'];
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowQuoteCreateLocalizationsInput>;
};

export type RowQuoteCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  quote: Scalars['RichTextAST'];
};

export type RowQuoteCreateLocalizationInput = {
  /** Localization input */
  data: RowQuoteCreateLocalizationDataInput;
  locale: Locale;
};

export type RowQuoteCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowQuoteCreateLocalizationInput>>;
};

export type RowQuoteCreateManyInlineInput = {
  /** Create and connect multiple existing RowQuote documents */
  create?: InputMaybe<Array<RowQuoteCreateInput>>;
  /** Connect multiple existing RowQuote documents */
  connect?: InputMaybe<Array<RowQuoteWhereUniqueInput>>;
};

export type RowQuoteCreateOneInlineInput = {
  /** Create and connect one RowQuote document */
  create?: InputMaybe<RowQuoteCreateInput>;
  /** Connect one existing RowQuote document */
  connect?: InputMaybe<RowQuoteWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowQuoteEdge = {
  /** The item at the end of the edge. */
  node: RowQuote;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowQuoteManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowQuoteWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowQuoteWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowQuoteWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowQuoteOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type RowQuoteUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** quote input for default locale (en) */
  quote?: InputMaybe<Scalars['RichTextAST']>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowQuoteUpdateLocalizationsInput>;
};

export type RowQuoteUpdateLocalizationDataInput = {
  quote?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowQuoteUpdateLocalizationInput = {
  data: RowQuoteUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowQuoteUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowQuoteCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowQuoteUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowQuoteUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowQuoteUpdateManyInlineInput = {
  /** Create and connect multiple RowQuote documents */
  create?: InputMaybe<Array<RowQuoteCreateInput>>;
  /** Connect multiple existing RowQuote documents */
  connect?: InputMaybe<Array<RowQuoteConnectInput>>;
  /** Override currently-connected documents with multiple existing RowQuote documents */
  set?: InputMaybe<Array<RowQuoteWhereUniqueInput>>;
  /** Update multiple RowQuote documents */
  update?: InputMaybe<Array<RowQuoteUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowQuote documents */
  upsert?: InputMaybe<Array<RowQuoteUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowQuote documents */
  disconnect?: InputMaybe<Array<RowQuoteWhereUniqueInput>>;
  /** Delete multiple RowQuote documents */
  delete?: InputMaybe<Array<RowQuoteWhereUniqueInput>>;
};

export type RowQuoteUpdateManyInput = {
  /** quote input for default locale (en) */
  quote?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowQuoteUpdateManyLocalizationsInput>;
};

export type RowQuoteUpdateManyLocalizationDataInput = {
  quote?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowQuoteUpdateManyLocalizationInput = {
  data: RowQuoteUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowQuoteUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowQuoteUpdateManyLocalizationInput>>;
};

export type RowQuoteUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowQuoteWhereInput;
  /** Update many input */
  data: RowQuoteUpdateManyInput;
};

export type RowQuoteUpdateOneInlineInput = {
  /** Create and connect one RowQuote document */
  create?: InputMaybe<RowQuoteCreateInput>;
  /** Update single RowQuote document */
  update?: InputMaybe<RowQuoteUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowQuote document */
  upsert?: InputMaybe<RowQuoteUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowQuote document */
  connect?: InputMaybe<RowQuoteWhereUniqueInput>;
  /** Disconnect currently connected RowQuote document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowQuote document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowQuoteUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowQuoteWhereUniqueInput;
  /** Document to update */
  data: RowQuoteUpdateInput;
};

export type RowQuoteUpsertInput = {
  /** Create document if it didn't exist */
  create: RowQuoteCreateInput;
  /** Update document if it exists */
  update: RowQuoteUpdateInput;
};

export type RowQuoteUpsertLocalizationInput = {
  update: RowQuoteUpdateLocalizationDataInput;
  create: RowQuoteCreateLocalizationDataInput;
  locale: Locale;
};

export type RowQuoteUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowQuoteWhereUniqueInput;
  /** Upsert data */
  data: RowQuoteUpsertInput;
};

/** Identifies documents */
export type RowQuoteWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowQuoteWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowQuoteWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowQuoteWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowQuote record uniquely */
export type RowQuoteWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowServiceOptions = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowServiceOptions>;
  /** Get the document in other stages */
  documentInStages: Array<RowServiceOptions>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  title: Scalars['String'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  serviceOptions: Array<PageLink>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowServiceOptions versions */
  history: Array<Version>;
};


export type RowServiceOptionslocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowServiceOptionsdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowServiceOptionscreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowServiceOptionsupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowServiceOptionspublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowServiceOptionscreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowServiceOptionsupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowServiceOptionspublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowServiceOptionsserviceOptionsArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowServiceOptionsscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowServiceOptionspagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowServiceOptionshistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowServiceOptionsConnectInput = {
  /** Document to connect */
  where: RowServiceOptionsWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowServiceOptionsConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowServiceOptionsEdge>;
  aggregate: Aggregate;
};

export type RowServiceOptionsCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** title input for default locale (en) */
  title: Scalars['String'];
  serviceOptions?: InputMaybe<PageLinkCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowServiceOptionsCreateLocalizationsInput>;
};

export type RowServiceOptionsCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  title: Scalars['String'];
};

export type RowServiceOptionsCreateLocalizationInput = {
  /** Localization input */
  data: RowServiceOptionsCreateLocalizationDataInput;
  locale: Locale;
};

export type RowServiceOptionsCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowServiceOptionsCreateLocalizationInput>>;
};

export type RowServiceOptionsCreateManyInlineInput = {
  /** Create and connect multiple existing RowServiceOptions documents */
  create?: InputMaybe<Array<RowServiceOptionsCreateInput>>;
  /** Connect multiple existing RowServiceOptions documents */
  connect?: InputMaybe<Array<RowServiceOptionsWhereUniqueInput>>;
};

export type RowServiceOptionsCreateOneInlineInput = {
  /** Create and connect one RowServiceOptions document */
  create?: InputMaybe<RowServiceOptionsCreateInput>;
  /** Connect one existing RowServiceOptions document */
  connect?: InputMaybe<RowServiceOptionsWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowServiceOptionsEdge = {
  /** The item at the end of the edge. */
  node: RowServiceOptions;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowServiceOptionsManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowServiceOptionsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowServiceOptionsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowServiceOptionsWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  serviceOptions_every?: InputMaybe<PageLinkWhereInput>;
  serviceOptions_some?: InputMaybe<PageLinkWhereInput>;
  serviceOptions_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowServiceOptionsOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'title_ASC'
  | 'title_DESC';

export type RowServiceOptionsUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  serviceOptions?: InputMaybe<PageLinkUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowServiceOptionsUpdateLocalizationsInput>;
};

export type RowServiceOptionsUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type RowServiceOptionsUpdateLocalizationInput = {
  data: RowServiceOptionsUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowServiceOptionsUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowServiceOptionsCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowServiceOptionsUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowServiceOptionsUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowServiceOptionsUpdateManyInlineInput = {
  /** Create and connect multiple RowServiceOptions documents */
  create?: InputMaybe<Array<RowServiceOptionsCreateInput>>;
  /** Connect multiple existing RowServiceOptions documents */
  connect?: InputMaybe<Array<RowServiceOptionsConnectInput>>;
  /** Override currently-connected documents with multiple existing RowServiceOptions documents */
  set?: InputMaybe<Array<RowServiceOptionsWhereUniqueInput>>;
  /** Update multiple RowServiceOptions documents */
  update?: InputMaybe<Array<RowServiceOptionsUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowServiceOptions documents */
  upsert?: InputMaybe<Array<RowServiceOptionsUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowServiceOptions documents */
  disconnect?: InputMaybe<Array<RowServiceOptionsWhereUniqueInput>>;
  /** Delete multiple RowServiceOptions documents */
  delete?: InputMaybe<Array<RowServiceOptionsWhereUniqueInput>>;
};

export type RowServiceOptionsUpdateManyInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowServiceOptionsUpdateManyLocalizationsInput>;
};

export type RowServiceOptionsUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type RowServiceOptionsUpdateManyLocalizationInput = {
  data: RowServiceOptionsUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowServiceOptionsUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowServiceOptionsUpdateManyLocalizationInput>>;
};

export type RowServiceOptionsUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowServiceOptionsWhereInput;
  /** Update many input */
  data: RowServiceOptionsUpdateManyInput;
};

export type RowServiceOptionsUpdateOneInlineInput = {
  /** Create and connect one RowServiceOptions document */
  create?: InputMaybe<RowServiceOptionsCreateInput>;
  /** Update single RowServiceOptions document */
  update?: InputMaybe<RowServiceOptionsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowServiceOptions document */
  upsert?: InputMaybe<RowServiceOptionsUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowServiceOptions document */
  connect?: InputMaybe<RowServiceOptionsWhereUniqueInput>;
  /** Disconnect currently connected RowServiceOptions document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowServiceOptions document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowServiceOptionsUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowServiceOptionsWhereUniqueInput;
  /** Document to update */
  data: RowServiceOptionsUpdateInput;
};

export type RowServiceOptionsUpsertInput = {
  /** Create document if it didn't exist */
  create: RowServiceOptionsCreateInput;
  /** Update document if it exists */
  update: RowServiceOptionsUpdateInput;
};

export type RowServiceOptionsUpsertLocalizationInput = {
  update: RowServiceOptionsUpdateLocalizationDataInput;
  create: RowServiceOptionsCreateLocalizationDataInput;
  locale: Locale;
};

export type RowServiceOptionsUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowServiceOptionsWhereUniqueInput;
  /** Upsert data */
  data: RowServiceOptionsUpsertInput;
};

/** Identifies documents */
export type RowServiceOptionsWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowServiceOptionsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowServiceOptionsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowServiceOptionsWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  serviceOptions_every?: InputMaybe<PageLinkWhereInput>;
  serviceOptions_some?: InputMaybe<PageLinkWhereInput>;
  serviceOptions_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowServiceOptions record uniquely */
export type RowServiceOptionsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowSpecialBanner = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowSpecialBanner>;
  /** Get the document in other stages */
  documentInStages: Array<RowSpecialBanner>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  topic?: Maybe<Scalars['String']>;
  copy: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  asset?: Maybe<Asset>;
  pageLinks: Array<PageLink>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowSpecialBanner versions */
  history: Array<Version>;
};


export type RowSpecialBannerlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowSpecialBannerdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowSpecialBannercreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowSpecialBannerupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowSpecialBannerpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowSpecialBannercreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerassetArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerpageLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerpagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerhistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowSpecialBannerConnectInput = {
  /** Document to connect */
  where: RowSpecialBannerWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowSpecialBannerConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowSpecialBannerEdge>;
  aggregate: Aggregate;
};

export type RowSpecialBannerCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** topic input for default locale (en) */
  topic?: InputMaybe<Scalars['String']>;
  /** copy input for default locale (en) */
  copy: Scalars['RichTextAST'];
  asset?: InputMaybe<AssetCreateOneInlineInput>;
  pageLinks?: InputMaybe<PageLinkCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowSpecialBannerCreateLocalizationsInput>;
};

export type RowSpecialBannerCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  topic?: InputMaybe<Scalars['String']>;
  copy: Scalars['RichTextAST'];
};

export type RowSpecialBannerCreateLocalizationInput = {
  /** Localization input */
  data: RowSpecialBannerCreateLocalizationDataInput;
  locale: Locale;
};

export type RowSpecialBannerCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowSpecialBannerCreateLocalizationInput>>;
};

export type RowSpecialBannerCreateManyInlineInput = {
  /** Create and connect multiple existing RowSpecialBanner documents */
  create?: InputMaybe<Array<RowSpecialBannerCreateInput>>;
  /** Connect multiple existing RowSpecialBanner documents */
  connect?: InputMaybe<Array<RowSpecialBannerWhereUniqueInput>>;
};

export type RowSpecialBannerCreateOneInlineInput = {
  /** Create and connect one RowSpecialBanner document */
  create?: InputMaybe<RowSpecialBannerCreateInput>;
  /** Connect one existing RowSpecialBanner document */
  connect?: InputMaybe<RowSpecialBannerWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowSpecialBannerEdge = {
  /** The item at the end of the edge. */
  node: RowSpecialBanner;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowSpecialBannerManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowSpecialBannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowSpecialBannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowSpecialBannerWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  pageLinks_every?: InputMaybe<PageLinkWhereInput>;
  pageLinks_some?: InputMaybe<PageLinkWhereInput>;
  pageLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowSpecialBannerOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'topic_ASC'
  | 'topic_DESC';

export type RowSpecialBannerUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** topic input for default locale (en) */
  topic?: InputMaybe<Scalars['String']>;
  /** copy input for default locale (en) */
  copy?: InputMaybe<Scalars['RichTextAST']>;
  asset?: InputMaybe<AssetUpdateOneInlineInput>;
  pageLinks?: InputMaybe<PageLinkUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowSpecialBannerUpdateLocalizationsInput>;
};

export type RowSpecialBannerUpdateLocalizationDataInput = {
  topic?: InputMaybe<Scalars['String']>;
  copy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowSpecialBannerUpdateLocalizationInput = {
  data: RowSpecialBannerUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowSpecialBannerUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowSpecialBannerCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowSpecialBannerUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowSpecialBannerUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowSpecialBannerUpdateManyInlineInput = {
  /** Create and connect multiple RowSpecialBanner documents */
  create?: InputMaybe<Array<RowSpecialBannerCreateInput>>;
  /** Connect multiple existing RowSpecialBanner documents */
  connect?: InputMaybe<Array<RowSpecialBannerConnectInput>>;
  /** Override currently-connected documents with multiple existing RowSpecialBanner documents */
  set?: InputMaybe<Array<RowSpecialBannerWhereUniqueInput>>;
  /** Update multiple RowSpecialBanner documents */
  update?: InputMaybe<Array<RowSpecialBannerUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowSpecialBanner documents */
  upsert?: InputMaybe<Array<RowSpecialBannerUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowSpecialBanner documents */
  disconnect?: InputMaybe<Array<RowSpecialBannerWhereUniqueInput>>;
  /** Delete multiple RowSpecialBanner documents */
  delete?: InputMaybe<Array<RowSpecialBannerWhereUniqueInput>>;
};

export type RowSpecialBannerUpdateManyInput = {
  /** topic input for default locale (en) */
  topic?: InputMaybe<Scalars['String']>;
  /** copy input for default locale (en) */
  copy?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowSpecialBannerUpdateManyLocalizationsInput>;
};

export type RowSpecialBannerUpdateManyLocalizationDataInput = {
  topic?: InputMaybe<Scalars['String']>;
  copy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowSpecialBannerUpdateManyLocalizationInput = {
  data: RowSpecialBannerUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowSpecialBannerUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowSpecialBannerUpdateManyLocalizationInput>>;
};

export type RowSpecialBannerUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowSpecialBannerWhereInput;
  /** Update many input */
  data: RowSpecialBannerUpdateManyInput;
};

export type RowSpecialBannerUpdateOneInlineInput = {
  /** Create and connect one RowSpecialBanner document */
  create?: InputMaybe<RowSpecialBannerCreateInput>;
  /** Update single RowSpecialBanner document */
  update?: InputMaybe<RowSpecialBannerUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowSpecialBanner document */
  upsert?: InputMaybe<RowSpecialBannerUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowSpecialBanner document */
  connect?: InputMaybe<RowSpecialBannerWhereUniqueInput>;
  /** Disconnect currently connected RowSpecialBanner document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowSpecialBanner document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowSpecialBannerUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowSpecialBannerWhereUniqueInput;
  /** Document to update */
  data: RowSpecialBannerUpdateInput;
};

export type RowSpecialBannerUpsertInput = {
  /** Create document if it didn't exist */
  create: RowSpecialBannerCreateInput;
  /** Update document if it exists */
  update: RowSpecialBannerUpdateInput;
};

export type RowSpecialBannerUpsertLocalizationInput = {
  update: RowSpecialBannerUpdateLocalizationDataInput;
  create: RowSpecialBannerCreateLocalizationDataInput;
  locale: Locale;
};

export type RowSpecialBannerUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowSpecialBannerWhereUniqueInput;
  /** Upsert data */
  data: RowSpecialBannerUpsertInput;
};

/** Identifies documents */
export type RowSpecialBannerWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowSpecialBannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowSpecialBannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowSpecialBannerWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  topic?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  topic_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  topic_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  topic_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  topic_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  topic_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  topic_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  topic_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  topic_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  topic_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  pageLinks_every?: InputMaybe<PageLinkWhereInput>;
  pageLinks_some?: InputMaybe<PageLinkWhereInput>;
  pageLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowSpecialBanner record uniquely */
export type RowSpecialBannerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

/** Scheduled Operation system model */
export type ScheduledOperation = Node & {
  /** System stage field */
  stage: Stage;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledOperation>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** Operation description */
  description?: Maybe<Scalars['String']>;
  /** Operation error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** Raw operation payload including all details, this field is subject to change */
  rawPayload: Scalars['Json'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** The release this operation is scheduled for */
  release?: Maybe<ScheduledRelease>;
  /** operation Status */
  status: ScheduledOperationStatus;
  affectedDocuments: Array<ScheduledOperationAffectedDocument>;
};


/** Scheduled Operation system model */
export type ScheduledOperationdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


/** Scheduled Operation system model */
export type ScheduledOperationcreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationreleaseArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationaffectedDocumentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledOperationAffectedDocument = Asset | Banner | Footer | Page | PageLink | RowBlogContent | RowButtonLinkList | RowColumnOne | RowColumnThree | RowColumnTwo | RowContentLinks | RowHeroBanner | RowProduct | RowQuote | RowServiceOptions | RowSpecialBanner | Usps;

export type ScheduledOperationConnectInput = {
  /** Document to connect */
  where: ScheduledOperationWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type ScheduledOperationConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<ScheduledOperationEdge>;
  aggregate: Aggregate;
};

export type ScheduledOperationCreateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationCreateOneInlineInput = {
  /** Connect one existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
};

/** An edge in a connection. */
export type ScheduledOperationEdge = {
  /** The item at the end of the edge. */
  node: ScheduledOperation;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type ScheduledOperationManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<ScheduledOperationStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<ScheduledOperationStatus>>;
};

export type ScheduledOperationOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'errorMessage_ASC'
  | 'errorMessage_DESC'
  | 'status_ASC'
  | 'status_DESC';

/** System Scheduled Operation Status */
export type ScheduledOperationStatus =
  | 'PENDING'
  | 'IN_PROGRESS'
  | 'COMPLETED'
  | 'FAILED'
  | 'CANCELED';

export type ScheduledOperationUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationConnectInput>>;
  /** Override currently-connected documents with multiple existing ScheduledOperation documents */
  set?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
  /** Disconnect multiple ScheduledOperation documents */
  disconnect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationUpdateOneInlineInput = {
  /** Connect existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
  /** Disconnect currently connected ScheduledOperation document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ScheduledOperationWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<ScheduledOperationStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<ScheduledOperationStatus>>;
};

/** References ScheduledOperation record uniquely */
export type ScheduledOperationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Scheduled Release system model */
export type ScheduledRelease = Node & {
  /** System stage field */
  stage: Stage;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledRelease>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** Release Title */
  title?: Maybe<Scalars['String']>;
  /** Release description */
  description?: Maybe<Scalars['String']>;
  /** Release error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** Whether scheduled release should be run */
  isActive: Scalars['Boolean'];
  /** Whether scheduled release is implicit */
  isImplicit: Scalars['Boolean'];
  /** Release date and time */
  releaseAt?: Maybe<Scalars['DateTime']>;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Operations to run with this release */
  operations: Array<ScheduledOperation>;
  /** Release Status */
  status: ScheduledReleaseStatus;
};


/** Scheduled Release system model */
export type ScheduledReleasedocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


/** Scheduled Release system model */
export type ScheduledReleasecreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleasepublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseoperationsArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledReleaseConnectInput = {
  /** Document to connect */
  where: ScheduledReleaseWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type ScheduledReleaseConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<ScheduledReleaseEdge>;
  aggregate: Aggregate;
};

export type ScheduledReleaseCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
};

export type ScheduledReleaseCreateManyInlineInput = {
  /** Create and connect multiple existing ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
};

export type ScheduledReleaseCreateOneInlineInput = {
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
  /** Connect one existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
};

/** An edge in a connection. */
export type ScheduledReleaseEdge = {
  /** The item at the end of the edge. */
  node: ScheduledRelease;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type ScheduledReleaseManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<ScheduledReleaseStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<ScheduledReleaseStatus>>;
};

export type ScheduledReleaseOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'errorMessage_ASC'
  | 'errorMessage_DESC'
  | 'isActive_ASC'
  | 'isActive_DESC'
  | 'isImplicit_ASC'
  | 'isImplicit_DESC'
  | 'releaseAt_ASC'
  | 'releaseAt_DESC'
  | 'status_ASC'
  | 'status_DESC';

/** System Scheduled Release Status */
export type ScheduledReleaseStatus =
  | 'PENDING'
  | 'IN_PROGRESS'
  | 'COMPLETED'
  | 'FAILED';

export type ScheduledReleaseUpdateInput = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
};

export type ScheduledReleaseUpdateManyInlineInput = {
  /** Create and connect multiple ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseConnectInput>>;
  /** Override currently-connected documents with multiple existing ScheduledRelease documents */
  set?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Update multiple ScheduledRelease documents */
  update?: InputMaybe<Array<ScheduledReleaseUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ScheduledRelease documents */
  upsert?: InputMaybe<Array<ScheduledReleaseUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple ScheduledRelease documents */
  disconnect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Delete multiple ScheduledRelease documents */
  delete?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
};

export type ScheduledReleaseUpdateManyInput = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
};

export type ScheduledReleaseUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: ScheduledReleaseWhereInput;
  /** Update many input */
  data: ScheduledReleaseUpdateManyInput;
};

export type ScheduledReleaseUpdateOneInlineInput = {
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
  /** Update single ScheduledRelease document */
  update?: InputMaybe<ScheduledReleaseUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ScheduledRelease document */
  upsert?: InputMaybe<ScheduledReleaseUpsertWithNestedWhereUniqueInput>;
  /** Connect existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Disconnect currently connected ScheduledRelease document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected ScheduledRelease document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type ScheduledReleaseUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
  /** Document to update */
  data: ScheduledReleaseUpdateInput;
};

export type ScheduledReleaseUpsertInput = {
  /** Create document if it didn't exist */
  create: ScheduledReleaseCreateInput;
  /** Update document if it exists */
  update: ScheduledReleaseUpdateInput;
};

export type ScheduledReleaseUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
  /** Upsert data */
  data: ScheduledReleaseUpsertInput;
};

/** Identifies documents */
export type ScheduledReleaseWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<ScheduledReleaseStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<ScheduledReleaseStatus>>;
};

/** References ScheduledRelease record uniquely */
export type ScheduledReleaseWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Stage system enumeration */
export type Stage =
  /** The Draft is the default stage for all your content. */
  | 'DRAFT'
  /** The Published stage is where you can publish your content to. */
  | 'PUBLISHED';

export type SystemDateTimeFieldVariation =
  | 'BASE'
  | 'LOCALIZATION'
  | 'COMBINED';

export type UnpublishLocaleInput = {
  /** Locales to unpublish */
  locale: Locale;
  /** Stages to unpublish selected locales from */
  stages: Array<Stage>;
};

/** User system model */
export type User = Node & {
  /** System stage field */
  stage: Stage;
  /** Get the document in other stages */
  documentInStages: Array<User>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** The username */
  name: Scalars['String'];
  /** Profile Picture url */
  picture?: Maybe<Scalars['String']>;
  /** Flag to determine if user is active or not */
  isActive: Scalars['Boolean'];
  /** User Kind. Can be either MEMBER, PAT or PUBLIC */
  kind: UserKind;
};


/** User system model */
export type UserdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};

export type UserConnectInput = {
  /** Document to connect */
  where: UserWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type UserConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<UserEdge>;
  aggregate: Aggregate;
};

export type UserCreateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserCreateOneInlineInput = {
  /** Connect one existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
};

/** An edge in a connection. */
export type UserEdge = {
  /** The item at the end of the edge. */
  node: User;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** System User Kind */
export type UserKind =
  | 'MEMBER'
  | 'PAT'
  | 'PUBLIC'
  | 'WEBHOOK';

/** Identifies documents */
export type UserManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are not equal to given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<UserKind>>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<UserKind>>;
};

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'picture_ASC'
  | 'picture_DESC'
  | 'isActive_ASC'
  | 'isActive_DESC'
  | 'kind_ASC'
  | 'kind_DESC';

export type UserUpdateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserConnectInput>>;
  /** Override currently-connected documents with multiple existing User documents */
  set?: InputMaybe<Array<UserWhereUniqueInput>>;
  /** Disconnect multiple User documents */
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserUpdateOneInlineInput = {
  /** Connect existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
  /** Disconnect currently connected User document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type UserWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are not equal to given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<UserKind>>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<UserKind>>;
};

/** References User record uniquely */
export type UserWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Usps = Node & {
  /** System stage field */
  stage: Stage;
  /** Get the document in other stages */
  documentInStages: Array<Usps>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  uspsMultiple: Array<PageLink>;
  scheduledIn: Array<ScheduledOperation>;
  /** List of Usps versions */
  history: Array<Version>;
};


export type UspsdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type UspscreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type UspsupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type UspspublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type UspsuspsMultipleArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type UspsscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type UspshistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type UspsConnectInput = {
  /** Document to connect */
  where: UspsWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type UspsConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<UspsEdge>;
  aggregate: Aggregate;
};

export type UspsCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  uspsMultiple?: InputMaybe<PageLinkCreateManyInlineInput>;
};

export type UspsCreateManyInlineInput = {
  /** Create and connect multiple existing Usps documents */
  create?: InputMaybe<Array<UspsCreateInput>>;
  /** Connect multiple existing Usps documents */
  connect?: InputMaybe<Array<UspsWhereUniqueInput>>;
};

export type UspsCreateOneInlineInput = {
  /** Create and connect one Usps document */
  create?: InputMaybe<UspsCreateInput>;
  /** Connect one existing Usps document */
  connect?: InputMaybe<UspsWhereUniqueInput>;
};

/** An edge in a connection. */
export type UspsEdge = {
  /** The item at the end of the edge. */
  node: Usps;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type UspsManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UspsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UspsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UspsWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  uspsMultiple_every?: InputMaybe<PageLinkWhereInput>;
  uspsMultiple_some?: InputMaybe<PageLinkWhereInput>;
  uspsMultiple_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

export type UspsOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type UspsUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  uspsMultiple?: InputMaybe<PageLinkUpdateManyInlineInput>;
};

export type UspsUpdateManyInlineInput = {
  /** Create and connect multiple Usps documents */
  create?: InputMaybe<Array<UspsCreateInput>>;
  /** Connect multiple existing Usps documents */
  connect?: InputMaybe<Array<UspsConnectInput>>;
  /** Override currently-connected documents with multiple existing Usps documents */
  set?: InputMaybe<Array<UspsWhereUniqueInput>>;
  /** Update multiple Usps documents */
  update?: InputMaybe<Array<UspsUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Usps documents */
  upsert?: InputMaybe<Array<UspsUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple Usps documents */
  disconnect?: InputMaybe<Array<UspsWhereUniqueInput>>;
  /** Delete multiple Usps documents */
  delete?: InputMaybe<Array<UspsWhereUniqueInput>>;
};

export type UspsUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type UspsUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: UspsWhereInput;
  /** Update many input */
  data: UspsUpdateManyInput;
};

export type UspsUpdateOneInlineInput = {
  /** Create and connect one Usps document */
  create?: InputMaybe<UspsCreateInput>;
  /** Update single Usps document */
  update?: InputMaybe<UspsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Usps document */
  upsert?: InputMaybe<UspsUpsertWithNestedWhereUniqueInput>;
  /** Connect existing Usps document */
  connect?: InputMaybe<UspsWhereUniqueInput>;
  /** Disconnect currently connected Usps document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected Usps document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type UspsUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: UspsWhereUniqueInput;
  /** Document to update */
  data: UspsUpdateInput;
};

export type UspsUpsertInput = {
  /** Create document if it didn't exist */
  create: UspsCreateInput;
  /** Update document if it exists */
  update: UspsUpdateInput;
};

export type UspsUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: UspsWhereUniqueInput;
  /** Upsert data */
  data: UspsUpsertInput;
};

/** Identifies documents */
export type UspsWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UspsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UspsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UspsWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  uspsMultiple_every?: InputMaybe<PageLinkWhereInput>;
  uspsMultiple_some?: InputMaybe<PageLinkWhereInput>;
  uspsMultiple_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

/** References Usps record uniquely */
export type UspsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type Version = {
  id: Scalars['ID'];
  stage: Stage;
  revision: Scalars['Int'];
  createdAt: Scalars['DateTime'];
};

export type VersionWhereInput = {
  id: Scalars['ID'];
  stage: Stage;
  revision: Scalars['Int'];
};

export type _FilterKind =
  | 'search'
  | 'AND'
  | 'OR'
  | 'NOT'
  | 'eq'
  | 'eq_not'
  | 'in'
  | 'not_in'
  | 'lt'
  | 'lte'
  | 'gt'
  | 'gte'
  | 'contains'
  | 'not_contains'
  | 'starts_with'
  | 'not_starts_with'
  | 'ends_with'
  | 'not_ends_with'
  | 'contains_all'
  | 'contains_some'
  | 'contains_none'
  | 'relational_single'
  | 'relational_every'
  | 'relational_some'
  | 'relational_none';

export type _MutationInputFieldKind =
  | 'scalar'
  | 'richText'
  | 'richTextWithEmbeds'
  | 'enum'
  | 'relation'
  | 'union'
  | 'virtual';

export type _MutationKind =
  | 'create'
  | 'publish'
  | 'unpublish'
  | 'update'
  | 'upsert'
  | 'delete'
  | 'updateMany'
  | 'publishMany'
  | 'unpublishMany'
  | 'deleteMany'
  | 'schedulePublish'
  | 'scheduleUnpublish';

export type _OrderDirection =
  | 'asc'
  | 'desc';

export type _RelationInputCardinality =
  | 'one'
  | 'many';

export type _RelationInputKind =
  | 'create'
  | 'update';

export type _RelationKind =
  | 'regular'
  | 'union';

export type _SystemDateTimeFieldVariation =
  | 'base'
  | 'localization'
  | 'combined';

/** The type contains information about a store config */
export type StoreConfig = {
  /** Footer Miscellaneous HTML */
  absolute_footer?: Maybe<Scalars['String']>;
  /** Indicates whether guest users can write product reviews. Possible values: 1 (Yes) and 0 (No) */
  allow_guests_to_write_product_reviews?: Maybe<Scalars['String']>;
  /** The value of the Allow Gift Messages for Order Items option */
  allow_items?: Maybe<Scalars['String']>;
  /** The value of the Allow Gift Messages on Order Level option */
  allow_order?: Maybe<Scalars['String']>;
  /** Enable autocomplete on login and forgot password forms */
  autocomplete_on_storefront?: Maybe<Scalars['Boolean']>;
  /** Base currency code */
  base_currency_code?: Maybe<Scalars['String']>;
  /** Base link URL for the store */
  base_link_url?: Maybe<Scalars['String']>;
  /** Base media URL for the store */
  base_media_url?: Maybe<Scalars['String']>;
  /** Base static URL for the store */
  base_static_url?: Maybe<Scalars['String']>;
  /** Base URL for the store */
  base_url?: Maybe<Scalars['String']>;
  /** Braintree cc vault status. */
  braintree_cc_vault_active?: Maybe<Scalars['String']>;
  /** Default Sort By. */
  catalog_default_sort_by?: Maybe<Scalars['String']>;
  /** Corresponds to the 'Display Prices In Product Lists' field. It indicates how FPT information is displayed on category pages */
  category_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
  /** Category URL Suffix. */
  category_url_suffix?: Maybe<Scalars['String']>;
  /** CMS Home Page */
  cms_home_page?: Maybe<Scalars['String']>;
  /** CMS No Cookies Page */
  cms_no_cookies?: Maybe<Scalars['String']>;
  /** CMS No Route Page */
  cms_no_route?: Maybe<Scalars['String']>;
  /**
   * A code assigned to the store to identify it
   * @deprecated Use `store_code` instead.
   */
  code?: Maybe<Scalars['String']>;
  /** The configuration setting determines which thumbnail should be used in the cart for configurable products. */
  configurable_thumbnail_source?: Maybe<Scalars['String']>;
  /** Copyright */
  copyright?: Maybe<Scalars['String']>;
  /** Default Meta Description */
  default_description?: Maybe<Scalars['String']>;
  /** Default display currency code */
  default_display_currency_code?: Maybe<Scalars['String']>;
  /** Default Meta Keywords */
  default_keywords?: Maybe<Scalars['String']>;
  /** Default Page Title */
  default_title?: Maybe<Scalars['String']>;
  /** Display Demo Store Notice */
  demonotice?: Maybe<Scalars['Int']>;
  /** Default Web URL */
  front?: Maybe<Scalars['String']>;
  /** Products per Page on Grid Default Value. */
  grid_per_page?: Maybe<Scalars['Int']>;
  /** Products per Page on Grid Allowed Values. */
  grid_per_page_values?: Maybe<Scalars['String']>;
  /** Scripts and Style Sheets */
  head_includes?: Maybe<Scalars['String']>;
  /** Favicon Icon */
  head_shortcut_icon?: Maybe<Scalars['String']>;
  /** Logo Image */
  header_logo_src?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the store
   * @deprecated Use `store_code` instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** Indicates whether the store view has been designated as the default within the store group */
  is_default_store?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the store group has been designated as the default within the website */
  is_default_store_group?: Maybe<Scalars['Boolean']>;
  /** List Mode. */
  list_mode?: Maybe<Scalars['String']>;
  /** Products per Page on List Default Value. */
  list_per_page?: Maybe<Scalars['Int']>;
  /** Products per Page on List Allowed Values. */
  list_per_page_values?: Maybe<Scalars['String']>;
  /** Store locale */
  locale?: Maybe<Scalars['String']>;
  /** Logo Image Alt */
  logo_alt?: Maybe<Scalars['String']>;
  /** Logo Attribute Height */
  logo_height?: Maybe<Scalars['Int']>;
  /** Logo Attribute Width */
  logo_width?: Maybe<Scalars['Int']>;
  /** Indicates whether wishlists are enabled (1) or disabled (0) */
  magento_wishlist_general_is_enabled?: Maybe<Scalars['String']>;
  /** The minimum number of characters required for a valid password. */
  minimum_password_length?: Maybe<Scalars['String']>;
  /** Default No-route URL */
  no_route?: Maybe<Scalars['String']>;
  /** Payflow Pro vault status. */
  payment_payflowpro_cc_vault_active?: Maybe<Scalars['String']>;
  /** Corresponds to the 'Display Prices On Product View Page' field. It indicates how FPT information is displayed on product pages */
  product_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
  /** Indicates whether product reviews are enabled. Possible values: 1 (Yes) and 0 (No) */
  product_reviews_enabled?: Maybe<Scalars['String']>;
  /** Product URL Suffix. */
  product_url_suffix?: Maybe<Scalars['String']>;
  /** The number of different character classes required in a password (lowercase, uppercase, digits, special characters). */
  required_character_classes_number?: Maybe<Scalars['String']>;
  /**
   * The ID of the root category
   * @deprecated Use `root_category_uid` instead
   */
  root_category_id?: Maybe<Scalars['Int']>;
  /** The unique ID for a `CategoryInterface` object. */
  root_category_uid?: Maybe<Scalars['ID']>;
  /** Corresponds to the 'Display Prices In Sales Modules' field. It indicates how FPT information is displayed on cart, checkout, and order pages */
  sales_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
  /** Secure base link URL for the store */
  secure_base_link_url?: Maybe<Scalars['String']>;
  /** Secure base media URL for the store */
  secure_base_media_url?: Maybe<Scalars['String']>;
  /** Secure base static URL for the store */
  secure_base_static_url?: Maybe<Scalars['String']>;
  /** Secure base URL for the store */
  secure_base_url?: Maybe<Scalars['String']>;
  /** Email to a Friend configuration. */
  send_friend?: Maybe<SendFriendConfiguration>;
  /** Show Breadcrumbs for CMS Pages */
  show_cms_breadcrumbs?: Maybe<Scalars['Int']>;
  /** The unique ID of the store view. In the Admin, this is called the Store View Code. When making a GraphQL call, assign this value to the `Store` header to provide the scope */
  store_code?: Maybe<Scalars['ID']>;
  /** The unique ID assigned to the store group. In the Admin, this is called the Store Name */
  store_group_code?: Maybe<Scalars['ID']>;
  /** The label assigned to the store group */
  store_group_name?: Maybe<Scalars['String']>;
  /** The label assigned to the store view */
  store_name?: Maybe<Scalars['String']>;
  /** The store view sort order */
  store_sort_order?: Maybe<Scalars['Int']>;
  /** Timezone of the store */
  timezone?: Maybe<Scalars['String']>;
  /** Page Title Prefix */
  title_prefix?: Maybe<Scalars['String']>;
  /** Page Title Separator. */
  title_separator?: Maybe<Scalars['String']>;
  /** Page Title Suffix */
  title_suffix?: Maybe<Scalars['String']>;
  /** The configuration determines if the store code should be used in the URL */
  use_store_in_url?: Maybe<Scalars['Boolean']>;
  /** The unique ID for the website */
  website_code?: Maybe<Scalars['ID']>;
  /**
   * The ID number assigned to the website store
   * @deprecated The field should not be used on the storefront
   */
  website_id?: Maybe<Scalars['Int']>;
  /** The label assigned to the website */
  website_name?: Maybe<Scalars['String']>;
  /** The unit of weight */
  weight_unit?: Maybe<Scalars['String']>;
  /** Welcome Text */
  welcome?: Maybe<Scalars['String']>;
};

/** This enumeration display settings for the fixed product tax */
export type FixedProductTaxDisplaySettings =
  /** The displayed price includes the FPT amount without displaying the ProductPrice.fixed_product_taxes values. This value corresponds to 'Including FPT only' */
  | 'INCLUDE_FPT_WITHOUT_DETAILS'
  /** The displayed price includes the FPT amount while displaying the values of ProductPrice.fixed_product_taxes separately. This value corresponds to 'Including FPT and FPT description' */
  | 'INCLUDE_FPT_WITH_DETAILS'
  /** The displayed price does not include the FPT amount. The values of ProductPrice.fixed_product_taxes and the price including the FPT are displayed separately. This value corresponds to 'Excluding FPT, Including FPT description and final price' */
  | 'EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS'
  /** The displayed price does not include the FPT amount. The values from ProductPrice.fixed_product_taxes are not displayed. This value corresponds to 'Excluding FPT' */
  | 'EXCLUDE_FPT_WITHOUT_DETAILS'
  /** The FPT feature is not enabled. You can omit  ProductPrice.fixed_product_taxes from your query */
  | 'FPT_DISABLED';

export type SendFriendConfiguration = {
  /** Indicates whether the Email to a Friend feature is enabled. */
  enabled_for_customers: Scalars['Boolean'];
  /** Indicates whether the Email to a Friend feature is enabled for guests. */
  enabled_for_guests: Scalars['Boolean'];
};

export type Cart = {
  /**
   * An array of coupons that have been applied to the cart
   * @deprecated Use applied_coupons instead
   */
  applied_coupon?: Maybe<AppliedCoupon>;
  /** An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which specifies the coupon code */
  applied_coupons?: Maybe<Array<Maybe<AppliedCoupon>>>;
  /** Available payment methods */
  available_payment_methods?: Maybe<Array<Maybe<AvailablePaymentMethod>>>;
  billing_address?: Maybe<BillingCartAddress>;
  email?: Maybe<Scalars['String']>;
  /** The entered gift message for the cart */
  gift_message?: Maybe<GiftMessage>;
  /** The unique ID for a `Cart` object */
  id: Scalars['ID'];
  is_virtual: Scalars['Boolean'];
  items?: Maybe<Array<Maybe<CartItemInterface>>>;
  /** Available issuers for the selected payment method */
  mollie_available_issuers?: Maybe<Array<Maybe<MollieIssuer>>>;
  prices?: Maybe<CartPrices>;
  selected_payment_method?: Maybe<SelectedPaymentMethod>;
  shipping_addresses: Array<Maybe<ShippingCartAddress>>;
  total_quantity: Scalars['Float'];
};

export type AppliedCoupon = {
  code: Scalars['String'];
};

export type AvailablePaymentMethod = {
  /** The payment method code */
  code: Scalars['String'];
  /** Available issuers for this payment method */
  mollie_available_issuers?: Maybe<Array<Maybe<MollieIssuer>>>;
  /** Retrieve meta information for this payment method (image) */
  mollie_meta: MolliePaymentMethodMeta;
  /** The payment method title. */
  title: Scalars['String'];
};

export type MollieIssuer = {
  code?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  svg?: Maybe<Scalars['String']>;
};

export type MolliePaymentMethodMeta = {
  image?: Maybe<Scalars['String']>;
};

export type BillingCartAddress = CartAddressInterface & {
  city: Scalars['String'];
  company?: Maybe<Scalars['String']>;
  country: CartAddressCountry;
  /** @deprecated The field is used only in shipping address */
  customer_notes?: Maybe<Scalars['String']>;
  firstname: Scalars['String'];
  lastname: Scalars['String'];
  postcode?: Maybe<Scalars['String']>;
  region?: Maybe<CartAddressRegion>;
  street: Array<Maybe<Scalars['String']>>;
  telephone: Scalars['String'];
};

export type CartAddressInterface = {
  city: Scalars['String'];
  company?: Maybe<Scalars['String']>;
  country: CartAddressCountry;
  firstname: Scalars['String'];
  lastname: Scalars['String'];
  postcode?: Maybe<Scalars['String']>;
  region?: Maybe<CartAddressRegion>;
  street: Array<Maybe<Scalars['String']>>;
  telephone: Scalars['String'];
};

export type CartAddressCountry = {
  code: Scalars['String'];
  label: Scalars['String'];
};

export type CartAddressRegion = {
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  region_id?: Maybe<Scalars['Int']>;
};

/** Contains the text of a gift message, its sender, and recipient */
export type GiftMessage = {
  /** Sender name */
  from: Scalars['String'];
  /** Gift message text */
  message: Scalars['String'];
  /** Recipient name */
  to: Scalars['String'];
};

export type CartItemInterface = {
  /** @deprecated Use `uid` instead */
  id: Scalars['String'];
  prices?: Maybe<CartItemPrices>;
  product: ProductInterface;
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID'];
};

export type CartItemPrices = {
  /** An array of discounts to be applied to the cart item */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** Applied FPT to the cart item. */
  fixed_product_taxes?: Maybe<Array<Maybe<FixedProductTax>>>;
  price: Money;
  row_total: Money;
  row_total_including_tax: Money;
  /** The total of all discounts applied to the item */
  total_item_discount?: Maybe<Money>;
};

/** Defines an individual discount. A discount can be applied to the cart as a whole or to an item. */
export type Discount = {
  /** The amount of the discount */
  amount: Money;
  /** A description of the discount */
  label: Scalars['String'];
};

/** A Money object defines a monetary value, including a numeric value and a currency code. */
export type Money = {
  /** A three-letter currency code, such as USD or EUR */
  currency?: Maybe<CurrencyEnum>;
  /** A number expressing a monetary value */
  value?: Maybe<Scalars['Float']>;
};

/** The list of available currency codes */
export type CurrencyEnum =
  | 'AFN'
  | 'ALL'
  | 'AZN'
  | 'DZD'
  | 'AOA'
  | 'ARS'
  | 'AMD'
  | 'AWG'
  | 'AUD'
  | 'BSD'
  | 'BHD'
  | 'BDT'
  | 'BBD'
  | 'BYN'
  | 'BZD'
  | 'BMD'
  | 'BTN'
  | 'BOB'
  | 'BAM'
  | 'BWP'
  | 'BRL'
  | 'GBP'
  | 'BND'
  | 'BGN'
  | 'BUK'
  | 'BIF'
  | 'KHR'
  | 'CAD'
  | 'CVE'
  | 'CZK'
  | 'KYD'
  | 'GQE'
  | 'CLP'
  | 'CNY'
  | 'COP'
  | 'KMF'
  | 'CDF'
  | 'CRC'
  | 'HRK'
  | 'CUP'
  | 'DKK'
  | 'DJF'
  | 'DOP'
  | 'XCD'
  | 'EGP'
  | 'SVC'
  | 'ERN'
  | 'EEK'
  | 'ETB'
  | 'EUR'
  | 'FKP'
  | 'FJD'
  | 'GMD'
  | 'GEK'
  | 'GEL'
  | 'GHS'
  | 'GIP'
  | 'GTQ'
  | 'GNF'
  | 'GYD'
  | 'HTG'
  | 'HNL'
  | 'HKD'
  | 'HUF'
  | 'ISK'
  | 'INR'
  | 'IDR'
  | 'IRR'
  | 'IQD'
  | 'ILS'
  | 'JMD'
  | 'JPY'
  | 'JOD'
  | 'KZT'
  | 'KES'
  | 'KWD'
  | 'KGS'
  | 'LAK'
  | 'LVL'
  | 'LBP'
  | 'LSL'
  | 'LRD'
  | 'LYD'
  | 'LTL'
  | 'MOP'
  | 'MKD'
  | 'MGA'
  | 'MWK'
  | 'MYR'
  | 'MVR'
  | 'LSM'
  | 'MRO'
  | 'MUR'
  | 'MXN'
  | 'MDL'
  | 'MNT'
  | 'MAD'
  | 'MZN'
  | 'MMK'
  | 'NAD'
  | 'NPR'
  | 'ANG'
  | 'YTL'
  | 'NZD'
  | 'NIC'
  | 'NGN'
  | 'KPW'
  | 'NOK'
  | 'OMR'
  | 'PKR'
  | 'PAB'
  | 'PGK'
  | 'PYG'
  | 'PEN'
  | 'PHP'
  | 'PLN'
  | 'QAR'
  | 'RHD'
  | 'RON'
  | 'RUB'
  | 'RWF'
  | 'SHP'
  | 'STD'
  | 'SAR'
  | 'RSD'
  | 'SCR'
  | 'SLL'
  | 'SGD'
  | 'SKK'
  | 'SBD'
  | 'SOS'
  | 'ZAR'
  | 'KRW'
  | 'LKR'
  | 'SDG'
  | 'SRD'
  | 'SZL'
  | 'SEK'
  | 'CHF'
  | 'SYP'
  | 'TWD'
  | 'TJS'
  | 'TZS'
  | 'THB'
  | 'TOP'
  | 'TTD'
  | 'TND'
  | 'TMM'
  | 'USD'
  | 'UGX'
  | 'UAH'
  | 'AED'
  | 'UYU'
  | 'UZS'
  | 'VUV'
  | 'VEB'
  | 'VEF'
  | 'VND'
  | 'CHE'
  | 'CHW'
  | 'XOF'
  | 'WST'
  | 'YER'
  | 'ZMK'
  | 'ZWD'
  | 'TRY'
  | 'AZM'
  | 'ROL'
  | 'TRL'
  | 'XPF';

/** A single FPT that can be applied to a product price. */
export type FixedProductTax = {
  /** Amount of the FPT as a money object. */
  amount?: Maybe<Money>;
  /** The label assigned to the FPT to be displayed on the frontend. */
  label?: Maybe<Scalars['String']>;
};

/** The ProductInterface contains attributes that are common to all types of products. Note that descriptions may not be available for custom and EAV attributes. */
export type ProductInterface = {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
};


/** The ProductInterface contains attributes that are common to all types of products. Note that descriptions may not be available for custom and EAV attributes. */
export type ProductInterfacereviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** CategoryInterface contains the full set of attributes that can be returned in a category search. */
export type CategoryInterface = {
  available_sort_by?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Breadcrumbs, parent categories info. */
  breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  children_count?: Maybe<Scalars['String']>;
  /** Category CMS Block. */
  cms_block?: Maybe<CmsBlock>;
  /**
   * Timestamp indicating when the category was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  custom_layout_update_file?: Maybe<Scalars['String']>;
  /** The attribute to use for sorting. */
  default_sort_by?: Maybe<Scalars['String']>;
  /** An optional description of the category. */
  description?: Maybe<Scalars['String']>;
  display_mode?: Maybe<Scalars['String']>;
  filter_price_range?: Maybe<Scalars['Float']>;
  /**
   * An ID that uniquely identifies the category.
   * @deprecated Use the `uid` argument instead.
   */
  id?: Maybe<Scalars['Int']>;
  image?: Maybe<Scalars['String']>;
  include_in_menu?: Maybe<Scalars['Int']>;
  is_anchor?: Maybe<Scalars['Int']>;
  landing_page?: Maybe<Scalars['Int']>;
  /** Indicates the depth of the category within the tree. */
  level?: Maybe<Scalars['Int']>;
  meta_description?: Maybe<Scalars['String']>;
  meta_keywords?: Maybe<Scalars['String']>;
  meta_title?: Maybe<Scalars['String']>;
  /** The display name of the category. */
  name?: Maybe<Scalars['String']>;
  /** Category Path. */
  path?: Maybe<Scalars['String']>;
  /** Category path in store. */
  path_in_store?: Maybe<Scalars['String']>;
  /** The position of the category relative to other categories at the same level in tree. */
  position?: Maybe<Scalars['Int']>;
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  product_count?: Maybe<Scalars['Int']>;
  /** The list of products assigned to the category. */
  products?: Maybe<CategoryProducts>;
  /** The unique ID for a `CategoryInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the category was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** The url key assigned to the category. */
  url_key?: Maybe<Scalars['String']>;
  /** The url path assigned to the category. */
  url_path?: Maybe<Scalars['String']>;
  /** The part of the category URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
};


/** CategoryInterface contains the full set of attributes that can be returned in a category search. */
export type CategoryInterfaceproductsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};

/** Breadcrumb item. */
export type Breadcrumb = {
  /**
   * Category ID.
   * @deprecated Use the `category_uid` argument instead.
   */
  category_id?: Maybe<Scalars['Int']>;
  /** Category level. */
  category_level?: Maybe<Scalars['Int']>;
  /** Category name. */
  category_name?: Maybe<Scalars['String']>;
  /** The unique ID for a `Breadcrumb` object. */
  category_uid: Scalars['ID'];
  /** Category URL key. */
  category_url_key?: Maybe<Scalars['String']>;
  /** Category URL path. */
  category_url_path?: Maybe<Scalars['String']>;
};

/** CMS block defines all CMS block information */
export type CmsBlock = {
  /** CMS block content */
  content?: Maybe<Scalars['String']>;
  /** CMS block identifier */
  identifier?: Maybe<Scalars['String']>;
  /** CMS block title */
  title?: Maybe<Scalars['String']>;
};

/** ProductAttributeSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. It's possible to sort products using searchable attributes with enabled 'Use in Filter Options' option */
export type ProductAttributeSortInput = {
  /** Attribute label: Product Name */
  name?: InputMaybe<SortEnum>;
  /** Sort by the position assigned to each product. */
  position?: InputMaybe<SortEnum>;
  /** Attribute label: Price */
  price?: InputMaybe<SortEnum>;
  /** Sort by the search relevance score (default). */
  relevance?: InputMaybe<SortEnum>;
};

/** This enumeration indicates whether to return results in ascending or descending order */
export type SortEnum =
  | 'ASC'
  | 'DESC';

/** The category products object returned in the Category query. */
export type CategoryProducts = {
  /** An array of products that are assigned to the category. */
  items?: Maybe<Array<Maybe<ProductInterface>>>;
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  total_count?: Maybe<Scalars['Int']>;
};

/** SearchResultPageInfo provides navigation for the query response */
export type SearchResultPageInfo = {
  /** Specifies which page of results to return */
  current_page?: Maybe<Scalars['Int']>;
  /** Specifies the maximum number of items to return */
  page_size?: Maybe<Scalars['Int']>;
  /** Total pages */
  total_pages?: Maybe<Scalars['Int']>;
};

export type ComplexTextValue = {
  /** HTML format */
  html: Scalars['String'];
};

/** Product image information. Contains the image URL and label. */
export type ProductImage = MediaGalleryInterface & {
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>;
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>;
};

/** Contains basic information about a product image or video. */
export type MediaGalleryInterface = {
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>;
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>;
};

/** MediaGalleryEntry defines characteristics about images and videos associated with a specific product. */
export type MediaGalleryEntry = {
  /** Contains a ProductMediaGalleryEntriesContent object. */
  content?: Maybe<ProductMediaGalleryEntriesContent>;
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The path of the image on the server. */
  file?: Maybe<Scalars['String']>;
  /**
   * The identifier assigned to the object.
   * @deprecated Use `uid` instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The alt text displayed on the UI when the user points to the image. */
  label?: Maybe<Scalars['String']>;
  /** image or video. */
  media_type?: Maybe<Scalars['String']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>;
  /** Array of image types. It can have the following values: image, small_image, thumbnail. */
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The unique ID for a `MediaGalleryEntry` object. */
  uid: Scalars['ID'];
  /** Contains a ProductMediaGalleryEntriesVideoContent object. */
  video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>;
};

/** ProductMediaGalleryEntriesContent contains an image in base64 format and basic information about the image. */
export type ProductMediaGalleryEntriesContent = {
  /** The image in base64 format. */
  base64_encoded_data?: Maybe<Scalars['String']>;
  /** The file name of the image. */
  name?: Maybe<Scalars['String']>;
  /** The MIME type of the file, such as image/png. */
  type?: Maybe<Scalars['String']>;
};

/** ProductMediaGalleryEntriesVideoContent contains a link to a video file and basic information about the video. */
export type ProductMediaGalleryEntriesVideoContent = {
  /** Must be external-video. */
  media_type?: Maybe<Scalars['String']>;
  /** A description of the video. */
  video_description?: Maybe<Scalars['String']>;
  /** Optional data about the video. */
  video_metadata?: Maybe<Scalars['String']>;
  /** Describes the video source. */
  video_provider?: Maybe<Scalars['String']>;
  /** The title of the video. */
  video_title?: Maybe<Scalars['String']>;
  /** The URL to the video. */
  video_url?: Maybe<Scalars['String']>;
};

/** ProductPrices is deprecated, replaced by PriceRange. The ProductPrices object contains the regular price of an item, as well as its minimum and maximum prices. Only composite products, which include bundle, configurable, and grouped products, can contain a minimum and maximum price. */
export type ProductPrices = {
  /**
   * The highest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the to value.
   * @deprecated Use PriceRange.maximum_price.
   */
  maximalPrice?: Maybe<Price>;
  /**
   * The lowest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the from value.
   * @deprecated Use PriceRange.minimum_price.
   */
  minimalPrice?: Maybe<Price>;
  /**
   * The base price of a product.
   * @deprecated Use regular_price from PriceRange.minimum_price or PriceRange.maximum_price.
   */
  regularPrice?: Maybe<Price>;
};

/** Price is deprecated, replaced by ProductPrice. The Price object defines the price of a product as well as any tax-related adjustments. */
export type Price = {
  /**
   * An array that provides information about tax, weee, or weee_tax adjustments.
   * @deprecated Price is deprecated, use ProductPrice.
   */
  adjustments?: Maybe<Array<Maybe<PriceAdjustment>>>;
  /**
   * The price of a product plus a three-letter currency code.
   * @deprecated Price is deprecated, use ProductPrice.
   */
  amount?: Maybe<Money>;
};

/** PriceAdjustment is deprecated. Taxes will be included or excluded in the price. The PricedAdjustment object defines the amount of money to apply as an adjustment, the type of adjustment to apply, and whether the item is included or excluded from the adjustment. */
export type PriceAdjustment = {
  /** The amount of the price adjustment and its currency code. */
  amount?: Maybe<Money>;
  /**
   * Indicates whether the adjustment involves tax, weee, or weee_tax.
   * @deprecated PriceAdjustment is deprecated.
   */
  code?: Maybe<PriceAdjustmentCodesEnum>;
  /**
   * Indicates whether the entity described by the code attribute is included or excluded from the adjustment.
   * @deprecated PriceAdjustment is deprecated.
   */
  description?: Maybe<PriceAdjustmentDescriptionEnum>;
};

/** PriceAdjustment.code is deprecated. This enumeration contains values defined in modules other than the Catalog module. */
export type PriceAdjustmentCodesEnum =
  | 'TAX'
  | 'WEEE'
  | 'WEEE_TAX';

/** PriceAdjustmentDescriptionEnum is deprecated. This enumeration states whether a price adjustment is included or excluded. */
export type PriceAdjustmentDescriptionEnum =
  | 'INCLUDED'
  | 'EXCLUDED';

/** Price range for a product. If the product has a single price, the minimum and maximum price will be the same. */
export type PriceRange = {
  /** The highest possible price for the product. */
  maximum_price?: Maybe<ProductPrice>;
  /** The lowest possible price for the product. */
  minimum_price: ProductPrice;
};

/** Represents a product price. */
export type ProductPrice = {
  /** The price discount. Represents the difference between the regular and final price. */
  discount?: Maybe<ProductDiscount>;
  /** The final price of the product after discounts applied. */
  final_price: Money;
  /** The multiple FPTs that can be applied to a product price. */
  fixed_product_taxes?: Maybe<Array<Maybe<FixedProductTax>>>;
  /** The regular price of the product. */
  regular_price: Money;
};

/** A discount applied to a product price. */
export type ProductDiscount = {
  /** The actual value of the discount. */
  amount_off?: Maybe<Scalars['Float']>;
  /** The discount expressed a percentage. */
  percent_off?: Maybe<Scalars['Float']>;
};

/** A price based on the quantity purchased. */
export type TierPrice = {
  /** The price discount that this tier represents. */
  discount?: Maybe<ProductDiscount>;
  final_price?: Maybe<Money>;
  /** The minimum number of items that must be purchased to qualify for this price tier. */
  quantity?: Maybe<Scalars['Float']>;
};

/** ProductLinks contains information about linked products, including the link type and product type of each item. */
export type ProductLinksInterface = {
  /** One of related, associated, upsell, or crosssell. */
  link_type?: Maybe<Scalars['String']>;
  /** The SKU of the linked product. */
  linked_product_sku?: Maybe<Scalars['String']>;
  /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
  linked_product_type?: Maybe<Scalars['String']>;
  /** The position within the list of product links. */
  position?: Maybe<Scalars['Int']>;
  /** The identifier of the linked product. */
  sku?: Maybe<Scalars['String']>;
};

export type ProductReviews = {
  /** An array of product reviews. */
  items: Array<Maybe<ProductReview>>;
  /** Metadata for pagination rendering. */
  page_info: SearchResultPageInfo;
};

/** Details of a product review */
export type ProductReview = {
  /** The average rating for product review. */
  average_rating: Scalars['Float'];
  /** Date indicating when the review was created. */
  created_at: Scalars['String'];
  /** The customer's nickname. Defaults to the customer name, if logged in */
  nickname: Scalars['String'];
  /** Contains details about the reviewed product */
  product: ProductInterface;
  /** An array of ratings by rating category, such as quality, price, and value */
  ratings_breakdown: Array<Maybe<ProductReviewRating>>;
  /** The summary (title) of the review */
  summary: Scalars['String'];
  /** The review text. */
  text: Scalars['String'];
};

export type ProductReviewRating = {
  /** The label assigned to an aspect of a product that is being rated, such as quality or price */
  name: Scalars['String'];
  /** The rating value given by customer. By default, possible values range from 1 to 5. */
  value: Scalars['String'];
};

/** This enumeration states whether a product stock status is in stock or out of stock */
export type ProductStockStatus =
  | 'IN_STOCK'
  | 'OUT_OF_STOCK';

/** ProductTierPrices is deprecated and has been replaced by TierPrice. The ProductTierPrices object defines a tier price, which is a quantity discount offered to a specific customer group. */
export type ProductTierPrices = {
  /**
   * The ID of the customer group.
   * @deprecated customer_group_id is not relevant for storefront.
   */
  customer_group_id?: Maybe<Scalars['String']>;
  /**
   * The percentage discount of the item.
   * @deprecated ProductTierPrices is deprecated. Use TierPrice.discount.
   */
  percentage_value?: Maybe<Scalars['Float']>;
  /**
   * The number of items that must be purchased to qualify for tier pricing.
   * @deprecated ProductTierPrices is deprecated, use TierPrice.quantity.
   */
  qty?: Maybe<Scalars['Float']>;
  /**
   * The price of the fixed price item.
   * @deprecated ProductTierPrices is deprecated. Use TierPrice.final_price
   */
  value?: Maybe<Scalars['Float']>;
  /**
   * The ID assigned to the website.
   * @deprecated website_id is not relevant for storefront.
   */
  website_id?: Maybe<Scalars['Float']>;
};

/** The object contains URL rewrite details */
export type UrlRewrite = {
  /** Request parameters */
  parameters?: Maybe<Array<Maybe<HttpQueryParameter>>>;
  /** Request URL */
  url?: Maybe<Scalars['String']>;
};

/** The object details of target path parameters */
export type HttpQueryParameter = {
  /** Parameter name */
  name?: Maybe<Scalars['String']>;
  /** Parameter value */
  value?: Maybe<Scalars['String']>;
};

/** Website is deprecated because it is should not be used on storefront. The type contains information about a website */
export type Website = {
  /**
   * A code assigned to the website to identify it
   * @deprecated The field should not be used on the storefront.
   */
  code?: Maybe<Scalars['String']>;
  /**
   * The default group ID that the website has
   * @deprecated The field should not be used on the storefront.
   */
  default_group_id?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the website
   * @deprecated The field should not be used on the storefront.
   */
  id?: Maybe<Scalars['Int']>;
  /**
   * Specifies if this is the default website
   * @deprecated The field should not be used on the storefront.
   */
  is_default?: Maybe<Scalars['Boolean']>;
  /**
   * The website name. Websites use this name to identify it easier.
   * @deprecated The field should not be used on the storefront.
   */
  name?: Maybe<Scalars['String']>;
  /**
   * The attribute to use for sorting websites
   * @deprecated The field should not be used on the storefront.
   */
  sort_order?: Maybe<Scalars['Int']>;
};

export type CartPrices = {
  applied_taxes?: Maybe<Array<Maybe<CartTaxItem>>>;
  /** @deprecated Use discounts instead  */
  discount?: Maybe<CartDiscount>;
  /** An array of applied discounts */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  grand_total?: Maybe<Money>;
  subtotal_excluding_tax?: Maybe<Money>;
  subtotal_including_tax?: Maybe<Money>;
  subtotal_with_discount_excluding_tax?: Maybe<Money>;
};

export type CartTaxItem = {
  amount: Money;
  label: Scalars['String'];
};

export type CartDiscount = {
  amount: Money;
  label: Array<Maybe<Scalars['String']>>;
};

export type SelectedPaymentMethod = {
  /** The payment method code */
  code: Scalars['String'];
  /** Retrieve meta information for this payment method (image) */
  mollie_meta: MolliePaymentMethodMeta;
  /** The purchase order number. */
  purchase_order_number?: Maybe<Scalars['String']>;
  /** The payment method title. */
  title: Scalars['String'];
};

export type ShippingCartAddress = CartAddressInterface & {
  available_shipping_methods?: Maybe<Array<Maybe<AvailableShippingMethod>>>;
  /** @deprecated `cart_items_v2` should be used instead */
  cart_items?: Maybe<Array<Maybe<CartItemQuantity>>>;
  cart_items_v2?: Maybe<Array<Maybe<CartItemInterface>>>;
  city: Scalars['String'];
  company?: Maybe<Scalars['String']>;
  country: CartAddressCountry;
  customer_notes?: Maybe<Scalars['String']>;
  firstname: Scalars['String'];
  /** @deprecated This information shoud not be exposed on frontend */
  items_weight?: Maybe<Scalars['Float']>;
  lastname: Scalars['String'];
  pickup_location_code?: Maybe<Scalars['String']>;
  postcode?: Maybe<Scalars['String']>;
  region?: Maybe<CartAddressRegion>;
  selected_shipping_method?: Maybe<SelectedShippingMethod>;
  street: Array<Maybe<Scalars['String']>>;
  telephone: Scalars['String'];
};

export type AvailableShippingMethod = {
  amount: Money;
  available: Scalars['Boolean'];
  /** @deprecated The field should not be used on the storefront */
  base_amount?: Maybe<Money>;
  carrier_code: Scalars['String'];
  carrier_title: Scalars['String'];
  error_message?: Maybe<Scalars['String']>;
  /** Could be null if method is not available */
  method_code?: Maybe<Scalars['String']>;
  /** Could be null if method is not available */
  method_title?: Maybe<Scalars['String']>;
  price_excl_tax: Money;
  price_incl_tax: Money;
};

/** Deprecated: `cart_items` field of `ShippingCartAddress` returns now  `CartItemInterface` instead of `CartItemQuantity` */
export type CartItemQuantity = {
  /** @deprecated `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead of `CartItemQuantity` */
  cart_item_id: Scalars['Int'];
  /** @deprecated `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead of `CartItemQuantity` */
  quantity: Scalars['Float'];
};

export type SelectedShippingMethod = {
  amount: Money;
  /** @deprecated The field should not be used on the storefront */
  base_amount?: Maybe<Money>;
  carrier_code: Scalars['String'];
  carrier_title: Scalars['String'];
  method_code: Scalars['String'];
  method_title: Scalars['String'];
};

/** CategoryFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type CategoryFilterInput = {
  /** Filter by the unique category ID for a `CategoryInterface` object. */
  category_uid?: InputMaybe<FilterEqualTypeInput>;
  /** Deprecated: use 'category_uid' to filter uniquely identifiers of categories. */
  ids?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the display name of the category. */
  name?: InputMaybe<FilterMatchTypeInput>;
  /** Filter by the unique parent category ID for a `CategoryInterface` object. */
  parent_category_uid?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the unique parent category ID for a `CategoryInterface` object. */
  parent_id?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the part of the URL that identifies the category. */
  url_key?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the URL path for the category. */
  url_path?: InputMaybe<FilterEqualTypeInput>;
};

/** Defines a filter that matches the input exactly. */
export type FilterEqualTypeInput = {
  /** A string to filter on */
  eq?: InputMaybe<Scalars['String']>;
  /** An array of values to filter on */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

/** Defines a filter that performs a fuzzy search. */
export type FilterMatchTypeInput = {
  /** One or more words to filter on */
  match?: InputMaybe<Scalars['String']>;
};

/** A collection of CategoryTree objects and pagination information. */
export type CategoryResult = {
  /** A list of categories that match the filter criteria. */
  items?: Maybe<Array<Maybe<CategoryTree>>>;
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The total number of categories that match the criteria. */
  total_count?: Maybe<Scalars['Int']>;
};

/** Category tree implementation */
export type CategoryTree = CategoryInterface & RoutableInterface & {
  available_sort_by?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Breadcrumbs, parent categories info. */
  breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** Child categories tree. */
  children?: Maybe<Array<Maybe<CategoryTree>>>;
  children_count?: Maybe<Scalars['String']>;
  /** Category CMS Block. */
  cms_block?: Maybe<CmsBlock>;
  /**
   * Timestamp indicating when the category was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  custom_layout_update_file?: Maybe<Scalars['String']>;
  /** The attribute to use for sorting. */
  default_sort_by?: Maybe<Scalars['String']>;
  /** An optional description of the category. */
  description?: Maybe<Scalars['String']>;
  display_mode?: Maybe<Scalars['String']>;
  filter_price_range?: Maybe<Scalars['Float']>;
  /**
   * An ID that uniquely identifies the category.
   * @deprecated Use the `uid` argument instead.
   */
  id?: Maybe<Scalars['Int']>;
  image?: Maybe<Scalars['String']>;
  include_in_menu?: Maybe<Scalars['Int']>;
  is_anchor?: Maybe<Scalars['Int']>;
  landing_page?: Maybe<Scalars['Int']>;
  /** Indicates the depth of the category within the tree. */
  level?: Maybe<Scalars['Int']>;
  meta_description?: Maybe<Scalars['String']>;
  meta_keywords?: Maybe<Scalars['String']>;
  meta_title?: Maybe<Scalars['String']>;
  /** The display name of the category. */
  name?: Maybe<Scalars['String']>;
  /** Category Path. */
  path?: Maybe<Scalars['String']>;
  /** Category path in store. */
  path_in_store?: Maybe<Scalars['String']>;
  /** The position of the category relative to other categories at the same level in tree. */
  position?: Maybe<Scalars['Int']>;
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  product_count?: Maybe<Scalars['Int']>;
  /** The list of products assigned to the category. */
  products?: Maybe<CategoryProducts>;
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /** The unique ID for a `CategoryInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the category was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** The url key assigned to the category. */
  url_key?: Maybe<Scalars['String']>;
  /** The url path assigned to the category. */
  url_path?: Maybe<Scalars['String']>;
  /** The part of the category URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
};


/** Category tree implementation */
export type CategoryTreeproductsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};

/** Routable entities serve as the model for a rendered page */
export type RoutableInterface = {
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
};

/** This enumeration defines the entity type. */
export type UrlRewriteEntityTypeEnum =
  | 'CMS_PAGE'
  | 'PRODUCT'
  | 'CATEGORY';

export type ChatData = {
  /** API space id */
  api_space_id?: Maybe<Scalars['String']>;
  /** Cookie name */
  cookie_name?: Maybe<Scalars['String']>;
  /** Is chat enabled */
  is_enabled?: Maybe<Scalars['Boolean']>;
};

/** Defines all Checkout Agreement information */
export type CheckoutAgreement = {
  /** Checkout Agreement identifier */
  agreement_id: Scalars['Int'];
  /** Checkout Agreement checkbox text */
  checkbox_text: Scalars['String'];
  /** Checkout Agreement content */
  content: Scalars['String'];
  /** Checkout Agreement content height */
  content_height?: Maybe<Scalars['String']>;
  /** Is Checkout Agreement content in HTML format */
  is_html: Scalars['Boolean'];
  mode: CheckoutAgreementMode;
  /** Checkout Agreement name */
  name: Scalars['String'];
};

export type CheckoutAgreementMode =
  | 'AUTO'
  | 'MANUAL';

/** CMS blocks information */
export type CmsBlocks = {
  /** An array of CMS blocks */
  items?: Maybe<Array<Maybe<CmsBlock>>>;
};

/** CMS page defines all CMS page information */
export type CmsPage = RoutableInterface & {
  /** CMS page content */
  content?: Maybe<Scalars['String']>;
  /** CMS page content heading */
  content_heading?: Maybe<Scalars['String']>;
  /** Identifier of the CMS page */
  identifier?: Maybe<Scalars['String']>;
  /** CMS page meta description */
  meta_description?: Maybe<Scalars['String']>;
  /** CMS page meta keywords */
  meta_keywords?: Maybe<Scalars['String']>;
  /** CMS page meta title */
  meta_title?: Maybe<Scalars['String']>;
  /** CMS page content heading */
  page_layout?: Maybe<Scalars['String']>;
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** CMS page title */
  title?: Maybe<Scalars['String']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /** URL key of CMS page */
  url_key?: Maybe<Scalars['String']>;
};

export type CompareList = {
  /** An array of attributes that can be used for comparing products */
  attributes?: Maybe<Array<Maybe<ComparableAttribute>>>;
  /** The number of items in the compare list */
  item_count: Scalars['Int'];
  /** An array of products to compare */
  items?: Maybe<Array<Maybe<ComparableItem>>>;
  /** The unique ID assigned to the compare list */
  uid: Scalars['ID'];
};

export type ComparableAttribute = {
  /** An attribute code that is enabled for product comparisons */
  code: Scalars['String'];
  /** The label of the attribute code */
  label: Scalars['String'];
};

export type ComparableItem = {
  /** An array of product attributes that can be used to compare products */
  attributes: Array<Maybe<ProductAttribute>>;
  /** Contains details about a product in a compare list */
  product: ProductInterface;
  /** The unique ID of an item in a compare list */
  uid: Scalars['ID'];
};

export type ProductAttribute = {
  /** The unique identifier for a product attribute code. */
  code: Scalars['String'];
  /** The display value of the attribute */
  value: Scalars['String'];
};

export type Country = {
  available_regions?: Maybe<Array<Maybe<Region>>>;
  full_name_english?: Maybe<Scalars['String']>;
  full_name_locale?: Maybe<Scalars['String']>;
  /** The unique ID for a `Country` object. */
  id?: Maybe<Scalars['String']>;
  three_letter_abbreviation?: Maybe<Scalars['String']>;
  two_letter_abbreviation?: Maybe<Scalars['String']>;
};

export type Region = {
  code?: Maybe<Scalars['String']>;
  /** The unique ID for a `Region` object. */
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

export type Currency = {
  available_currency_codes?: Maybe<Array<Maybe<Scalars['String']>>>;
  base_currency_code?: Maybe<Scalars['String']>;
  base_currency_symbol?: Maybe<Scalars['String']>;
  /** @deprecated Symbol was missed. Use `default_display_currency_code`. */
  default_display_currecy_code?: Maybe<Scalars['String']>;
  /** @deprecated Symbol was missed. Use `default_display_currency_symbol`. */
  default_display_currecy_symbol?: Maybe<Scalars['String']>;
  default_display_currency_code?: Maybe<Scalars['String']>;
  default_display_currency_symbol?: Maybe<Scalars['String']>;
  exchange_rates?: Maybe<Array<Maybe<ExchangeRate>>>;
};

export type ExchangeRate = {
  currency_to?: Maybe<Scalars['String']>;
  rate?: Maybe<Scalars['Float']>;
};

/** AttributeInput specifies the attribute_code and entity_type to search */
export type AttributeInput = {
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  attribute_code?: InputMaybe<Scalars['String']>;
  /** The type of entity that defines the attribute */
  entity_type?: InputMaybe<Scalars['String']>;
};

/** CustomAttributeMetadata defines an array of attribute_codes and entity_types */
export type CustomAttributeMetadata = {
  /** An array of attributes */
  items?: Maybe<Array<Maybe<Attribute>>>;
};

/** Attribute contains the attribute_type of the specified attribute_code and entity_type */
export type Attribute = {
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  attribute_code?: Maybe<Scalars['String']>;
  /** Attribute options list. */
  attribute_options?: Maybe<Array<Maybe<AttributeOption>>>;
  /** The data type of the attribute */
  attribute_type?: Maybe<Scalars['String']>;
  /** The type of entity that defines the attribute */
  entity_type?: Maybe<Scalars['String']>;
  /** The frontend input type of the attribute */
  input_type?: Maybe<Scalars['String']>;
  /** Contains details about the storefront properties configured for the attribute */
  storefront_properties?: Maybe<StorefrontProperties>;
};

/** Attribute option. */
export type AttributeOption = {
  /** Attribute option label. */
  label?: Maybe<Scalars['String']>;
  /** Attribute option value. */
  value?: Maybe<Scalars['String']>;
};

export type StorefrontProperties = {
  /** The relative position of the attribute in the layered navigation block */
  position?: Maybe<Scalars['Int']>;
  /** Indicates whether the attribute is filterable with results, without results, or not at all */
  use_in_layered_navigation?: Maybe<UseInLayeredNavigationOptions>;
  /** Indicates whether the attribute is displayed in product listings */
  use_in_product_listing?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the attribute can be used in layered navigation on search results pages */
  use_in_search_results_layered_navigation?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the attribute is displayed on product pages */
  visible_on_catalog_pages?: Maybe<Scalars['Boolean']>;
};

export type UseInLayeredNavigationOptions =
  | 'NO'
  | 'FILTERABLE_WITH_RESULTS'
  | 'FILTERABLE_NO_RESULT';

/** Customer defines the customer name and address and other details */
export type Customer = {
  /** An array containing the customer's shipping and billing addresses */
  addresses?: Maybe<Array<Maybe<CustomerAddress>>>;
  /** Indicates whether the customer has enabled remote shopping assistance */
  allow_remote_shopping_assistance: Scalars['Boolean'];
  /** The contents of the customer's compare list */
  compare_list?: Maybe<CompareList>;
  /** Timestamp indicating when the account was created */
  created_at?: Maybe<Scalars['String']>;
  /** The customer's date of birth */
  date_of_birth?: Maybe<Scalars['String']>;
  /** The ID assigned to the billing address */
  default_billing?: Maybe<Scalars['String']>;
  /** The ID assigned to the shipping address */
  default_shipping?: Maybe<Scalars['String']>;
  /**
   * The customer's date of birth
   * @deprecated Use `date_of_birth` instead
   */
  dob?: Maybe<Scalars['String']>;
  /** The customer's email address. Required */
  email?: Maybe<Scalars['String']>;
  /** The customer's first name */
  firstname?: Maybe<Scalars['String']>;
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: Maybe<Scalars['Int']>;
  /** @deprecated Customer group should not be exposed in the storefront scenarios */
  group_id?: Maybe<Scalars['Int']>;
  /**
   * The ID assigned to the customer
   * @deprecated id is not needed as part of Customer because on server side it can be identified based on customer token used for authentication. There is no need to know customer ID on the client side.
   */
  id?: Maybe<Scalars['Int']>;
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: Maybe<Scalars['Boolean']>;
  /** The customer's family name */
  lastname?: Maybe<Scalars['String']>;
  /** The customer's middle name */
  middlename?: Maybe<Scalars['String']>;
  orders?: Maybe<CustomerOrders>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>;
  /** Contains the customer's product reviews */
  reviews: ProductReviews;
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>;
  /** The customer's Value-added tax (VAT) number (for corporate customers) */
  taxvat?: Maybe<Scalars['String']>;
  /**
   * Contains a customer's wish lists
   * @deprecated Use `Customer.wishlists` or `Customer.wishlist_v2`
   */
  wishlist: Wishlist;
  /** Retrieve the specified wish list identified by the unique ID for a `Wishlist` object */
  wishlist_v2?: Maybe<Wishlist>;
  /** An array of wishlists. In Magento Open Source, customers are limited to one wish list. The number of wish lists is configurable for Magento Commerce */
  wishlists: Array<Maybe<Wishlist>>;
};


/** Customer defines the customer name and address and other details */
export type CustomerordersArgs = {
  filter?: InputMaybe<CustomerOrdersFilterInput>;
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};


/** Customer defines the customer name and address and other details */
export type CustomerreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};


/** Customer defines the customer name and address and other details */
export type Customerwishlist_v2Args = {
  id: Scalars['ID'];
};


/** Customer defines the customer name and address and other details */
export type CustomerwishlistsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** CustomerAddress contains detailed information about a customer's billing and shipping addresses */
export type CustomerAddress = {
  /** The city or town */
  city?: Maybe<Scalars['String']>;
  /** The customer's company */
  company?: Maybe<Scalars['String']>;
  /** The customer's country */
  country_code?: Maybe<CountryCodeEnum>;
  /**
   * The customer's country
   * @deprecated Use `country_code` instead.
   */
  country_id?: Maybe<Scalars['String']>;
  /** @deprecated Custom attributes should not be put into container */
  custom_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>;
  /**
   * The customer ID
   * @deprecated customer_id is not needed as part of CustomerAddress, address ID (id) is unique identifier for the addresses.
   */
  customer_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the address is the default billing address */
  default_billing?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the address is the default shipping address */
  default_shipping?: Maybe<Scalars['Boolean']>;
  /** Address extension attributes */
  extension_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>;
  /** The fax number */
  fax?: Maybe<Scalars['String']>;
  /** The first name of the person associated with the shipping/billing address */
  firstname?: Maybe<Scalars['String']>;
  /** The ID assigned to the address object */
  id?: Maybe<Scalars['Int']>;
  /** The family name of the person associated with the shipping/billing address */
  lastname?: Maybe<Scalars['String']>;
  /** The middle name of the person associated with the shipping/billing address */
  middlename?: Maybe<Scalars['String']>;
  /** The customer's ZIP or postal code */
  postcode?: Maybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>;
  /** An object containing the region name, region code, and region ID */
  region?: Maybe<CustomerAddressRegion>;
  /** The unique ID for a pre-defined region */
  region_id?: Maybe<Scalars['Int']>;
  /** An array of strings that define the street number and name */
  street?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>;
  /** The telephone number */
  telephone?: Maybe<Scalars['String']>;
  /** The customer's Value-added tax (VAT) number (for corporate customers) */
  vat_id?: Maybe<Scalars['String']>;
};

/** The list of countries codes */
export type CountryCodeEnum =
  /** Afghanistan */
  | 'AF'
  /** Åland Islands */
  | 'AX'
  /** Albania */
  | 'AL'
  /** Algeria */
  | 'DZ'
  /** American Samoa */
  | 'AS'
  /** Andorra */
  | 'AD'
  /** Angola */
  | 'AO'
  /** Anguilla */
  | 'AI'
  /** Antarctica */
  | 'AQ'
  /** Antigua & Barbuda */
  | 'AG'
  /** Argentina */
  | 'AR'
  /** Armenia */
  | 'AM'
  /** Aruba */
  | 'AW'
  /** Australia */
  | 'AU'
  /** Austria */
  | 'AT'
  /** Azerbaijan */
  | 'AZ'
  /** Bahamas */
  | 'BS'
  /** Bahrain */
  | 'BH'
  /** Bangladesh */
  | 'BD'
  /** Barbados */
  | 'BB'
  /** Belarus */
  | 'BY'
  /** Belgium */
  | 'BE'
  /** Belize */
  | 'BZ'
  /** Benin */
  | 'BJ'
  /** Bermuda */
  | 'BM'
  /** Bhutan */
  | 'BT'
  /** Bolivia */
  | 'BO'
  /** Bosnia & Herzegovina */
  | 'BA'
  /** Botswana */
  | 'BW'
  /** Bouvet Island */
  | 'BV'
  /** Brazil */
  | 'BR'
  /** British Indian Ocean Territory */
  | 'IO'
  /** British Virgin Islands */
  | 'VG'
  /** Brunei */
  | 'BN'
  /** Bulgaria */
  | 'BG'
  /** Burkina Faso */
  | 'BF'
  /** Burundi */
  | 'BI'
  /** Cambodia */
  | 'KH'
  /** Cameroon */
  | 'CM'
  /** Canada */
  | 'CA'
  /** Cape Verde */
  | 'CV'
  /** Cayman Islands */
  | 'KY'
  /** Central African Republic */
  | 'CF'
  /** Chad */
  | 'TD'
  /** Chile */
  | 'CL'
  /** China */
  | 'CN'
  /** Christmas Island */
  | 'CX'
  /** Cocos (Keeling) Islands */
  | 'CC'
  /** Colombia */
  | 'CO'
  /** Comoros */
  | 'KM'
  /** Congo-Brazzaville */
  | 'CG'
  /** Congo-Kinshasa */
  | 'CD'
  /** Cook Islands */
  | 'CK'
  /** Costa Rica */
  | 'CR'
  /** Côte d’Ivoire */
  | 'CI'
  /** Croatia */
  | 'HR'
  /** Cuba */
  | 'CU'
  /** Cyprus */
  | 'CY'
  /** Czech Republic */
  | 'CZ'
  /** Denmark */
  | 'DK'
  /** Djibouti */
  | 'DJ'
  /** Dominica */
  | 'DM'
  /** Dominican Republic */
  | 'DO'
  /** Ecuador */
  | 'EC'
  /** Egypt */
  | 'EG'
  /** El Salvador */
  | 'SV'
  /** Equatorial Guinea */
  | 'GQ'
  /** Eritrea */
  | 'ER'
  /** Estonia */
  | 'EE'
  /** Ethiopia */
  | 'ET'
  /** Falkland Islands */
  | 'FK'
  /** Faroe Islands */
  | 'FO'
  /** Fiji */
  | 'FJ'
  /** Finland */
  | 'FI'
  /** France */
  | 'FR'
  /** French Guiana */
  | 'GF'
  /** French Polynesia */
  | 'PF'
  /** French Southern Territories */
  | 'TF'
  /** Gabon */
  | 'GA'
  /** Gambia */
  | 'GM'
  /** Georgia */
  | 'GE'
  /** Germany */
  | 'DE'
  /** Ghana */
  | 'GH'
  /** Gibraltar */
  | 'GI'
  /** Greece */
  | 'GR'
  /** Greenland */
  | 'GL'
  /** Grenada */
  | 'GD'
  /** Guadeloupe */
  | 'GP'
  /** Guam */
  | 'GU'
  /** Guatemala */
  | 'GT'
  /** Guernsey */
  | 'GG'
  /** Guinea */
  | 'GN'
  /** Guinea-Bissau */
  | 'GW'
  /** Guyana */
  | 'GY'
  /** Haiti */
  | 'HT'
  /** Heard &amp; McDonald Islands */
  | 'HM'
  /** Honduras */
  | 'HN'
  /** Hong Kong SAR China */
  | 'HK'
  /** Hungary */
  | 'HU'
  /** Iceland */
  | 'IS'
  /** India */
  | 'IN'
  /** Indonesia */
  | 'ID'
  /** Iran */
  | 'IR'
  /** Iraq */
  | 'IQ'
  /** Ireland */
  | 'IE'
  /** Isle of Man */
  | 'IM'
  /** Israel */
  | 'IL'
  /** Italy */
  | 'IT'
  /** Jamaica */
  | 'JM'
  /** Japan */
  | 'JP'
  /** Jersey */
  | 'JE'
  /** Jordan */
  | 'JO'
  /** Kazakhstan */
  | 'KZ'
  /** Kenya */
  | 'KE'
  /** Kiribati */
  | 'KI'
  /** Kuwait */
  | 'KW'
  /** Kyrgyzstan */
  | 'KG'
  /** Laos */
  | 'LA'
  /** Latvia */
  | 'LV'
  /** Lebanon */
  | 'LB'
  /** Lesotho */
  | 'LS'
  /** Liberia */
  | 'LR'
  /** Libya */
  | 'LY'
  /** Liechtenstein */
  | 'LI'
  /** Lithuania */
  | 'LT'
  /** Luxembourg */
  | 'LU'
  /** Macau SAR China */
  | 'MO'
  /** Macedonia */
  | 'MK'
  /** Madagascar */
  | 'MG'
  /** Malawi */
  | 'MW'
  /** Malaysia */
  | 'MY'
  /** Maldives */
  | 'MV'
  /** Mali */
  | 'ML'
  /** Malta */
  | 'MT'
  /** Marshall Islands */
  | 'MH'
  /** Martinique */
  | 'MQ'
  /** Mauritania */
  | 'MR'
  /** Mauritius */
  | 'MU'
  /** Mayotte */
  | 'YT'
  /** Mexico */
  | 'MX'
  /** Micronesia */
  | 'FM'
  /** Moldova */
  | 'MD'
  /** Monaco */
  | 'MC'
  /** Mongolia */
  | 'MN'
  /** Montenegro */
  | 'ME'
  /** Montserrat */
  | 'MS'
  /** Morocco */
  | 'MA'
  /** Mozambique */
  | 'MZ'
  /** Myanmar (Burma) */
  | 'MM'
  /** Namibia */
  | 'NA'
  /** Nauru */
  | 'NR'
  /** Nepal */
  | 'NP'
  /** Netherlands */
  | 'NL'
  /** Netherlands Antilles */
  | 'AN'
  /** New Caledonia */
  | 'NC'
  /** New Zealand */
  | 'NZ'
  /** Nicaragua */
  | 'NI'
  /** Niger */
  | 'NE'
  /** Nigeria */
  | 'NG'
  /** Niue */
  | 'NU'
  /** Norfolk Island */
  | 'NF'
  /** Northern Mariana Islands */
  | 'MP'
  /** North Korea */
  | 'KP'
  /** Norway */
  | 'NO'
  /** Oman */
  | 'OM'
  /** Pakistan */
  | 'PK'
  /** Palau */
  | 'PW'
  /** Palestinian Territories */
  | 'PS'
  /** Panama */
  | 'PA'
  /** Papua New Guinea */
  | 'PG'
  /** Paraguay */
  | 'PY'
  /** Peru */
  | 'PE'
  /** Philippines */
  | 'PH'
  /** Pitcairn Islands */
  | 'PN'
  /** Poland */
  | 'PL'
  /** Portugal */
  | 'PT'
  /** Qatar */
  | 'QA'
  /** Réunion */
  | 'RE'
  /** Romania */
  | 'RO'
  /** Russia */
  | 'RU'
  /** Rwanda */
  | 'RW'
  /** Samoa */
  | 'WS'
  /** San Marino */
  | 'SM'
  /** São Tomé & Príncipe */
  | 'ST'
  /** Saudi Arabia */
  | 'SA'
  /** Senegal */
  | 'SN'
  /** Serbia */
  | 'RS'
  /** Seychelles */
  | 'SC'
  /** Sierra Leone */
  | 'SL'
  /** Singapore */
  | 'SG'
  /** Slovakia */
  | 'SK'
  /** Slovenia */
  | 'SI'
  /** Solomon Islands */
  | 'SB'
  /** Somalia */
  | 'SO'
  /** South Africa */
  | 'ZA'
  /** South Georgia & South Sandwich Islands */
  | 'GS'
  /** South Korea */
  | 'KR'
  /** Spain */
  | 'ES'
  /** Sri Lanka */
  | 'LK'
  /** St. Barthélemy */
  | 'BL'
  /** St. Helena */
  | 'SH'
  /** St. Kitts & Nevis */
  | 'KN'
  /** St. Lucia */
  | 'LC'
  /** St. Martin */
  | 'MF'
  /** St. Pierre & Miquelon */
  | 'PM'
  /** St. Vincent & Grenadines */
  | 'VC'
  /** Sudan */
  | 'SD'
  /** Suriname */
  | 'SR'
  /** Svalbard & Jan Mayen */
  | 'SJ'
  /** Swaziland */
  | 'SZ'
  /** Sweden */
  | 'SE'
  /** Switzerland */
  | 'CH'
  /** Syria */
  | 'SY'
  /** Taiwan */
  | 'TW'
  /** Tajikistan */
  | 'TJ'
  /** Tanzania */
  | 'TZ'
  /** Thailand */
  | 'TH'
  /** Timor-Leste */
  | 'TL'
  /** Togo */
  | 'TG'
  /** Tokelau */
  | 'TK'
  /** Tonga */
  | 'TO'
  /** Trinidad & Tobago */
  | 'TT'
  /** Tunisia */
  | 'TN'
  /** Turkey */
  | 'TR'
  /** Turkmenistan */
  | 'TM'
  /** Turks & Caicos Islands */
  | 'TC'
  /** Tuvalu */
  | 'TV'
  /** Uganda */
  | 'UG'
  /** Ukraine */
  | 'UA'
  /** United Arab Emirates */
  | 'AE'
  /** United Kingdom */
  | 'GB'
  /** United States */
  | 'US'
  /** Uruguay */
  | 'UY'
  /** U.S. Outlying Islands */
  | 'UM'
  /** U.S. Virgin Islands */
  | 'VI'
  /** Uzbekistan */
  | 'UZ'
  /** Vanuatu */
  | 'VU'
  /** Vatican City */
  | 'VA'
  /** Venezuela */
  | 'VE'
  /** Vietnam */
  | 'VN'
  /** Wallis & Futuna */
  | 'WF'
  /** Western Sahara */
  | 'EH'
  /** Yemen */
  | 'YE'
  /** Zambia */
  | 'ZM'
  /** Zimbabwe */
  | 'ZW';

export type CustomerAddressAttribute = {
  /** Attribute code */
  attribute_code?: Maybe<Scalars['String']>;
  /** Attribute value */
  value?: Maybe<Scalars['String']>;
};

/** CustomerAddressRegion defines the customer's state or province */
export type CustomerAddressRegion = {
  /** The state or province name */
  region?: Maybe<Scalars['String']>;
  /** The address region code */
  region_code?: Maybe<Scalars['String']>;
  /** The unique ID for a pre-defined region */
  region_id?: Maybe<Scalars['Int']>;
};

/** Identifies the filter to use for filtering orders. */
export type CustomerOrdersFilterInput = {
  /** Filters by order number. */
  number?: InputMaybe<FilterStringTypeInput>;
};

/** Defines a filter for an input string. */
export type FilterStringTypeInput = {
  /** Filters items that are exactly the same as the specified string. */
  eq?: InputMaybe<Scalars['String']>;
  /** Filters items that are exactly the same as entries specified in an array of strings. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Defines a filter that performs a fuzzy search using the specified string. */
  match?: InputMaybe<Scalars['String']>;
};

/** The collection of orders that match the conditions defined in the filter */
export type CustomerOrders = {
  /** An array of customer orders */
  items: Array<Maybe<CustomerOrder>>;
  /** An object that includes the current_page, page_info, and page_size values specified in the query */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The total count of customer orders */
  total_count?: Maybe<Scalars['Int']>;
};

/** Contains details about each of the customer's orders */
export type CustomerOrder = {
  /** The billing address for the order */
  billing_address?: Maybe<OrderAddress>;
  /** The shipping carrier for the order delivery */
  carrier?: Maybe<Scalars['String']>;
  /** Comments about the order */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** @deprecated Use the order_date attribute instead */
  created_at?: Maybe<Scalars['String']>;
  /** A list of credit memos */
  credit_memos?: Maybe<Array<Maybe<CreditMemo>>>;
  /** The entered gift message for the order */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use the totals.grand_total attribute instead */
  grand_total?: Maybe<Scalars['Float']>;
  /** The unique ID for a `CustomerOrder` object */
  id: Scalars['ID'];
  /** @deprecated Use the id attribute instead */
  increment_id?: Maybe<Scalars['String']>;
  /** A list of invoices for the order */
  invoices: Array<Maybe<Invoice>>;
  /** An array containing the items purchased in this order */
  items?: Maybe<Array<Maybe<OrderItemInterface>>>;
  /** The order number */
  number: Scalars['String'];
  /** The date the order was placed */
  order_date: Scalars['String'];
  /** @deprecated Use the number attribute instead */
  order_number: Scalars['String'];
  /** Payment details for the order */
  payment_methods?: Maybe<Array<Maybe<OrderPaymentMethod>>>;
  /** A list of shipments for the order */
  shipments?: Maybe<Array<Maybe<OrderShipment>>>;
  /** The shipping address for the order */
  shipping_address?: Maybe<OrderAddress>;
  /** The delivery method for the order */
  shipping_method?: Maybe<Scalars['String']>;
  /** The current status of the order */
  status: Scalars['String'];
  /** Contains details about the calculated totals for this order */
  total?: Maybe<OrderTotal>;
};

/** OrderAddress contains detailed information about an order's billing and shipping addresses */
export type OrderAddress = {
  /** The city or town */
  city: Scalars['String'];
  /** The customer's company */
  company?: Maybe<Scalars['String']>;
  /** The customer's country */
  country_code?: Maybe<CountryCodeEnum>;
  /** The fax number */
  fax?: Maybe<Scalars['String']>;
  /** The first name of the person associated with the shipping/billing address */
  firstname: Scalars['String'];
  /** The family name of the person associated with the shipping/billing address */
  lastname: Scalars['String'];
  /** The middle name of the person associated with the shipping/billing address */
  middlename?: Maybe<Scalars['String']>;
  /** The customer's order ZIP or postal code */
  postcode?: Maybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>;
  /** The state or province name */
  region?: Maybe<Scalars['String']>;
  /** The unique ID for a `Region` object of a pre-defined region */
  region_id?: Maybe<Scalars['ID']>;
  /** An array of strings that define the street number and name */
  street: Array<Maybe<Scalars['String']>>;
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>;
  /** The telephone number */
  telephone: Scalars['String'];
  /** The customer's Value-added tax (VAT) number (for corporate customers) */
  vat_id?: Maybe<Scalars['String']>;
};

/** Comment item details */
export type SalesCommentItem = {
  /** The text of the message */
  message: Scalars['String'];
  /** The timestamp of the comment */
  timestamp: Scalars['String'];
};

/** Credit memo details */
export type CreditMemo = {
  /** Comments on the credit memo */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** The unique ID for a `CreditMemo` object */
  id: Scalars['ID'];
  /** An array containing details about refunded items */
  items?: Maybe<Array<Maybe<CreditMemoItemInterface>>>;
  /** The sequential credit memo number */
  number: Scalars['String'];
  /** Contains details about the total refunded amount */
  total?: Maybe<CreditMemoTotal>;
};

/** Credit memo item details */
export type CreditMemoItemInterface = {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `CreditMemoItemInterface` object */
  id: Scalars['ID'];
  /** The order item the credit memo is applied to */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product, including selected options */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
};

/** Order item details */
export type OrderItemInterface = {
  /** The final discount information for the product */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The entered option for the base product, such as a logo or image */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The unique ID for a `OrderItemInterface` object */
  id: Scalars['ID'];
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price of the base product, including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>;
  /** URL key of the base product */
  product_url_key?: Maybe<Scalars['String']>;
  /** The number of canceled items */
  quantity_canceled?: Maybe<Scalars['Float']>;
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
  /** The number of units ordered for this item */
  quantity_ordered?: Maybe<Scalars['Float']>;
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
  /** The number of returned items */
  quantity_returned?: Maybe<Scalars['Float']>;
  /** The number of shipped items */
  quantity_shipped?: Maybe<Scalars['Float']>;
  /** The selected options for the base product, such as color or size */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item */
  status?: Maybe<Scalars['String']>;
};

/** Represents order item options like selected or entered */
export type OrderItemOption = {
  /** The name of the option */
  label: Scalars['String'];
  /** The value of the option */
  value: Scalars['String'];
};

/** Credit memo price details */
export type CreditMemoTotal = {
  /** An adjustment manually applied to the order */
  adjustment: Money;
  /** The final base grand total amount in the base currency */
  base_grand_total: Money;
  /** The applied discounts to the credit memo */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The final total amount, including shipping, discounts, and taxes */
  grand_total: Money;
  /** Contains details about the shipping and handling costs for the credit memo */
  shipping_handling?: Maybe<ShippingHandling>;
  /** The subtotal of the invoice, excluding shipping, discounts, and taxes */
  subtotal: Money;
  /** The credit memo tax details */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The shipping amount for the credit memo */
  total_shipping: Money;
  /** The amount of tax applied to the credit memo */
  total_tax: Money;
};

/** The Shipping handling details */
export type ShippingHandling = {
  /** The shipping amount, excluding tax */
  amount_excluding_tax?: Maybe<Money>;
  /** The shipping amount, including tax */
  amount_including_tax?: Maybe<Money>;
  /** The applied discounts to the shipping */
  discounts?: Maybe<Array<Maybe<ShippingDiscount>>>;
  /** Contains details about taxes applied for shipping */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The total amount for shipping */
  total_amount: Money;
};

/** Defines an individual shipping discount. This discount can be applied to shipping. */
export type ShippingDiscount = {
  /** The amount of the discount */
  amount: Money;
};

/** The tax item details */
export type TaxItem = {
  /** The amount of tax applied to the item */
  amount: Money;
  /** The rate used to calculate the tax */
  rate: Scalars['Float'];
  /** A title that describes the tax */
  title: Scalars['String'];
};

/** Invoice details */
export type Invoice = {
  /** Comments on the invoice */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** The unique ID for a `Invoice` object */
  id: Scalars['ID'];
  /** Invoiced product details */
  items?: Maybe<Array<Maybe<InvoiceItemInterface>>>;
  /** Sequential invoice number */
  number: Scalars['String'];
  /** Invoice total amount details */
  total?: Maybe<InvoiceTotal>;
};

/** Invoice item details */
export type InvoiceItemInterface = {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `InvoiceItemInterface` object */
  id: Scalars['ID'];
  /** Contains details about an individual order item */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
};

/** Contains price details from an invoice */
export type InvoiceTotal = {
  /** The final base grand total amount in the base currency */
  base_grand_total: Money;
  /** The applied discounts to the invoice */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The final total amount, including shipping, discounts, and taxes */
  grand_total: Money;
  /** Contains details about the shipping and handling costs for the invoice */
  shipping_handling?: Maybe<ShippingHandling>;
  /** The subtotal of the invoice, excluding shipping, discounts, and taxes */
  subtotal: Money;
  /** The invoice tax details */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The shipping amount for the invoice */
  total_shipping: Money;
  /** The amount of tax applied to the invoice */
  total_tax: Money;
};

/** Contains details about the payment method used to pay for the order */
export type OrderPaymentMethod = {
  /** Additional data per payment method type */
  additional_data?: Maybe<Array<Maybe<KeyValue>>>;
  /** The label that describes the payment method */
  name: Scalars['String'];
  /** The payment method code that indicates how the order was paid for */
  type: Scalars['String'];
};

/** The key-value type */
export type KeyValue = {
  /** The name part of the name/value pair */
  name?: Maybe<Scalars['String']>;
  /** The value part of the name/value pair */
  value?: Maybe<Scalars['String']>;
};

/** Order shipment details */
export type OrderShipment = {
  /** Comments added to the shipment */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** The unique ID for a `OrderShipment` object */
  id: Scalars['ID'];
  /** Contains items included in the shipment */
  items?: Maybe<Array<Maybe<ShipmentItemInterface>>>;
  /** The sequential credit shipment number */
  number: Scalars['String'];
  /** Contains shipment tracking details */
  tracking?: Maybe<Array<Maybe<ShipmentTracking>>>;
};

/** Order shipment item details */
export type ShipmentItemInterface = {
  /** The unique ID for a `ShipmentItemInterface` object */
  id: Scalars['ID'];
  /** Associated order item */
  order_item?: Maybe<OrderItemInterface>;
  /** Name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** Sale price for the base product */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** Number of shipped items */
  quantity_shipped: Scalars['Float'];
};

/** Order shipment tracking details */
export type ShipmentTracking = {
  /** The shipping carrier for the order delivery */
  carrier: Scalars['String'];
  /** The tracking number of the order shipment */
  number?: Maybe<Scalars['String']>;
  /** The shipment tracking title */
  title: Scalars['String'];
};

/** Contains details about the sales total amounts used to calculate the final price */
export type OrderTotal = {
  /** The final base grand total amount in the base currency */
  base_grand_total: Money;
  /** The applied discounts to the order */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The final total amount, including shipping, discounts, and taxes */
  grand_total: Money;
  /** Contains details about the shipping and handling costs for the order */
  shipping_handling?: Maybe<ShippingHandling>;
  /** The subtotal of the order, excluding shipping, discounts, and taxes */
  subtotal: Money;
  /** The order tax details */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The shipping amount for the order */
  total_shipping: Money;
  /** The amount of tax applied to the order */
  total_tax: Money;
};

export type Wishlist = {
  /** The unique ID for a `Wishlist` object */
  id?: Maybe<Scalars['ID']>;
  /** @deprecated Use field `items_v2` from type `Wishlist` instead */
  items?: Maybe<Array<Maybe<WishlistItem>>>;
  /** The number of items in the wish list */
  items_count?: Maybe<Scalars['Int']>;
  /** An array of items in the customer's wish list */
  items_v2?: Maybe<WishlistItems>;
  /** An encrypted code that Magento uses to link to the wish list */
  sharing_code?: Maybe<Scalars['String']>;
  /** The time of the last modification to the wish list */
  updated_at?: Maybe<Scalars['String']>;
};


export type Wishlistitems_v2Args = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};

export type WishlistItem = {
  /** The time when the customer added the item to the wish list */
  added_at?: Maybe<Scalars['String']>;
  /** The customer's comment about this item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItem` object */
  id?: Maybe<Scalars['Int']>;
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  qty?: Maybe<Scalars['Float']>;
};

export type WishlistItems = {
  /** A list of items in the wish list */
  items: Array<Maybe<WishlistItemInterface>>;
  /** Contains pagination metadata */
  page_info?: Maybe<SearchResultPageInfo>;
};

export type WishlistItemInterface = {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
};

export type SelectedCustomizableOption = {
  /** The unique ID for a `CustomizableRadioOption`, `CustomizableDropDownOption`, `CustomizableMultipleOption`, etc. of `CustomizableOptionInterface` objects */
  customizable_option_uid: Scalars['ID'];
  /** @deprecated Use SelectedCustomizableOption.customizable_option_uid instead */
  id: Scalars['Int'];
  is_required: Scalars['Boolean'];
  label: Scalars['String'];
  sort_order: Scalars['Int'];
  type: Scalars['String'];
  values: Array<Maybe<SelectedCustomizableOptionValue>>;
};

export type SelectedCustomizableOptionValue = {
  /** The unique ID for a `CustomizableMultipleValue`, `CustomizableRadioValue`, `CustomizableCheckboxValue`, `CustomizableDropDownValue`, etc. objects */
  customizable_option_value_uid: Scalars['ID'];
  /** @deprecated Use SelectedCustomizableOptionValue.customizable_option_value_uid instead */
  id: Scalars['Int'];
  label: Scalars['String'];
  price: CartItemSelectedOptionValuePrice;
  value: Scalars['String'];
};

export type CartItemSelectedOptionValuePrice = {
  type: PriceTypeEnum;
  units: Scalars['String'];
  value: Scalars['Float'];
};

/** This enumeration the price type. */
export type PriceTypeEnum =
  | 'FIXED'
  | 'PERCENT'
  | 'DYNAMIC';

export type CustomerDownloadableProducts = {
  /** List of purchased downloadable items */
  items?: Maybe<Array<Maybe<CustomerDownloadableProduct>>>;
};

export type CustomerDownloadableProduct = {
  date?: Maybe<Scalars['String']>;
  download_url?: Maybe<Scalars['String']>;
  order_increment_id?: Maybe<Scalars['String']>;
  remaining_downloads?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

export type CustomerPaymentTokens = {
  /** An array of payment tokens */
  items: Array<Maybe<PaymentToken>>;
};

/** The stored payment method available to the customer */
export type PaymentToken = {
  /** Stored account details */
  details?: Maybe<Scalars['String']>;
  /** The payment method code associated with the token */
  payment_method_code: Scalars['String'];
  /** The public hash of the token */
  public_hash: Scalars['String'];
  type: PaymentTokenTypeEnum;
};

/** The list of available payment token types */
export type PaymentTokenTypeEnum =
  | 'card'
  | 'account';

export type IsConfigSettingEnabledOutput = {
  /** Is config setting enabled */
  is_enabled?: Maybe<Scalars['Boolean']>;
};

/** The required input to request the secure URL for Payments Pro Hosted Solution payment. */
export type HostedProUrlInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String'];
};

/** Contains secure URL used for Payments Pro Hosted Solution payment method. */
export type HostedProUrl = {
  /** Secure Url generated by PayPal */
  secure_form_url?: Maybe<Scalars['String']>;
};

/** Input required to fetch payment token information for Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkTokenInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String'];
};

/** Contains information used to generate PayPal iframe for transaction. Applies to Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkToken = {
  /** Mode for Payflow transaction */
  mode?: Maybe<PayflowLinkMode>;
  /** PayPal URL used for requesting Payflow form */
  paypal_url?: Maybe<Scalars['String']>;
  /** Secure token generated by PayPal */
  secure_token?: Maybe<Scalars['String']>;
  /** Secure token ID generated by PayPal */
  secure_token_id?: Maybe<Scalars['String']>;
};

/** Mode for payment: TEST or LIVE. Applies to Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkMode =
  | 'TEST'
  | 'LIVE';

export type IsEmailAvailableOutput = {
  /** Is email availabel value */
  is_email_available?: Maybe<Scalars['Boolean']>;
};

export type MolliePaymentMethodsInput = {
  amount: Scalars['Float'];
  currency: Scalars['String'];
};

export type MolliePaymentMethodsOutput = {
  methods?: Maybe<Array<Maybe<MolliePaymentMethod>>>;
};

export type MolliePaymentMethod = {
  code?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** Contains details about the requested order */
export type Order = {
  /** An array containing the items purchased in this order */
  items?: Maybe<Array<Maybe<Scalars['String']>>>;
  mollie_payment_token?: Maybe<Scalars['String']>;
  mollie_redirect_url?: Maybe<Scalars['String']>;
  /** @deprecated The order_id field is deprecated, use order_number instead. */
  order_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `Order` object. */
  order_number: Scalars['String'];
  /** Contains the calculated total for this order */
  total?: Maybe<Scalars['String']>;
};

/** AreaInput defines the parameters which will be used for filter by specified location. */
export type AreaInput = {
  /** The radius for the search in KM. */
  radius: Scalars['Int'];
  /** The country code where search must be performed. Required parameter together with region, city or postcode. */
  search_term: Scalars['String'];
};

/** PickupLocationFilterInput defines the list of attributes and filters for the search. */
export type PickupLocationFilterInput = {
  /** Filter by city. */
  city?: InputMaybe<FilterTypeInput>;
  /** Filter by country. */
  country_id?: InputMaybe<FilterTypeInput>;
  /** Filter by pickup location name. */
  name?: InputMaybe<FilterTypeInput>;
  /** Filter by pickup location code. */
  pickup_location_code?: InputMaybe<FilterTypeInput>;
  /** Filter by postcode. */
  postcode?: InputMaybe<FilterTypeInput>;
  /** Filter by region. */
  region?: InputMaybe<FilterTypeInput>;
  /** Filter by region id. */
  region_id?: InputMaybe<FilterTypeInput>;
  /** Filter by street. */
  street?: InputMaybe<FilterTypeInput>;
};

/** FilterTypeInput specifies which action will be performed in a query  */
export type FilterTypeInput = {
  /** Equals */
  eq?: InputMaybe<Scalars['String']>;
  finset?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** From. Must be used with 'to' */
  from?: InputMaybe<Scalars['String']>;
  /** Greater than */
  gt?: InputMaybe<Scalars['String']>;
  /** Greater than or equal to */
  gteq?: InputMaybe<Scalars['String']>;
  /** In. The value can contain a set of comma-separated values */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Like. The specified value can contain % (percent signs) to allow matching of 0 or more characters */
  like?: InputMaybe<Scalars['String']>;
  /** Less than */
  lt?: InputMaybe<Scalars['String']>;
  /** Less than or equal to */
  lteq?: InputMaybe<Scalars['String']>;
  /** More than or equal to */
  moreq?: InputMaybe<Scalars['String']>;
  /** Not equal to */
  neq?: InputMaybe<Scalars['String']>;
  /** Not in. The value can contain a set of comma-separated values */
  nin?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Not null */
  notnull?: InputMaybe<Scalars['String']>;
  /** Is null */
  null?: InputMaybe<Scalars['String']>;
  /** To. Must be used with 'from' */
  to?: InputMaybe<Scalars['String']>;
};

/** PickupLocationSortInput specifies attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export type PickupLocationSortInput = {
  /** City where pickup location is placed. */
  city?: InputMaybe<SortEnum>;
  /** Name of the contact person. */
  contact_name?: InputMaybe<SortEnum>;
  /** Id of the country in two letters. */
  country_id?: InputMaybe<SortEnum>;
  /** Description of the pickup location. */
  description?: InputMaybe<SortEnum>;
  /** Distance to the address, requested by distance filter. Applicable only with distance filter. If distance sort order is present, all other sort orders will be ignored. */
  distance?: InputMaybe<SortEnum>;
  /** Contact email of the pickup location. */
  email?: InputMaybe<SortEnum>;
  /** Contact fax of the pickup location. */
  fax?: InputMaybe<SortEnum>;
  /** Geographic latitude where pickup location is placed. */
  latitude?: InputMaybe<SortEnum>;
  /** Geographic longitude where pickup location is placed. */
  longitude?: InputMaybe<SortEnum>;
  /** The pickup location name. Customer use this to identify the pickup location. */
  name?: InputMaybe<SortEnum>;
  /** Contact phone number of the pickup location. */
  phone?: InputMaybe<SortEnum>;
  /** A code assigned to pickup location to identify the source. */
  pickup_location_code?: InputMaybe<SortEnum>;
  /** Postcode where pickup location is placed. */
  postcode?: InputMaybe<SortEnum>;
  /** Name of the region. */
  region?: InputMaybe<SortEnum>;
  /** Id of the region. */
  region_id?: InputMaybe<SortEnum>;
  /** Street where pickup location is placed. */
  street?: InputMaybe<SortEnum>;
};

/** Product Information used for Pickup Locations search. */
export type ProductInfoInput = {
  /** Product SKU. */
  sku: Scalars['String'];
};

/** Top level object returned in a pickup locations search. */
export type PickupLocations = {
  /** An array of pickup locations that match the specific search request. */
  items?: Maybe<Array<Maybe<PickupLocation>>>;
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The number of products returned. */
  total_count?: Maybe<Scalars['Int']>;
};

/** Defines Pickup Location information. */
export type PickupLocation = {
  city?: Maybe<Scalars['String']>;
  contact_name?: Maybe<Scalars['String']>;
  country_id?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  pickup_location_code?: Maybe<Scalars['String']>;
  postcode?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  region_id?: Maybe<Scalars['Int']>;
  street?: Maybe<Scalars['String']>;
};

export type ProductReviewRatingsMetadata = {
  /** List of product reviews sorted by position */
  items: Array<Maybe<ProductReviewRatingMetadata>>;
};

export type ProductReviewRatingMetadata = {
  /** An encoded rating ID. */
  id: Scalars['String'];
  /** The label assigned to an aspect of a product that is being rated, such as quality or price */
  name: Scalars['String'];
  /** List of product review ratings sorted by position. */
  values: Array<Maybe<ProductReviewRatingValueMetadata>>;
};

export type ProductReviewRatingValueMetadata = {
  /** A ratings scale, such as the number of stars awarded */
  value: Scalars['String'];
  /** An encoded rating value id. */
  value_id: Scalars['String'];
};

/** ProductAttributeFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type ProductAttributeFilterInput = {
  /** Attribute label: Activity */
  activity?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Category Gear */
  category_gear?: InputMaybe<FilterEqualTypeInput>;
  /** Deprecated: use `category_uid` to filter product by category id. */
  category_id?: InputMaybe<FilterEqualTypeInput>;
  /** Filter product by the unique ID for a `CategoryInterface` object. */
  category_uid?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Climate */
  climate?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Collar */
  collar?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Color */
  color?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Colors */
  colors?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Compatible Phones */
  compatible_phones?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Debug: colors */
  debug_colors?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Debug: labels */
  debug_labels?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Debug: landmarks */
  debug_landmarks?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Description */
  description?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Dominant color */
  dominant_color?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Eco Collection */
  eco_collection?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Erin Recommends */
  erin_recommends?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Features */
  features_bags?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Format */
  format?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Gender */
  gender?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Material */
  material?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Product Name */
  name?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: New */
  new?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Pattern */
  pattern?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Performance Fabric */
  performance_fabric?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Price */
  price?: InputMaybe<FilterRangeTypeInput>;
  /** Attribute label: Art */
  print_art?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Holiday */
  print_holiday?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Search Labels */
  print_labels?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Search Landmarks */
  print_landmarks?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Landscape */
  print_landscape?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Mood */
  print_mood?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Type */
  print_type?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Sale */
  sale?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Short Description */
  short_description?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Size */
  size?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: SKU */
  sku?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Sleeve */
  sleeve?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Strap/Handle */
  strap_bags?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Style Bags */
  style_bags?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Style Bottom */
  style_bottom?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Style General */
  style_general?: InputMaybe<FilterEqualTypeInput>;
  /** The part of the URL that identifies the product */
  url_key?: InputMaybe<FilterEqualTypeInput>;
};

/** Defines a filter that matches a range of values, such as prices or dates. */
export type FilterRangeTypeInput = {
  /** The beginning of the range */
  from?: InputMaybe<Scalars['String']>;
  /** The end of the range */
  to?: InputMaybe<Scalars['String']>;
};

/** The Products object is the top-level object returned in a product search. */
export type Products = {
  /** Layered navigation aggregations. */
  aggregations?: Maybe<Array<Maybe<Aggregation>>>;
  /**
   * Layered navigation filters array.
   * @deprecated Use aggregations instead
   */
  filters?: Maybe<Array<Maybe<LayerFilter>>>;
  /** An array of products that match the specified search criteria. */
  items?: Maybe<Array<Maybe<ProductInterface>>>;
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** An object that includes the default sort field and all available sort fields. */
  sort_fields?: Maybe<SortFields>;
  /** The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  total_count?: Maybe<Scalars['Int']>;
};

/** A bucket that contains information for each filterable option (such as price, category `UID`, and custom attributes). */
export type Aggregation = {
  /** Attribute code of the aggregation group. */
  attribute_code: Scalars['String'];
  /** The number of options in the aggregation group. */
  count?: Maybe<Scalars['Int']>;
  /** The aggregation display name. */
  label?: Maybe<Scalars['String']>;
  /** Array of options for the aggregation. */
  options?: Maybe<Array<Maybe<AggregationOption>>>;
  /** The relative position of the attribute in a layered navigation block */
  position?: Maybe<Scalars['Int']>;
};

export type AggregationOption = AggregationOptionInterface & {
  /** The number of items that match the aggregation option. */
  count?: Maybe<Scalars['Int']>;
  /** Aggregation option display label. */
  label?: Maybe<Scalars['String']>;
  /** The internal ID that represents the value of the option. */
  value: Scalars['String'];
};

export type AggregationOptionInterface = {
  /** The number of items that match the aggregation option. */
  count?: Maybe<Scalars['Int']>;
  /** Aggregation option display label. */
  label?: Maybe<Scalars['String']>;
  /** The internal ID that represents the value of the option. */
  value: Scalars['String'];
};

export type LayerFilter = {
  /**
   * Array of filter items.
   * @deprecated Use Aggregation.options instead.
   */
  filter_items?: Maybe<Array<Maybe<LayerFilterItemInterface>>>;
  /**
   * Count of filter items in filter group.
   * @deprecated Use Aggregation.count instead.
   */
  filter_items_count?: Maybe<Scalars['Int']>;
  /**
   * Layered navigation filter name.
   * @deprecated Use Aggregation.label instead.
   */
  name?: Maybe<Scalars['String']>;
  /**
   * Request variable name for filter query.
   * @deprecated Use Aggregation.attribute_code instead.
   */
  request_var?: Maybe<Scalars['String']>;
};

export type LayerFilterItemInterface = {
  /**
   * Count of items by filter.
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: Maybe<Scalars['Int']>;
  /**
   * Filter label.
   * @deprecated Use AggregationOption.label instead.
   */
  label?: Maybe<Scalars['String']>;
  /**
   * Value for filter request variable to be used in query.
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: Maybe<Scalars['String']>;
};

/** SortFields contains a default value for sort fields and all available sort fields. */
export type SortFields = {
  /** Default value of sort fields. */
  default?: Maybe<Scalars['String']>;
  /** Available sort fields. */
  options?: Maybe<Array<Maybe<SortField>>>;
};

export type SortField = {
  /** Label of sort field. */
  label?: Maybe<Scalars['String']>;
  /** Attribute code of sort field. */
  value?: Maybe<Scalars['String']>;
};

export type TrackingData = {
  /** Is Page Tracking enabled */
  page_tracking_enabled?: Maybe<Scalars['Boolean']>;
  /** dotdigital region prefix */
  region_prefix?: Maybe<Scalars['String']>;
  /** Is ROI Tracking enabled */
  roi_tracking_enabled?: Maybe<Scalars['Boolean']>;
  /** Web Behaviour Tracking profile ID */
  wbt_profile_id?: Maybe<Scalars['String']>;
};

/** EntityUrl is an output object containing the `id`, `relative_url`, and `type` attributes */
export type EntityUrl = {
  /** @deprecated The canonical_url field is deprecated, use relative_url instead. */
  canonical_url?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface`, `CategoryInterface`, `CmsPage`, etc. object associated with the specified url. This could be a product UID, category UID, or cms page UID. */
  entity_uid?: Maybe<Scalars['ID']>;
  /**
   * The ID assigned to the object associated with the specified url. This could be a product ID, category ID, or page ID.
   * @deprecated Use `entity_uid` instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** 301 or 302 HTTP code for url permanent or temporary redirect or 0 for the 200 no redirect */
  redirectCode?: Maybe<Scalars['Int']>;
  /** The internal relative URL. If the specified  url is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
};

/** Deprecated: `Wishlist` type should be used instead */
export type WishlistOutput = {
  /**
   * An array of items in the customer's wish list
   * @deprecated Use field `items` from type `Wishlist` instead
   */
  items?: Maybe<Array<Maybe<WishlistItem>>>;
  /**
   * The number of items in the wish list
   * @deprecated Use field `items_count` from type `Wishlist` instead
   */
  items_count?: Maybe<Scalars['Int']>;
  /**
   * When multiple wish lists are enabled, the name the customer assigns to the wishlist
   * @deprecated This field is related to Commerce functionality and is always `null` in Open Source edition
   */
  name?: Maybe<Scalars['String']>;
  /**
   * An encrypted code that Magento uses to link to the wish list
   * @deprecated Use field `sharing_code` from type `Wishlist` instead
   */
  sharing_code?: Maybe<Scalars['String']>;
  /**
   * The time of the last modification to the wish list
   * @deprecated Use field `updated_at` from type `Wishlist` instead
   */
  updated_at?: Maybe<Scalars['String']>;
};

export type AddBundleProductsToCartInput = {
  cart_id: Scalars['String'];
  cart_items: Array<InputMaybe<BundleProductCartItemInput>>;
};

export type BundleProductCartItemInput = {
  bundle_options: Array<InputMaybe<BundleOptionInput>>;
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  data: CartItemInput;
};

export type BundleOptionInput = {
  id: Scalars['Int'];
  quantity: Scalars['Float'];
  value: Array<InputMaybe<Scalars['String']>>;
};

export type CustomizableOptionInput = {
  /** The customizable option id of the product */
  id?: InputMaybe<Scalars['Int']>;
  /** The string value of the option */
  value_string: Scalars['String'];
};

export type CartItemInput = {
  /** An array of entered options for the base product, such as personalization text */
  entered_options?: InputMaybe<Array<InputMaybe<EnteredOptionInput>>>;
  /** For child products, the SKU of its parent product */
  parent_sku?: InputMaybe<Scalars['String']>;
  quantity: Scalars['Float'];
  /** The selected options for the base product, such as color or size with  unique ID for a `CustomizableRadioOption`, `CustomizableDropDownOption`, `ConfigurableProductOptionsValues`, etc. objects */
  selected_options?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  sku: Scalars['String'];
};

/** Defines a customer-entered option */
export type EnteredOptionInput = {
  /** The unique ID for a `CustomizableFieldOption`, `CustomizableFileOption`, `CustomizableAreaOption`, etc. of `CustomizableOptionInterface` objects */
  uid: Scalars['ID'];
  /** Text the customer entered */
  value: Scalars['String'];
};

export type AddBundleProductsToCartOutput = {
  cart: Cart;
};

export type AddConfigurableProductsToCartInput = {
  cart_id: Scalars['String'];
  cart_items: Array<InputMaybe<ConfigurableProductCartItemInput>>;
};

export type ConfigurableProductCartItemInput = {
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  data: CartItemInput;
  /** Configurable product SKU. */
  parent_sku?: InputMaybe<Scalars['String']>;
  /** Deprecated. Use CartItemInput.sku instead. */
  variant_sku?: InputMaybe<Scalars['String']>;
};

export type AddConfigurableProductsToCartOutput = {
  cart: Cart;
};

export type AddDownloadableProductsToCartInput = {
  cart_id: Scalars['String'];
  cart_items: Array<InputMaybe<DownloadableProductCartItemInput>>;
};

export type DownloadableProductCartItemInput = {
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  data: CartItemInput;
  downloadable_product_links?: InputMaybe<Array<InputMaybe<DownloadableProductLinksInput>>>;
};

export type DownloadableProductLinksInput = {
  link_id: Scalars['Int'];
};

export type AddDownloadableProductsToCartOutput = {
  cart: Cart;
};

export type AddProductsToCartOutput = {
  /** The cart after products have been added */
  cart: Cart;
  /** An error encountered while adding an item to the cart. */
  user_errors: Array<Maybe<CartUserInputError>>;
};

/** An error encountered while adding an item to the the cart. */
export type CartUserInputError = {
  /** Cart-specific error code */
  code: CartUserInputErrorType;
  /** A localized error message */
  message: Scalars['String'];
};

export type CartUserInputErrorType =
  | 'PRODUCT_NOT_FOUND'
  | 'NOT_SALABLE'
  | 'INSUFFICIENT_STOCK'
  | 'UNDEFINED';

export type AddProductsToCompareListInput = {
  /** An array of product IDs to add to the compare list */
  products: Array<InputMaybe<Scalars['ID']>>;
  /** The unique identifier of the compare list to modify */
  uid: Scalars['ID'];
};

/** Defines the items to add to a wish list */
export type WishlistItemInput = {
  /** An array of options that the customer entered */
  entered_options?: InputMaybe<Array<InputMaybe<EnteredOptionInput>>>;
  /** For complex product types, the SKU of the parent product */
  parent_sku?: InputMaybe<Scalars['String']>;
  /** The amount or number of items to add */
  quantity: Scalars['Float'];
  /** An array of strings corresponding to options the customer selected */
  selected_options?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** The SKU of the product to add. For complex product types, specify the child product SKU */
  sku: Scalars['String'];
};

/** Contains the customer's wish list and any errors encountered */
export type AddProductsToWishlistOutput = {
  /** An array of errors encountered while adding products to a wish list */
  user_errors: Array<Maybe<WishListUserInputError>>;
  /** Contains the wish list with all items that were successfully added */
  wishlist: Wishlist;
};

/** An error encountered while performing operations with WishList. */
export type WishListUserInputError = {
  /** Wishlist-specific error code */
  code: WishListUserInputErrorType;
  /** A localized error message */
  message: Scalars['String'];
};

export type WishListUserInputErrorType =
  | 'PRODUCT_NOT_FOUND'
  | 'UNDEFINED';

export type AddSimpleProductsToCartInput = {
  cart_id: Scalars['String'];
  cart_items: Array<InputMaybe<SimpleProductCartItemInput>>;
};

export type SimpleProductCartItemInput = {
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  data: CartItemInput;
};

export type AddSimpleProductsToCartOutput = {
  cart: Cart;
};

export type AddVirtualProductsToCartInput = {
  cart_id: Scalars['String'];
  cart_items: Array<InputMaybe<VirtualProductCartItemInput>>;
};

export type VirtualProductCartItemInput = {
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  data: CartItemInput;
};

export type AddVirtualProductsToCartOutput = {
  cart: Cart;
};

export type AddWishlistItemsToCartOutput = {
  /** An array of errors encountered while adding products to the customer's cart */
  add_wishlist_items_to_cart_user_errors: Array<Maybe<WishlistCartUserInputError>>;
  /** Indicates whether the attempt to add items to the customer's cart was successful */
  status: Scalars['Boolean'];
  /** Contains the wish list with all items that were successfully added */
  wishlist: Wishlist;
};

export type WishlistCartUserInputError = {
  /** An error code that describes the error encountered */
  code: WishlistCartUserInputErrorType;
  /** A localized error message */
  message: Scalars['String'];
  /** The unique ID of the `Wishlist` object containing an error */
  wishlistId: Scalars['ID'];
  /** The unique ID of the wish list item containing an error */
  wishlistItemId: Scalars['ID'];
};

export type WishlistCartUserInputErrorType =
  | 'PRODUCT_NOT_FOUND'
  | 'NOT_SALABLE'
  | 'INSUFFICIENT_STOCK'
  | 'UNDEFINED';

export type ApplyCouponToCartInput = {
  cart_id: Scalars['String'];
  coupon_code: Scalars['String'];
};

export type ApplyCouponToCartOutput = {
  cart: Cart;
};

export type AssignCompareListToCustomerOutput = {
  /** The contents of the customer's compare list */
  compare_list?: Maybe<CompareList>;
  result: Scalars['Boolean'];
};

export type CreateCompareListInput = {
  /** An array of product IDs to add to the compare list */
  products?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

export type CustomerInput = {
  /** The customer's date of birth */
  date_of_birth?: InputMaybe<Scalars['String']>;
  /** Deprecated: Use `date_of_birth` instead */
  dob?: InputMaybe<Scalars['String']>;
  /** The customer's email address. Required for customer creation */
  email?: InputMaybe<Scalars['String']>;
  /** The customer's first name */
  firstname?: InputMaybe<Scalars['String']>;
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: InputMaybe<Scalars['Int']>;
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: InputMaybe<Scalars['Boolean']>;
  /** The customer's family name */
  lastname?: InputMaybe<Scalars['String']>;
  /** The customer's middle name */
  middlename?: InputMaybe<Scalars['String']>;
  /** The customer's password */
  password?: InputMaybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']>;
  /** A value such as Sr., Jr., or III */
  suffix?: InputMaybe<Scalars['String']>;
  /** The customer's Tax/VAT number (for corporate customers) */
  taxvat?: InputMaybe<Scalars['String']>;
};

export type CustomerOutput = {
  customer: Customer;
};

export type CustomerAddressInput = {
  /** The city or town */
  city?: InputMaybe<Scalars['String']>;
  /** The customer's company */
  company?: InputMaybe<Scalars['String']>;
  /** The customer's country */
  country_code?: InputMaybe<CountryCodeEnum>;
  /** Deprecated: use `country_code` instead. */
  country_id?: InputMaybe<CountryCodeEnum>;
  /** Deprecated: Custom attributes should not be put into container. */
  custom_attributes?: InputMaybe<Array<InputMaybe<CustomerAddressAttributeInput>>>;
  /** Indicates whether the address is the default billing address */
  default_billing?: InputMaybe<Scalars['Boolean']>;
  /** Indicates whether the address is the default shipping address */
  default_shipping?: InputMaybe<Scalars['Boolean']>;
  /** The fax number */
  fax?: InputMaybe<Scalars['String']>;
  /** The first name of the person associated with the shipping/billing address */
  firstname?: InputMaybe<Scalars['String']>;
  /** The family name of the person associated with the shipping/billing address */
  lastname?: InputMaybe<Scalars['String']>;
  /** The middle name of the person associated with the shipping/billing address */
  middlename?: InputMaybe<Scalars['String']>;
  /** The customer's ZIP or postal code */
  postcode?: InputMaybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']>;
  /** An object containing the region name, region code, and region ID */
  region?: InputMaybe<CustomerAddressRegionInput>;
  /** An array of strings that define the street number and name */
  street?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** A value such as Sr., Jr., or III */
  suffix?: InputMaybe<Scalars['String']>;
  /** The telephone number */
  telephone?: InputMaybe<Scalars['String']>;
  /** The customer's Tax/VAT number (for corporate customers) */
  vat_id?: InputMaybe<Scalars['String']>;
};

export type CustomerAddressAttributeInput = {
  /** Attribute code */
  attribute_code: Scalars['String'];
  /** Attribute value */
  value: Scalars['String'];
};

/** CustomerAddressRegionInput defines the customer's state or province */
export type CustomerAddressRegionInput = {
  /** The state or province name */
  region?: InputMaybe<Scalars['String']>;
  /** The address region code */
  region_code?: InputMaybe<Scalars['String']>;
  /** The unique ID for a pre-defined region */
  region_id?: InputMaybe<Scalars['Int']>;
};

export type CustomerCreateInput = {
  /** Indicates whether the customer has enabled remote shopping assistance */
  allow_remote_shopping_assistance?: InputMaybe<Scalars['Boolean']>;
  /** The customer's date of birth */
  date_of_birth?: InputMaybe<Scalars['String']>;
  /** Deprecated: Use `date_of_birth` instead */
  dob?: InputMaybe<Scalars['String']>;
  /** The customer's email address. Required for customer creation */
  email: Scalars['String'];
  /** The customer's first name */
  firstname: Scalars['String'];
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: InputMaybe<Scalars['Int']>;
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: InputMaybe<Scalars['Boolean']>;
  /** The customer's family name */
  lastname: Scalars['String'];
  /** The customer's middle name */
  middlename?: InputMaybe<Scalars['String']>;
  /** The customer's password */
  password?: InputMaybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']>;
  /** A value such as Sr., Jr., or III */
  suffix?: InputMaybe<Scalars['String']>;
  /** The customer's Tax/VAT number (for corporate customers) */
  taxvat?: InputMaybe<Scalars['String']>;
};

export type createEmptyCartInput = {
  cart_id?: InputMaybe<Scalars['String']>;
};

export type createKlarnaPaymentsSessionInput = {
  cart_id: Scalars['String'];
};

export type createKlarnaPaymentsSessionOutput = {
  /** The payment method client token */
  client_token?: Maybe<Scalars['String']>;
  /** The payment method categories */
  payment_method_categories?: Maybe<Array<Maybe<Categories>>>;
};

export type Categories = {
  /** The payment method assets */
  asset_urls?: Maybe<Array<Maybe<Assets>>>;
  /** The payment method identifier */
  identifier: Scalars['String'];
  /** The payment method name */
  name: Scalars['String'];
};

export type Assets = {
  /** The payment method logo url (descriptive) */
  descriptive?: Maybe<Scalars['String']>;
  /** The payment method logo url (standard) */
  standard?: Maybe<Scalars['String']>;
};

export type MollieTransactionInput = {
  issuer?: InputMaybe<Scalars['String']>;
  payment_token: Scalars['String'];
};

export type MollieTransactionOutput = {
  checkout_url?: Maybe<Scalars['String']>;
};

/** Input required to fetch payment token information for Payflow Pro and Payments Pro payment methods. */
export type PayflowProTokenInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String'];
  /** A set of relative URLs that PayPal uses for callback. */
  urls: PayflowProUrlInput;
};

/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payflow Pro and Payment Pro payment methods. */
export type PayflowProUrlInput = {
  /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String'];
  /** The relative URL of the transaction error page that PayPal will redirect to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html. */
  error_url: Scalars['String'];
  /** The relative URL of the final confirmation page that PayPal will redirect to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String'];
};

/** Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods. */
export type CreatePayflowProTokenOutput = {
  response_message: Scalars['String'];
  result: Scalars['Int'];
  result_code: Scalars['Int'];
  secure_token: Scalars['String'];
  secure_token_id: Scalars['String'];
};

/** Defines the attributes required to receive a payment token for Express Checkout and Payments Standard payment methods. */
export type PaypalExpressTokenInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String'];
  /** Payment method code */
  code: Scalars['String'];
  /** Indicates whether the buyer selected the quick checkout button. The default value is false */
  express_button?: InputMaybe<Scalars['Boolean']>;
  /** A set of relative URLs that PayPal uses in response to various actions during the authorization process */
  urls: PaypalExpressUrlsInput;
  /** Indicates whether the buyer clicked the PayPal credit button. The default value is false */
  use_paypal_credit?: InputMaybe<Scalars['Boolean']>;
};

/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Express Checkout and Payments Standard payment methods. */
export type PaypalExpressUrlsInput = {
  /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String'];
  /** The relative URL of the page that PayPal will redirect to when the payment has been put on hold for additional review. This condition mostly applies to ACH transactions, and is not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success_pending.html, the relative URL is paypal/action/success_pending.html.  */
  pending_url?: InputMaybe<Scalars['String']>;
  /** The relative URL of the final confirmation page that PayPal will redirect to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String'];
  /** The relative URL of the order confirmation page that PayPal will redirect to when the payment is successful and additional confirmation is not needed. Not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success.html, the relative URL is paypal/action/success.html. */
  success_url?: InputMaybe<Scalars['String']>;
};

/** Contains the token returned by PayPal and a set of URLs that allow the buyer to authorize payment and adjust checkout details. Applies to Express Checkout and Payments Standard payment methods. */
export type PaypalExpressTokenOutput = {
  /** A set of URLs that allow the buyer to authorize payment and adjust checkout details */
  paypal_urls?: Maybe<PaypalExpressUrlList>;
  /** The token returned by PayPal */
  token?: Maybe<Scalars['String']>;
};

/** A set of URLs that allow the buyer to authorize payment and adjust checkout details for Express Checkout and Payments Standard transactions. */
export type PaypalExpressUrlList = {
  /** The PayPal URL that allows the buyer to edit their checkout details */
  edit?: Maybe<Scalars['String']>;
  /** The URL to the PayPal login page */
  start?: Maybe<Scalars['String']>;
};

export type CreateProductReviewInput = {
  /** The customer's nickname. Defaults to the customer name, if logged in */
  nickname: Scalars['String'];
  /** Ratings details by category. e.g price: 5, quality: 4 etc */
  ratings: Array<InputMaybe<ProductReviewRatingInput>>;
  /** The SKU of the reviewed product */
  sku: Scalars['String'];
  /** The summary (title) of the review */
  summary: Scalars['String'];
  /** The review text. */
  text: Scalars['String'];
};

export type ProductReviewRatingInput = {
  /** An encoded rating ID. */
  id: Scalars['String'];
  /** An encoded rating value id. */
  value_id: Scalars['String'];
};

export type CreateProductReviewOutput = {
  /** Contains the completed product review */
  review: ProductReview;
};

export type DeleteCompareListOutput = {
  /** Indicates whether the compare list was successfully deleted */
  result: Scalars['Boolean'];
};

export type DeletePaymentTokenOutput = {
  customerPaymentTokens?: Maybe<CustomerPaymentTokens>;
  result: Scalars['Boolean'];
};

export type CustomerToken = {
  /** The customer token */
  token?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['String']>;
  valid?: Maybe<Scalars['Boolean']>;
};

export type GenerateCustomerTokenAsAdminInput = {
  /** The email address of the customer requesting remote shopping assistance */
  customer_email: Scalars['String'];
};

export type GenerateCustomerTokenAsAdminOutput = {
  /** The generated customer token */
  customer_token: Scalars['String'];
};

/** Input required to complete payment. Applies to Payflow Pro and Payments Pro payment methods. */
export type PayflowProResponseInput = {
  cart_id: Scalars['String'];
  paypal_payload: Scalars['String'];
};

export type PayflowProResponseOutput = {
  cart: Cart;
};

export type MollieProcessTransactionInput = {
  /** The payment token returned from the PlaceOrder call/added to the return URL */
  payment_token: Scalars['String'];
};

export type MollieProcessTransactionOutput = {
  /** The cart is only available when the payment status is failed, canceled or expired. */
  cart?: Maybe<Cart>;
  paymentStatus?: Maybe<PaymentStatusEnum>;
};

export type PaymentStatusEnum =
  | 'CREATED'
  | 'PAID'
  | 'AUTHORIZED'
  | 'CANCELED'
  | 'SHIPPING'
  | 'COMPLETED'
  | 'EXPIRED'
  | 'PENDING'
  | 'REFUNDED'
  | 'ERROR'
  | 'FAILED'
  | 'OPEN';

export type MollieResetCartInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String'];
};

export type MollieResetCartOutput = {
  cart: Cart;
};

export type PlaceOrderInput = {
  cart_id: Scalars['String'];
  /** Optionally send a URL where the visitor is returned after completing the Mollie order */
  mollie_return_url?: InputMaybe<Scalars['String']>;
};

export type PlaceOrderOutput = {
  order: Order;
};

export type RemoveCouponFromCartInput = {
  cart_id: Scalars['String'];
};

export type RemoveCouponFromCartOutput = {
  cart?: Maybe<Cart>;
};

export type RemoveItemFromCartInput = {
  cart_id: Scalars['String'];
  /** Deprecated. Use `cart_item_uid` instead. */
  cart_item_id?: InputMaybe<Scalars['Int']>;
  /** Required field. The unique ID for a `CartItemInterface` object */
  cart_item_uid?: InputMaybe<Scalars['ID']>;
};

export type RemoveItemFromCartOutput = {
  cart: Cart;
};

export type RemoveProductsFromCompareListInput = {
  /** An array of product IDs to remove from the compare list */
  products: Array<InputMaybe<Scalars['ID']>>;
  /** The unique identifier of the compare list to modify */
  uid: Scalars['ID'];
};

/** Contains the customer's wish list and any errors encountered */
export type RemoveProductsFromWishlistOutput = {
  /** An array of errors encountered while deleting products from a wish list */
  user_errors: Array<Maybe<WishListUserInputError>>;
  /** Contains the wish list with after items were successfully deleted */
  wishlist: Wishlist;
};

export type ReorderItemsOutput = {
  /** Contains detailed information about the customer's cart. */
  cart: Cart;
  /** An array of reordering errors. */
  userInputErrors: Array<Maybe<CheckoutUserInputError>>;
};

/** An error encountered while adding an item the the cart. */
export type CheckoutUserInputError = {
  /** Checkout-specific error code */
  code: CheckoutUserInputErrorCodes;
  /** Localized error message */
  message: Scalars['String'];
  /** Path to the input field that caused an error. See the GraphQL specification about path errors for details: http://spec.graphql.org/draft/#sec-Errors */
  path: Array<Maybe<Scalars['String']>>;
};

export type CheckoutUserInputErrorCodes =
  | 'REORDER_NOT_AVAILABLE'
  | 'PRODUCT_NOT_FOUND'
  | 'NOT_SALABLE'
  | 'INSUFFICIENT_STOCK'
  | 'UNDEFINED';

export type RevokeCustomerTokenOutput = {
  result: Scalars['Boolean'];
};

export type SendEmailToFriendInput = {
  product_id: Scalars['Int'];
  recipients: Array<InputMaybe<SendEmailToFriendRecipientInput>>;
  sender: SendEmailToFriendSenderInput;
};

export type SendEmailToFriendRecipientInput = {
  email: Scalars['String'];
  name: Scalars['String'];
};

export type SendEmailToFriendSenderInput = {
  email: Scalars['String'];
  message: Scalars['String'];
  name: Scalars['String'];
};

export type SendEmailToFriendOutput = {
  recipients?: Maybe<Array<Maybe<SendEmailToFriendRecipient>>>;
  sender?: Maybe<SendEmailToFriendSender>;
};

export type SendEmailToFriendRecipient = {
  email: Scalars['String'];
  name: Scalars['String'];
};

export type SendEmailToFriendSender = {
  email: Scalars['String'];
  message: Scalars['String'];
  name: Scalars['String'];
};

export type SetBillingAddressOnCartInput = {
  billing_address: BillingAddressInput;
  cart_id: Scalars['String'];
};

export type BillingAddressInput = {
  address?: InputMaybe<CartAddressInput>;
  customer_address_id?: InputMaybe<Scalars['Int']>;
  /** Set billing address same as shipping */
  same_as_shipping?: InputMaybe<Scalars['Boolean']>;
  /** Deprecated: use `same_as_shipping` field instead */
  use_for_shipping?: InputMaybe<Scalars['Boolean']>;
};

export type CartAddressInput = {
  city: Scalars['String'];
  company?: InputMaybe<Scalars['String']>;
  country_code: Scalars['String'];
  firstname: Scalars['String'];
  lastname: Scalars['String'];
  postcode?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<Scalars['String']>;
  region_id?: InputMaybe<Scalars['Int']>;
  /** Determines whether to save the address in the customer's address book. The default value is true */
  save_in_address_book?: InputMaybe<Scalars['Boolean']>;
  street: Array<InputMaybe<Scalars['String']>>;
  telephone: Scalars['String'];
};

export type SetBillingAddressOnCartOutput = {
  cart: Cart;
};

export type SetGuestEmailOnCartInput = {
  cart_id: Scalars['String'];
  email: Scalars['String'];
};

export type SetGuestEmailOnCartOutput = {
  cart: Cart;
};

export type SetPaymentMethodAndPlaceOrderInput = {
  cart_id: Scalars['String'];
  payment_method: PaymentMethodInput;
};

export type PaymentMethodInput = {
  braintree?: InputMaybe<BraintreeInput>;
  braintree_cc_vault?: InputMaybe<BraintreeCcVaultInput>;
  /** Payment method code */
  code: Scalars['String'];
  /** Required input for PayPal Hosted pro payments */
  hosted_pro?: InputMaybe<HostedProInput>;
  klarna?: InputMaybe<KlarnaInput>;
  /** The card token provided by Mollie Components */
  mollie_card_token?: InputMaybe<Scalars['String']>;
  /** Provided the issuer chosen by the end-user */
  mollie_selected_issuer?: InputMaybe<Scalars['String']>;
  /** Required input for Payflow Express Checkout payments */
  payflow_express?: InputMaybe<PayflowExpressInput>;
  /** Required input for PayPal Payflow Link and Payments Advanced payments */
  payflow_link?: InputMaybe<PayflowLinkInput>;
  /** Required input type for PayPal Payflow Pro and Payment Pro payments */
  payflowpro?: InputMaybe<PayflowProInput>;
  /** Required input type for PayPal Payflow Pro vault payments */
  payflowpro_cc_vault?: InputMaybe<VaultTokenInput>;
  /** Required input for Express Checkout and Payments Standard payments */
  paypal_express?: InputMaybe<PaypalExpressInput>;
  /** Purchase order number */
  purchase_order_number?: InputMaybe<Scalars['String']>;
};

export type BraintreeInput = {
  /** Contains a fingerprint provided by Braintree JS SDK and should be sent with sale transaction details to the Braintree payment gateway. Should be specified only in a case if Kount (advanced fraud protection) is enabled for Braintree payment integration. */
  device_data?: InputMaybe<Scalars['String']>;
  /** States whether an entered by a customer credit/debit card should be tokenized for later usage. Required only if Vault is enabled for Braintree payment integration. */
  is_active_payment_token_enabler: Scalars['Boolean'];
  /** The one-time payment token generated by Braintree payment gateway based on card details. Required field to make sale transaction. */
  payment_method_nonce: Scalars['String'];
};

export type BraintreeCcVaultInput = {
  device_data?: InputMaybe<Scalars['String']>;
  public_hash: Scalars['String'];
};

/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payments Pro Hosted Solution payment method. */
export type HostedProInput = {
  /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String'];
  /** The relative URL of the final confirmation page that PayPal will redirect to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String'];
};

export type KlarnaInput = {
  /** The authorization token must be provided to set any Klarna Payments method */
  authorization_token: Scalars['String'];
};

/** Required input for Payflow Express Checkout payments */
export type PayflowExpressInput = {
  /** The unique ID of the PayPal user */
  payer_id: Scalars['String'];
  /** The token returned by the createPaypalExpressToken mutation */
  token: Scalars['String'];
};

/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkInput = {
  /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String'];
  /** The relative URL of the transaction error page that PayPal will redirect to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html. */
  error_url: Scalars['String'];
  /** The relative URL of the order confirmation page that PayPal will redirect to when the payment is successful and additional confirmation is not needed. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String'];
};

/** Required input for Payflow Pro and Payments Pro payment methods. */
export type PayflowProInput = {
  /** Required input for credit card related information */
  cc_details: CreditCardDetailsInput;
  /** States whether details about the customer's credit/debit card should be tokenized for later usage. Required only if Vault is enabled for PayPal Payflow Pro payment integration. */
  is_active_payment_token_enabler?: InputMaybe<Scalars['Boolean']>;
};

/** Required fields for Payflow Pro and Payments Pro credit card payments */
export type CreditCardDetailsInput = {
  /** Credit card expiration month */
  cc_exp_month: Scalars['Int'];
  /** Credit card expiration year */
  cc_exp_year: Scalars['Int'];
  /** Last 4 digits of the credit card */
  cc_last_4: Scalars['Int'];
  /** Credit card type */
  cc_type: Scalars['String'];
};

/** Required input for payment methods with Vault support. */
export type VaultTokenInput = {
  /** The public hash of the payment token */
  public_hash: Scalars['String'];
};

/** Required input for Express Checkout and Payments Standard payments */
export type PaypalExpressInput = {
  /** The unique ID of the PayPal user */
  payer_id: Scalars['String'];
  /** The token returned by the createPaypalExpressToken mutation */
  token: Scalars['String'];
};

export type SetPaymentMethodOnCartInput = {
  cart_id: Scalars['String'];
  payment_method: PaymentMethodInput;
};

export type SetPaymentMethodOnCartOutput = {
  cart: Cart;
};

export type SetShippingAddressesOnCartInput = {
  cart_id: Scalars['String'];
  shipping_addresses: Array<InputMaybe<ShippingAddressInput>>;
};

export type ShippingAddressInput = {
  address?: InputMaybe<CartAddressInput>;
  customer_address_id?: InputMaybe<Scalars['Int']>;
  customer_notes?: InputMaybe<Scalars['String']>;
  /** The code of Pickup Location which will be used for In-Store Pickup. */
  pickup_location_code?: InputMaybe<Scalars['String']>;
};

export type SetShippingAddressesOnCartOutput = {
  cart: Cart;
};

export type SetShippingMethodsOnCartInput = {
  cart_id: Scalars['String'];
  shipping_methods: Array<InputMaybe<ShippingMethodInput>>;
};

export type ShippingMethodInput = {
  carrier_code: Scalars['String'];
  method_code: Scalars['String'];
};

export type SetShippingMethodsOnCartOutput = {
  cart: Cart;
};

export type SubscribeEmailToNewsletterOutput = {
  /** Returns the status of the subscription request */
  status?: Maybe<SubscriptionStatusesEnum>;
};

export type SubscriptionStatusesEnum =
  | 'NOT_ACTIVE'
  | 'SUBSCRIBED'
  | 'UNSUBSCRIBED'
  | 'UNCONFIRMED';

export type UpdateCartItemsInput = {
  cart_id: Scalars['String'];
  cart_items: Array<InputMaybe<CartItemUpdateInput>>;
};

export type CartItemUpdateInput = {
  /** Deprecated. Use `cart_item_uid` instead. */
  cart_item_id?: InputMaybe<Scalars['Int']>;
  /** The unique ID for a `CartItemInterface` object */
  cart_item_uid?: InputMaybe<Scalars['ID']>;
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** Gift message details for the cart item */
  gift_message?: InputMaybe<GiftMessageInput>;
  quantity?: InputMaybe<Scalars['Float']>;
};

/** Contains the text of a gift message, its sender, and recipient */
export type GiftMessageInput = {
  /** Sender name */
  from: Scalars['String'];
  /** Gift message text */
  message: Scalars['String'];
  /** Recipient name */
  to: Scalars['String'];
};

export type UpdateCartItemsOutput = {
  cart: Cart;
};

export type CustomerUpdateInput = {
  /** Indicates whether the customer has enabled remote shopping assistance */
  allow_remote_shopping_assistance?: InputMaybe<Scalars['Boolean']>;
  /** The customer's date of birth */
  date_of_birth?: InputMaybe<Scalars['String']>;
  /** Deprecated: Use `date_of_birth` instead */
  dob?: InputMaybe<Scalars['String']>;
  /** The customer's first name */
  firstname?: InputMaybe<Scalars['String']>;
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: InputMaybe<Scalars['Int']>;
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: InputMaybe<Scalars['Boolean']>;
  /** The customer's family name */
  lastname?: InputMaybe<Scalars['String']>;
  /** The customer's middle name */
  middlename?: InputMaybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']>;
  /** A value such as Sr., Jr., or III */
  suffix?: InputMaybe<Scalars['String']>;
  /** The customer's Tax/VAT number (for corporate customers) */
  taxvat?: InputMaybe<Scalars['String']>;
};

/** Defines updates to items in a wish list */
export type WishlistItemUpdateInput = {
  /** Customer-entered comments about the item */
  description?: InputMaybe<Scalars['String']>;
  /** An array of options that the customer entered */
  entered_options?: InputMaybe<Array<InputMaybe<EnteredOptionInput>>>;
  /** The new amount or number of this item */
  quantity?: InputMaybe<Scalars['Float']>;
  /** An array of strings corresponding to options the customer selected */
  selected_options?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** The unique ID for a `WishlistItemInterface` object */
  wishlist_item_id: Scalars['ID'];
};

/** Contains the customer's wish list and any errors encountered */
export type UpdateProductsInWishlistOutput = {
  /** An array of errors encountered while updating products in a wish list */
  user_errors: Array<Maybe<WishListUserInputError>>;
  /** Contains the wish list with all items that were successfully updated */
  wishlist: Wishlist;
};

/** This enumeration customizable date type. */
export type CustomizableDateTypeEnum =
  | 'DATE'
  | 'DATE_TIME'
  | 'TIME';

/** ProductLinks is an implementation of ProductLinksInterface. */
export type ProductLinks = ProductLinksInterface & {
  /** One of related, associated, upsell, or crosssell. */
  link_type?: Maybe<Scalars['String']>;
  /** The SKU of the linked product. */
  linked_product_sku?: Maybe<Scalars['String']>;
  /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
  linked_product_type?: Maybe<Scalars['String']>;
  /** The position within the list of product links. */
  position?: Maybe<Scalars['Int']>;
  /** The identifier of the linked product. */
  sku?: Maybe<Scalars['String']>;
};

/** PhysicalProductInterface contains attributes specific to tangible products. */
export type PhysicalProductInterface = {
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};

/** CustomizableAreaOption contains information about a text area that is defined as part of a customizable option. */
export type CustomizableAreaOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An object that defines a text area. */
  value?: Maybe<CustomizableAreaValue>;
};

/** The CustomizableOptionInterface contains basic information about a customizable option. It can be implemented by several types of configurable options. */
export type CustomizableOptionInterface = {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
};

/** CustomizableAreaValue defines the price and sku of a product whose page contains a customized text area. */
export type CustomizableAreaValue = {
  /** The maximum number of characters that can be entered for this customizable option. */
  max_characters?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableAreaValue` object. */
  uid: Scalars['ID'];
};

/** CustomizableDateOption contains information about a date picker that is defined as part of a customizable option. */
export type CustomizableDateOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An object that defines a date field in a customizable option. */
  value?: Maybe<CustomizableDateValue>;
};

/** CustomizableDateValue defines the price and sku of a product whose page contains a customized date picker. */
export type CustomizableDateValue = {
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** DATE, DATE_TIME or TIME */
  type?: Maybe<CustomizableDateTypeEnum>;
  /** The unique ID for a `CustomizableDateValue` object. */
  uid: Scalars['ID'];
};

/** CustomizableDropDownOption contains information about a drop down menu that is defined as part of a customizable option. */
export type CustomizableDropDownOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An array that defines the set of options for a drop down menu. */
  value?: Maybe<Array<Maybe<CustomizableDropDownValue>>>;
};

/** CustomizableDropDownValue defines the price and sku of a product whose page contains a customized drop down menu. */
export type CustomizableDropDownValue = {
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableDropDownValue` object. */
  uid: Scalars['ID'];
};

/** CustomizableMultipleOption contains information about a multiselect that is defined as part of a customizable option. */
export type CustomizableMultipleOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An array that defines the set of options for a multiselect. */
  value?: Maybe<Array<Maybe<CustomizableMultipleValue>>>;
};

/** CustomizableMultipleValue defines the price and sku of a product whose page contains a customized multiselect. */
export type CustomizableMultipleValue = {
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableMultipleValue` object. */
  uid: Scalars['ID'];
};

/** CustomizableFieldOption contains information about a text field that is defined as part of a customizable option. */
export type CustomizableFieldOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An object that defines a text field. */
  value?: Maybe<CustomizableFieldValue>;
};

/** CustomizableFieldValue defines the price and sku of a product whose page contains a customized text field. */
export type CustomizableFieldValue = {
  /** The maximum number of characters that can be entered for this customizable option. */
  max_characters?: Maybe<Scalars['Int']>;
  /** The price of the custom value. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableFieldValue` object. */
  uid: Scalars['ID'];
};

/** CustomizableFileOption contains information about a file picker that is defined as part of a customizable option. */
export type CustomizableFileOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An object that defines a file value. */
  value?: Maybe<CustomizableFileValue>;
};

/** CustomizableFileValue defines the price and sku of a product whose page contains a customized file picker. */
export type CustomizableFileValue = {
  /** The file extension to accept. */
  file_extension?: Maybe<Scalars['String']>;
  /** The maximum width of an image. */
  image_size_x?: Maybe<Scalars['Int']>;
  /** The maximum height of an image. */
  image_size_y?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableFileValue` object. */
  uid: Scalars['ID'];
};

/** Contains information about a product video. */
export type ProductVideo = MediaGalleryInterface & {
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>;
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>;
  /** Contains a ProductMediaGalleryEntriesVideoContent object. */
  video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>;
};

/** CustomizableProductInterface contains information about customizable product options. */
export type CustomizableProductInterface = {
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
};

/** CustomizableRadioOption contains information about a set of radio buttons that are defined as part of a customizable option. */
export type CustomizableRadioOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An array that defines a set of radio buttons. */
  value?: Maybe<Array<Maybe<CustomizableRadioValue>>>;
};

/** CustomizableRadioValue defines the price and sku of a product whose page contains a customized set of radio buttons. */
export type CustomizableRadioValue = {
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The order in which the radio button is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableRadioValue` object. */
  uid: Scalars['ID'];
};

/** CustomizableCheckbbixOption contains information about a set of checkbox values that are defined as part of a customizable option. */
export type CustomizableCheckboxOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An array that defines a set of checkbox values. */
  value?: Maybe<Array<Maybe<CustomizableCheckboxValue>>>;
};

/** CustomizableCheckboxValue defines the price and sku of a product whose page contains a customized set of checkbox values. */
export type CustomizableCheckboxValue = {
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The order in which the checkbox value is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableCheckboxValue` object. */
  uid: Scalars['ID'];
};

/** A virtual product is a non-tangible product that does not require shipping and is not kept in inventory */
export type VirtualProduct = ProductInterface & RoutableInterface & CustomizableProductInterface & {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
};


/** A virtual product is a non-tangible product that does not require shipping and is not kept in inventory */
export type VirtualProductreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** A simple product is tangible and is usually sold in single units or in fixed quantities */
export type SimpleProduct = ProductInterface & RoutableInterface & PhysicalProductInterface & CustomizableProductInterface & {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};


/** A simple product is tangible and is usually sold in single units or in fixed quantities */
export type SimpleProductreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. ProductFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type ProductFilterInput = {
  /** Category ID the product belongs to. */
  category_id?: InputMaybe<FilterTypeInput>;
  /** The product's country of origin. */
  country_of_manufacture?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the product was created. */
  created_at?: InputMaybe<FilterTypeInput>;
  /** The name of a custom layout. */
  custom_layout?: InputMaybe<FilterTypeInput>;
  /** XML code that is applied as a layout update to the product page. */
  custom_layout_update?: InputMaybe<FilterTypeInput>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: InputMaybe<FilterTypeInput>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: InputMaybe<FilterTypeInput>;
  /** Indicates whether additional attributes have been created for the product. */
  has_options?: InputMaybe<FilterTypeInput>;
  /** The relative path to the main image on the product page. */
  image?: InputMaybe<FilterTypeInput>;
  /** The label assigned to a product image. */
  image_label?: InputMaybe<FilterTypeInput>;
  /** A number representing the product's manufacturer. */
  manufacturer?: InputMaybe<FilterTypeInput>;
  /** The numeric maximal price of the product. Do not include the currency code. */
  max_price?: InputMaybe<FilterTypeInput>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: InputMaybe<FilterTypeInput>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: InputMaybe<FilterTypeInput>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: InputMaybe<FilterTypeInput>;
  /** The numeric minimal price of the product. Do not include the currency code. */
  min_price?: InputMaybe<FilterTypeInput>;
  /** The product name. Customers use this name to identify the product. */
  name?: InputMaybe<FilterTypeInput>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  news_from_date?: InputMaybe<FilterTypeInput>;
  /** The end date for new product listings. */
  news_to_date?: InputMaybe<FilterTypeInput>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: InputMaybe<FilterTypeInput>;
  /** The keyword required to perform a logical OR comparison. */
  or?: InputMaybe<ProductFilterInput>;
  /** The price of an item. */
  price?: InputMaybe<FilterTypeInput>;
  /** Indicates whether the product has required options. */
  required_options?: InputMaybe<FilterTypeInput>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: InputMaybe<FilterTypeInput>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: InputMaybe<FilterTypeInput>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: InputMaybe<FilterTypeInput>;
  /** The label assigned to a product's small image. */
  small_image_label?: InputMaybe<FilterTypeInput>;
  /** The beginning date that a product has a special price. */
  special_from_date?: InputMaybe<FilterTypeInput>;
  /** The discounted price of the product. Do not include the currency code. */
  special_price?: InputMaybe<FilterTypeInput>;
  /** The end date that a product has a special price. */
  special_to_date?: InputMaybe<FilterTypeInput>;
  /** The file name of a swatch image */
  swatch_image?: InputMaybe<FilterTypeInput>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: InputMaybe<FilterTypeInput>;
  /** The label assigned to a product's thumbnail image. */
  thumbnail_label?: InputMaybe<FilterTypeInput>;
  /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
  tier_price?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the product was updated. */
  updated_at?: InputMaybe<FilterTypeInput>;
  /** The part of the URL that identifies the product */
  url_key?: InputMaybe<FilterTypeInput>;
  url_path?: InputMaybe<FilterTypeInput>;
  /** The weight of the item, in units defined by the store. */
  weight?: InputMaybe<FilterTypeInput>;
};

/** ProductSortInput is deprecated, use @ProductAttributeSortInput instead. ProductSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export type ProductSortInput = {
  /** The product's country of origin. */
  country_of_manufacture?: InputMaybe<SortEnum>;
  /** Timestamp indicating when the product was created. */
  created_at?: InputMaybe<SortEnum>;
  /** The name of a custom layout. */
  custom_layout?: InputMaybe<SortEnum>;
  /** XML code that is applied as a layout update to the product page. */
  custom_layout_update?: InputMaybe<SortEnum>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: InputMaybe<SortEnum>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: InputMaybe<SortEnum>;
  /** Indicates whether additional attributes have been created for the product. */
  has_options?: InputMaybe<SortEnum>;
  /** The relative path to the main image on the product page. */
  image?: InputMaybe<SortEnum>;
  /** The label assigned to a product image. */
  image_label?: InputMaybe<SortEnum>;
  /** A number representing the product's manufacturer. */
  manufacturer?: InputMaybe<SortEnum>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: InputMaybe<SortEnum>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: InputMaybe<SortEnum>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: InputMaybe<SortEnum>;
  /** The product name. Customers use this name to identify the product. */
  name?: InputMaybe<SortEnum>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  news_from_date?: InputMaybe<SortEnum>;
  /** The end date for new product listings. */
  news_to_date?: InputMaybe<SortEnum>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: InputMaybe<SortEnum>;
  /** The price of the item. */
  price?: InputMaybe<SortEnum>;
  /** Indicates whether the product has required options. */
  required_options?: InputMaybe<SortEnum>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: InputMaybe<SortEnum>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: InputMaybe<SortEnum>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: InputMaybe<SortEnum>;
  /** The label assigned to a product's small image. */
  small_image_label?: InputMaybe<SortEnum>;
  /** The beginning date that a product has a special price. */
  special_from_date?: InputMaybe<SortEnum>;
  /** The discounted price of the product. */
  special_price?: InputMaybe<SortEnum>;
  /** The end date that a product has a special price. */
  special_to_date?: InputMaybe<SortEnum>;
  /** The file name of a swatch image */
  swatch_image?: InputMaybe<SortEnum>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: InputMaybe<SortEnum>;
  /** The label assigned to a product's thumbnail image. */
  thumbnail_label?: InputMaybe<SortEnum>;
  /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
  tier_price?: InputMaybe<SortEnum>;
  /** Timestamp indicating when the product was updated. */
  updated_at?: InputMaybe<SortEnum>;
  /** The part of the URL that identifies the product */
  url_key?: InputMaybe<SortEnum>;
  url_path?: InputMaybe<SortEnum>;
  /** The weight of the item, in units defined by the store. */
  weight?: InputMaybe<SortEnum>;
};

export type LayerFilterItem = LayerFilterItemInterface & {
  /**
   * Count of items by filter.
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: Maybe<Scalars['Int']>;
  /**
   * Filter label.
   * @deprecated Use AggregationOption.label instead.
   */
  label?: Maybe<Scalars['String']>;
  /**
   * Value for filter request variable to be used in query.
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: Maybe<Scalars['String']>;
};

/** A simple product wish list Item */
export type SimpleWishlistItem = WishlistItemInterface & {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
};

/** A virtual product wish list item */
export type VirtualWishlistItem = WishlistItemInterface & {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
};

/** Simple Cart Item */
export type SimpleCartItem = CartItemInterface & {
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use `uid` instead */
  id: Scalars['String'];
  prices?: Maybe<CartItemPrices>;
  product: ProductInterface;
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID'];
};

/** Virtual Cart Item */
export type VirtualCartItem = CartItemInterface & {
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** @deprecated Use `uid` instead */
  id: Scalars['String'];
  prices?: Maybe<CartItemPrices>;
  product: ProductInterface;
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID'];
};

/** Downloadable Cart Item */
export type DownloadableCartItem = CartItemInterface & {
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** @deprecated Use `uid` instead */
  id: Scalars['String'];
  /** An array containing information about the links for the added to cart downloadable product */
  links?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
  prices?: Maybe<CartItemPrices>;
  product: ProductInterface;
  quantity: Scalars['Float'];
  /** DownloadableProductSamples defines characteristics of a downloadable product */
  samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID'];
};

/** DownloadableProductLinks defines characteristics of a downloadable product */
export type DownloadableProductLinks = {
  /** @deprecated This information should not be exposed on frontend */
  id?: Maybe<Scalars['Int']>;
  /** @deprecated This information should not be exposed on frontend */
  is_shareable?: Maybe<Scalars['Boolean']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  link_type?: Maybe<DownloadableFileTypeEnum>;
  /** @deprecated This information should not be exposed on frontend */
  number_of_downloads?: Maybe<Scalars['Int']>;
  /** The price of the downloadable product */
  price?: Maybe<Scalars['Float']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_file?: Maybe<Scalars['String']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_type?: Maybe<DownloadableFileTypeEnum>;
  /** URL to the downloadable sample */
  sample_url?: Maybe<Scalars['String']>;
  /** A number indicating the sort order */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name of the link */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `DownloadableProductLinks` object. */
  uid: Scalars['ID'];
};

export type DownloadableFileTypeEnum =
  | 'FILE'
  | 'URL';

/** DownloadableProductSamples defines characteristics of a downloadable product */
export type DownloadableProductSamples = {
  /** @deprecated This information should not be exposed on frontend */
  id?: Maybe<Scalars['Int']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_file?: Maybe<Scalars['String']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_type?: Maybe<DownloadableFileTypeEnum>;
  /** URL to the downloadable sample */
  sample_url?: Maybe<Scalars['String']>;
  /** A number indicating the sort order */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name of the sample */
  title?: Maybe<Scalars['String']>;
};

/** DownloadableProduct defines a product that the shopper downloads */
export type DownloadableProduct = ProductInterface & RoutableInterface & CustomizableProductInterface & {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  /** An array containing information about the links for this downloadable product */
  downloadable_product_links?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
  /** An array containing information about samples of this downloadable product. */
  downloadable_product_samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** A value of 1 indicates that each link in the array must be purchased separately */
  links_purchased_separately?: Maybe<Scalars['Int']>;
  /** The heading above the list of downloadable products */
  links_title?: Maybe<Scalars['String']>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
};


/** DownloadableProduct defines a product that the shopper downloads */
export type DownloadableProductreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

export type DownloadableOrderItem = OrderItemInterface & {
  /** The final discount information for the product */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** A list of downloadable links that are ordered from the downloadable product */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
  /** The entered option for the base product, such as a logo or image */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The unique ID for a `OrderItemInterface` object */
  id: Scalars['ID'];
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price of the base product, including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>;
  /** URL key of the base product */
  product_url_key?: Maybe<Scalars['String']>;
  /** The number of canceled items */
  quantity_canceled?: Maybe<Scalars['Float']>;
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
  /** The number of units ordered for this item */
  quantity_ordered?: Maybe<Scalars['Float']>;
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
  /** The number of returned items */
  quantity_returned?: Maybe<Scalars['Float']>;
  /** The number of shipped items */
  quantity_shipped?: Maybe<Scalars['Float']>;
  /** The selected options for the base product, such as color or size */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item */
  status?: Maybe<Scalars['String']>;
};

/** DownloadableProductLinks defines characteristics of a downloadable product */
export type DownloadableItemsLinks = {
  /** A number indicating the sort order */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name of the link */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `DownloadableItemsLinks` object. */
  uid: Scalars['ID'];
};

export type DownloadableInvoiceItem = InvoiceItemInterface & {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** A list of downloadable links that are invoiced from the downloadable product */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
  /** The unique ID for a `InvoiceItemInterface` object */
  id: Scalars['ID'];
  /** Contains details about an individual order item */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
};

export type DownloadableCreditMemoItem = CreditMemoItemInterface & {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** A list of downloadable links that are refunded from the downloadable product */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
  /** The unique ID for a `CreditMemoItemInterface` object */
  id: Scalars['ID'];
  /** The order item the credit memo is applied to */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product, including selected options */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
};

/** A downloadable product wish list item */
export type DownloadableWishlistItem = WishlistItemInterface & {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** An array containing information about the selected links */
  links_v2?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
  /** An array containing information about the selected samples */
  samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
};

export type BundleCartItem = CartItemInterface & {
  bundle_options: Array<Maybe<SelectedBundleOption>>;
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use `uid` instead */
  id: Scalars['String'];
  prices?: Maybe<CartItemPrices>;
  product: ProductInterface;
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID'];
};

export type SelectedBundleOption = {
  /** @deprecated Use `uid` instead */
  id: Scalars['Int'];
  label: Scalars['String'];
  type: Scalars['String'];
  /** The unique ID for a `SelectedBundleOption` object */
  uid: Scalars['ID'];
  values: Array<Maybe<SelectedBundleOptionValue>>;
};

export type SelectedBundleOptionValue = {
  /** Use `uid` instead */
  id: Scalars['Int'];
  label: Scalars['String'];
  price: Scalars['Float'];
  quantity: Scalars['Float'];
  /** The unique ID for a `SelectedBundleOptionValue` object */
  uid: Scalars['ID'];
};

/** BundleItem defines an individual item in a bundle product. */
export type BundleItem = {
  /**
   * An ID assigned to each type of item in a bundle product.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** An array of additional options for this bundle item. */
  options?: Maybe<Array<Maybe<BundleItemOption>>>;
  /** he relative position of this item compared to the other bundle items. */
  position?: Maybe<Scalars['Int']>;
  /** Indicates whether the item must be included in the bundle. */
  required?: Maybe<Scalars['Boolean']>;
  /** The SKU of the bundle product. */
  sku?: Maybe<Scalars['String']>;
  /** The display name of the item. */
  title?: Maybe<Scalars['String']>;
  /** The input type that the customer uses to select the item. Examples include radio button and checkbox. */
  type?: Maybe<Scalars['String']>;
  /** The unique ID for a `BundleItem` object. */
  uid?: Maybe<Scalars['ID']>;
};

/** BundleItemOption defines characteristics and options for a specific bundle item. */
export type BundleItemOption = {
  /** Indicates whether the customer can change the number of items for this option. */
  can_change_quantity?: Maybe<Scalars['Boolean']>;
  /**
   * The ID assigned to the bundled item option.
   * @deprecated Use `uid` instead
   */
  id?: Maybe<Scalars['Int']>;
  /** Indicates whether this option is the default option. */
  is_default?: Maybe<Scalars['Boolean']>;
  /** The text that identifies the bundled item option. */
  label?: Maybe<Scalars['String']>;
  /** When a bundle item contains multiple options, the relative position of this option compared to the other options. */
  position?: Maybe<Scalars['Int']>;
  /** The price of the selected option. */
  price?: Maybe<Scalars['Float']>;
  /** One of FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** Contains details about this product option. */
  product?: Maybe<ProductInterface>;
  /**
   * Indicates the quantity of this specific bundle item.
   * @deprecated The `qty` is deprecated. Use `quantity` instead.
   */
  qty?: Maybe<Scalars['Float']>;
  /** Indicates the quantity of this specific bundle item. */
  quantity?: Maybe<Scalars['Float']>;
  /** The unique ID for a `BundleItemOption` object. */
  uid: Scalars['ID'];
};

/** Defines basic features of a bundle product and contains multiple BundleItems */
export type BundleProduct = ProductInterface & RoutableInterface & PhysicalProductInterface & CustomizableProductInterface & {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  /** Indicates whether the bundle product has a dynamic price. */
  dynamic_price?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the bundle product has a dynamic SK. */
  dynamic_sku?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the bundle product has a dynamically calculated weight. */
  dynamic_weight?: Maybe<Scalars['Boolean']>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** An array containing information about individual bundle items. */
  items?: Maybe<Array<Maybe<BundleItem>>>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** One of PRICE_RANGE or AS_LOW_AS. */
  price_view?: Maybe<PriceViewEnum>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** Indicates whether to ship bundle items together or individually. */
  ship_bundle_items?: Maybe<ShipBundleItemsEnum>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};


/** Defines basic features of a bundle product and contains multiple BundleItems */
export type BundleProductreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** This enumeration defines whether a bundle product's price is displayed as the lowest possible value or as a range. */
export type PriceViewEnum =
  | 'PRICE_RANGE'
  | 'AS_LOW_AS';

/** This enumeration defines whether bundle items must be shipped together. */
export type ShipBundleItemsEnum =
  | 'TOGETHER'
  | 'SEPARATELY';

export type BundleOrderItem = OrderItemInterface & {
  /** A list of bundle options that are assigned to the bundle product */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** The final discount information for the product */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The entered option for the base product, such as a logo or image */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The unique ID for a `OrderItemInterface` object */
  id: Scalars['ID'];
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price of the base product, including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>;
  /** URL key of the base product */
  product_url_key?: Maybe<Scalars['String']>;
  /** The number of canceled items */
  quantity_canceled?: Maybe<Scalars['Float']>;
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
  /** The number of units ordered for this item */
  quantity_ordered?: Maybe<Scalars['Float']>;
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
  /** The number of returned items */
  quantity_returned?: Maybe<Scalars['Float']>;
  /** The number of shipped items */
  quantity_shipped?: Maybe<Scalars['Float']>;
  /** The selected options for the base product, such as color or size */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item */
  status?: Maybe<Scalars['String']>;
};

/** A list of options of the selected bundle product */
export type ItemSelectedBundleOption = {
  /**
   * The unique ID for a `ItemSelectedBundleOption` object
   * @deprecated Use `uid` instead
   */
  id: Scalars['ID'];
  /** The label of the option */
  label: Scalars['String'];
  /** The unique ID for a `ItemSelectedBundleOption` object */
  uid: Scalars['ID'];
  /** A list of products that represent the values of the parent option */
  values?: Maybe<Array<Maybe<ItemSelectedBundleOptionValue>>>;
};

/** A list of values for the selected bundle product */
export type ItemSelectedBundleOptionValue = {
  /**
   * The unique ID for a `ItemSelectedBundleOptionValue` object
   * @deprecated Use `uid` instead
   */
  id: Scalars['ID'];
  /** The price of the child bundle product */
  price: Money;
  /** The name of the child bundle product */
  product_name: Scalars['String'];
  /** The SKU of the child bundle product */
  product_sku: Scalars['String'];
  /** Indicates how many of this bundle product were ordered */
  quantity: Scalars['Float'];
  /** The unique ID for a `ItemSelectedBundleOptionValue` object */
  uid: Scalars['ID'];
};

export type BundleInvoiceItem = InvoiceItemInterface & {
  /** A list of bundle options that are assigned to the bundle product */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `InvoiceItemInterface` object */
  id: Scalars['ID'];
  /** Contains details about an individual order item */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
};

export type BundleShipmentItem = ShipmentItemInterface & {
  /** A list of bundle options that are assigned to the bundle product */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** The unique ID for a `ShipmentItemInterface` object */
  id: Scalars['ID'];
  /** Associated order item */
  order_item?: Maybe<OrderItemInterface>;
  /** Name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** Sale price for the base product */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** Number of shipped items */
  quantity_shipped: Scalars['Float'];
};

export type BundleCreditMemoItem = CreditMemoItemInterface & {
  /** A list of bundle options that are assigned to the bundle product */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `CreditMemoItemInterface` object */
  id: Scalars['ID'];
  /** The order item the credit memo is applied to */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product, including selected options */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
};

export type BundleWishlistItem = WishlistItemInterface & {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** An array containing information about the selected bundle items */
  bundle_options?: Maybe<Array<Maybe<SelectedBundleOption>>>;
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
};

export type ConfigurableCartItem = CartItemInterface & {
  configurable_options: Array<Maybe<SelectedConfigurableOption>>;
  /** Product details of the cart item */
  configured_variant: ProductInterface;
  customizable_options?: Maybe<Array<Maybe<SelectedCustomizableOption>>>;
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use `uid` instead */
  id: Scalars['String'];
  prices?: Maybe<CartItemPrices>;
  product: ProductInterface;
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID'];
};

export type SelectedConfigurableOption = {
  /** The unique ID for a `ConfigurableProductOptions` object */
  configurable_product_option_uid: Scalars['ID'];
  /** The unique ID for a `ConfigurableProductOptionsValues` object */
  configurable_product_option_value_uid: Scalars['ID'];
  /** @deprecated Use SelectedConfigurableOption.configurable_product_option_uid instead */
  id: Scalars['Int'];
  option_label: Scalars['String'];
  /** @deprecated Use SelectedConfigurableOption.configurable_product_option_value_uid instead */
  value_id: Scalars['Int'];
  value_label: Scalars['String'];
};

export type SalesItemInterface = {
  /** The entered gift message for the order item */
  gift_message?: Maybe<GiftMessage>;
};

/** A grouped product consists of simple standalone products that are presented as a group */
export type GroupedProduct = ProductInterface & RoutableInterface & PhysicalProductInterface & {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** An array containing grouped product items */
  items?: Maybe<Array<Maybe<GroupedProductItem>>>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};


/** A grouped product consists of simple standalone products that are presented as a group */
export type GroupedProductreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** GroupedProductItem contains information about an individual grouped product item */
export type GroupedProductItem = {
  /** The relative position of this item compared to the other group items */
  position?: Maybe<Scalars['Int']>;
  /** The ProductInterface object, which contains details about this product option */
  product?: Maybe<ProductInterface>;
  /** The quantity of this grouped product item */
  qty?: Maybe<Scalars['Float']>;
};

/** A grouped product wish list item */
export type GroupedProductWishlistItem = WishlistItemInterface & {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
};

/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export type ConfigurableProduct = ProductInterface & RoutableInterface & PhysicalProductInterface & CustomizableProductInterface & {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** An array of linked simple product items */
  configurable_options?: Maybe<Array<Maybe<ConfigurableProductOptions>>>;
  /** Specified configurable product options selection */
  configurable_product_options_selection?: Maybe<ConfigurableProductOptionsSelection>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /** An array of variants of products */
  variants?: Maybe<Array<Maybe<ConfigurableVariant>>>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};


/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export type ConfigurableProductconfigurable_product_options_selectionArgs = {
  configurableOptionValueUids?: InputMaybe<Array<Scalars['ID']>>;
};


/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export type ConfigurableProductreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** ConfigurableProductOptions defines configurable attributes for the specified product */
export type ConfigurableProductOptions = {
  /** A string that identifies the attribute */
  attribute_code?: Maybe<Scalars['String']>;
  /**
   * The ID assigned to the attribute
   * @deprecated Use attribute_uid instead
   */
  attribute_id?: Maybe<Scalars['String']>;
  /**
   * The ID assigned to the attribute
   * @deprecated Use attribute_uid instead
   */
  attribute_id_v2?: Maybe<Scalars['Int']>;
  /** The unique ID for a `Attribute` object */
  attribute_uid: Scalars['ID'];
  /**
   * The configurable option ID number assigned by the system
   * @deprecated Use uid instead
   */
  id?: Maybe<Scalars['Int']>;
  /** A string that describes the configurable product option, which is displayed on the UI */
  label?: Maybe<Scalars['String']>;
  /** A number that indicates the order in which the attribute is displayed */
  position?: Maybe<Scalars['Int']>;
  /**
   * This is the same as a product's id field
   * @deprecated `product_id` is not needed and can be obtained from it's parent
   */
  product_id?: Maybe<Scalars['Int']>;
  /** The unique ID for a `ConfigurableProductOptions` object */
  uid: Scalars['ID'];
  /** Indicates whether the option is the default */
  use_default?: Maybe<Scalars['Boolean']>;
  /** An array that defines the value_index codes assigned to the configurable product */
  values?: Maybe<Array<Maybe<ConfigurableProductOptionsValues>>>;
};

/** ConfigurableProductOptionsValues contains the index number assigned to a configurable product option */
export type ConfigurableProductOptionsValues = {
  /** The label of the product on the default store */
  default_label?: Maybe<Scalars['String']>;
  /** The label of the product */
  label?: Maybe<Scalars['String']>;
  /** The label of the product on the current store */
  store_label?: Maybe<Scalars['String']>;
  /** Swatch data for configurable product option */
  swatch_data?: Maybe<SwatchDataInterface>;
  /** The unique ID for a `ConfigurableProductOptionsValues` object */
  uid?: Maybe<Scalars['ID']>;
  /** Indicates whether to use the default_label */
  use_default_value?: Maybe<Scalars['Boolean']>;
  /**
   * A unique index number assigned to the configurable product option
   * @deprecated Use `uid` instead
   */
  value_index?: Maybe<Scalars['Int']>;
};

export type SwatchDataInterface = {
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>;
};

/** Metadata corresponding to the configurable options selection. */
export type ConfigurableProductOptionsSelection = {
  /** Configurable options available for further selection based on current selection. */
  configurable_options?: Maybe<Array<Maybe<ConfigurableProductOption>>>;
  /** Product images and videos corresponding to the specified configurable options selection. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /** Configurable options available for further selection based on current selection. */
  options_available_for_selection?: Maybe<Array<Maybe<ConfigurableOptionAvailableForSelection>>>;
  /** Variant represented by the specified configurable options selection. It is expected to be null, until selections are made for each configurable option. */
  variant?: Maybe<SimpleProduct>;
};

export type ConfigurableProductOption = {
  attribute_code: Scalars['String'];
  label: Scalars['String'];
  uid: Scalars['ID'];
  values?: Maybe<Array<Maybe<ConfigurableProductOptionValue>>>;
};

export type ConfigurableProductOptionValue = {
  is_available: Scalars['Boolean'];
  is_use_default: Scalars['Boolean'];
  label: Scalars['String'];
  swatch?: Maybe<SwatchDataInterface>;
  uid: Scalars['ID'];
};

/** Configurable option available for further selection based on current selection. */
export type ConfigurableOptionAvailableForSelection = {
  /** Attribute code that uniquely identifies configurable option. */
  attribute_code: Scalars['String'];
  /** Configurable option values available for further selection. */
  option_value_uids: Array<Maybe<Scalars['ID']>>;
};

/** An array containing all the simple product variants of a configurable product */
export type ConfigurableVariant = {
  attributes?: Maybe<Array<Maybe<ConfigurableAttributeOption>>>;
  product?: Maybe<SimpleProduct>;
};

/** ConfigurableAttributeOption contains the value_index (and other related information) assigned to a configurable product option */
export type ConfigurableAttributeOption = {
  /** The ID assigned to the attribute */
  code?: Maybe<Scalars['String']>;
  /** A string that describes the configurable attribute option */
  label?: Maybe<Scalars['String']>;
  /** The unique ID for a `ConfigurableAttributeOption` object */
  uid: Scalars['ID'];
  /** A unique index number assigned to the configurable product option */
  value_index?: Maybe<Scalars['Int']>;
};

/** A configurable product wish list item */
export type ConfigurableWishlistItem = WishlistItemInterface & {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** The SKU of the simple product corresponding to a set of selected configurable options */
  child_sku: Scalars['String'];
  /** An array of selected configurable options */
  configurable_options?: Maybe<Array<Maybe<SelectedConfigurableOption>>>;
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
};

/** Deprecated: use type `PaypalExpressTokenOutput` instead */
export type PaypalExpressToken = {
  /**
   * A set of URLs that allow the buyer to authorize payment and adjust checkout details
   * @deprecated Use field `paypal_urls` of type `PaypalExpressTokenOutput` instead
   */
  paypal_urls?: Maybe<PaypalExpressUrlList>;
  /**
   * The token returned by PayPal
   * @deprecated Use field `token` of type `PaypalExpressTokenOutput` instead
   */
  token?: Maybe<Scalars['String']>;
};

/** Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods. */
export type PayflowProToken = {
  response_message: Scalars['String'];
  result: Scalars['Int'];
  result_code: Scalars['Int'];
  secure_token: Scalars['String'];
  secure_token_id: Scalars['String'];
};

export type OrderItem = OrderItemInterface & {
  /** The final discount information for the product */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The entered option for the base product, such as a logo or image */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The unique ID for a `OrderItemInterface` object */
  id: Scalars['ID'];
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price of the base product, including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>;
  /** URL key of the base product */
  product_url_key?: Maybe<Scalars['String']>;
  /** The number of canceled items */
  quantity_canceled?: Maybe<Scalars['Float']>;
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
  /** The number of units ordered for this item */
  quantity_ordered?: Maybe<Scalars['Float']>;
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
  /** The number of returned items */
  quantity_returned?: Maybe<Scalars['Float']>;
  /** The number of shipped items */
  quantity_shipped?: Maybe<Scalars['Float']>;
  /** The selected options for the base product, such as color or size */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item */
  status?: Maybe<Scalars['String']>;
};

export type InvoiceItem = InvoiceItemInterface & {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `InvoiceItemInterface` object */
  id: Scalars['ID'];
  /** Contains details about an individual order item */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
};

export type ShipmentItem = ShipmentItemInterface & {
  /** The unique ID for a `ShipmentItemInterface` object */
  id: Scalars['ID'];
  /** Associated order item */
  order_item?: Maybe<OrderItemInterface>;
  /** Name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** Sale price for the base product */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** Number of shipped items */
  quantity_shipped: Scalars['Float'];
};

export type CreditMemoItem = CreditMemoItemInterface & {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `CreditMemoItemInterface` object */
  id: Scalars['ID'];
  /** The order item the credit memo is applied to */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product, including selected options */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
};

export type SwatchLayerFilterItemInterface = {
  /** Data required to render swatch filter item */
  swatch_data?: Maybe<SwatchData>;
};

export type SwatchData = {
  /** Type of swatch filter item: 1 - text, 2 - image */
  type?: Maybe<Scalars['String']>;
  /** Value for swatch item (text or image link) */
  value?: Maybe<Scalars['String']>;
};

export type SwatchLayerFilterItem = LayerFilterItemInterface & SwatchLayerFilterItemInterface & {
  /**
   * Count of items by filter.
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: Maybe<Scalars['Int']>;
  /**
   * Filter label.
   * @deprecated Use AggregationOption.label instead.
   */
  label?: Maybe<Scalars['String']>;
  /** Data required to render swatch filter item */
  swatch_data?: Maybe<SwatchData>;
  /**
   * Value for filter request variable to be used in query.
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: Maybe<Scalars['String']>;
};

export type ImageSwatchData = SwatchDataInterface & {
  /** Thumbnail swatch image URL */
  thumbnail?: Maybe<Scalars['String']>;
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>;
};

export type TextSwatchData = SwatchDataInterface & {
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>;
};

export type ColorSwatchData = SwatchDataInterface & {
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>;
};

export type CurrentCartId = {
  id?: Maybe<Scalars['String']>;
};

export type RegisterCartIdInput = {
  cart_id: Scalars['String'];
};

export type WithIndex<TObject> = TObject & Record<string, any>;
export type ResolversObject<TObject> = WithIndex<TObject>;

export type ResolverTypeWrapper<T> = Promise<T> | T;


export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type LegacyStitchingResolver<TResult, TParent, TContext, TArgs> = {
  fragment: string;
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};

export type NewStitchingResolver<TResult, TParent, TContext, TArgs> = {
  selectionSet: string | ((fieldNode: FieldNode) => SelectionSetNode);
  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
};
export type StitchingResolver<TResult, TParent, TContext, TArgs> = LegacyStitchingResolver<TResult, TParent, TContext, TArgs> | NewStitchingResolver<TResult, TParent, TContext, TArgs>;
export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
  | ResolverFn<TResult, TParent, TContext, TArgs>
  | ResolverWithResolve<TResult, TParent, TContext, TArgs>
  | StitchingResolver<TResult, TParent, TContext, TArgs>;

export type ResolverFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => Promise<TResult> | TResult;

export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;

export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

export interface SubscriptionSubscriberObject<TResult, TKey extends string, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<{ [key in TKey]: TResult }, TParent, TContext, TArgs>;
  resolve?: SubscriptionResolveFn<TResult, { [key in TKey]: TResult }, TContext, TArgs>;
}

export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
}

export type SubscriptionObject<TResult, TKey extends string, TParent, TContext, TArgs> =
  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;

export type SubscriptionResolver<TResult, TKey extends string, TParent = {}, TContext = {}, TArgs = {}> =
  | ((...args: any[]) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;

export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
  parent: TParent,
  context: TContext,
  info: GraphQLResolveInfo
) => Maybe<TTypes> | Promise<Maybe<TTypes>>;

export type IsTypeOfResolverFn<T = {}, TContext = {}> = (obj: T, context: TContext, info: GraphQLResolveInfo) => boolean | Promise<boolean>;

export type NextResolverFn<T> = () => Promise<T>;

export type DirectiveResolverFn<TResult = {}, TParent = {}, TContext = {}, TArgs = {}> = (
  next: NextResolverFn<TResult>,
  parent: TParent,
  args: TArgs,
  context: TContext,
  info: GraphQLResolveInfo
) => TResult | Promise<TResult>;

/** Mapping between all available schema types and the resolvers types */
export type ResolversTypes = ResolversObject<{
  Query: ResolverTypeWrapper<{}>;
  Mutation: ResolverTypeWrapper<{}>;
  Aggregate: ResolverTypeWrapper<Aggregate>;
  Asset: ResolverTypeWrapper<Asset>;
  AssetConnectInput: AssetConnectInput;
  AssetConnection: ResolverTypeWrapper<AssetConnection>;
  AssetCreateInput: AssetCreateInput;
  AssetCreateLocalizationDataInput: AssetCreateLocalizationDataInput;
  AssetCreateLocalizationInput: AssetCreateLocalizationInput;
  AssetCreateLocalizationsInput: AssetCreateLocalizationsInput;
  AssetCreateManyInlineInput: AssetCreateManyInlineInput;
  AssetCreateOneInlineInput: AssetCreateOneInlineInput;
  AssetEdge: ResolverTypeWrapper<AssetEdge>;
  AssetManyWhereInput: AssetManyWhereInput;
  AssetOrderByInput: AssetOrderByInput;
  AssetTransformationInput: AssetTransformationInput;
  AssetUpdateInput: AssetUpdateInput;
  AssetUpdateLocalizationDataInput: AssetUpdateLocalizationDataInput;
  AssetUpdateLocalizationInput: AssetUpdateLocalizationInput;
  AssetUpdateLocalizationsInput: AssetUpdateLocalizationsInput;
  AssetUpdateManyInlineInput: AssetUpdateManyInlineInput;
  AssetUpdateManyInput: AssetUpdateManyInput;
  AssetUpdateManyLocalizationDataInput: AssetUpdateManyLocalizationDataInput;
  AssetUpdateManyLocalizationInput: AssetUpdateManyLocalizationInput;
  AssetUpdateManyLocalizationsInput: AssetUpdateManyLocalizationsInput;
  AssetUpdateManyWithNestedWhereInput: AssetUpdateManyWithNestedWhereInput;
  AssetUpdateOneInlineInput: AssetUpdateOneInlineInput;
  AssetUpdateWithNestedWhereUniqueInput: AssetUpdateWithNestedWhereUniqueInput;
  AssetUpsertInput: AssetUpsertInput;
  AssetUpsertLocalizationInput: AssetUpsertLocalizationInput;
  AssetUpsertWithNestedWhereUniqueInput: AssetUpsertWithNestedWhereUniqueInput;
  AssetWhereInput: AssetWhereInput;
  AssetWhereUniqueInput: AssetWhereUniqueInput;
  Banner: ResolverTypeWrapper<Banner>;
  BannerConnectInput: BannerConnectInput;
  BannerConnection: ResolverTypeWrapper<BannerConnection>;
  BannerCreateInput: BannerCreateInput;
  BannerCreateLocalizationDataInput: BannerCreateLocalizationDataInput;
  BannerCreateLocalizationInput: BannerCreateLocalizationInput;
  BannerCreateLocalizationsInput: BannerCreateLocalizationsInput;
  BannerCreateManyInlineInput: BannerCreateManyInlineInput;
  BannerCreateOneInlineInput: BannerCreateOneInlineInput;
  BannerEdge: ResolverTypeWrapper<BannerEdge>;
  BannerManyWhereInput: BannerManyWhereInput;
  BannerOrderByInput: BannerOrderByInput;
  BannerUpdateInput: BannerUpdateInput;
  BannerUpdateLocalizationDataInput: BannerUpdateLocalizationDataInput;
  BannerUpdateLocalizationInput: BannerUpdateLocalizationInput;
  BannerUpdateLocalizationsInput: BannerUpdateLocalizationsInput;
  BannerUpdateManyInlineInput: BannerUpdateManyInlineInput;
  BannerUpdateManyInput: BannerUpdateManyInput;
  BannerUpdateManyLocalizationDataInput: BannerUpdateManyLocalizationDataInput;
  BannerUpdateManyLocalizationInput: BannerUpdateManyLocalizationInput;
  BannerUpdateManyLocalizationsInput: BannerUpdateManyLocalizationsInput;
  BannerUpdateManyWithNestedWhereInput: BannerUpdateManyWithNestedWhereInput;
  BannerUpdateOneInlineInput: BannerUpdateOneInlineInput;
  BannerUpdateWithNestedWhereUniqueInput: BannerUpdateWithNestedWhereUniqueInput;
  BannerUpsertInput: BannerUpsertInput;
  BannerUpsertLocalizationInput: BannerUpsertLocalizationInput;
  BannerUpsertWithNestedWhereUniqueInput: BannerUpsertWithNestedWhereUniqueInput;
  BannerWhereInput: BannerWhereInput;
  BannerWhereUniqueInput: BannerWhereUniqueInput;
  BatchPayload: ResolverTypeWrapper<BatchPayload>;
  Boolean: ResolverTypeWrapper<Scalars['Boolean']>;
  Color: ResolverTypeWrapper<Color>;
  ColorInput: ColorInput;
  ConnectPositionInput: ConnectPositionInput;
  Date: ResolverTypeWrapper<Scalars['Date']>;
  DateTime: ResolverTypeWrapper<Scalars['DateTime']>;
  DocumentFileTypes: DocumentFileTypes;
  DocumentOutputInput: DocumentOutputInput;
  DocumentTransformationInput: DocumentTransformationInput;
  DocumentVersion: ResolverTypeWrapper<DocumentVersion>;
  Float: ResolverTypeWrapper<Scalars['Float']>;
  Footer: ResolverTypeWrapper<Footer>;
  FooterConnectInput: FooterConnectInput;
  FooterConnection: ResolverTypeWrapper<FooterConnection>;
  FooterCreateInput: FooterCreateInput;
  FooterCreateManyInlineInput: FooterCreateManyInlineInput;
  FooterCreateOneInlineInput: FooterCreateOneInlineInput;
  FooterEdge: ResolverTypeWrapper<FooterEdge>;
  FooterManyWhereInput: FooterManyWhereInput;
  FooterOrderByInput: FooterOrderByInput;
  FooterUpdateInput: FooterUpdateInput;
  FooterUpdateManyInlineInput: FooterUpdateManyInlineInput;
  FooterUpdateManyInput: FooterUpdateManyInput;
  FooterUpdateManyWithNestedWhereInput: FooterUpdateManyWithNestedWhereInput;
  FooterUpdateOneInlineInput: FooterUpdateOneInlineInput;
  FooterUpdateWithNestedWhereUniqueInput: FooterUpdateWithNestedWhereUniqueInput;
  FooterUpsertInput: FooterUpsertInput;
  FooterUpsertWithNestedWhereUniqueInput: FooterUpsertWithNestedWhereUniqueInput;
  FooterWhereInput: FooterWhereInput;
  FooterWhereUniqueInput: FooterWhereUniqueInput;
  Hex: ResolverTypeWrapper<Scalars['Hex']>;
  ID: ResolverTypeWrapper<Scalars['ID']>;
  ImageFit: ImageFit;
  ImageResizeInput: ImageResizeInput;
  ImageTransformationInput: ImageTransformationInput;
  Int: ResolverTypeWrapper<Scalars['Int']>;
  Json: ResolverTypeWrapper<Scalars['Json']>;
  Locale: Locale;
  Location: ResolverTypeWrapper<Location>;
  LocationInput: LocationInput;
  Long: ResolverTypeWrapper<Scalars['Long']>;
  MetaRobots: MetaRobots;
  Node: ResolversTypes['Asset'] | ResolversTypes['Banner'] | ResolversTypes['Footer'] | ResolversTypes['Page'] | ResolversTypes['PageLink'] | ResolversTypes['RowBlogContent'] | ResolversTypes['RowButtonLinkList'] | ResolversTypes['RowColumnOne'] | ResolversTypes['RowColumnThree'] | ResolversTypes['RowColumnTwo'] | ResolversTypes['RowContentLinks'] | ResolversTypes['RowHeroBanner'] | ResolversTypes['RowProduct'] | ResolversTypes['RowQuote'] | ResolversTypes['RowServiceOptions'] | ResolversTypes['RowSpecialBanner'] | ResolversTypes['ScheduledOperation'] | ResolversTypes['ScheduledRelease'] | ResolversTypes['User'] | ResolversTypes['Usps'];
  Page: ResolverTypeWrapper<Omit<Page, 'content'> & { content: Array<ResolversTypes['PageContent']> }>;
  PageConnectInput: PageConnectInput;
  PageConnection: ResolverTypeWrapper<PageConnection>;
  PageContent: ResolversTypes['Banner'] | ResolversTypes['RowBlogContent'] | ResolversTypes['RowButtonLinkList'] | ResolversTypes['RowColumnOne'] | ResolversTypes['RowColumnThree'] | ResolversTypes['RowColumnTwo'] | ResolversTypes['RowContentLinks'] | ResolversTypes['RowHeroBanner'] | ResolversTypes['RowProduct'] | ResolversTypes['RowQuote'] | ResolversTypes['RowServiceOptions'] | ResolversTypes['RowSpecialBanner'];
  PageContentConnectInput: PageContentConnectInput;
  PageContentCreateInput: PageContentCreateInput;
  PageContentCreateManyInlineInput: PageContentCreateManyInlineInput;
  PageContentCreateOneInlineInput: PageContentCreateOneInlineInput;
  PageContentUpdateInput: PageContentUpdateInput;
  PageContentUpdateManyInlineInput: PageContentUpdateManyInlineInput;
  PageContentUpdateManyWithNestedWhereInput: PageContentUpdateManyWithNestedWhereInput;
  PageContentUpdateOneInlineInput: PageContentUpdateOneInlineInput;
  PageContentUpdateWithNestedWhereUniqueInput: PageContentUpdateWithNestedWhereUniqueInput;
  PageContentUpsertWithNestedWhereUniqueInput: PageContentUpsertWithNestedWhereUniqueInput;
  PageContentWhereInput: PageContentWhereInput;
  PageContentWhereUniqueInput: PageContentWhereUniqueInput;
  PageCreateInput: PageCreateInput;
  PageCreateLocalizationDataInput: PageCreateLocalizationDataInput;
  PageCreateLocalizationInput: PageCreateLocalizationInput;
  PageCreateLocalizationsInput: PageCreateLocalizationsInput;
  PageCreateManyInlineInput: PageCreateManyInlineInput;
  PageCreateOneInlineInput: PageCreateOneInlineInput;
  PageEdge: ResolverTypeWrapper<PageEdge>;
  PageInfo: ResolverTypeWrapper<PageInfo>;
  PageLink: ResolverTypeWrapper<PageLink>;
  PageLinkConnectInput: PageLinkConnectInput;
  PageLinkConnection: ResolverTypeWrapper<PageLinkConnection>;
  PageLinkCreateInput: PageLinkCreateInput;
  PageLinkCreateLocalizationDataInput: PageLinkCreateLocalizationDataInput;
  PageLinkCreateLocalizationInput: PageLinkCreateLocalizationInput;
  PageLinkCreateLocalizationsInput: PageLinkCreateLocalizationsInput;
  PageLinkCreateManyInlineInput: PageLinkCreateManyInlineInput;
  PageLinkCreateOneInlineInput: PageLinkCreateOneInlineInput;
  PageLinkEdge: ResolverTypeWrapper<PageLinkEdge>;
  PageLinkManyWhereInput: PageLinkManyWhereInput;
  PageLinkOrderByInput: PageLinkOrderByInput;
  PageLinkUpdateInput: PageLinkUpdateInput;
  PageLinkUpdateLocalizationDataInput: PageLinkUpdateLocalizationDataInput;
  PageLinkUpdateLocalizationInput: PageLinkUpdateLocalizationInput;
  PageLinkUpdateLocalizationsInput: PageLinkUpdateLocalizationsInput;
  PageLinkUpdateManyInlineInput: PageLinkUpdateManyInlineInput;
  PageLinkUpdateManyInput: PageLinkUpdateManyInput;
  PageLinkUpdateManyLocalizationDataInput: PageLinkUpdateManyLocalizationDataInput;
  PageLinkUpdateManyLocalizationInput: PageLinkUpdateManyLocalizationInput;
  PageLinkUpdateManyLocalizationsInput: PageLinkUpdateManyLocalizationsInput;
  PageLinkUpdateManyWithNestedWhereInput: PageLinkUpdateManyWithNestedWhereInput;
  PageLinkUpdateOneInlineInput: PageLinkUpdateOneInlineInput;
  PageLinkUpdateWithNestedWhereUniqueInput: PageLinkUpdateWithNestedWhereUniqueInput;
  PageLinkUpsertInput: PageLinkUpsertInput;
  PageLinkUpsertLocalizationInput: PageLinkUpsertLocalizationInput;
  PageLinkUpsertWithNestedWhereUniqueInput: PageLinkUpsertWithNestedWhereUniqueInput;
  PageLinkWhereInput: PageLinkWhereInput;
  PageLinkWhereUniqueInput: PageLinkWhereUniqueInput;
  PageManyWhereInput: PageManyWhereInput;
  PageOrderByInput: PageOrderByInput;
  PageUpdateInput: PageUpdateInput;
  PageUpdateLocalizationDataInput: PageUpdateLocalizationDataInput;
  PageUpdateLocalizationInput: PageUpdateLocalizationInput;
  PageUpdateLocalizationsInput: PageUpdateLocalizationsInput;
  PageUpdateManyInlineInput: PageUpdateManyInlineInput;
  PageUpdateManyInput: PageUpdateManyInput;
  PageUpdateManyLocalizationDataInput: PageUpdateManyLocalizationDataInput;
  PageUpdateManyLocalizationInput: PageUpdateManyLocalizationInput;
  PageUpdateManyLocalizationsInput: PageUpdateManyLocalizationsInput;
  PageUpdateManyWithNestedWhereInput: PageUpdateManyWithNestedWhereInput;
  PageUpdateOneInlineInput: PageUpdateOneInlineInput;
  PageUpdateWithNestedWhereUniqueInput: PageUpdateWithNestedWhereUniqueInput;
  PageUpsertInput: PageUpsertInput;
  PageUpsertLocalizationInput: PageUpsertLocalizationInput;
  PageUpsertWithNestedWhereUniqueInput: PageUpsertWithNestedWhereUniqueInput;
  PageWhereInput: PageWhereInput;
  PageWhereUniqueInput: PageWhereUniqueInput;
  PublishLocaleInput: PublishLocaleInput;
  RGBA: ResolverTypeWrapper<RGBA>;
  RGBAHue: ResolverTypeWrapper<Scalars['RGBAHue']>;
  RGBAInput: RGBAInput;
  RGBATransparency: ResolverTypeWrapper<Scalars['RGBATransparency']>;
  RichText: ResolverTypeWrapper<RichText>;
  RichTextAST: ResolverTypeWrapper<Scalars['RichTextAST']>;
  RowBlogContent: ResolverTypeWrapper<RowBlogContent>;
  RowBlogContentConnectInput: RowBlogContentConnectInput;
  RowBlogContentConnection: ResolverTypeWrapper<RowBlogContentConnection>;
  RowBlogContentCreateInput: RowBlogContentCreateInput;
  RowBlogContentCreateLocalizationDataInput: RowBlogContentCreateLocalizationDataInput;
  RowBlogContentCreateLocalizationInput: RowBlogContentCreateLocalizationInput;
  RowBlogContentCreateLocalizationsInput: RowBlogContentCreateLocalizationsInput;
  RowBlogContentCreateManyInlineInput: RowBlogContentCreateManyInlineInput;
  RowBlogContentCreateOneInlineInput: RowBlogContentCreateOneInlineInput;
  RowBlogContentEdge: ResolverTypeWrapper<RowBlogContentEdge>;
  RowBlogContentManyWhereInput: RowBlogContentManyWhereInput;
  RowBlogContentOrderByInput: RowBlogContentOrderByInput;
  RowBlogContentUpdateInput: RowBlogContentUpdateInput;
  RowBlogContentUpdateLocalizationDataInput: RowBlogContentUpdateLocalizationDataInput;
  RowBlogContentUpdateLocalizationInput: RowBlogContentUpdateLocalizationInput;
  RowBlogContentUpdateLocalizationsInput: RowBlogContentUpdateLocalizationsInput;
  RowBlogContentUpdateManyInlineInput: RowBlogContentUpdateManyInlineInput;
  RowBlogContentUpdateManyInput: RowBlogContentUpdateManyInput;
  RowBlogContentUpdateManyLocalizationDataInput: RowBlogContentUpdateManyLocalizationDataInput;
  RowBlogContentUpdateManyLocalizationInput: RowBlogContentUpdateManyLocalizationInput;
  RowBlogContentUpdateManyLocalizationsInput: RowBlogContentUpdateManyLocalizationsInput;
  RowBlogContentUpdateManyWithNestedWhereInput: RowBlogContentUpdateManyWithNestedWhereInput;
  RowBlogContentUpdateOneInlineInput: RowBlogContentUpdateOneInlineInput;
  RowBlogContentUpdateWithNestedWhereUniqueInput: RowBlogContentUpdateWithNestedWhereUniqueInput;
  RowBlogContentUpsertInput: RowBlogContentUpsertInput;
  RowBlogContentUpsertLocalizationInput: RowBlogContentUpsertLocalizationInput;
  RowBlogContentUpsertWithNestedWhereUniqueInput: RowBlogContentUpsertWithNestedWhereUniqueInput;
  RowBlogContentWhereInput: RowBlogContentWhereInput;
  RowBlogContentWhereUniqueInput: RowBlogContentWhereUniqueInput;
  RowButtonLinkList: ResolverTypeWrapper<RowButtonLinkList>;
  RowButtonLinkListConnectInput: RowButtonLinkListConnectInput;
  RowButtonLinkListConnection: ResolverTypeWrapper<RowButtonLinkListConnection>;
  RowButtonLinkListCreateInput: RowButtonLinkListCreateInput;
  RowButtonLinkListCreateLocalizationDataInput: RowButtonLinkListCreateLocalizationDataInput;
  RowButtonLinkListCreateLocalizationInput: RowButtonLinkListCreateLocalizationInput;
  RowButtonLinkListCreateLocalizationsInput: RowButtonLinkListCreateLocalizationsInput;
  RowButtonLinkListCreateManyInlineInput: RowButtonLinkListCreateManyInlineInput;
  RowButtonLinkListCreateOneInlineInput: RowButtonLinkListCreateOneInlineInput;
  RowButtonLinkListEdge: ResolverTypeWrapper<RowButtonLinkListEdge>;
  RowButtonLinkListManyWhereInput: RowButtonLinkListManyWhereInput;
  RowButtonLinkListOrderByInput: RowButtonLinkListOrderByInput;
  RowButtonLinkListUpdateInput: RowButtonLinkListUpdateInput;
  RowButtonLinkListUpdateLocalizationDataInput: RowButtonLinkListUpdateLocalizationDataInput;
  RowButtonLinkListUpdateLocalizationInput: RowButtonLinkListUpdateLocalizationInput;
  RowButtonLinkListUpdateLocalizationsInput: RowButtonLinkListUpdateLocalizationsInput;
  RowButtonLinkListUpdateManyInlineInput: RowButtonLinkListUpdateManyInlineInput;
  RowButtonLinkListUpdateManyInput: RowButtonLinkListUpdateManyInput;
  RowButtonLinkListUpdateManyLocalizationDataInput: RowButtonLinkListUpdateManyLocalizationDataInput;
  RowButtonLinkListUpdateManyLocalizationInput: RowButtonLinkListUpdateManyLocalizationInput;
  RowButtonLinkListUpdateManyLocalizationsInput: RowButtonLinkListUpdateManyLocalizationsInput;
  RowButtonLinkListUpdateManyWithNestedWhereInput: RowButtonLinkListUpdateManyWithNestedWhereInput;
  RowButtonLinkListUpdateOneInlineInput: RowButtonLinkListUpdateOneInlineInput;
  RowButtonLinkListUpdateWithNestedWhereUniqueInput: RowButtonLinkListUpdateWithNestedWhereUniqueInput;
  RowButtonLinkListUpsertInput: RowButtonLinkListUpsertInput;
  RowButtonLinkListUpsertLocalizationInput: RowButtonLinkListUpsertLocalizationInput;
  RowButtonLinkListUpsertWithNestedWhereUniqueInput: RowButtonLinkListUpsertWithNestedWhereUniqueInput;
  RowButtonLinkListWhereInput: RowButtonLinkListWhereInput;
  RowButtonLinkListWhereUniqueInput: RowButtonLinkListWhereUniqueInput;
  RowColumnOne: ResolverTypeWrapper<RowColumnOne>;
  RowColumnOneConnectInput: RowColumnOneConnectInput;
  RowColumnOneConnection: ResolverTypeWrapper<RowColumnOneConnection>;
  RowColumnOneCreateInput: RowColumnOneCreateInput;
  RowColumnOneCreateLocalizationDataInput: RowColumnOneCreateLocalizationDataInput;
  RowColumnOneCreateLocalizationInput: RowColumnOneCreateLocalizationInput;
  RowColumnOneCreateLocalizationsInput: RowColumnOneCreateLocalizationsInput;
  RowColumnOneCreateManyInlineInput: RowColumnOneCreateManyInlineInput;
  RowColumnOneCreateOneInlineInput: RowColumnOneCreateOneInlineInput;
  RowColumnOneEdge: ResolverTypeWrapper<RowColumnOneEdge>;
  RowColumnOneManyWhereInput: RowColumnOneManyWhereInput;
  RowColumnOneOrderByInput: RowColumnOneOrderByInput;
  RowColumnOneUpdateInput: RowColumnOneUpdateInput;
  RowColumnOneUpdateLocalizationDataInput: RowColumnOneUpdateLocalizationDataInput;
  RowColumnOneUpdateLocalizationInput: RowColumnOneUpdateLocalizationInput;
  RowColumnOneUpdateLocalizationsInput: RowColumnOneUpdateLocalizationsInput;
  RowColumnOneUpdateManyInlineInput: RowColumnOneUpdateManyInlineInput;
  RowColumnOneUpdateManyInput: RowColumnOneUpdateManyInput;
  RowColumnOneUpdateManyLocalizationDataInput: RowColumnOneUpdateManyLocalizationDataInput;
  RowColumnOneUpdateManyLocalizationInput: RowColumnOneUpdateManyLocalizationInput;
  RowColumnOneUpdateManyLocalizationsInput: RowColumnOneUpdateManyLocalizationsInput;
  RowColumnOneUpdateManyWithNestedWhereInput: RowColumnOneUpdateManyWithNestedWhereInput;
  RowColumnOneUpdateOneInlineInput: RowColumnOneUpdateOneInlineInput;
  RowColumnOneUpdateWithNestedWhereUniqueInput: RowColumnOneUpdateWithNestedWhereUniqueInput;
  RowColumnOneUpsertInput: RowColumnOneUpsertInput;
  RowColumnOneUpsertLocalizationInput: RowColumnOneUpsertLocalizationInput;
  RowColumnOneUpsertWithNestedWhereUniqueInput: RowColumnOneUpsertWithNestedWhereUniqueInput;
  RowColumnOneWhereInput: RowColumnOneWhereInput;
  RowColumnOneWhereUniqueInput: RowColumnOneWhereUniqueInput;
  RowColumnThree: ResolverTypeWrapper<RowColumnThree>;
  RowColumnThreeConnectInput: RowColumnThreeConnectInput;
  RowColumnThreeConnection: ResolverTypeWrapper<RowColumnThreeConnection>;
  RowColumnThreeCreateInput: RowColumnThreeCreateInput;
  RowColumnThreeCreateLocalizationDataInput: RowColumnThreeCreateLocalizationDataInput;
  RowColumnThreeCreateLocalizationInput: RowColumnThreeCreateLocalizationInput;
  RowColumnThreeCreateLocalizationsInput: RowColumnThreeCreateLocalizationsInput;
  RowColumnThreeCreateManyInlineInput: RowColumnThreeCreateManyInlineInput;
  RowColumnThreeCreateOneInlineInput: RowColumnThreeCreateOneInlineInput;
  RowColumnThreeEdge: ResolverTypeWrapper<RowColumnThreeEdge>;
  RowColumnThreeManyWhereInput: RowColumnThreeManyWhereInput;
  RowColumnThreeOrderByInput: RowColumnThreeOrderByInput;
  RowColumnThreeUpdateInput: RowColumnThreeUpdateInput;
  RowColumnThreeUpdateLocalizationDataInput: RowColumnThreeUpdateLocalizationDataInput;
  RowColumnThreeUpdateLocalizationInput: RowColumnThreeUpdateLocalizationInput;
  RowColumnThreeUpdateLocalizationsInput: RowColumnThreeUpdateLocalizationsInput;
  RowColumnThreeUpdateManyInlineInput: RowColumnThreeUpdateManyInlineInput;
  RowColumnThreeUpdateManyInput: RowColumnThreeUpdateManyInput;
  RowColumnThreeUpdateManyLocalizationDataInput: RowColumnThreeUpdateManyLocalizationDataInput;
  RowColumnThreeUpdateManyLocalizationInput: RowColumnThreeUpdateManyLocalizationInput;
  RowColumnThreeUpdateManyLocalizationsInput: RowColumnThreeUpdateManyLocalizationsInput;
  RowColumnThreeUpdateManyWithNestedWhereInput: RowColumnThreeUpdateManyWithNestedWhereInput;
  RowColumnThreeUpdateOneInlineInput: RowColumnThreeUpdateOneInlineInput;
  RowColumnThreeUpdateWithNestedWhereUniqueInput: RowColumnThreeUpdateWithNestedWhereUniqueInput;
  RowColumnThreeUpsertInput: RowColumnThreeUpsertInput;
  RowColumnThreeUpsertLocalizationInput: RowColumnThreeUpsertLocalizationInput;
  RowColumnThreeUpsertWithNestedWhereUniqueInput: RowColumnThreeUpsertWithNestedWhereUniqueInput;
  RowColumnThreeWhereInput: RowColumnThreeWhereInput;
  RowColumnThreeWhereUniqueInput: RowColumnThreeWhereUniqueInput;
  RowColumnTwo: ResolverTypeWrapper<RowColumnTwo>;
  RowColumnTwoConnectInput: RowColumnTwoConnectInput;
  RowColumnTwoConnection: ResolverTypeWrapper<RowColumnTwoConnection>;
  RowColumnTwoCreateInput: RowColumnTwoCreateInput;
  RowColumnTwoCreateLocalizationDataInput: RowColumnTwoCreateLocalizationDataInput;
  RowColumnTwoCreateLocalizationInput: RowColumnTwoCreateLocalizationInput;
  RowColumnTwoCreateLocalizationsInput: RowColumnTwoCreateLocalizationsInput;
  RowColumnTwoCreateManyInlineInput: RowColumnTwoCreateManyInlineInput;
  RowColumnTwoCreateOneInlineInput: RowColumnTwoCreateOneInlineInput;
  RowColumnTwoEdge: ResolverTypeWrapper<RowColumnTwoEdge>;
  RowColumnTwoManyWhereInput: RowColumnTwoManyWhereInput;
  RowColumnTwoOrderByInput: RowColumnTwoOrderByInput;
  RowColumnTwoUpdateInput: RowColumnTwoUpdateInput;
  RowColumnTwoUpdateLocalizationDataInput: RowColumnTwoUpdateLocalizationDataInput;
  RowColumnTwoUpdateLocalizationInput: RowColumnTwoUpdateLocalizationInput;
  RowColumnTwoUpdateLocalizationsInput: RowColumnTwoUpdateLocalizationsInput;
  RowColumnTwoUpdateManyInlineInput: RowColumnTwoUpdateManyInlineInput;
  RowColumnTwoUpdateManyInput: RowColumnTwoUpdateManyInput;
  RowColumnTwoUpdateManyLocalizationDataInput: RowColumnTwoUpdateManyLocalizationDataInput;
  RowColumnTwoUpdateManyLocalizationInput: RowColumnTwoUpdateManyLocalizationInput;
  RowColumnTwoUpdateManyLocalizationsInput: RowColumnTwoUpdateManyLocalizationsInput;
  RowColumnTwoUpdateManyWithNestedWhereInput: RowColumnTwoUpdateManyWithNestedWhereInput;
  RowColumnTwoUpdateOneInlineInput: RowColumnTwoUpdateOneInlineInput;
  RowColumnTwoUpdateWithNestedWhereUniqueInput: RowColumnTwoUpdateWithNestedWhereUniqueInput;
  RowColumnTwoUpsertInput: RowColumnTwoUpsertInput;
  RowColumnTwoUpsertLocalizationInput: RowColumnTwoUpsertLocalizationInput;
  RowColumnTwoUpsertWithNestedWhereUniqueInput: RowColumnTwoUpsertWithNestedWhereUniqueInput;
  RowColumnTwoWhereInput: RowColumnTwoWhereInput;
  RowColumnTwoWhereUniqueInput: RowColumnTwoWhereUniqueInput;
  RowContentLinks: ResolverTypeWrapper<RowContentLinks>;
  RowContentLinksConnectInput: RowContentLinksConnectInput;
  RowContentLinksConnection: ResolverTypeWrapper<RowContentLinksConnection>;
  RowContentLinksCreateInput: RowContentLinksCreateInput;
  RowContentLinksCreateLocalizationDataInput: RowContentLinksCreateLocalizationDataInput;
  RowContentLinksCreateLocalizationInput: RowContentLinksCreateLocalizationInput;
  RowContentLinksCreateLocalizationsInput: RowContentLinksCreateLocalizationsInput;
  RowContentLinksCreateManyInlineInput: RowContentLinksCreateManyInlineInput;
  RowContentLinksCreateOneInlineInput: RowContentLinksCreateOneInlineInput;
  RowContentLinksEdge: ResolverTypeWrapper<RowContentLinksEdge>;
  RowContentLinksManyWhereInput: RowContentLinksManyWhereInput;
  RowContentLinksOrderByInput: RowContentLinksOrderByInput;
  RowContentLinksUpdateInput: RowContentLinksUpdateInput;
  RowContentLinksUpdateLocalizationDataInput: RowContentLinksUpdateLocalizationDataInput;
  RowContentLinksUpdateLocalizationInput: RowContentLinksUpdateLocalizationInput;
  RowContentLinksUpdateLocalizationsInput: RowContentLinksUpdateLocalizationsInput;
  RowContentLinksUpdateManyInlineInput: RowContentLinksUpdateManyInlineInput;
  RowContentLinksUpdateManyInput: RowContentLinksUpdateManyInput;
  RowContentLinksUpdateManyLocalizationDataInput: RowContentLinksUpdateManyLocalizationDataInput;
  RowContentLinksUpdateManyLocalizationInput: RowContentLinksUpdateManyLocalizationInput;
  RowContentLinksUpdateManyLocalizationsInput: RowContentLinksUpdateManyLocalizationsInput;
  RowContentLinksUpdateManyWithNestedWhereInput: RowContentLinksUpdateManyWithNestedWhereInput;
  RowContentLinksUpdateOneInlineInput: RowContentLinksUpdateOneInlineInput;
  RowContentLinksUpdateWithNestedWhereUniqueInput: RowContentLinksUpdateWithNestedWhereUniqueInput;
  RowContentLinksUpsertInput: RowContentLinksUpsertInput;
  RowContentLinksUpsertLocalizationInput: RowContentLinksUpsertLocalizationInput;
  RowContentLinksUpsertWithNestedWhereUniqueInput: RowContentLinksUpsertWithNestedWhereUniqueInput;
  RowContentLinksWhereInput: RowContentLinksWhereInput;
  RowContentLinksWhereUniqueInput: RowContentLinksWhereUniqueInput;
  RowHeroBanner: ResolverTypeWrapper<RowHeroBanner>;
  RowHeroBannerConnectInput: RowHeroBannerConnectInput;
  RowHeroBannerConnection: ResolverTypeWrapper<RowHeroBannerConnection>;
  RowHeroBannerCreateInput: RowHeroBannerCreateInput;
  RowHeroBannerCreateLocalizationDataInput: RowHeroBannerCreateLocalizationDataInput;
  RowHeroBannerCreateLocalizationInput: RowHeroBannerCreateLocalizationInput;
  RowHeroBannerCreateLocalizationsInput: RowHeroBannerCreateLocalizationsInput;
  RowHeroBannerCreateManyInlineInput: RowHeroBannerCreateManyInlineInput;
  RowHeroBannerCreateOneInlineInput: RowHeroBannerCreateOneInlineInput;
  RowHeroBannerEdge: ResolverTypeWrapper<RowHeroBannerEdge>;
  RowHeroBannerManyWhereInput: RowHeroBannerManyWhereInput;
  RowHeroBannerOrderByInput: RowHeroBannerOrderByInput;
  RowHeroBannerUpdateInput: RowHeroBannerUpdateInput;
  RowHeroBannerUpdateLocalizationDataInput: RowHeroBannerUpdateLocalizationDataInput;
  RowHeroBannerUpdateLocalizationInput: RowHeroBannerUpdateLocalizationInput;
  RowHeroBannerUpdateLocalizationsInput: RowHeroBannerUpdateLocalizationsInput;
  RowHeroBannerUpdateManyInlineInput: RowHeroBannerUpdateManyInlineInput;
  RowHeroBannerUpdateManyInput: RowHeroBannerUpdateManyInput;
  RowHeroBannerUpdateManyLocalizationDataInput: RowHeroBannerUpdateManyLocalizationDataInput;
  RowHeroBannerUpdateManyLocalizationInput: RowHeroBannerUpdateManyLocalizationInput;
  RowHeroBannerUpdateManyLocalizationsInput: RowHeroBannerUpdateManyLocalizationsInput;
  RowHeroBannerUpdateManyWithNestedWhereInput: RowHeroBannerUpdateManyWithNestedWhereInput;
  RowHeroBannerUpdateOneInlineInput: RowHeroBannerUpdateOneInlineInput;
  RowHeroBannerUpdateWithNestedWhereUniqueInput: RowHeroBannerUpdateWithNestedWhereUniqueInput;
  RowHeroBannerUpsertInput: RowHeroBannerUpsertInput;
  RowHeroBannerUpsertLocalizationInput: RowHeroBannerUpsertLocalizationInput;
  RowHeroBannerUpsertWithNestedWhereUniqueInput: RowHeroBannerUpsertWithNestedWhereUniqueInput;
  RowHeroBannerWhereInput: RowHeroBannerWhereInput;
  RowHeroBannerWhereUniqueInput: RowHeroBannerWhereUniqueInput;
  RowProduct: ResolverTypeWrapper<RowProduct>;
  RowProductConnectInput: RowProductConnectInput;
  RowProductConnection: ResolverTypeWrapper<RowProductConnection>;
  RowProductCreateInput: RowProductCreateInput;
  RowProductCreateLocalizationDataInput: RowProductCreateLocalizationDataInput;
  RowProductCreateLocalizationInput: RowProductCreateLocalizationInput;
  RowProductCreateLocalizationsInput: RowProductCreateLocalizationsInput;
  RowProductCreateManyInlineInput: RowProductCreateManyInlineInput;
  RowProductCreateOneInlineInput: RowProductCreateOneInlineInput;
  RowProductEdge: ResolverTypeWrapper<RowProductEdge>;
  RowProductManyWhereInput: RowProductManyWhereInput;
  RowProductOrderByInput: RowProductOrderByInput;
  RowProductUpdateInput: RowProductUpdateInput;
  RowProductUpdateLocalizationDataInput: RowProductUpdateLocalizationDataInput;
  RowProductUpdateLocalizationInput: RowProductUpdateLocalizationInput;
  RowProductUpdateLocalizationsInput: RowProductUpdateLocalizationsInput;
  RowProductUpdateManyInlineInput: RowProductUpdateManyInlineInput;
  RowProductUpdateManyInput: RowProductUpdateManyInput;
  RowProductUpdateManyLocalizationDataInput: RowProductUpdateManyLocalizationDataInput;
  RowProductUpdateManyLocalizationInput: RowProductUpdateManyLocalizationInput;
  RowProductUpdateManyLocalizationsInput: RowProductUpdateManyLocalizationsInput;
  RowProductUpdateManyWithNestedWhereInput: RowProductUpdateManyWithNestedWhereInput;
  RowProductUpdateOneInlineInput: RowProductUpdateOneInlineInput;
  RowProductUpdateWithNestedWhereUniqueInput: RowProductUpdateWithNestedWhereUniqueInput;
  RowProductUpsertInput: RowProductUpsertInput;
  RowProductUpsertLocalizationInput: RowProductUpsertLocalizationInput;
  RowProductUpsertWithNestedWhereUniqueInput: RowProductUpsertWithNestedWhereUniqueInput;
  RowProductVariants: RowProductVariants;
  RowProductWhereInput: RowProductWhereInput;
  RowProductWhereUniqueInput: RowProductWhereUniqueInput;
  RowQuote: ResolverTypeWrapper<RowQuote>;
  RowQuoteConnectInput: RowQuoteConnectInput;
  RowQuoteConnection: ResolverTypeWrapper<RowQuoteConnection>;
  RowQuoteCreateInput: RowQuoteCreateInput;
  RowQuoteCreateLocalizationDataInput: RowQuoteCreateLocalizationDataInput;
  RowQuoteCreateLocalizationInput: RowQuoteCreateLocalizationInput;
  RowQuoteCreateLocalizationsInput: RowQuoteCreateLocalizationsInput;
  RowQuoteCreateManyInlineInput: RowQuoteCreateManyInlineInput;
  RowQuoteCreateOneInlineInput: RowQuoteCreateOneInlineInput;
  RowQuoteEdge: ResolverTypeWrapper<RowQuoteEdge>;
  RowQuoteManyWhereInput: RowQuoteManyWhereInput;
  RowQuoteOrderByInput: RowQuoteOrderByInput;
  RowQuoteUpdateInput: RowQuoteUpdateInput;
  RowQuoteUpdateLocalizationDataInput: RowQuoteUpdateLocalizationDataInput;
  RowQuoteUpdateLocalizationInput: RowQuoteUpdateLocalizationInput;
  RowQuoteUpdateLocalizationsInput: RowQuoteUpdateLocalizationsInput;
  RowQuoteUpdateManyInlineInput: RowQuoteUpdateManyInlineInput;
  RowQuoteUpdateManyInput: RowQuoteUpdateManyInput;
  RowQuoteUpdateManyLocalizationDataInput: RowQuoteUpdateManyLocalizationDataInput;
  RowQuoteUpdateManyLocalizationInput: RowQuoteUpdateManyLocalizationInput;
  RowQuoteUpdateManyLocalizationsInput: RowQuoteUpdateManyLocalizationsInput;
  RowQuoteUpdateManyWithNestedWhereInput: RowQuoteUpdateManyWithNestedWhereInput;
  RowQuoteUpdateOneInlineInput: RowQuoteUpdateOneInlineInput;
  RowQuoteUpdateWithNestedWhereUniqueInput: RowQuoteUpdateWithNestedWhereUniqueInput;
  RowQuoteUpsertInput: RowQuoteUpsertInput;
  RowQuoteUpsertLocalizationInput: RowQuoteUpsertLocalizationInput;
  RowQuoteUpsertWithNestedWhereUniqueInput: RowQuoteUpsertWithNestedWhereUniqueInput;
  RowQuoteWhereInput: RowQuoteWhereInput;
  RowQuoteWhereUniqueInput: RowQuoteWhereUniqueInput;
  RowServiceOptions: ResolverTypeWrapper<RowServiceOptions>;
  RowServiceOptionsConnectInput: RowServiceOptionsConnectInput;
  RowServiceOptionsConnection: ResolverTypeWrapper<RowServiceOptionsConnection>;
  RowServiceOptionsCreateInput: RowServiceOptionsCreateInput;
  RowServiceOptionsCreateLocalizationDataInput: RowServiceOptionsCreateLocalizationDataInput;
  RowServiceOptionsCreateLocalizationInput: RowServiceOptionsCreateLocalizationInput;
  RowServiceOptionsCreateLocalizationsInput: RowServiceOptionsCreateLocalizationsInput;
  RowServiceOptionsCreateManyInlineInput: RowServiceOptionsCreateManyInlineInput;
  RowServiceOptionsCreateOneInlineInput: RowServiceOptionsCreateOneInlineInput;
  RowServiceOptionsEdge: ResolverTypeWrapper<RowServiceOptionsEdge>;
  RowServiceOptionsManyWhereInput: RowServiceOptionsManyWhereInput;
  RowServiceOptionsOrderByInput: RowServiceOptionsOrderByInput;
  RowServiceOptionsUpdateInput: RowServiceOptionsUpdateInput;
  RowServiceOptionsUpdateLocalizationDataInput: RowServiceOptionsUpdateLocalizationDataInput;
  RowServiceOptionsUpdateLocalizationInput: RowServiceOptionsUpdateLocalizationInput;
  RowServiceOptionsUpdateLocalizationsInput: RowServiceOptionsUpdateLocalizationsInput;
  RowServiceOptionsUpdateManyInlineInput: RowServiceOptionsUpdateManyInlineInput;
  RowServiceOptionsUpdateManyInput: RowServiceOptionsUpdateManyInput;
  RowServiceOptionsUpdateManyLocalizationDataInput: RowServiceOptionsUpdateManyLocalizationDataInput;
  RowServiceOptionsUpdateManyLocalizationInput: RowServiceOptionsUpdateManyLocalizationInput;
  RowServiceOptionsUpdateManyLocalizationsInput: RowServiceOptionsUpdateManyLocalizationsInput;
  RowServiceOptionsUpdateManyWithNestedWhereInput: RowServiceOptionsUpdateManyWithNestedWhereInput;
  RowServiceOptionsUpdateOneInlineInput: RowServiceOptionsUpdateOneInlineInput;
  RowServiceOptionsUpdateWithNestedWhereUniqueInput: RowServiceOptionsUpdateWithNestedWhereUniqueInput;
  RowServiceOptionsUpsertInput: RowServiceOptionsUpsertInput;
  RowServiceOptionsUpsertLocalizationInput: RowServiceOptionsUpsertLocalizationInput;
  RowServiceOptionsUpsertWithNestedWhereUniqueInput: RowServiceOptionsUpsertWithNestedWhereUniqueInput;
  RowServiceOptionsWhereInput: RowServiceOptionsWhereInput;
  RowServiceOptionsWhereUniqueInput: RowServiceOptionsWhereUniqueInput;
  RowSpecialBanner: ResolverTypeWrapper<RowSpecialBanner>;
  RowSpecialBannerConnectInput: RowSpecialBannerConnectInput;
  RowSpecialBannerConnection: ResolverTypeWrapper<RowSpecialBannerConnection>;
  RowSpecialBannerCreateInput: RowSpecialBannerCreateInput;
  RowSpecialBannerCreateLocalizationDataInput: RowSpecialBannerCreateLocalizationDataInput;
  RowSpecialBannerCreateLocalizationInput: RowSpecialBannerCreateLocalizationInput;
  RowSpecialBannerCreateLocalizationsInput: RowSpecialBannerCreateLocalizationsInput;
  RowSpecialBannerCreateManyInlineInput: RowSpecialBannerCreateManyInlineInput;
  RowSpecialBannerCreateOneInlineInput: RowSpecialBannerCreateOneInlineInput;
  RowSpecialBannerEdge: ResolverTypeWrapper<RowSpecialBannerEdge>;
  RowSpecialBannerManyWhereInput: RowSpecialBannerManyWhereInput;
  RowSpecialBannerOrderByInput: RowSpecialBannerOrderByInput;
  RowSpecialBannerUpdateInput: RowSpecialBannerUpdateInput;
  RowSpecialBannerUpdateLocalizationDataInput: RowSpecialBannerUpdateLocalizationDataInput;
  RowSpecialBannerUpdateLocalizationInput: RowSpecialBannerUpdateLocalizationInput;
  RowSpecialBannerUpdateLocalizationsInput: RowSpecialBannerUpdateLocalizationsInput;
  RowSpecialBannerUpdateManyInlineInput: RowSpecialBannerUpdateManyInlineInput;
  RowSpecialBannerUpdateManyInput: RowSpecialBannerUpdateManyInput;
  RowSpecialBannerUpdateManyLocalizationDataInput: RowSpecialBannerUpdateManyLocalizationDataInput;
  RowSpecialBannerUpdateManyLocalizationInput: RowSpecialBannerUpdateManyLocalizationInput;
  RowSpecialBannerUpdateManyLocalizationsInput: RowSpecialBannerUpdateManyLocalizationsInput;
  RowSpecialBannerUpdateManyWithNestedWhereInput: RowSpecialBannerUpdateManyWithNestedWhereInput;
  RowSpecialBannerUpdateOneInlineInput: RowSpecialBannerUpdateOneInlineInput;
  RowSpecialBannerUpdateWithNestedWhereUniqueInput: RowSpecialBannerUpdateWithNestedWhereUniqueInput;
  RowSpecialBannerUpsertInput: RowSpecialBannerUpsertInput;
  RowSpecialBannerUpsertLocalizationInput: RowSpecialBannerUpsertLocalizationInput;
  RowSpecialBannerUpsertWithNestedWhereUniqueInput: RowSpecialBannerUpsertWithNestedWhereUniqueInput;
  RowSpecialBannerWhereInput: RowSpecialBannerWhereInput;
  RowSpecialBannerWhereUniqueInput: RowSpecialBannerWhereUniqueInput;
  ScheduledOperation: ResolverTypeWrapper<Omit<ScheduledOperation, 'affectedDocuments'> & { affectedDocuments: Array<ResolversTypes['ScheduledOperationAffectedDocument']> }>;
  ScheduledOperationAffectedDocument: ResolversTypes['Asset'] | ResolversTypes['Banner'] | ResolversTypes['Footer'] | ResolversTypes['Page'] | ResolversTypes['PageLink'] | ResolversTypes['RowBlogContent'] | ResolversTypes['RowButtonLinkList'] | ResolversTypes['RowColumnOne'] | ResolversTypes['RowColumnThree'] | ResolversTypes['RowColumnTwo'] | ResolversTypes['RowContentLinks'] | ResolversTypes['RowHeroBanner'] | ResolversTypes['RowProduct'] | ResolversTypes['RowQuote'] | ResolversTypes['RowServiceOptions'] | ResolversTypes['RowSpecialBanner'] | ResolversTypes['Usps'];
  ScheduledOperationConnectInput: ScheduledOperationConnectInput;
  ScheduledOperationConnection: ResolverTypeWrapper<ScheduledOperationConnection>;
  ScheduledOperationCreateManyInlineInput: ScheduledOperationCreateManyInlineInput;
  ScheduledOperationCreateOneInlineInput: ScheduledOperationCreateOneInlineInput;
  ScheduledOperationEdge: ResolverTypeWrapper<ScheduledOperationEdge>;
  ScheduledOperationManyWhereInput: ScheduledOperationManyWhereInput;
  ScheduledOperationOrderByInput: ScheduledOperationOrderByInput;
  ScheduledOperationStatus: ScheduledOperationStatus;
  ScheduledOperationUpdateManyInlineInput: ScheduledOperationUpdateManyInlineInput;
  ScheduledOperationUpdateOneInlineInput: ScheduledOperationUpdateOneInlineInput;
  ScheduledOperationWhereInput: ScheduledOperationWhereInput;
  ScheduledOperationWhereUniqueInput: ScheduledOperationWhereUniqueInput;
  ScheduledRelease: ResolverTypeWrapper<ScheduledRelease>;
  ScheduledReleaseConnectInput: ScheduledReleaseConnectInput;
  ScheduledReleaseConnection: ResolverTypeWrapper<ScheduledReleaseConnection>;
  ScheduledReleaseCreateInput: ScheduledReleaseCreateInput;
  ScheduledReleaseCreateManyInlineInput: ScheduledReleaseCreateManyInlineInput;
  ScheduledReleaseCreateOneInlineInput: ScheduledReleaseCreateOneInlineInput;
  ScheduledReleaseEdge: ResolverTypeWrapper<ScheduledReleaseEdge>;
  ScheduledReleaseManyWhereInput: ScheduledReleaseManyWhereInput;
  ScheduledReleaseOrderByInput: ScheduledReleaseOrderByInput;
  ScheduledReleaseStatus: ScheduledReleaseStatus;
  ScheduledReleaseUpdateInput: ScheduledReleaseUpdateInput;
  ScheduledReleaseUpdateManyInlineInput: ScheduledReleaseUpdateManyInlineInput;
  ScheduledReleaseUpdateManyInput: ScheduledReleaseUpdateManyInput;
  ScheduledReleaseUpdateManyWithNestedWhereInput: ScheduledReleaseUpdateManyWithNestedWhereInput;
  ScheduledReleaseUpdateOneInlineInput: ScheduledReleaseUpdateOneInlineInput;
  ScheduledReleaseUpdateWithNestedWhereUniqueInput: ScheduledReleaseUpdateWithNestedWhereUniqueInput;
  ScheduledReleaseUpsertInput: ScheduledReleaseUpsertInput;
  ScheduledReleaseUpsertWithNestedWhereUniqueInput: ScheduledReleaseUpsertWithNestedWhereUniqueInput;
  ScheduledReleaseWhereInput: ScheduledReleaseWhereInput;
  ScheduledReleaseWhereUniqueInput: ScheduledReleaseWhereUniqueInput;
  Stage: Stage;
  String: ResolverTypeWrapper<Scalars['String']>;
  SystemDateTimeFieldVariation: SystemDateTimeFieldVariation;
  UnpublishLocaleInput: UnpublishLocaleInput;
  User: ResolverTypeWrapper<User>;
  UserConnectInput: UserConnectInput;
  UserConnection: ResolverTypeWrapper<UserConnection>;
  UserCreateManyInlineInput: UserCreateManyInlineInput;
  UserCreateOneInlineInput: UserCreateOneInlineInput;
  UserEdge: ResolverTypeWrapper<UserEdge>;
  UserKind: UserKind;
  UserManyWhereInput: UserManyWhereInput;
  UserOrderByInput: UserOrderByInput;
  UserUpdateManyInlineInput: UserUpdateManyInlineInput;
  UserUpdateOneInlineInput: UserUpdateOneInlineInput;
  UserWhereInput: UserWhereInput;
  UserWhereUniqueInput: UserWhereUniqueInput;
  Usps: ResolverTypeWrapper<Usps>;
  UspsConnectInput: UspsConnectInput;
  UspsConnection: ResolverTypeWrapper<UspsConnection>;
  UspsCreateInput: UspsCreateInput;
  UspsCreateManyInlineInput: UspsCreateManyInlineInput;
  UspsCreateOneInlineInput: UspsCreateOneInlineInput;
  UspsEdge: ResolverTypeWrapper<UspsEdge>;
  UspsManyWhereInput: UspsManyWhereInput;
  UspsOrderByInput: UspsOrderByInput;
  UspsUpdateInput: UspsUpdateInput;
  UspsUpdateManyInlineInput: UspsUpdateManyInlineInput;
  UspsUpdateManyInput: UspsUpdateManyInput;
  UspsUpdateManyWithNestedWhereInput: UspsUpdateManyWithNestedWhereInput;
  UspsUpdateOneInlineInput: UspsUpdateOneInlineInput;
  UspsUpdateWithNestedWhereUniqueInput: UspsUpdateWithNestedWhereUniqueInput;
  UspsUpsertInput: UspsUpsertInput;
  UspsUpsertWithNestedWhereUniqueInput: UspsUpsertWithNestedWhereUniqueInput;
  UspsWhereInput: UspsWhereInput;
  UspsWhereUniqueInput: UspsWhereUniqueInput;
  Version: ResolverTypeWrapper<Version>;
  VersionWhereInput: VersionWhereInput;
  _FilterKind: _FilterKind;
  _MutationInputFieldKind: _MutationInputFieldKind;
  _MutationKind: _MutationKind;
  _OrderDirection: _OrderDirection;
  _RelationInputCardinality: _RelationInputCardinality;
  _RelationInputKind: _RelationInputKind;
  _RelationKind: _RelationKind;
  _SystemDateTimeFieldVariation: _SystemDateTimeFieldVariation;
  StoreConfig: ResolverTypeWrapper<StoreConfig>;
  FixedProductTaxDisplaySettings: FixedProductTaxDisplaySettings;
  SendFriendConfiguration: ResolverTypeWrapper<SendFriendConfiguration>;
  Cart: ResolverTypeWrapper<Cart>;
  AppliedCoupon: ResolverTypeWrapper<AppliedCoupon>;
  AvailablePaymentMethod: ResolverTypeWrapper<AvailablePaymentMethod>;
  MollieIssuer: ResolverTypeWrapper<MollieIssuer>;
  MolliePaymentMethodMeta: ResolverTypeWrapper<MolliePaymentMethodMeta>;
  BillingCartAddress: ResolverTypeWrapper<BillingCartAddress>;
  CartAddressInterface: ResolversTypes['BillingCartAddress'] | ResolversTypes['ShippingCartAddress'];
  CartAddressCountry: ResolverTypeWrapper<CartAddressCountry>;
  CartAddressRegion: ResolverTypeWrapper<CartAddressRegion>;
  GiftMessage: ResolverTypeWrapper<GiftMessage>;
  CartItemInterface: ResolversTypes['SimpleCartItem'] | ResolversTypes['VirtualCartItem'] | ResolversTypes['DownloadableCartItem'] | ResolversTypes['BundleCartItem'] | ResolversTypes['ConfigurableCartItem'];
  CartItemPrices: ResolverTypeWrapper<CartItemPrices>;
  Discount: ResolverTypeWrapper<Discount>;
  Money: ResolverTypeWrapper<Money>;
  CurrencyEnum: CurrencyEnum;
  FixedProductTax: ResolverTypeWrapper<FixedProductTax>;
  ProductInterface: ResolversTypes['VirtualProduct'] | ResolversTypes['SimpleProduct'] | ResolversTypes['DownloadableProduct'] | ResolversTypes['BundleProduct'] | ResolversTypes['GroupedProduct'] | ResolversTypes['ConfigurableProduct'];
  CategoryInterface: ResolversTypes['CategoryTree'];
  Breadcrumb: ResolverTypeWrapper<Breadcrumb>;
  CmsBlock: ResolverTypeWrapper<CmsBlock>;
  ProductAttributeSortInput: ProductAttributeSortInput;
  SortEnum: SortEnum;
  CategoryProducts: ResolverTypeWrapper<CategoryProducts>;
  SearchResultPageInfo: ResolverTypeWrapper<SearchResultPageInfo>;
  ComplexTextValue: ResolverTypeWrapper<ComplexTextValue>;
  ProductImage: ResolverTypeWrapper<ProductImage>;
  MediaGalleryInterface: ResolversTypes['ProductImage'] | ResolversTypes['ProductVideo'];
  MediaGalleryEntry: ResolverTypeWrapper<MediaGalleryEntry>;
  ProductMediaGalleryEntriesContent: ResolverTypeWrapper<ProductMediaGalleryEntriesContent>;
  ProductMediaGalleryEntriesVideoContent: ResolverTypeWrapper<ProductMediaGalleryEntriesVideoContent>;
  ProductPrices: ResolverTypeWrapper<ProductPrices>;
  Price: ResolverTypeWrapper<Price>;
  PriceAdjustment: ResolverTypeWrapper<PriceAdjustment>;
  PriceAdjustmentCodesEnum: PriceAdjustmentCodesEnum;
  PriceAdjustmentDescriptionEnum: PriceAdjustmentDescriptionEnum;
  PriceRange: ResolverTypeWrapper<PriceRange>;
  ProductPrice: ResolverTypeWrapper<ProductPrice>;
  ProductDiscount: ResolverTypeWrapper<ProductDiscount>;
  TierPrice: ResolverTypeWrapper<TierPrice>;
  ProductLinksInterface: ResolversTypes['ProductLinks'];
  ProductReviews: ResolverTypeWrapper<ProductReviews>;
  ProductReview: ResolverTypeWrapper<ProductReview>;
  ProductReviewRating: ResolverTypeWrapper<ProductReviewRating>;
  ProductStockStatus: ProductStockStatus;
  ProductTierPrices: ResolverTypeWrapper<ProductTierPrices>;
  UrlRewrite: ResolverTypeWrapper<UrlRewrite>;
  HttpQueryParameter: ResolverTypeWrapper<HttpQueryParameter>;
  Website: ResolverTypeWrapper<Website>;
  CartPrices: ResolverTypeWrapper<CartPrices>;
  CartTaxItem: ResolverTypeWrapper<CartTaxItem>;
  CartDiscount: ResolverTypeWrapper<CartDiscount>;
  SelectedPaymentMethod: ResolverTypeWrapper<SelectedPaymentMethod>;
  ShippingCartAddress: ResolverTypeWrapper<ShippingCartAddress>;
  AvailableShippingMethod: ResolverTypeWrapper<AvailableShippingMethod>;
  CartItemQuantity: ResolverTypeWrapper<CartItemQuantity>;
  SelectedShippingMethod: ResolverTypeWrapper<SelectedShippingMethod>;
  CategoryFilterInput: CategoryFilterInput;
  FilterEqualTypeInput: FilterEqualTypeInput;
  FilterMatchTypeInput: FilterMatchTypeInput;
  CategoryResult: ResolverTypeWrapper<CategoryResult>;
  CategoryTree: ResolverTypeWrapper<CategoryTree>;
  RoutableInterface: ResolversTypes['CategoryTree'] | ResolversTypes['CmsPage'] | ResolversTypes['VirtualProduct'] | ResolversTypes['SimpleProduct'] | ResolversTypes['DownloadableProduct'] | ResolversTypes['BundleProduct'] | ResolversTypes['GroupedProduct'] | ResolversTypes['ConfigurableProduct'];
  UrlRewriteEntityTypeEnum: UrlRewriteEntityTypeEnum;
  ChatData: ResolverTypeWrapper<ChatData>;
  CheckoutAgreement: ResolverTypeWrapper<CheckoutAgreement>;
  CheckoutAgreementMode: CheckoutAgreementMode;
  CmsBlocks: ResolverTypeWrapper<CmsBlocks>;
  CmsPage: ResolverTypeWrapper<CmsPage>;
  CompareList: ResolverTypeWrapper<CompareList>;
  ComparableAttribute: ResolverTypeWrapper<ComparableAttribute>;
  ComparableItem: ResolverTypeWrapper<ComparableItem>;
  ProductAttribute: ResolverTypeWrapper<ProductAttribute>;
  Country: ResolverTypeWrapper<Country>;
  Region: ResolverTypeWrapper<Region>;
  Currency: ResolverTypeWrapper<Currency>;
  ExchangeRate: ResolverTypeWrapper<ExchangeRate>;
  AttributeInput: AttributeInput;
  CustomAttributeMetadata: ResolverTypeWrapper<CustomAttributeMetadata>;
  Attribute: ResolverTypeWrapper<Attribute>;
  AttributeOption: ResolverTypeWrapper<AttributeOption>;
  StorefrontProperties: ResolverTypeWrapper<StorefrontProperties>;
  UseInLayeredNavigationOptions: UseInLayeredNavigationOptions;
  Customer: ResolverTypeWrapper<Customer>;
  CustomerAddress: ResolverTypeWrapper<CustomerAddress>;
  CountryCodeEnum: CountryCodeEnum;
  CustomerAddressAttribute: ResolverTypeWrapper<CustomerAddressAttribute>;
  CustomerAddressRegion: ResolverTypeWrapper<CustomerAddressRegion>;
  CustomerOrdersFilterInput: CustomerOrdersFilterInput;
  FilterStringTypeInput: FilterStringTypeInput;
  CustomerOrders: ResolverTypeWrapper<CustomerOrders>;
  CustomerOrder: ResolverTypeWrapper<CustomerOrder>;
  OrderAddress: ResolverTypeWrapper<OrderAddress>;
  SalesCommentItem: ResolverTypeWrapper<SalesCommentItem>;
  CreditMemo: ResolverTypeWrapper<CreditMemo>;
  CreditMemoItemInterface: ResolversTypes['DownloadableCreditMemoItem'] | ResolversTypes['BundleCreditMemoItem'] | ResolversTypes['CreditMemoItem'];
  OrderItemInterface: ResolversTypes['DownloadableOrderItem'] | ResolversTypes['BundleOrderItem'] | ResolversTypes['OrderItem'];
  OrderItemOption: ResolverTypeWrapper<OrderItemOption>;
  CreditMemoTotal: ResolverTypeWrapper<CreditMemoTotal>;
  ShippingHandling: ResolverTypeWrapper<ShippingHandling>;
  ShippingDiscount: ResolverTypeWrapper<ShippingDiscount>;
  TaxItem: ResolverTypeWrapper<TaxItem>;
  Invoice: ResolverTypeWrapper<Invoice>;
  InvoiceItemInterface: ResolversTypes['DownloadableInvoiceItem'] | ResolversTypes['BundleInvoiceItem'] | ResolversTypes['InvoiceItem'];
  InvoiceTotal: ResolverTypeWrapper<InvoiceTotal>;
  OrderPaymentMethod: ResolverTypeWrapper<OrderPaymentMethod>;
  KeyValue: ResolverTypeWrapper<KeyValue>;
  OrderShipment: ResolverTypeWrapper<OrderShipment>;
  ShipmentItemInterface: ResolversTypes['BundleShipmentItem'] | ResolversTypes['ShipmentItem'];
  ShipmentTracking: ResolverTypeWrapper<ShipmentTracking>;
  OrderTotal: ResolverTypeWrapper<OrderTotal>;
  Wishlist: ResolverTypeWrapper<Wishlist>;
  WishlistItem: ResolverTypeWrapper<WishlistItem>;
  WishlistItems: ResolverTypeWrapper<WishlistItems>;
  WishlistItemInterface: ResolversTypes['SimpleWishlistItem'] | ResolversTypes['VirtualWishlistItem'] | ResolversTypes['DownloadableWishlistItem'] | ResolversTypes['BundleWishlistItem'] | ResolversTypes['GroupedProductWishlistItem'] | ResolversTypes['ConfigurableWishlistItem'];
  SelectedCustomizableOption: ResolverTypeWrapper<SelectedCustomizableOption>;
  SelectedCustomizableOptionValue: ResolverTypeWrapper<SelectedCustomizableOptionValue>;
  CartItemSelectedOptionValuePrice: ResolverTypeWrapper<CartItemSelectedOptionValuePrice>;
  PriceTypeEnum: PriceTypeEnum;
  CustomerDownloadableProducts: ResolverTypeWrapper<CustomerDownloadableProducts>;
  CustomerDownloadableProduct: ResolverTypeWrapper<CustomerDownloadableProduct>;
  CustomerPaymentTokens: ResolverTypeWrapper<CustomerPaymentTokens>;
  PaymentToken: ResolverTypeWrapper<PaymentToken>;
  PaymentTokenTypeEnum: PaymentTokenTypeEnum;
  IsConfigSettingEnabledOutput: ResolverTypeWrapper<IsConfigSettingEnabledOutput>;
  HostedProUrlInput: HostedProUrlInput;
  HostedProUrl: ResolverTypeWrapper<HostedProUrl>;
  PayflowLinkTokenInput: PayflowLinkTokenInput;
  PayflowLinkToken: ResolverTypeWrapper<PayflowLinkToken>;
  PayflowLinkMode: PayflowLinkMode;
  IsEmailAvailableOutput: ResolverTypeWrapper<IsEmailAvailableOutput>;
  MolliePaymentMethodsInput: MolliePaymentMethodsInput;
  MolliePaymentMethodsOutput: ResolverTypeWrapper<MolliePaymentMethodsOutput>;
  MolliePaymentMethod: ResolverTypeWrapper<MolliePaymentMethod>;
  Order: ResolverTypeWrapper<Order>;
  AreaInput: AreaInput;
  PickupLocationFilterInput: PickupLocationFilterInput;
  FilterTypeInput: FilterTypeInput;
  PickupLocationSortInput: PickupLocationSortInput;
  ProductInfoInput: ProductInfoInput;
  PickupLocations: ResolverTypeWrapper<PickupLocations>;
  PickupLocation: ResolverTypeWrapper<PickupLocation>;
  ProductReviewRatingsMetadata: ResolverTypeWrapper<ProductReviewRatingsMetadata>;
  ProductReviewRatingMetadata: ResolverTypeWrapper<ProductReviewRatingMetadata>;
  ProductReviewRatingValueMetadata: ResolverTypeWrapper<ProductReviewRatingValueMetadata>;
  ProductAttributeFilterInput: ProductAttributeFilterInput;
  FilterRangeTypeInput: FilterRangeTypeInput;
  Products: ResolverTypeWrapper<Products>;
  Aggregation: ResolverTypeWrapper<Aggregation>;
  AggregationOption: ResolverTypeWrapper<AggregationOption>;
  AggregationOptionInterface: ResolversTypes['AggregationOption'];
  LayerFilter: ResolverTypeWrapper<LayerFilter>;
  LayerFilterItemInterface: ResolversTypes['LayerFilterItem'] | ResolversTypes['SwatchLayerFilterItem'];
  SortFields: ResolverTypeWrapper<SortFields>;
  SortField: ResolverTypeWrapper<SortField>;
  TrackingData: ResolverTypeWrapper<TrackingData>;
  EntityUrl: ResolverTypeWrapper<EntityUrl>;
  WishlistOutput: ResolverTypeWrapper<WishlistOutput>;
  AddBundleProductsToCartInput: AddBundleProductsToCartInput;
  BundleProductCartItemInput: BundleProductCartItemInput;
  BundleOptionInput: BundleOptionInput;
  CustomizableOptionInput: CustomizableOptionInput;
  CartItemInput: CartItemInput;
  EnteredOptionInput: EnteredOptionInput;
  AddBundleProductsToCartOutput: ResolverTypeWrapper<AddBundleProductsToCartOutput>;
  AddConfigurableProductsToCartInput: AddConfigurableProductsToCartInput;
  ConfigurableProductCartItemInput: ConfigurableProductCartItemInput;
  AddConfigurableProductsToCartOutput: ResolverTypeWrapper<AddConfigurableProductsToCartOutput>;
  AddDownloadableProductsToCartInput: AddDownloadableProductsToCartInput;
  DownloadableProductCartItemInput: DownloadableProductCartItemInput;
  DownloadableProductLinksInput: DownloadableProductLinksInput;
  AddDownloadableProductsToCartOutput: ResolverTypeWrapper<AddDownloadableProductsToCartOutput>;
  AddProductsToCartOutput: ResolverTypeWrapper<AddProductsToCartOutput>;
  CartUserInputError: ResolverTypeWrapper<CartUserInputError>;
  CartUserInputErrorType: CartUserInputErrorType;
  AddProductsToCompareListInput: AddProductsToCompareListInput;
  WishlistItemInput: WishlistItemInput;
  AddProductsToWishlistOutput: ResolverTypeWrapper<AddProductsToWishlistOutput>;
  WishListUserInputError: ResolverTypeWrapper<WishListUserInputError>;
  WishListUserInputErrorType: WishListUserInputErrorType;
  AddSimpleProductsToCartInput: AddSimpleProductsToCartInput;
  SimpleProductCartItemInput: SimpleProductCartItemInput;
  AddSimpleProductsToCartOutput: ResolverTypeWrapper<AddSimpleProductsToCartOutput>;
  AddVirtualProductsToCartInput: AddVirtualProductsToCartInput;
  VirtualProductCartItemInput: VirtualProductCartItemInput;
  AddVirtualProductsToCartOutput: ResolverTypeWrapper<AddVirtualProductsToCartOutput>;
  AddWishlistItemsToCartOutput: ResolverTypeWrapper<AddWishlistItemsToCartOutput>;
  WishlistCartUserInputError: ResolverTypeWrapper<WishlistCartUserInputError>;
  WishlistCartUserInputErrorType: WishlistCartUserInputErrorType;
  ApplyCouponToCartInput: ApplyCouponToCartInput;
  ApplyCouponToCartOutput: ResolverTypeWrapper<ApplyCouponToCartOutput>;
  AssignCompareListToCustomerOutput: ResolverTypeWrapper<AssignCompareListToCustomerOutput>;
  CreateCompareListInput: CreateCompareListInput;
  CustomerInput: CustomerInput;
  CustomerOutput: ResolverTypeWrapper<CustomerOutput>;
  CustomerAddressInput: CustomerAddressInput;
  CustomerAddressAttributeInput: CustomerAddressAttributeInput;
  CustomerAddressRegionInput: CustomerAddressRegionInput;
  CustomerCreateInput: CustomerCreateInput;
  createEmptyCartInput: createEmptyCartInput;
  createKlarnaPaymentsSessionInput: createKlarnaPaymentsSessionInput;
  createKlarnaPaymentsSessionOutput: ResolverTypeWrapper<createKlarnaPaymentsSessionOutput>;
  Categories: ResolverTypeWrapper<Categories>;
  Assets: ResolverTypeWrapper<Assets>;
  MollieTransactionInput: MollieTransactionInput;
  MollieTransactionOutput: ResolverTypeWrapper<MollieTransactionOutput>;
  PayflowProTokenInput: PayflowProTokenInput;
  PayflowProUrlInput: PayflowProUrlInput;
  CreatePayflowProTokenOutput: ResolverTypeWrapper<CreatePayflowProTokenOutput>;
  PaypalExpressTokenInput: PaypalExpressTokenInput;
  PaypalExpressUrlsInput: PaypalExpressUrlsInput;
  PaypalExpressTokenOutput: ResolverTypeWrapper<PaypalExpressTokenOutput>;
  PaypalExpressUrlList: ResolverTypeWrapper<PaypalExpressUrlList>;
  CreateProductReviewInput: CreateProductReviewInput;
  ProductReviewRatingInput: ProductReviewRatingInput;
  CreateProductReviewOutput: ResolverTypeWrapper<CreateProductReviewOutput>;
  DeleteCompareListOutput: ResolverTypeWrapper<DeleteCompareListOutput>;
  DeletePaymentTokenOutput: ResolverTypeWrapper<DeletePaymentTokenOutput>;
  CustomerToken: ResolverTypeWrapper<CustomerToken>;
  GenerateCustomerTokenAsAdminInput: GenerateCustomerTokenAsAdminInput;
  GenerateCustomerTokenAsAdminOutput: ResolverTypeWrapper<GenerateCustomerTokenAsAdminOutput>;
  PayflowProResponseInput: PayflowProResponseInput;
  PayflowProResponseOutput: ResolverTypeWrapper<PayflowProResponseOutput>;
  MollieProcessTransactionInput: MollieProcessTransactionInput;
  MollieProcessTransactionOutput: ResolverTypeWrapper<MollieProcessTransactionOutput>;
  PaymentStatusEnum: PaymentStatusEnum;
  MollieResetCartInput: MollieResetCartInput;
  MollieResetCartOutput: ResolverTypeWrapper<MollieResetCartOutput>;
  PlaceOrderInput: PlaceOrderInput;
  PlaceOrderOutput: ResolverTypeWrapper<PlaceOrderOutput>;
  RemoveCouponFromCartInput: RemoveCouponFromCartInput;
  RemoveCouponFromCartOutput: ResolverTypeWrapper<RemoveCouponFromCartOutput>;
  RemoveItemFromCartInput: RemoveItemFromCartInput;
  RemoveItemFromCartOutput: ResolverTypeWrapper<RemoveItemFromCartOutput>;
  RemoveProductsFromCompareListInput: RemoveProductsFromCompareListInput;
  RemoveProductsFromWishlistOutput: ResolverTypeWrapper<RemoveProductsFromWishlistOutput>;
  ReorderItemsOutput: ResolverTypeWrapper<ReorderItemsOutput>;
  CheckoutUserInputError: ResolverTypeWrapper<CheckoutUserInputError>;
  CheckoutUserInputErrorCodes: CheckoutUserInputErrorCodes;
  RevokeCustomerTokenOutput: ResolverTypeWrapper<RevokeCustomerTokenOutput>;
  SendEmailToFriendInput: SendEmailToFriendInput;
  SendEmailToFriendRecipientInput: SendEmailToFriendRecipientInput;
  SendEmailToFriendSenderInput: SendEmailToFriendSenderInput;
  SendEmailToFriendOutput: ResolverTypeWrapper<SendEmailToFriendOutput>;
  SendEmailToFriendRecipient: ResolverTypeWrapper<SendEmailToFriendRecipient>;
  SendEmailToFriendSender: ResolverTypeWrapper<SendEmailToFriendSender>;
  SetBillingAddressOnCartInput: SetBillingAddressOnCartInput;
  BillingAddressInput: BillingAddressInput;
  CartAddressInput: CartAddressInput;
  SetBillingAddressOnCartOutput: ResolverTypeWrapper<SetBillingAddressOnCartOutput>;
  SetGuestEmailOnCartInput: SetGuestEmailOnCartInput;
  SetGuestEmailOnCartOutput: ResolverTypeWrapper<SetGuestEmailOnCartOutput>;
  SetPaymentMethodAndPlaceOrderInput: SetPaymentMethodAndPlaceOrderInput;
  PaymentMethodInput: PaymentMethodInput;
  BraintreeInput: BraintreeInput;
  BraintreeCcVaultInput: BraintreeCcVaultInput;
  HostedProInput: HostedProInput;
  KlarnaInput: KlarnaInput;
  PayflowExpressInput: PayflowExpressInput;
  PayflowLinkInput: PayflowLinkInput;
  PayflowProInput: PayflowProInput;
  CreditCardDetailsInput: CreditCardDetailsInput;
  VaultTokenInput: VaultTokenInput;
  PaypalExpressInput: PaypalExpressInput;
  SetPaymentMethodOnCartInput: SetPaymentMethodOnCartInput;
  SetPaymentMethodOnCartOutput: ResolverTypeWrapper<SetPaymentMethodOnCartOutput>;
  SetShippingAddressesOnCartInput: SetShippingAddressesOnCartInput;
  ShippingAddressInput: ShippingAddressInput;
  SetShippingAddressesOnCartOutput: ResolverTypeWrapper<SetShippingAddressesOnCartOutput>;
  SetShippingMethodsOnCartInput: SetShippingMethodsOnCartInput;
  ShippingMethodInput: ShippingMethodInput;
  SetShippingMethodsOnCartOutput: ResolverTypeWrapper<SetShippingMethodsOnCartOutput>;
  SubscribeEmailToNewsletterOutput: ResolverTypeWrapper<SubscribeEmailToNewsletterOutput>;
  SubscriptionStatusesEnum: SubscriptionStatusesEnum;
  UpdateCartItemsInput: UpdateCartItemsInput;
  CartItemUpdateInput: CartItemUpdateInput;
  GiftMessageInput: GiftMessageInput;
  UpdateCartItemsOutput: ResolverTypeWrapper<UpdateCartItemsOutput>;
  CustomerUpdateInput: CustomerUpdateInput;
  WishlistItemUpdateInput: WishlistItemUpdateInput;
  UpdateProductsInWishlistOutput: ResolverTypeWrapper<UpdateProductsInWishlistOutput>;
  CustomizableDateTypeEnum: CustomizableDateTypeEnum;
  ProductLinks: ResolverTypeWrapper<ProductLinks>;
  PhysicalProductInterface: ResolversTypes['SimpleProduct'] | ResolversTypes['BundleProduct'] | ResolversTypes['GroupedProduct'] | ResolversTypes['ConfigurableProduct'];
  CustomizableAreaOption: ResolverTypeWrapper<CustomizableAreaOption>;
  CustomizableOptionInterface: ResolversTypes['CustomizableAreaOption'] | ResolversTypes['CustomizableDateOption'] | ResolversTypes['CustomizableDropDownOption'] | ResolversTypes['CustomizableMultipleOption'] | ResolversTypes['CustomizableFieldOption'] | ResolversTypes['CustomizableFileOption'] | ResolversTypes['CustomizableRadioOption'] | ResolversTypes['CustomizableCheckboxOption'];
  CustomizableAreaValue: ResolverTypeWrapper<CustomizableAreaValue>;
  CustomizableDateOption: ResolverTypeWrapper<CustomizableDateOption>;
  CustomizableDateValue: ResolverTypeWrapper<CustomizableDateValue>;
  CustomizableDropDownOption: ResolverTypeWrapper<CustomizableDropDownOption>;
  CustomizableDropDownValue: ResolverTypeWrapper<CustomizableDropDownValue>;
  CustomizableMultipleOption: ResolverTypeWrapper<CustomizableMultipleOption>;
  CustomizableMultipleValue: ResolverTypeWrapper<CustomizableMultipleValue>;
  CustomizableFieldOption: ResolverTypeWrapper<CustomizableFieldOption>;
  CustomizableFieldValue: ResolverTypeWrapper<CustomizableFieldValue>;
  CustomizableFileOption: ResolverTypeWrapper<CustomizableFileOption>;
  CustomizableFileValue: ResolverTypeWrapper<CustomizableFileValue>;
  ProductVideo: ResolverTypeWrapper<ProductVideo>;
  CustomizableProductInterface: ResolversTypes['VirtualProduct'] | ResolversTypes['SimpleProduct'] | ResolversTypes['DownloadableProduct'] | ResolversTypes['BundleProduct'] | ResolversTypes['ConfigurableProduct'];
  CustomizableRadioOption: ResolverTypeWrapper<CustomizableRadioOption>;
  CustomizableRadioValue: ResolverTypeWrapper<CustomizableRadioValue>;
  CustomizableCheckboxOption: ResolverTypeWrapper<CustomizableCheckboxOption>;
  CustomizableCheckboxValue: ResolverTypeWrapper<CustomizableCheckboxValue>;
  VirtualProduct: ResolverTypeWrapper<VirtualProduct>;
  SimpleProduct: ResolverTypeWrapper<SimpleProduct>;
  ProductFilterInput: ProductFilterInput;
  ProductSortInput: ProductSortInput;
  LayerFilterItem: ResolverTypeWrapper<LayerFilterItem>;
  SimpleWishlistItem: ResolverTypeWrapper<SimpleWishlistItem>;
  VirtualWishlistItem: ResolverTypeWrapper<VirtualWishlistItem>;
  SimpleCartItem: ResolverTypeWrapper<SimpleCartItem>;
  VirtualCartItem: ResolverTypeWrapper<VirtualCartItem>;
  DownloadableCartItem: ResolverTypeWrapper<DownloadableCartItem>;
  DownloadableProductLinks: ResolverTypeWrapper<DownloadableProductLinks>;
  DownloadableFileTypeEnum: DownloadableFileTypeEnum;
  DownloadableProductSamples: ResolverTypeWrapper<DownloadableProductSamples>;
  DownloadableProduct: ResolverTypeWrapper<DownloadableProduct>;
  DownloadableOrderItem: ResolverTypeWrapper<DownloadableOrderItem>;
  DownloadableItemsLinks: ResolverTypeWrapper<DownloadableItemsLinks>;
  DownloadableInvoiceItem: ResolverTypeWrapper<DownloadableInvoiceItem>;
  DownloadableCreditMemoItem: ResolverTypeWrapper<DownloadableCreditMemoItem>;
  DownloadableWishlistItem: ResolverTypeWrapper<DownloadableWishlistItem>;
  BundleCartItem: ResolverTypeWrapper<BundleCartItem>;
  SelectedBundleOption: ResolverTypeWrapper<SelectedBundleOption>;
  SelectedBundleOptionValue: ResolverTypeWrapper<SelectedBundleOptionValue>;
  BundleItem: ResolverTypeWrapper<BundleItem>;
  BundleItemOption: ResolverTypeWrapper<BundleItemOption>;
  BundleProduct: ResolverTypeWrapper<BundleProduct>;
  PriceViewEnum: PriceViewEnum;
  ShipBundleItemsEnum: ShipBundleItemsEnum;
  BundleOrderItem: ResolverTypeWrapper<BundleOrderItem>;
  ItemSelectedBundleOption: ResolverTypeWrapper<ItemSelectedBundleOption>;
  ItemSelectedBundleOptionValue: ResolverTypeWrapper<ItemSelectedBundleOptionValue>;
  BundleInvoiceItem: ResolverTypeWrapper<BundleInvoiceItem>;
  BundleShipmentItem: ResolverTypeWrapper<BundleShipmentItem>;
  BundleCreditMemoItem: ResolverTypeWrapper<BundleCreditMemoItem>;
  BundleWishlistItem: ResolverTypeWrapper<BundleWishlistItem>;
  ConfigurableCartItem: ResolverTypeWrapper<ConfigurableCartItem>;
  SelectedConfigurableOption: ResolverTypeWrapper<SelectedConfigurableOption>;
  SalesItemInterface: ResolverTypeWrapper<SalesItemInterface>;
  GroupedProduct: ResolverTypeWrapper<GroupedProduct>;
  GroupedProductItem: ResolverTypeWrapper<GroupedProductItem>;
  GroupedProductWishlistItem: ResolverTypeWrapper<GroupedProductWishlistItem>;
  ConfigurableProduct: ResolverTypeWrapper<ConfigurableProduct>;
  ConfigurableProductOptions: ResolverTypeWrapper<ConfigurableProductOptions>;
  ConfigurableProductOptionsValues: ResolverTypeWrapper<ConfigurableProductOptionsValues>;
  SwatchDataInterface: ResolversTypes['ImageSwatchData'] | ResolversTypes['TextSwatchData'] | ResolversTypes['ColorSwatchData'];
  ConfigurableProductOptionsSelection: ResolverTypeWrapper<ConfigurableProductOptionsSelection>;
  ConfigurableProductOption: ResolverTypeWrapper<ConfigurableProductOption>;
  ConfigurableProductOptionValue: ResolverTypeWrapper<ConfigurableProductOptionValue>;
  ConfigurableOptionAvailableForSelection: ResolverTypeWrapper<ConfigurableOptionAvailableForSelection>;
  ConfigurableVariant: ResolverTypeWrapper<ConfigurableVariant>;
  ConfigurableAttributeOption: ResolverTypeWrapper<ConfigurableAttributeOption>;
  ConfigurableWishlistItem: ResolverTypeWrapper<ConfigurableWishlistItem>;
  PaypalExpressToken: ResolverTypeWrapper<PaypalExpressToken>;
  PayflowProToken: ResolverTypeWrapper<PayflowProToken>;
  OrderItem: ResolverTypeWrapper<OrderItem>;
  InvoiceItem: ResolverTypeWrapper<InvoiceItem>;
  ShipmentItem: ResolverTypeWrapper<ShipmentItem>;
  CreditMemoItem: ResolverTypeWrapper<CreditMemoItem>;
  SwatchLayerFilterItemInterface: ResolversTypes['SwatchLayerFilterItem'];
  SwatchData: ResolverTypeWrapper<SwatchData>;
  SwatchLayerFilterItem: ResolverTypeWrapper<SwatchLayerFilterItem>;
  ImageSwatchData: ResolverTypeWrapper<ImageSwatchData>;
  TextSwatchData: ResolverTypeWrapper<TextSwatchData>;
  ColorSwatchData: ResolverTypeWrapper<ColorSwatchData>;
  CurrentCartId: ResolverTypeWrapper<CurrentCartId>;
  RegisterCartIdInput: RegisterCartIdInput;
}>;

/** Mapping between all available schema types and the resolvers parents */
export type ResolversParentTypes = ResolversObject<{
  Query: {};
  Mutation: {};
  Aggregate: Aggregate;
  Asset: Asset;
  AssetConnectInput: AssetConnectInput;
  AssetConnection: AssetConnection;
  AssetCreateInput: AssetCreateInput;
  AssetCreateLocalizationDataInput: AssetCreateLocalizationDataInput;
  AssetCreateLocalizationInput: AssetCreateLocalizationInput;
  AssetCreateLocalizationsInput: AssetCreateLocalizationsInput;
  AssetCreateManyInlineInput: AssetCreateManyInlineInput;
  AssetCreateOneInlineInput: AssetCreateOneInlineInput;
  AssetEdge: AssetEdge;
  AssetManyWhereInput: AssetManyWhereInput;
  AssetTransformationInput: AssetTransformationInput;
  AssetUpdateInput: AssetUpdateInput;
  AssetUpdateLocalizationDataInput: AssetUpdateLocalizationDataInput;
  AssetUpdateLocalizationInput: AssetUpdateLocalizationInput;
  AssetUpdateLocalizationsInput: AssetUpdateLocalizationsInput;
  AssetUpdateManyInlineInput: AssetUpdateManyInlineInput;
  AssetUpdateManyInput: AssetUpdateManyInput;
  AssetUpdateManyLocalizationDataInput: AssetUpdateManyLocalizationDataInput;
  AssetUpdateManyLocalizationInput: AssetUpdateManyLocalizationInput;
  AssetUpdateManyLocalizationsInput: AssetUpdateManyLocalizationsInput;
  AssetUpdateManyWithNestedWhereInput: AssetUpdateManyWithNestedWhereInput;
  AssetUpdateOneInlineInput: AssetUpdateOneInlineInput;
  AssetUpdateWithNestedWhereUniqueInput: AssetUpdateWithNestedWhereUniqueInput;
  AssetUpsertInput: AssetUpsertInput;
  AssetUpsertLocalizationInput: AssetUpsertLocalizationInput;
  AssetUpsertWithNestedWhereUniqueInput: AssetUpsertWithNestedWhereUniqueInput;
  AssetWhereInput: AssetWhereInput;
  AssetWhereUniqueInput: AssetWhereUniqueInput;
  Banner: Banner;
  BannerConnectInput: BannerConnectInput;
  BannerConnection: BannerConnection;
  BannerCreateInput: BannerCreateInput;
  BannerCreateLocalizationDataInput: BannerCreateLocalizationDataInput;
  BannerCreateLocalizationInput: BannerCreateLocalizationInput;
  BannerCreateLocalizationsInput: BannerCreateLocalizationsInput;
  BannerCreateManyInlineInput: BannerCreateManyInlineInput;
  BannerCreateOneInlineInput: BannerCreateOneInlineInput;
  BannerEdge: BannerEdge;
  BannerManyWhereInput: BannerManyWhereInput;
  BannerUpdateInput: BannerUpdateInput;
  BannerUpdateLocalizationDataInput: BannerUpdateLocalizationDataInput;
  BannerUpdateLocalizationInput: BannerUpdateLocalizationInput;
  BannerUpdateLocalizationsInput: BannerUpdateLocalizationsInput;
  BannerUpdateManyInlineInput: BannerUpdateManyInlineInput;
  BannerUpdateManyInput: BannerUpdateManyInput;
  BannerUpdateManyLocalizationDataInput: BannerUpdateManyLocalizationDataInput;
  BannerUpdateManyLocalizationInput: BannerUpdateManyLocalizationInput;
  BannerUpdateManyLocalizationsInput: BannerUpdateManyLocalizationsInput;
  BannerUpdateManyWithNestedWhereInput: BannerUpdateManyWithNestedWhereInput;
  BannerUpdateOneInlineInput: BannerUpdateOneInlineInput;
  BannerUpdateWithNestedWhereUniqueInput: BannerUpdateWithNestedWhereUniqueInput;
  BannerUpsertInput: BannerUpsertInput;
  BannerUpsertLocalizationInput: BannerUpsertLocalizationInput;
  BannerUpsertWithNestedWhereUniqueInput: BannerUpsertWithNestedWhereUniqueInput;
  BannerWhereInput: BannerWhereInput;
  BannerWhereUniqueInput: BannerWhereUniqueInput;
  BatchPayload: BatchPayload;
  Boolean: Scalars['Boolean'];
  Color: Color;
  ColorInput: ColorInput;
  ConnectPositionInput: ConnectPositionInput;
  Date: Scalars['Date'];
  DateTime: Scalars['DateTime'];
  DocumentOutputInput: DocumentOutputInput;
  DocumentTransformationInput: DocumentTransformationInput;
  DocumentVersion: DocumentVersion;
  Float: Scalars['Float'];
  Footer: Footer;
  FooterConnectInput: FooterConnectInput;
  FooterConnection: FooterConnection;
  FooterCreateInput: FooterCreateInput;
  FooterCreateManyInlineInput: FooterCreateManyInlineInput;
  FooterCreateOneInlineInput: FooterCreateOneInlineInput;
  FooterEdge: FooterEdge;
  FooterManyWhereInput: FooterManyWhereInput;
  FooterUpdateInput: FooterUpdateInput;
  FooterUpdateManyInlineInput: FooterUpdateManyInlineInput;
  FooterUpdateManyInput: FooterUpdateManyInput;
  FooterUpdateManyWithNestedWhereInput: FooterUpdateManyWithNestedWhereInput;
  FooterUpdateOneInlineInput: FooterUpdateOneInlineInput;
  FooterUpdateWithNestedWhereUniqueInput: FooterUpdateWithNestedWhereUniqueInput;
  FooterUpsertInput: FooterUpsertInput;
  FooterUpsertWithNestedWhereUniqueInput: FooterUpsertWithNestedWhereUniqueInput;
  FooterWhereInput: FooterWhereInput;
  FooterWhereUniqueInput: FooterWhereUniqueInput;
  Hex: Scalars['Hex'];
  ID: Scalars['ID'];
  ImageResizeInput: ImageResizeInput;
  ImageTransformationInput: ImageTransformationInput;
  Int: Scalars['Int'];
  Json: Scalars['Json'];
  Location: Location;
  LocationInput: LocationInput;
  Long: Scalars['Long'];
  Node: ResolversParentTypes['Asset'] | ResolversParentTypes['Banner'] | ResolversParentTypes['Footer'] | ResolversParentTypes['Page'] | ResolversParentTypes['PageLink'] | ResolversParentTypes['RowBlogContent'] | ResolversParentTypes['RowButtonLinkList'] | ResolversParentTypes['RowColumnOne'] | ResolversParentTypes['RowColumnThree'] | ResolversParentTypes['RowColumnTwo'] | ResolversParentTypes['RowContentLinks'] | ResolversParentTypes['RowHeroBanner'] | ResolversParentTypes['RowProduct'] | ResolversParentTypes['RowQuote'] | ResolversParentTypes['RowServiceOptions'] | ResolversParentTypes['RowSpecialBanner'] | ResolversParentTypes['ScheduledOperation'] | ResolversParentTypes['ScheduledRelease'] | ResolversParentTypes['User'] | ResolversParentTypes['Usps'];
  Page: Omit<Page, 'content'> & { content: Array<ResolversParentTypes['PageContent']> };
  PageConnectInput: PageConnectInput;
  PageConnection: PageConnection;
  PageContent: ResolversParentTypes['Banner'] | ResolversParentTypes['RowBlogContent'] | ResolversParentTypes['RowButtonLinkList'] | ResolversParentTypes['RowColumnOne'] | ResolversParentTypes['RowColumnThree'] | ResolversParentTypes['RowColumnTwo'] | ResolversParentTypes['RowContentLinks'] | ResolversParentTypes['RowHeroBanner'] | ResolversParentTypes['RowProduct'] | ResolversParentTypes['RowQuote'] | ResolversParentTypes['RowServiceOptions'] | ResolversParentTypes['RowSpecialBanner'];
  PageContentConnectInput: PageContentConnectInput;
  PageContentCreateInput: PageContentCreateInput;
  PageContentCreateManyInlineInput: PageContentCreateManyInlineInput;
  PageContentCreateOneInlineInput: PageContentCreateOneInlineInput;
  PageContentUpdateInput: PageContentUpdateInput;
  PageContentUpdateManyInlineInput: PageContentUpdateManyInlineInput;
  PageContentUpdateManyWithNestedWhereInput: PageContentUpdateManyWithNestedWhereInput;
  PageContentUpdateOneInlineInput: PageContentUpdateOneInlineInput;
  PageContentUpdateWithNestedWhereUniqueInput: PageContentUpdateWithNestedWhereUniqueInput;
  PageContentUpsertWithNestedWhereUniqueInput: PageContentUpsertWithNestedWhereUniqueInput;
  PageContentWhereInput: PageContentWhereInput;
  PageContentWhereUniqueInput: PageContentWhereUniqueInput;
  PageCreateInput: PageCreateInput;
  PageCreateLocalizationDataInput: PageCreateLocalizationDataInput;
  PageCreateLocalizationInput: PageCreateLocalizationInput;
  PageCreateLocalizationsInput: PageCreateLocalizationsInput;
  PageCreateManyInlineInput: PageCreateManyInlineInput;
  PageCreateOneInlineInput: PageCreateOneInlineInput;
  PageEdge: PageEdge;
  PageInfo: PageInfo;
  PageLink: PageLink;
  PageLinkConnectInput: PageLinkConnectInput;
  PageLinkConnection: PageLinkConnection;
  PageLinkCreateInput: PageLinkCreateInput;
  PageLinkCreateLocalizationDataInput: PageLinkCreateLocalizationDataInput;
  PageLinkCreateLocalizationInput: PageLinkCreateLocalizationInput;
  PageLinkCreateLocalizationsInput: PageLinkCreateLocalizationsInput;
  PageLinkCreateManyInlineInput: PageLinkCreateManyInlineInput;
  PageLinkCreateOneInlineInput: PageLinkCreateOneInlineInput;
  PageLinkEdge: PageLinkEdge;
  PageLinkManyWhereInput: PageLinkManyWhereInput;
  PageLinkUpdateInput: PageLinkUpdateInput;
  PageLinkUpdateLocalizationDataInput: PageLinkUpdateLocalizationDataInput;
  PageLinkUpdateLocalizationInput: PageLinkUpdateLocalizationInput;
  PageLinkUpdateLocalizationsInput: PageLinkUpdateLocalizationsInput;
  PageLinkUpdateManyInlineInput: PageLinkUpdateManyInlineInput;
  PageLinkUpdateManyInput: PageLinkUpdateManyInput;
  PageLinkUpdateManyLocalizationDataInput: PageLinkUpdateManyLocalizationDataInput;
  PageLinkUpdateManyLocalizationInput: PageLinkUpdateManyLocalizationInput;
  PageLinkUpdateManyLocalizationsInput: PageLinkUpdateManyLocalizationsInput;
  PageLinkUpdateManyWithNestedWhereInput: PageLinkUpdateManyWithNestedWhereInput;
  PageLinkUpdateOneInlineInput: PageLinkUpdateOneInlineInput;
  PageLinkUpdateWithNestedWhereUniqueInput: PageLinkUpdateWithNestedWhereUniqueInput;
  PageLinkUpsertInput: PageLinkUpsertInput;
  PageLinkUpsertLocalizationInput: PageLinkUpsertLocalizationInput;
  PageLinkUpsertWithNestedWhereUniqueInput: PageLinkUpsertWithNestedWhereUniqueInput;
  PageLinkWhereInput: PageLinkWhereInput;
  PageLinkWhereUniqueInput: PageLinkWhereUniqueInput;
  PageManyWhereInput: PageManyWhereInput;
  PageUpdateInput: PageUpdateInput;
  PageUpdateLocalizationDataInput: PageUpdateLocalizationDataInput;
  PageUpdateLocalizationInput: PageUpdateLocalizationInput;
  PageUpdateLocalizationsInput: PageUpdateLocalizationsInput;
  PageUpdateManyInlineInput: PageUpdateManyInlineInput;
  PageUpdateManyInput: PageUpdateManyInput;
  PageUpdateManyLocalizationDataInput: PageUpdateManyLocalizationDataInput;
  PageUpdateManyLocalizationInput: PageUpdateManyLocalizationInput;
  PageUpdateManyLocalizationsInput: PageUpdateManyLocalizationsInput;
  PageUpdateManyWithNestedWhereInput: PageUpdateManyWithNestedWhereInput;
  PageUpdateOneInlineInput: PageUpdateOneInlineInput;
  PageUpdateWithNestedWhereUniqueInput: PageUpdateWithNestedWhereUniqueInput;
  PageUpsertInput: PageUpsertInput;
  PageUpsertLocalizationInput: PageUpsertLocalizationInput;
  PageUpsertWithNestedWhereUniqueInput: PageUpsertWithNestedWhereUniqueInput;
  PageWhereInput: PageWhereInput;
  PageWhereUniqueInput: PageWhereUniqueInput;
  PublishLocaleInput: PublishLocaleInput;
  RGBA: RGBA;
  RGBAHue: Scalars['RGBAHue'];
  RGBAInput: RGBAInput;
  RGBATransparency: Scalars['RGBATransparency'];
  RichText: RichText;
  RichTextAST: Scalars['RichTextAST'];
  RowBlogContent: RowBlogContent;
  RowBlogContentConnectInput: RowBlogContentConnectInput;
  RowBlogContentConnection: RowBlogContentConnection;
  RowBlogContentCreateInput: RowBlogContentCreateInput;
  RowBlogContentCreateLocalizationDataInput: RowBlogContentCreateLocalizationDataInput;
  RowBlogContentCreateLocalizationInput: RowBlogContentCreateLocalizationInput;
  RowBlogContentCreateLocalizationsInput: RowBlogContentCreateLocalizationsInput;
  RowBlogContentCreateManyInlineInput: RowBlogContentCreateManyInlineInput;
  RowBlogContentCreateOneInlineInput: RowBlogContentCreateOneInlineInput;
  RowBlogContentEdge: RowBlogContentEdge;
  RowBlogContentManyWhereInput: RowBlogContentManyWhereInput;
  RowBlogContentUpdateInput: RowBlogContentUpdateInput;
  RowBlogContentUpdateLocalizationDataInput: RowBlogContentUpdateLocalizationDataInput;
  RowBlogContentUpdateLocalizationInput: RowBlogContentUpdateLocalizationInput;
  RowBlogContentUpdateLocalizationsInput: RowBlogContentUpdateLocalizationsInput;
  RowBlogContentUpdateManyInlineInput: RowBlogContentUpdateManyInlineInput;
  RowBlogContentUpdateManyInput: RowBlogContentUpdateManyInput;
  RowBlogContentUpdateManyLocalizationDataInput: RowBlogContentUpdateManyLocalizationDataInput;
  RowBlogContentUpdateManyLocalizationInput: RowBlogContentUpdateManyLocalizationInput;
  RowBlogContentUpdateManyLocalizationsInput: RowBlogContentUpdateManyLocalizationsInput;
  RowBlogContentUpdateManyWithNestedWhereInput: RowBlogContentUpdateManyWithNestedWhereInput;
  RowBlogContentUpdateOneInlineInput: RowBlogContentUpdateOneInlineInput;
  RowBlogContentUpdateWithNestedWhereUniqueInput: RowBlogContentUpdateWithNestedWhereUniqueInput;
  RowBlogContentUpsertInput: RowBlogContentUpsertInput;
  RowBlogContentUpsertLocalizationInput: RowBlogContentUpsertLocalizationInput;
  RowBlogContentUpsertWithNestedWhereUniqueInput: RowBlogContentUpsertWithNestedWhereUniqueInput;
  RowBlogContentWhereInput: RowBlogContentWhereInput;
  RowBlogContentWhereUniqueInput: RowBlogContentWhereUniqueInput;
  RowButtonLinkList: RowButtonLinkList;
  RowButtonLinkListConnectInput: RowButtonLinkListConnectInput;
  RowButtonLinkListConnection: RowButtonLinkListConnection;
  RowButtonLinkListCreateInput: RowButtonLinkListCreateInput;
  RowButtonLinkListCreateLocalizationDataInput: RowButtonLinkListCreateLocalizationDataInput;
  RowButtonLinkListCreateLocalizationInput: RowButtonLinkListCreateLocalizationInput;
  RowButtonLinkListCreateLocalizationsInput: RowButtonLinkListCreateLocalizationsInput;
  RowButtonLinkListCreateManyInlineInput: RowButtonLinkListCreateManyInlineInput;
  RowButtonLinkListCreateOneInlineInput: RowButtonLinkListCreateOneInlineInput;
  RowButtonLinkListEdge: RowButtonLinkListEdge;
  RowButtonLinkListManyWhereInput: RowButtonLinkListManyWhereInput;
  RowButtonLinkListUpdateInput: RowButtonLinkListUpdateInput;
  RowButtonLinkListUpdateLocalizationDataInput: RowButtonLinkListUpdateLocalizationDataInput;
  RowButtonLinkListUpdateLocalizationInput: RowButtonLinkListUpdateLocalizationInput;
  RowButtonLinkListUpdateLocalizationsInput: RowButtonLinkListUpdateLocalizationsInput;
  RowButtonLinkListUpdateManyInlineInput: RowButtonLinkListUpdateManyInlineInput;
  RowButtonLinkListUpdateManyInput: RowButtonLinkListUpdateManyInput;
  RowButtonLinkListUpdateManyLocalizationDataInput: RowButtonLinkListUpdateManyLocalizationDataInput;
  RowButtonLinkListUpdateManyLocalizationInput: RowButtonLinkListUpdateManyLocalizationInput;
  RowButtonLinkListUpdateManyLocalizationsInput: RowButtonLinkListUpdateManyLocalizationsInput;
  RowButtonLinkListUpdateManyWithNestedWhereInput: RowButtonLinkListUpdateManyWithNestedWhereInput;
  RowButtonLinkListUpdateOneInlineInput: RowButtonLinkListUpdateOneInlineInput;
  RowButtonLinkListUpdateWithNestedWhereUniqueInput: RowButtonLinkListUpdateWithNestedWhereUniqueInput;
  RowButtonLinkListUpsertInput: RowButtonLinkListUpsertInput;
  RowButtonLinkListUpsertLocalizationInput: RowButtonLinkListUpsertLocalizationInput;
  RowButtonLinkListUpsertWithNestedWhereUniqueInput: RowButtonLinkListUpsertWithNestedWhereUniqueInput;
  RowButtonLinkListWhereInput: RowButtonLinkListWhereInput;
  RowButtonLinkListWhereUniqueInput: RowButtonLinkListWhereUniqueInput;
  RowColumnOne: RowColumnOne;
  RowColumnOneConnectInput: RowColumnOneConnectInput;
  RowColumnOneConnection: RowColumnOneConnection;
  RowColumnOneCreateInput: RowColumnOneCreateInput;
  RowColumnOneCreateLocalizationDataInput: RowColumnOneCreateLocalizationDataInput;
  RowColumnOneCreateLocalizationInput: RowColumnOneCreateLocalizationInput;
  RowColumnOneCreateLocalizationsInput: RowColumnOneCreateLocalizationsInput;
  RowColumnOneCreateManyInlineInput: RowColumnOneCreateManyInlineInput;
  RowColumnOneCreateOneInlineInput: RowColumnOneCreateOneInlineInput;
  RowColumnOneEdge: RowColumnOneEdge;
  RowColumnOneManyWhereInput: RowColumnOneManyWhereInput;
  RowColumnOneUpdateInput: RowColumnOneUpdateInput;
  RowColumnOneUpdateLocalizationDataInput: RowColumnOneUpdateLocalizationDataInput;
  RowColumnOneUpdateLocalizationInput: RowColumnOneUpdateLocalizationInput;
  RowColumnOneUpdateLocalizationsInput: RowColumnOneUpdateLocalizationsInput;
  RowColumnOneUpdateManyInlineInput: RowColumnOneUpdateManyInlineInput;
  RowColumnOneUpdateManyInput: RowColumnOneUpdateManyInput;
  RowColumnOneUpdateManyLocalizationDataInput: RowColumnOneUpdateManyLocalizationDataInput;
  RowColumnOneUpdateManyLocalizationInput: RowColumnOneUpdateManyLocalizationInput;
  RowColumnOneUpdateManyLocalizationsInput: RowColumnOneUpdateManyLocalizationsInput;
  RowColumnOneUpdateManyWithNestedWhereInput: RowColumnOneUpdateManyWithNestedWhereInput;
  RowColumnOneUpdateOneInlineInput: RowColumnOneUpdateOneInlineInput;
  RowColumnOneUpdateWithNestedWhereUniqueInput: RowColumnOneUpdateWithNestedWhereUniqueInput;
  RowColumnOneUpsertInput: RowColumnOneUpsertInput;
  RowColumnOneUpsertLocalizationInput: RowColumnOneUpsertLocalizationInput;
  RowColumnOneUpsertWithNestedWhereUniqueInput: RowColumnOneUpsertWithNestedWhereUniqueInput;
  RowColumnOneWhereInput: RowColumnOneWhereInput;
  RowColumnOneWhereUniqueInput: RowColumnOneWhereUniqueInput;
  RowColumnThree: RowColumnThree;
  RowColumnThreeConnectInput: RowColumnThreeConnectInput;
  RowColumnThreeConnection: RowColumnThreeConnection;
  RowColumnThreeCreateInput: RowColumnThreeCreateInput;
  RowColumnThreeCreateLocalizationDataInput: RowColumnThreeCreateLocalizationDataInput;
  RowColumnThreeCreateLocalizationInput: RowColumnThreeCreateLocalizationInput;
  RowColumnThreeCreateLocalizationsInput: RowColumnThreeCreateLocalizationsInput;
  RowColumnThreeCreateManyInlineInput: RowColumnThreeCreateManyInlineInput;
  RowColumnThreeCreateOneInlineInput: RowColumnThreeCreateOneInlineInput;
  RowColumnThreeEdge: RowColumnThreeEdge;
  RowColumnThreeManyWhereInput: RowColumnThreeManyWhereInput;
  RowColumnThreeUpdateInput: RowColumnThreeUpdateInput;
  RowColumnThreeUpdateLocalizationDataInput: RowColumnThreeUpdateLocalizationDataInput;
  RowColumnThreeUpdateLocalizationInput: RowColumnThreeUpdateLocalizationInput;
  RowColumnThreeUpdateLocalizationsInput: RowColumnThreeUpdateLocalizationsInput;
  RowColumnThreeUpdateManyInlineInput: RowColumnThreeUpdateManyInlineInput;
  RowColumnThreeUpdateManyInput: RowColumnThreeUpdateManyInput;
  RowColumnThreeUpdateManyLocalizationDataInput: RowColumnThreeUpdateManyLocalizationDataInput;
  RowColumnThreeUpdateManyLocalizationInput: RowColumnThreeUpdateManyLocalizationInput;
  RowColumnThreeUpdateManyLocalizationsInput: RowColumnThreeUpdateManyLocalizationsInput;
  RowColumnThreeUpdateManyWithNestedWhereInput: RowColumnThreeUpdateManyWithNestedWhereInput;
  RowColumnThreeUpdateOneInlineInput: RowColumnThreeUpdateOneInlineInput;
  RowColumnThreeUpdateWithNestedWhereUniqueInput: RowColumnThreeUpdateWithNestedWhereUniqueInput;
  RowColumnThreeUpsertInput: RowColumnThreeUpsertInput;
  RowColumnThreeUpsertLocalizationInput: RowColumnThreeUpsertLocalizationInput;
  RowColumnThreeUpsertWithNestedWhereUniqueInput: RowColumnThreeUpsertWithNestedWhereUniqueInput;
  RowColumnThreeWhereInput: RowColumnThreeWhereInput;
  RowColumnThreeWhereUniqueInput: RowColumnThreeWhereUniqueInput;
  RowColumnTwo: RowColumnTwo;
  RowColumnTwoConnectInput: RowColumnTwoConnectInput;
  RowColumnTwoConnection: RowColumnTwoConnection;
  RowColumnTwoCreateInput: RowColumnTwoCreateInput;
  RowColumnTwoCreateLocalizationDataInput: RowColumnTwoCreateLocalizationDataInput;
  RowColumnTwoCreateLocalizationInput: RowColumnTwoCreateLocalizationInput;
  RowColumnTwoCreateLocalizationsInput: RowColumnTwoCreateLocalizationsInput;
  RowColumnTwoCreateManyInlineInput: RowColumnTwoCreateManyInlineInput;
  RowColumnTwoCreateOneInlineInput: RowColumnTwoCreateOneInlineInput;
  RowColumnTwoEdge: RowColumnTwoEdge;
  RowColumnTwoManyWhereInput: RowColumnTwoManyWhereInput;
  RowColumnTwoUpdateInput: RowColumnTwoUpdateInput;
  RowColumnTwoUpdateLocalizationDataInput: RowColumnTwoUpdateLocalizationDataInput;
  RowColumnTwoUpdateLocalizationInput: RowColumnTwoUpdateLocalizationInput;
  RowColumnTwoUpdateLocalizationsInput: RowColumnTwoUpdateLocalizationsInput;
  RowColumnTwoUpdateManyInlineInput: RowColumnTwoUpdateManyInlineInput;
  RowColumnTwoUpdateManyInput: RowColumnTwoUpdateManyInput;
  RowColumnTwoUpdateManyLocalizationDataInput: RowColumnTwoUpdateManyLocalizationDataInput;
  RowColumnTwoUpdateManyLocalizationInput: RowColumnTwoUpdateManyLocalizationInput;
  RowColumnTwoUpdateManyLocalizationsInput: RowColumnTwoUpdateManyLocalizationsInput;
  RowColumnTwoUpdateManyWithNestedWhereInput: RowColumnTwoUpdateManyWithNestedWhereInput;
  RowColumnTwoUpdateOneInlineInput: RowColumnTwoUpdateOneInlineInput;
  RowColumnTwoUpdateWithNestedWhereUniqueInput: RowColumnTwoUpdateWithNestedWhereUniqueInput;
  RowColumnTwoUpsertInput: RowColumnTwoUpsertInput;
  RowColumnTwoUpsertLocalizationInput: RowColumnTwoUpsertLocalizationInput;
  RowColumnTwoUpsertWithNestedWhereUniqueInput: RowColumnTwoUpsertWithNestedWhereUniqueInput;
  RowColumnTwoWhereInput: RowColumnTwoWhereInput;
  RowColumnTwoWhereUniqueInput: RowColumnTwoWhereUniqueInput;
  RowContentLinks: RowContentLinks;
  RowContentLinksConnectInput: RowContentLinksConnectInput;
  RowContentLinksConnection: RowContentLinksConnection;
  RowContentLinksCreateInput: RowContentLinksCreateInput;
  RowContentLinksCreateLocalizationDataInput: RowContentLinksCreateLocalizationDataInput;
  RowContentLinksCreateLocalizationInput: RowContentLinksCreateLocalizationInput;
  RowContentLinksCreateLocalizationsInput: RowContentLinksCreateLocalizationsInput;
  RowContentLinksCreateManyInlineInput: RowContentLinksCreateManyInlineInput;
  RowContentLinksCreateOneInlineInput: RowContentLinksCreateOneInlineInput;
  RowContentLinksEdge: RowContentLinksEdge;
  RowContentLinksManyWhereInput: RowContentLinksManyWhereInput;
  RowContentLinksUpdateInput: RowContentLinksUpdateInput;
  RowContentLinksUpdateLocalizationDataInput: RowContentLinksUpdateLocalizationDataInput;
  RowContentLinksUpdateLocalizationInput: RowContentLinksUpdateLocalizationInput;
  RowContentLinksUpdateLocalizationsInput: RowContentLinksUpdateLocalizationsInput;
  RowContentLinksUpdateManyInlineInput: RowContentLinksUpdateManyInlineInput;
  RowContentLinksUpdateManyInput: RowContentLinksUpdateManyInput;
  RowContentLinksUpdateManyLocalizationDataInput: RowContentLinksUpdateManyLocalizationDataInput;
  RowContentLinksUpdateManyLocalizationInput: RowContentLinksUpdateManyLocalizationInput;
  RowContentLinksUpdateManyLocalizationsInput: RowContentLinksUpdateManyLocalizationsInput;
  RowContentLinksUpdateManyWithNestedWhereInput: RowContentLinksUpdateManyWithNestedWhereInput;
  RowContentLinksUpdateOneInlineInput: RowContentLinksUpdateOneInlineInput;
  RowContentLinksUpdateWithNestedWhereUniqueInput: RowContentLinksUpdateWithNestedWhereUniqueInput;
  RowContentLinksUpsertInput: RowContentLinksUpsertInput;
  RowContentLinksUpsertLocalizationInput: RowContentLinksUpsertLocalizationInput;
  RowContentLinksUpsertWithNestedWhereUniqueInput: RowContentLinksUpsertWithNestedWhereUniqueInput;
  RowContentLinksWhereInput: RowContentLinksWhereInput;
  RowContentLinksWhereUniqueInput: RowContentLinksWhereUniqueInput;
  RowHeroBanner: RowHeroBanner;
  RowHeroBannerConnectInput: RowHeroBannerConnectInput;
  RowHeroBannerConnection: RowHeroBannerConnection;
  RowHeroBannerCreateInput: RowHeroBannerCreateInput;
  RowHeroBannerCreateLocalizationDataInput: RowHeroBannerCreateLocalizationDataInput;
  RowHeroBannerCreateLocalizationInput: RowHeroBannerCreateLocalizationInput;
  RowHeroBannerCreateLocalizationsInput: RowHeroBannerCreateLocalizationsInput;
  RowHeroBannerCreateManyInlineInput: RowHeroBannerCreateManyInlineInput;
  RowHeroBannerCreateOneInlineInput: RowHeroBannerCreateOneInlineInput;
  RowHeroBannerEdge: RowHeroBannerEdge;
  RowHeroBannerManyWhereInput: RowHeroBannerManyWhereInput;
  RowHeroBannerUpdateInput: RowHeroBannerUpdateInput;
  RowHeroBannerUpdateLocalizationDataInput: RowHeroBannerUpdateLocalizationDataInput;
  RowHeroBannerUpdateLocalizationInput: RowHeroBannerUpdateLocalizationInput;
  RowHeroBannerUpdateLocalizationsInput: RowHeroBannerUpdateLocalizationsInput;
  RowHeroBannerUpdateManyInlineInput: RowHeroBannerUpdateManyInlineInput;
  RowHeroBannerUpdateManyInput: RowHeroBannerUpdateManyInput;
  RowHeroBannerUpdateManyLocalizationDataInput: RowHeroBannerUpdateManyLocalizationDataInput;
  RowHeroBannerUpdateManyLocalizationInput: RowHeroBannerUpdateManyLocalizationInput;
  RowHeroBannerUpdateManyLocalizationsInput: RowHeroBannerUpdateManyLocalizationsInput;
  RowHeroBannerUpdateManyWithNestedWhereInput: RowHeroBannerUpdateManyWithNestedWhereInput;
  RowHeroBannerUpdateOneInlineInput: RowHeroBannerUpdateOneInlineInput;
  RowHeroBannerUpdateWithNestedWhereUniqueInput: RowHeroBannerUpdateWithNestedWhereUniqueInput;
  RowHeroBannerUpsertInput: RowHeroBannerUpsertInput;
  RowHeroBannerUpsertLocalizationInput: RowHeroBannerUpsertLocalizationInput;
  RowHeroBannerUpsertWithNestedWhereUniqueInput: RowHeroBannerUpsertWithNestedWhereUniqueInput;
  RowHeroBannerWhereInput: RowHeroBannerWhereInput;
  RowHeroBannerWhereUniqueInput: RowHeroBannerWhereUniqueInput;
  RowProduct: RowProduct;
  RowProductConnectInput: RowProductConnectInput;
  RowProductConnection: RowProductConnection;
  RowProductCreateInput: RowProductCreateInput;
  RowProductCreateLocalizationDataInput: RowProductCreateLocalizationDataInput;
  RowProductCreateLocalizationInput: RowProductCreateLocalizationInput;
  RowProductCreateLocalizationsInput: RowProductCreateLocalizationsInput;
  RowProductCreateManyInlineInput: RowProductCreateManyInlineInput;
  RowProductCreateOneInlineInput: RowProductCreateOneInlineInput;
  RowProductEdge: RowProductEdge;
  RowProductManyWhereInput: RowProductManyWhereInput;
  RowProductUpdateInput: RowProductUpdateInput;
  RowProductUpdateLocalizationDataInput: RowProductUpdateLocalizationDataInput;
  RowProductUpdateLocalizationInput: RowProductUpdateLocalizationInput;
  RowProductUpdateLocalizationsInput: RowProductUpdateLocalizationsInput;
  RowProductUpdateManyInlineInput: RowProductUpdateManyInlineInput;
  RowProductUpdateManyInput: RowProductUpdateManyInput;
  RowProductUpdateManyLocalizationDataInput: RowProductUpdateManyLocalizationDataInput;
  RowProductUpdateManyLocalizationInput: RowProductUpdateManyLocalizationInput;
  RowProductUpdateManyLocalizationsInput: RowProductUpdateManyLocalizationsInput;
  RowProductUpdateManyWithNestedWhereInput: RowProductUpdateManyWithNestedWhereInput;
  RowProductUpdateOneInlineInput: RowProductUpdateOneInlineInput;
  RowProductUpdateWithNestedWhereUniqueInput: RowProductUpdateWithNestedWhereUniqueInput;
  RowProductUpsertInput: RowProductUpsertInput;
  RowProductUpsertLocalizationInput: RowProductUpsertLocalizationInput;
  RowProductUpsertWithNestedWhereUniqueInput: RowProductUpsertWithNestedWhereUniqueInput;
  RowProductWhereInput: RowProductWhereInput;
  RowProductWhereUniqueInput: RowProductWhereUniqueInput;
  RowQuote: RowQuote;
  RowQuoteConnectInput: RowQuoteConnectInput;
  RowQuoteConnection: RowQuoteConnection;
  RowQuoteCreateInput: RowQuoteCreateInput;
  RowQuoteCreateLocalizationDataInput: RowQuoteCreateLocalizationDataInput;
  RowQuoteCreateLocalizationInput: RowQuoteCreateLocalizationInput;
  RowQuoteCreateLocalizationsInput: RowQuoteCreateLocalizationsInput;
  RowQuoteCreateManyInlineInput: RowQuoteCreateManyInlineInput;
  RowQuoteCreateOneInlineInput: RowQuoteCreateOneInlineInput;
  RowQuoteEdge: RowQuoteEdge;
  RowQuoteManyWhereInput: RowQuoteManyWhereInput;
  RowQuoteUpdateInput: RowQuoteUpdateInput;
  RowQuoteUpdateLocalizationDataInput: RowQuoteUpdateLocalizationDataInput;
  RowQuoteUpdateLocalizationInput: RowQuoteUpdateLocalizationInput;
  RowQuoteUpdateLocalizationsInput: RowQuoteUpdateLocalizationsInput;
  RowQuoteUpdateManyInlineInput: RowQuoteUpdateManyInlineInput;
  RowQuoteUpdateManyInput: RowQuoteUpdateManyInput;
  RowQuoteUpdateManyLocalizationDataInput: RowQuoteUpdateManyLocalizationDataInput;
  RowQuoteUpdateManyLocalizationInput: RowQuoteUpdateManyLocalizationInput;
  RowQuoteUpdateManyLocalizationsInput: RowQuoteUpdateManyLocalizationsInput;
  RowQuoteUpdateManyWithNestedWhereInput: RowQuoteUpdateManyWithNestedWhereInput;
  RowQuoteUpdateOneInlineInput: RowQuoteUpdateOneInlineInput;
  RowQuoteUpdateWithNestedWhereUniqueInput: RowQuoteUpdateWithNestedWhereUniqueInput;
  RowQuoteUpsertInput: RowQuoteUpsertInput;
  RowQuoteUpsertLocalizationInput: RowQuoteUpsertLocalizationInput;
  RowQuoteUpsertWithNestedWhereUniqueInput: RowQuoteUpsertWithNestedWhereUniqueInput;
  RowQuoteWhereInput: RowQuoteWhereInput;
  RowQuoteWhereUniqueInput: RowQuoteWhereUniqueInput;
  RowServiceOptions: RowServiceOptions;
  RowServiceOptionsConnectInput: RowServiceOptionsConnectInput;
  RowServiceOptionsConnection: RowServiceOptionsConnection;
  RowServiceOptionsCreateInput: RowServiceOptionsCreateInput;
  RowServiceOptionsCreateLocalizationDataInput: RowServiceOptionsCreateLocalizationDataInput;
  RowServiceOptionsCreateLocalizationInput: RowServiceOptionsCreateLocalizationInput;
  RowServiceOptionsCreateLocalizationsInput: RowServiceOptionsCreateLocalizationsInput;
  RowServiceOptionsCreateManyInlineInput: RowServiceOptionsCreateManyInlineInput;
  RowServiceOptionsCreateOneInlineInput: RowServiceOptionsCreateOneInlineInput;
  RowServiceOptionsEdge: RowServiceOptionsEdge;
  RowServiceOptionsManyWhereInput: RowServiceOptionsManyWhereInput;
  RowServiceOptionsUpdateInput: RowServiceOptionsUpdateInput;
  RowServiceOptionsUpdateLocalizationDataInput: RowServiceOptionsUpdateLocalizationDataInput;
  RowServiceOptionsUpdateLocalizationInput: RowServiceOptionsUpdateLocalizationInput;
  RowServiceOptionsUpdateLocalizationsInput: RowServiceOptionsUpdateLocalizationsInput;
  RowServiceOptionsUpdateManyInlineInput: RowServiceOptionsUpdateManyInlineInput;
  RowServiceOptionsUpdateManyInput: RowServiceOptionsUpdateManyInput;
  RowServiceOptionsUpdateManyLocalizationDataInput: RowServiceOptionsUpdateManyLocalizationDataInput;
  RowServiceOptionsUpdateManyLocalizationInput: RowServiceOptionsUpdateManyLocalizationInput;
  RowServiceOptionsUpdateManyLocalizationsInput: RowServiceOptionsUpdateManyLocalizationsInput;
  RowServiceOptionsUpdateManyWithNestedWhereInput: RowServiceOptionsUpdateManyWithNestedWhereInput;
  RowServiceOptionsUpdateOneInlineInput: RowServiceOptionsUpdateOneInlineInput;
  RowServiceOptionsUpdateWithNestedWhereUniqueInput: RowServiceOptionsUpdateWithNestedWhereUniqueInput;
  RowServiceOptionsUpsertInput: RowServiceOptionsUpsertInput;
  RowServiceOptionsUpsertLocalizationInput: RowServiceOptionsUpsertLocalizationInput;
  RowServiceOptionsUpsertWithNestedWhereUniqueInput: RowServiceOptionsUpsertWithNestedWhereUniqueInput;
  RowServiceOptionsWhereInput: RowServiceOptionsWhereInput;
  RowServiceOptionsWhereUniqueInput: RowServiceOptionsWhereUniqueInput;
  RowSpecialBanner: RowSpecialBanner;
  RowSpecialBannerConnectInput: RowSpecialBannerConnectInput;
  RowSpecialBannerConnection: RowSpecialBannerConnection;
  RowSpecialBannerCreateInput: RowSpecialBannerCreateInput;
  RowSpecialBannerCreateLocalizationDataInput: RowSpecialBannerCreateLocalizationDataInput;
  RowSpecialBannerCreateLocalizationInput: RowSpecialBannerCreateLocalizationInput;
  RowSpecialBannerCreateLocalizationsInput: RowSpecialBannerCreateLocalizationsInput;
  RowSpecialBannerCreateManyInlineInput: RowSpecialBannerCreateManyInlineInput;
  RowSpecialBannerCreateOneInlineInput: RowSpecialBannerCreateOneInlineInput;
  RowSpecialBannerEdge: RowSpecialBannerEdge;
  RowSpecialBannerManyWhereInput: RowSpecialBannerManyWhereInput;
  RowSpecialBannerUpdateInput: RowSpecialBannerUpdateInput;
  RowSpecialBannerUpdateLocalizationDataInput: RowSpecialBannerUpdateLocalizationDataInput;
  RowSpecialBannerUpdateLocalizationInput: RowSpecialBannerUpdateLocalizationInput;
  RowSpecialBannerUpdateLocalizationsInput: RowSpecialBannerUpdateLocalizationsInput;
  RowSpecialBannerUpdateManyInlineInput: RowSpecialBannerUpdateManyInlineInput;
  RowSpecialBannerUpdateManyInput: RowSpecialBannerUpdateManyInput;
  RowSpecialBannerUpdateManyLocalizationDataInput: RowSpecialBannerUpdateManyLocalizationDataInput;
  RowSpecialBannerUpdateManyLocalizationInput: RowSpecialBannerUpdateManyLocalizationInput;
  RowSpecialBannerUpdateManyLocalizationsInput: RowSpecialBannerUpdateManyLocalizationsInput;
  RowSpecialBannerUpdateManyWithNestedWhereInput: RowSpecialBannerUpdateManyWithNestedWhereInput;
  RowSpecialBannerUpdateOneInlineInput: RowSpecialBannerUpdateOneInlineInput;
  RowSpecialBannerUpdateWithNestedWhereUniqueInput: RowSpecialBannerUpdateWithNestedWhereUniqueInput;
  RowSpecialBannerUpsertInput: RowSpecialBannerUpsertInput;
  RowSpecialBannerUpsertLocalizationInput: RowSpecialBannerUpsertLocalizationInput;
  RowSpecialBannerUpsertWithNestedWhereUniqueInput: RowSpecialBannerUpsertWithNestedWhereUniqueInput;
  RowSpecialBannerWhereInput: RowSpecialBannerWhereInput;
  RowSpecialBannerWhereUniqueInput: RowSpecialBannerWhereUniqueInput;
  ScheduledOperation: Omit<ScheduledOperation, 'affectedDocuments'> & { affectedDocuments: Array<ResolversParentTypes['ScheduledOperationAffectedDocument']> };
  ScheduledOperationAffectedDocument: ResolversParentTypes['Asset'] | ResolversParentTypes['Banner'] | ResolversParentTypes['Footer'] | ResolversParentTypes['Page'] | ResolversParentTypes['PageLink'] | ResolversParentTypes['RowBlogContent'] | ResolversParentTypes['RowButtonLinkList'] | ResolversParentTypes['RowColumnOne'] | ResolversParentTypes['RowColumnThree'] | ResolversParentTypes['RowColumnTwo'] | ResolversParentTypes['RowContentLinks'] | ResolversParentTypes['RowHeroBanner'] | ResolversParentTypes['RowProduct'] | ResolversParentTypes['RowQuote'] | ResolversParentTypes['RowServiceOptions'] | ResolversParentTypes['RowSpecialBanner'] | ResolversParentTypes['Usps'];
  ScheduledOperationConnectInput: ScheduledOperationConnectInput;
  ScheduledOperationConnection: ScheduledOperationConnection;
  ScheduledOperationCreateManyInlineInput: ScheduledOperationCreateManyInlineInput;
  ScheduledOperationCreateOneInlineInput: ScheduledOperationCreateOneInlineInput;
  ScheduledOperationEdge: ScheduledOperationEdge;
  ScheduledOperationManyWhereInput: ScheduledOperationManyWhereInput;
  ScheduledOperationUpdateManyInlineInput: ScheduledOperationUpdateManyInlineInput;
  ScheduledOperationUpdateOneInlineInput: ScheduledOperationUpdateOneInlineInput;
  ScheduledOperationWhereInput: ScheduledOperationWhereInput;
  ScheduledOperationWhereUniqueInput: ScheduledOperationWhereUniqueInput;
  ScheduledRelease: ScheduledRelease;
  ScheduledReleaseConnectInput: ScheduledReleaseConnectInput;
  ScheduledReleaseConnection: ScheduledReleaseConnection;
  ScheduledReleaseCreateInput: ScheduledReleaseCreateInput;
  ScheduledReleaseCreateManyInlineInput: ScheduledReleaseCreateManyInlineInput;
  ScheduledReleaseCreateOneInlineInput: ScheduledReleaseCreateOneInlineInput;
  ScheduledReleaseEdge: ScheduledReleaseEdge;
  ScheduledReleaseManyWhereInput: ScheduledReleaseManyWhereInput;
  ScheduledReleaseUpdateInput: ScheduledReleaseUpdateInput;
  ScheduledReleaseUpdateManyInlineInput: ScheduledReleaseUpdateManyInlineInput;
  ScheduledReleaseUpdateManyInput: ScheduledReleaseUpdateManyInput;
  ScheduledReleaseUpdateManyWithNestedWhereInput: ScheduledReleaseUpdateManyWithNestedWhereInput;
  ScheduledReleaseUpdateOneInlineInput: ScheduledReleaseUpdateOneInlineInput;
  ScheduledReleaseUpdateWithNestedWhereUniqueInput: ScheduledReleaseUpdateWithNestedWhereUniqueInput;
  ScheduledReleaseUpsertInput: ScheduledReleaseUpsertInput;
  ScheduledReleaseUpsertWithNestedWhereUniqueInput: ScheduledReleaseUpsertWithNestedWhereUniqueInput;
  ScheduledReleaseWhereInput: ScheduledReleaseWhereInput;
  ScheduledReleaseWhereUniqueInput: ScheduledReleaseWhereUniqueInput;
  String: Scalars['String'];
  UnpublishLocaleInput: UnpublishLocaleInput;
  User: User;
  UserConnectInput: UserConnectInput;
  UserConnection: UserConnection;
  UserCreateManyInlineInput: UserCreateManyInlineInput;
  UserCreateOneInlineInput: UserCreateOneInlineInput;
  UserEdge: UserEdge;
  UserManyWhereInput: UserManyWhereInput;
  UserUpdateManyInlineInput: UserUpdateManyInlineInput;
  UserUpdateOneInlineInput: UserUpdateOneInlineInput;
  UserWhereInput: UserWhereInput;
  UserWhereUniqueInput: UserWhereUniqueInput;
  Usps: Usps;
  UspsConnectInput: UspsConnectInput;
  UspsConnection: UspsConnection;
  UspsCreateInput: UspsCreateInput;
  UspsCreateManyInlineInput: UspsCreateManyInlineInput;
  UspsCreateOneInlineInput: UspsCreateOneInlineInput;
  UspsEdge: UspsEdge;
  UspsManyWhereInput: UspsManyWhereInput;
  UspsUpdateInput: UspsUpdateInput;
  UspsUpdateManyInlineInput: UspsUpdateManyInlineInput;
  UspsUpdateManyInput: UspsUpdateManyInput;
  UspsUpdateManyWithNestedWhereInput: UspsUpdateManyWithNestedWhereInput;
  UspsUpdateOneInlineInput: UspsUpdateOneInlineInput;
  UspsUpdateWithNestedWhereUniqueInput: UspsUpdateWithNestedWhereUniqueInput;
  UspsUpsertInput: UspsUpsertInput;
  UspsUpsertWithNestedWhereUniqueInput: UspsUpsertWithNestedWhereUniqueInput;
  UspsWhereInput: UspsWhereInput;
  UspsWhereUniqueInput: UspsWhereUniqueInput;
  Version: Version;
  VersionWhereInput: VersionWhereInput;
  StoreConfig: StoreConfig;
  SendFriendConfiguration: SendFriendConfiguration;
  Cart: Cart;
  AppliedCoupon: AppliedCoupon;
  AvailablePaymentMethod: AvailablePaymentMethod;
  MollieIssuer: MollieIssuer;
  MolliePaymentMethodMeta: MolliePaymentMethodMeta;
  BillingCartAddress: BillingCartAddress;
  CartAddressInterface: ResolversParentTypes['BillingCartAddress'] | ResolversParentTypes['ShippingCartAddress'];
  CartAddressCountry: CartAddressCountry;
  CartAddressRegion: CartAddressRegion;
  GiftMessage: GiftMessage;
  CartItemInterface: ResolversParentTypes['SimpleCartItem'] | ResolversParentTypes['VirtualCartItem'] | ResolversParentTypes['DownloadableCartItem'] | ResolversParentTypes['BundleCartItem'] | ResolversParentTypes['ConfigurableCartItem'];
  CartItemPrices: CartItemPrices;
  Discount: Discount;
  Money: Money;
  FixedProductTax: FixedProductTax;
  ProductInterface: ResolversParentTypes['VirtualProduct'] | ResolversParentTypes['SimpleProduct'] | ResolversParentTypes['DownloadableProduct'] | ResolversParentTypes['BundleProduct'] | ResolversParentTypes['GroupedProduct'] | ResolversParentTypes['ConfigurableProduct'];
  CategoryInterface: ResolversParentTypes['CategoryTree'];
  Breadcrumb: Breadcrumb;
  CmsBlock: CmsBlock;
  ProductAttributeSortInput: ProductAttributeSortInput;
  CategoryProducts: CategoryProducts;
  SearchResultPageInfo: SearchResultPageInfo;
  ComplexTextValue: ComplexTextValue;
  ProductImage: ProductImage;
  MediaGalleryInterface: ResolversParentTypes['ProductImage'] | ResolversParentTypes['ProductVideo'];
  MediaGalleryEntry: MediaGalleryEntry;
  ProductMediaGalleryEntriesContent: ProductMediaGalleryEntriesContent;
  ProductMediaGalleryEntriesVideoContent: ProductMediaGalleryEntriesVideoContent;
  ProductPrices: ProductPrices;
  Price: Price;
  PriceAdjustment: PriceAdjustment;
  PriceRange: PriceRange;
  ProductPrice: ProductPrice;
  ProductDiscount: ProductDiscount;
  TierPrice: TierPrice;
  ProductLinksInterface: ResolversParentTypes['ProductLinks'];
  ProductReviews: ProductReviews;
  ProductReview: ProductReview;
  ProductReviewRating: ProductReviewRating;
  ProductTierPrices: ProductTierPrices;
  UrlRewrite: UrlRewrite;
  HttpQueryParameter: HttpQueryParameter;
  Website: Website;
  CartPrices: CartPrices;
  CartTaxItem: CartTaxItem;
  CartDiscount: CartDiscount;
  SelectedPaymentMethod: SelectedPaymentMethod;
  ShippingCartAddress: ShippingCartAddress;
  AvailableShippingMethod: AvailableShippingMethod;
  CartItemQuantity: CartItemQuantity;
  SelectedShippingMethod: SelectedShippingMethod;
  CategoryFilterInput: CategoryFilterInput;
  FilterEqualTypeInput: FilterEqualTypeInput;
  FilterMatchTypeInput: FilterMatchTypeInput;
  CategoryResult: CategoryResult;
  CategoryTree: CategoryTree;
  RoutableInterface: ResolversParentTypes['CategoryTree'] | ResolversParentTypes['CmsPage'] | ResolversParentTypes['VirtualProduct'] | ResolversParentTypes['SimpleProduct'] | ResolversParentTypes['DownloadableProduct'] | ResolversParentTypes['BundleProduct'] | ResolversParentTypes['GroupedProduct'] | ResolversParentTypes['ConfigurableProduct'];
  ChatData: ChatData;
  CheckoutAgreement: CheckoutAgreement;
  CmsBlocks: CmsBlocks;
  CmsPage: CmsPage;
  CompareList: CompareList;
  ComparableAttribute: ComparableAttribute;
  ComparableItem: ComparableItem;
  ProductAttribute: ProductAttribute;
  Country: Country;
  Region: Region;
  Currency: Currency;
  ExchangeRate: ExchangeRate;
  AttributeInput: AttributeInput;
  CustomAttributeMetadata: CustomAttributeMetadata;
  Attribute: Attribute;
  AttributeOption: AttributeOption;
  StorefrontProperties: StorefrontProperties;
  Customer: Customer;
  CustomerAddress: CustomerAddress;
  CustomerAddressAttribute: CustomerAddressAttribute;
  CustomerAddressRegion: CustomerAddressRegion;
  CustomerOrdersFilterInput: CustomerOrdersFilterInput;
  FilterStringTypeInput: FilterStringTypeInput;
  CustomerOrders: CustomerOrders;
  CustomerOrder: CustomerOrder;
  OrderAddress: OrderAddress;
  SalesCommentItem: SalesCommentItem;
  CreditMemo: CreditMemo;
  CreditMemoItemInterface: ResolversParentTypes['DownloadableCreditMemoItem'] | ResolversParentTypes['BundleCreditMemoItem'] | ResolversParentTypes['CreditMemoItem'];
  OrderItemInterface: ResolversParentTypes['DownloadableOrderItem'] | ResolversParentTypes['BundleOrderItem'] | ResolversParentTypes['OrderItem'];
  OrderItemOption: OrderItemOption;
  CreditMemoTotal: CreditMemoTotal;
  ShippingHandling: ShippingHandling;
  ShippingDiscount: ShippingDiscount;
  TaxItem: TaxItem;
  Invoice: Invoice;
  InvoiceItemInterface: ResolversParentTypes['DownloadableInvoiceItem'] | ResolversParentTypes['BundleInvoiceItem'] | ResolversParentTypes['InvoiceItem'];
  InvoiceTotal: InvoiceTotal;
  OrderPaymentMethod: OrderPaymentMethod;
  KeyValue: KeyValue;
  OrderShipment: OrderShipment;
  ShipmentItemInterface: ResolversParentTypes['BundleShipmentItem'] | ResolversParentTypes['ShipmentItem'];
  ShipmentTracking: ShipmentTracking;
  OrderTotal: OrderTotal;
  Wishlist: Wishlist;
  WishlistItem: WishlistItem;
  WishlistItems: WishlistItems;
  WishlistItemInterface: ResolversParentTypes['SimpleWishlistItem'] | ResolversParentTypes['VirtualWishlistItem'] | ResolversParentTypes['DownloadableWishlistItem'] | ResolversParentTypes['BundleWishlistItem'] | ResolversParentTypes['GroupedProductWishlistItem'] | ResolversParentTypes['ConfigurableWishlistItem'];
  SelectedCustomizableOption: SelectedCustomizableOption;
  SelectedCustomizableOptionValue: SelectedCustomizableOptionValue;
  CartItemSelectedOptionValuePrice: CartItemSelectedOptionValuePrice;
  CustomerDownloadableProducts: CustomerDownloadableProducts;
  CustomerDownloadableProduct: CustomerDownloadableProduct;
  CustomerPaymentTokens: CustomerPaymentTokens;
  PaymentToken: PaymentToken;
  IsConfigSettingEnabledOutput: IsConfigSettingEnabledOutput;
  HostedProUrlInput: HostedProUrlInput;
  HostedProUrl: HostedProUrl;
  PayflowLinkTokenInput: PayflowLinkTokenInput;
  PayflowLinkToken: PayflowLinkToken;
  IsEmailAvailableOutput: IsEmailAvailableOutput;
  MolliePaymentMethodsInput: MolliePaymentMethodsInput;
  MolliePaymentMethodsOutput: MolliePaymentMethodsOutput;
  MolliePaymentMethod: MolliePaymentMethod;
  Order: Order;
  AreaInput: AreaInput;
  PickupLocationFilterInput: PickupLocationFilterInput;
  FilterTypeInput: FilterTypeInput;
  PickupLocationSortInput: PickupLocationSortInput;
  ProductInfoInput: ProductInfoInput;
  PickupLocations: PickupLocations;
  PickupLocation: PickupLocation;
  ProductReviewRatingsMetadata: ProductReviewRatingsMetadata;
  ProductReviewRatingMetadata: ProductReviewRatingMetadata;
  ProductReviewRatingValueMetadata: ProductReviewRatingValueMetadata;
  ProductAttributeFilterInput: ProductAttributeFilterInput;
  FilterRangeTypeInput: FilterRangeTypeInput;
  Products: Products;
  Aggregation: Aggregation;
  AggregationOption: AggregationOption;
  AggregationOptionInterface: ResolversParentTypes['AggregationOption'];
  LayerFilter: LayerFilter;
  LayerFilterItemInterface: ResolversParentTypes['LayerFilterItem'] | ResolversParentTypes['SwatchLayerFilterItem'];
  SortFields: SortFields;
  SortField: SortField;
  TrackingData: TrackingData;
  EntityUrl: EntityUrl;
  WishlistOutput: WishlistOutput;
  AddBundleProductsToCartInput: AddBundleProductsToCartInput;
  BundleProductCartItemInput: BundleProductCartItemInput;
  BundleOptionInput: BundleOptionInput;
  CustomizableOptionInput: CustomizableOptionInput;
  CartItemInput: CartItemInput;
  EnteredOptionInput: EnteredOptionInput;
  AddBundleProductsToCartOutput: AddBundleProductsToCartOutput;
  AddConfigurableProductsToCartInput: AddConfigurableProductsToCartInput;
  ConfigurableProductCartItemInput: ConfigurableProductCartItemInput;
  AddConfigurableProductsToCartOutput: AddConfigurableProductsToCartOutput;
  AddDownloadableProductsToCartInput: AddDownloadableProductsToCartInput;
  DownloadableProductCartItemInput: DownloadableProductCartItemInput;
  DownloadableProductLinksInput: DownloadableProductLinksInput;
  AddDownloadableProductsToCartOutput: AddDownloadableProductsToCartOutput;
  AddProductsToCartOutput: AddProductsToCartOutput;
  CartUserInputError: CartUserInputError;
  AddProductsToCompareListInput: AddProductsToCompareListInput;
  WishlistItemInput: WishlistItemInput;
  AddProductsToWishlistOutput: AddProductsToWishlistOutput;
  WishListUserInputError: WishListUserInputError;
  AddSimpleProductsToCartInput: AddSimpleProductsToCartInput;
  SimpleProductCartItemInput: SimpleProductCartItemInput;
  AddSimpleProductsToCartOutput: AddSimpleProductsToCartOutput;
  AddVirtualProductsToCartInput: AddVirtualProductsToCartInput;
  VirtualProductCartItemInput: VirtualProductCartItemInput;
  AddVirtualProductsToCartOutput: AddVirtualProductsToCartOutput;
  AddWishlistItemsToCartOutput: AddWishlistItemsToCartOutput;
  WishlistCartUserInputError: WishlistCartUserInputError;
  ApplyCouponToCartInput: ApplyCouponToCartInput;
  ApplyCouponToCartOutput: ApplyCouponToCartOutput;
  AssignCompareListToCustomerOutput: AssignCompareListToCustomerOutput;
  CreateCompareListInput: CreateCompareListInput;
  CustomerInput: CustomerInput;
  CustomerOutput: CustomerOutput;
  CustomerAddressInput: CustomerAddressInput;
  CustomerAddressAttributeInput: CustomerAddressAttributeInput;
  CustomerAddressRegionInput: CustomerAddressRegionInput;
  CustomerCreateInput: CustomerCreateInput;
  createEmptyCartInput: createEmptyCartInput;
  createKlarnaPaymentsSessionInput: createKlarnaPaymentsSessionInput;
  createKlarnaPaymentsSessionOutput: createKlarnaPaymentsSessionOutput;
  Categories: Categories;
  Assets: Assets;
  MollieTransactionInput: MollieTransactionInput;
  MollieTransactionOutput: MollieTransactionOutput;
  PayflowProTokenInput: PayflowProTokenInput;
  PayflowProUrlInput: PayflowProUrlInput;
  CreatePayflowProTokenOutput: CreatePayflowProTokenOutput;
  PaypalExpressTokenInput: PaypalExpressTokenInput;
  PaypalExpressUrlsInput: PaypalExpressUrlsInput;
  PaypalExpressTokenOutput: PaypalExpressTokenOutput;
  PaypalExpressUrlList: PaypalExpressUrlList;
  CreateProductReviewInput: CreateProductReviewInput;
  ProductReviewRatingInput: ProductReviewRatingInput;
  CreateProductReviewOutput: CreateProductReviewOutput;
  DeleteCompareListOutput: DeleteCompareListOutput;
  DeletePaymentTokenOutput: DeletePaymentTokenOutput;
  CustomerToken: CustomerToken;
  GenerateCustomerTokenAsAdminInput: GenerateCustomerTokenAsAdminInput;
  GenerateCustomerTokenAsAdminOutput: GenerateCustomerTokenAsAdminOutput;
  PayflowProResponseInput: PayflowProResponseInput;
  PayflowProResponseOutput: PayflowProResponseOutput;
  MollieProcessTransactionInput: MollieProcessTransactionInput;
  MollieProcessTransactionOutput: MollieProcessTransactionOutput;
  MollieResetCartInput: MollieResetCartInput;
  MollieResetCartOutput: MollieResetCartOutput;
  PlaceOrderInput: PlaceOrderInput;
  PlaceOrderOutput: PlaceOrderOutput;
  RemoveCouponFromCartInput: RemoveCouponFromCartInput;
  RemoveCouponFromCartOutput: RemoveCouponFromCartOutput;
  RemoveItemFromCartInput: RemoveItemFromCartInput;
  RemoveItemFromCartOutput: RemoveItemFromCartOutput;
  RemoveProductsFromCompareListInput: RemoveProductsFromCompareListInput;
  RemoveProductsFromWishlistOutput: RemoveProductsFromWishlistOutput;
  ReorderItemsOutput: ReorderItemsOutput;
  CheckoutUserInputError: CheckoutUserInputError;
  RevokeCustomerTokenOutput: RevokeCustomerTokenOutput;
  SendEmailToFriendInput: SendEmailToFriendInput;
  SendEmailToFriendRecipientInput: SendEmailToFriendRecipientInput;
  SendEmailToFriendSenderInput: SendEmailToFriendSenderInput;
  SendEmailToFriendOutput: SendEmailToFriendOutput;
  SendEmailToFriendRecipient: SendEmailToFriendRecipient;
  SendEmailToFriendSender: SendEmailToFriendSender;
  SetBillingAddressOnCartInput: SetBillingAddressOnCartInput;
  BillingAddressInput: BillingAddressInput;
  CartAddressInput: CartAddressInput;
  SetBillingAddressOnCartOutput: SetBillingAddressOnCartOutput;
  SetGuestEmailOnCartInput: SetGuestEmailOnCartInput;
  SetGuestEmailOnCartOutput: SetGuestEmailOnCartOutput;
  SetPaymentMethodAndPlaceOrderInput: SetPaymentMethodAndPlaceOrderInput;
  PaymentMethodInput: PaymentMethodInput;
  BraintreeInput: BraintreeInput;
  BraintreeCcVaultInput: BraintreeCcVaultInput;
  HostedProInput: HostedProInput;
  KlarnaInput: KlarnaInput;
  PayflowExpressInput: PayflowExpressInput;
  PayflowLinkInput: PayflowLinkInput;
  PayflowProInput: PayflowProInput;
  CreditCardDetailsInput: CreditCardDetailsInput;
  VaultTokenInput: VaultTokenInput;
  PaypalExpressInput: PaypalExpressInput;
  SetPaymentMethodOnCartInput: SetPaymentMethodOnCartInput;
  SetPaymentMethodOnCartOutput: SetPaymentMethodOnCartOutput;
  SetShippingAddressesOnCartInput: SetShippingAddressesOnCartInput;
  ShippingAddressInput: ShippingAddressInput;
  SetShippingAddressesOnCartOutput: SetShippingAddressesOnCartOutput;
  SetShippingMethodsOnCartInput: SetShippingMethodsOnCartInput;
  ShippingMethodInput: ShippingMethodInput;
  SetShippingMethodsOnCartOutput: SetShippingMethodsOnCartOutput;
  SubscribeEmailToNewsletterOutput: SubscribeEmailToNewsletterOutput;
  UpdateCartItemsInput: UpdateCartItemsInput;
  CartItemUpdateInput: CartItemUpdateInput;
  GiftMessageInput: GiftMessageInput;
  UpdateCartItemsOutput: UpdateCartItemsOutput;
  CustomerUpdateInput: CustomerUpdateInput;
  WishlistItemUpdateInput: WishlistItemUpdateInput;
  UpdateProductsInWishlistOutput: UpdateProductsInWishlistOutput;
  ProductLinks: ProductLinks;
  PhysicalProductInterface: ResolversParentTypes['SimpleProduct'] | ResolversParentTypes['BundleProduct'] | ResolversParentTypes['GroupedProduct'] | ResolversParentTypes['ConfigurableProduct'];
  CustomizableAreaOption: CustomizableAreaOption;
  CustomizableOptionInterface: ResolversParentTypes['CustomizableAreaOption'] | ResolversParentTypes['CustomizableDateOption'] | ResolversParentTypes['CustomizableDropDownOption'] | ResolversParentTypes['CustomizableMultipleOption'] | ResolversParentTypes['CustomizableFieldOption'] | ResolversParentTypes['CustomizableFileOption'] | ResolversParentTypes['CustomizableRadioOption'] | ResolversParentTypes['CustomizableCheckboxOption'];
  CustomizableAreaValue: CustomizableAreaValue;
  CustomizableDateOption: CustomizableDateOption;
  CustomizableDateValue: CustomizableDateValue;
  CustomizableDropDownOption: CustomizableDropDownOption;
  CustomizableDropDownValue: CustomizableDropDownValue;
  CustomizableMultipleOption: CustomizableMultipleOption;
  CustomizableMultipleValue: CustomizableMultipleValue;
  CustomizableFieldOption: CustomizableFieldOption;
  CustomizableFieldValue: CustomizableFieldValue;
  CustomizableFileOption: CustomizableFileOption;
  CustomizableFileValue: CustomizableFileValue;
  ProductVideo: ProductVideo;
  CustomizableProductInterface: ResolversParentTypes['VirtualProduct'] | ResolversParentTypes['SimpleProduct'] | ResolversParentTypes['DownloadableProduct'] | ResolversParentTypes['BundleProduct'] | ResolversParentTypes['ConfigurableProduct'];
  CustomizableRadioOption: CustomizableRadioOption;
  CustomizableRadioValue: CustomizableRadioValue;
  CustomizableCheckboxOption: CustomizableCheckboxOption;
  CustomizableCheckboxValue: CustomizableCheckboxValue;
  VirtualProduct: VirtualProduct;
  SimpleProduct: SimpleProduct;
  ProductFilterInput: ProductFilterInput;
  ProductSortInput: ProductSortInput;
  LayerFilterItem: LayerFilterItem;
  SimpleWishlistItem: SimpleWishlistItem;
  VirtualWishlistItem: VirtualWishlistItem;
  SimpleCartItem: SimpleCartItem;
  VirtualCartItem: VirtualCartItem;
  DownloadableCartItem: DownloadableCartItem;
  DownloadableProductLinks: DownloadableProductLinks;
  DownloadableProductSamples: DownloadableProductSamples;
  DownloadableProduct: DownloadableProduct;
  DownloadableOrderItem: DownloadableOrderItem;
  DownloadableItemsLinks: DownloadableItemsLinks;
  DownloadableInvoiceItem: DownloadableInvoiceItem;
  DownloadableCreditMemoItem: DownloadableCreditMemoItem;
  DownloadableWishlistItem: DownloadableWishlistItem;
  BundleCartItem: BundleCartItem;
  SelectedBundleOption: SelectedBundleOption;
  SelectedBundleOptionValue: SelectedBundleOptionValue;
  BundleItem: BundleItem;
  BundleItemOption: BundleItemOption;
  BundleProduct: BundleProduct;
  BundleOrderItem: BundleOrderItem;
  ItemSelectedBundleOption: ItemSelectedBundleOption;
  ItemSelectedBundleOptionValue: ItemSelectedBundleOptionValue;
  BundleInvoiceItem: BundleInvoiceItem;
  BundleShipmentItem: BundleShipmentItem;
  BundleCreditMemoItem: BundleCreditMemoItem;
  BundleWishlistItem: BundleWishlistItem;
  ConfigurableCartItem: ConfigurableCartItem;
  SelectedConfigurableOption: SelectedConfigurableOption;
  SalesItemInterface: SalesItemInterface;
  GroupedProduct: GroupedProduct;
  GroupedProductItem: GroupedProductItem;
  GroupedProductWishlistItem: GroupedProductWishlistItem;
  ConfigurableProduct: ConfigurableProduct;
  ConfigurableProductOptions: ConfigurableProductOptions;
  ConfigurableProductOptionsValues: ConfigurableProductOptionsValues;
  SwatchDataInterface: ResolversParentTypes['ImageSwatchData'] | ResolversParentTypes['TextSwatchData'] | ResolversParentTypes['ColorSwatchData'];
  ConfigurableProductOptionsSelection: ConfigurableProductOptionsSelection;
  ConfigurableProductOption: ConfigurableProductOption;
  ConfigurableProductOptionValue: ConfigurableProductOptionValue;
  ConfigurableOptionAvailableForSelection: ConfigurableOptionAvailableForSelection;
  ConfigurableVariant: ConfigurableVariant;
  ConfigurableAttributeOption: ConfigurableAttributeOption;
  ConfigurableWishlistItem: ConfigurableWishlistItem;
  PaypalExpressToken: PaypalExpressToken;
  PayflowProToken: PayflowProToken;
  OrderItem: OrderItem;
  InvoiceItem: InvoiceItem;
  ShipmentItem: ShipmentItem;
  CreditMemoItem: CreditMemoItem;
  SwatchLayerFilterItemInterface: ResolversParentTypes['SwatchLayerFilterItem'];
  SwatchData: SwatchData;
  SwatchLayerFilterItem: SwatchLayerFilterItem;
  ImageSwatchData: ImageSwatchData;
  TextSwatchData: TextSwatchData;
  ColorSwatchData: ColorSwatchData;
  CurrentCartId: CurrentCartId;
  RegisterCartIdInput: RegisterCartIdInput;
}>;

export type injectableDirectiveArgs = { };

export type injectableDirectiveResolver<Result, Parent, ContextType = MeshContext, Args = injectableDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type injectDirectiveArgs = {
  into: Array<Scalars['String']>;
};

export type injectDirectiveResolver<Result, Parent, ContextType = MeshContext, Args = injectDirectiveArgs> = DirectiveResolverFn<Result, Parent, ContextType, Args>;

export type QueryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Query'] = ResolversParentTypes['Query']> = ResolversObject<{
  node?: Resolver<Maybe<ResolversTypes['Node']>, ParentType, ContextType, RequireFields<QuerynodeArgs, 'id' | 'stage' | 'locales'>>;
  rowServiceOptionsMultiple?: Resolver<Array<ResolversTypes['RowServiceOptions']>, ParentType, ContextType, RequireFields<QueryrowServiceOptionsMultipleArgs, 'stage' | 'locales'>>;
  rowServiceOptions?: Resolver<Maybe<ResolversTypes['RowServiceOptions']>, ParentType, ContextType, RequireFields<QueryrowServiceOptionsArgs, 'where' | 'stage' | 'locales'>>;
  rowServiceOptionsMultipleConnection?: Resolver<ResolversTypes['RowServiceOptionsConnection'], ParentType, ContextType, RequireFields<QueryrowServiceOptionsMultipleConnectionArgs, 'stage' | 'locales'>>;
  rowServiceOptionsVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryrowServiceOptionsVersionArgs, 'where'>>;
  pageLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<QuerypageLinksArgs, 'stage' | 'locales'>>;
  pageLink?: Resolver<Maybe<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<QuerypageLinkArgs, 'where' | 'stage' | 'locales'>>;
  pageLinksConnection?: Resolver<ResolversTypes['PageLinkConnection'], ParentType, ContextType, RequireFields<QuerypageLinksConnectionArgs, 'stage' | 'locales'>>;
  pageLinkVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QuerypageLinkVersionArgs, 'where'>>;
  footers?: Resolver<Array<ResolversTypes['Footer']>, ParentType, ContextType, RequireFields<QueryfootersArgs, 'stage' | 'locales'>>;
  footer?: Resolver<Maybe<ResolversTypes['Footer']>, ParentType, ContextType, RequireFields<QueryfooterArgs, 'where' | 'stage' | 'locales'>>;
  footersConnection?: Resolver<ResolversTypes['FooterConnection'], ParentType, ContextType, RequireFields<QueryfootersConnectionArgs, 'stage' | 'locales'>>;
  footerVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryfooterVersionArgs, 'where'>>;
  rowButtonLinkLists?: Resolver<Array<ResolversTypes['RowButtonLinkList']>, ParentType, ContextType, RequireFields<QueryrowButtonLinkListsArgs, 'stage' | 'locales'>>;
  rowButtonLinkList?: Resolver<Maybe<ResolversTypes['RowButtonLinkList']>, ParentType, ContextType, RequireFields<QueryrowButtonLinkListArgs, 'where' | 'stage' | 'locales'>>;
  rowButtonLinkListsConnection?: Resolver<ResolversTypes['RowButtonLinkListConnection'], ParentType, ContextType, RequireFields<QueryrowButtonLinkListsConnectionArgs, 'stage' | 'locales'>>;
  rowButtonLinkListVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryrowButtonLinkListVersionArgs, 'where'>>;
  rowQuotes?: Resolver<Array<ResolversTypes['RowQuote']>, ParentType, ContextType, RequireFields<QueryrowQuotesArgs, 'stage' | 'locales'>>;
  rowQuote?: Resolver<Maybe<ResolversTypes['RowQuote']>, ParentType, ContextType, RequireFields<QueryrowQuoteArgs, 'where' | 'stage' | 'locales'>>;
  rowQuotesConnection?: Resolver<ResolversTypes['RowQuoteConnection'], ParentType, ContextType, RequireFields<QueryrowQuotesConnectionArgs, 'stage' | 'locales'>>;
  rowQuoteVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryrowQuoteVersionArgs, 'where'>>;
  rowBlogContents?: Resolver<Array<ResolversTypes['RowBlogContent']>, ParentType, ContextType, RequireFields<QueryrowBlogContentsArgs, 'stage' | 'locales'>>;
  rowBlogContent?: Resolver<Maybe<ResolversTypes['RowBlogContent']>, ParentType, ContextType, RequireFields<QueryrowBlogContentArgs, 'where' | 'stage' | 'locales'>>;
  rowBlogContentsConnection?: Resolver<ResolversTypes['RowBlogContentConnection'], ParentType, ContextType, RequireFields<QueryrowBlogContentsConnectionArgs, 'stage' | 'locales'>>;
  rowBlogContentVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryrowBlogContentVersionArgs, 'where'>>;
  uspsMultiple?: Resolver<Array<ResolversTypes['Usps']>, ParentType, ContextType, RequireFields<QueryuspsMultipleArgs, 'stage' | 'locales'>>;
  usps?: Resolver<Maybe<ResolversTypes['Usps']>, ParentType, ContextType, RequireFields<QueryuspsArgs, 'where' | 'stage' | 'locales'>>;
  uspsMultipleConnection?: Resolver<ResolversTypes['UspsConnection'], ParentType, ContextType, RequireFields<QueryuspsMultipleConnectionArgs, 'stage' | 'locales'>>;
  uspsVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryuspsVersionArgs, 'where'>>;
  rowContentLinksMultiple?: Resolver<Array<ResolversTypes['RowContentLinks']>, ParentType, ContextType, RequireFields<QueryrowContentLinksMultipleArgs, 'stage' | 'locales'>>;
  rowContentLinks?: Resolver<Maybe<ResolversTypes['RowContentLinks']>, ParentType, ContextType, RequireFields<QueryrowContentLinksArgs, 'where' | 'stage' | 'locales'>>;
  rowContentLinksMultipleConnection?: Resolver<ResolversTypes['RowContentLinksConnection'], ParentType, ContextType, RequireFields<QueryrowContentLinksMultipleConnectionArgs, 'stage' | 'locales'>>;
  rowContentLinksVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryrowContentLinksVersionArgs, 'where'>>;
  rowColumnOnes?: Resolver<Array<ResolversTypes['RowColumnOne']>, ParentType, ContextType, RequireFields<QueryrowColumnOnesArgs, 'stage' | 'locales'>>;
  rowColumnOne?: Resolver<Maybe<ResolversTypes['RowColumnOne']>, ParentType, ContextType, RequireFields<QueryrowColumnOneArgs, 'where' | 'stage' | 'locales'>>;
  rowColumnOnesConnection?: Resolver<ResolversTypes['RowColumnOneConnection'], ParentType, ContextType, RequireFields<QueryrowColumnOnesConnectionArgs, 'stage' | 'locales'>>;
  rowColumnOneVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryrowColumnOneVersionArgs, 'where'>>;
  rowColumnTwos?: Resolver<Array<ResolversTypes['RowColumnTwo']>, ParentType, ContextType, RequireFields<QueryrowColumnTwosArgs, 'stage' | 'locales'>>;
  rowColumnTwo?: Resolver<Maybe<ResolversTypes['RowColumnTwo']>, ParentType, ContextType, RequireFields<QueryrowColumnTwoArgs, 'where' | 'stage' | 'locales'>>;
  rowColumnTwosConnection?: Resolver<ResolversTypes['RowColumnTwoConnection'], ParentType, ContextType, RequireFields<QueryrowColumnTwosConnectionArgs, 'stage' | 'locales'>>;
  rowColumnTwoVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryrowColumnTwoVersionArgs, 'where'>>;
  rowColumnThrees?: Resolver<Array<ResolversTypes['RowColumnThree']>, ParentType, ContextType, RequireFields<QueryrowColumnThreesArgs, 'stage' | 'locales'>>;
  rowColumnThree?: Resolver<Maybe<ResolversTypes['RowColumnThree']>, ParentType, ContextType, RequireFields<QueryrowColumnThreeArgs, 'where' | 'stage' | 'locales'>>;
  rowColumnThreesConnection?: Resolver<ResolversTypes['RowColumnThreeConnection'], ParentType, ContextType, RequireFields<QueryrowColumnThreesConnectionArgs, 'stage' | 'locales'>>;
  rowColumnThreeVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryrowColumnThreeVersionArgs, 'where'>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<QuerypagesArgs, 'stage' | 'locales'>>;
  page?: Resolver<Maybe<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<QuerypageArgs, 'where' | 'stage' | 'locales'>>;
  pagesConnection?: Resolver<ResolversTypes['PageConnection'], ParentType, ContextType, RequireFields<QuerypagesConnectionArgs, 'stage' | 'locales'>>;
  pageVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QuerypageVersionArgs, 'where'>>;
  assets?: Resolver<Array<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<QueryassetsArgs, 'stage' | 'locales'>>;
  asset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<QueryassetArgs, 'where' | 'stage' | 'locales'>>;
  assetsConnection?: Resolver<ResolversTypes['AssetConnection'], ParentType, ContextType, RequireFields<QueryassetsConnectionArgs, 'stage' | 'locales'>>;
  assetVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryassetVersionArgs, 'where'>>;
  users?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType, RequireFields<QueryusersArgs, 'stage' | 'locales'>>;
  user?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, RequireFields<QueryuserArgs, 'where' | 'stage' | 'locales'>>;
  usersConnection?: Resolver<ResolversTypes['UserConnection'], ParentType, ContextType, RequireFields<QueryusersConnectionArgs, 'stage' | 'locales'>>;
  rowSpecialBanners?: Resolver<Array<ResolversTypes['RowSpecialBanner']>, ParentType, ContextType, RequireFields<QueryrowSpecialBannersArgs, 'stage' | 'locales'>>;
  rowSpecialBanner?: Resolver<Maybe<ResolversTypes['RowSpecialBanner']>, ParentType, ContextType, RequireFields<QueryrowSpecialBannerArgs, 'where' | 'stage' | 'locales'>>;
  rowSpecialBannersConnection?: Resolver<ResolversTypes['RowSpecialBannerConnection'], ParentType, ContextType, RequireFields<QueryrowSpecialBannersConnectionArgs, 'stage' | 'locales'>>;
  rowSpecialBannerVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryrowSpecialBannerVersionArgs, 'where'>>;
  rowProductMultiple?: Resolver<Array<ResolversTypes['RowProduct']>, ParentType, ContextType, RequireFields<QueryrowProductMultipleArgs, 'stage' | 'locales'>>;
  rowProduct?: Resolver<Maybe<ResolversTypes['RowProduct']>, ParentType, ContextType, RequireFields<QueryrowProductArgs, 'where' | 'stage' | 'locales'>>;
  rowProductMultipleConnection?: Resolver<ResolversTypes['RowProductConnection'], ParentType, ContextType, RequireFields<QueryrowProductMultipleConnectionArgs, 'stage' | 'locales'>>;
  rowProductVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryrowProductVersionArgs, 'where'>>;
  rowHeroBanners?: Resolver<Array<ResolversTypes['RowHeroBanner']>, ParentType, ContextType, RequireFields<QueryrowHeroBannersArgs, 'stage' | 'locales'>>;
  rowHeroBanner?: Resolver<Maybe<ResolversTypes['RowHeroBanner']>, ParentType, ContextType, RequireFields<QueryrowHeroBannerArgs, 'where' | 'stage' | 'locales'>>;
  rowHeroBannersConnection?: Resolver<ResolversTypes['RowHeroBannerConnection'], ParentType, ContextType, RequireFields<QueryrowHeroBannersConnectionArgs, 'stage' | 'locales'>>;
  rowHeroBannerVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QueryrowHeroBannerVersionArgs, 'where'>>;
  scheduledOperations?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, RequireFields<QueryscheduledOperationsArgs, 'stage' | 'locales'>>;
  scheduledOperation?: Resolver<Maybe<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, RequireFields<QueryscheduledOperationArgs, 'where' | 'stage' | 'locales'>>;
  scheduledOperationsConnection?: Resolver<ResolversTypes['ScheduledOperationConnection'], ParentType, ContextType, RequireFields<QueryscheduledOperationsConnectionArgs, 'stage' | 'locales'>>;
  scheduledReleases?: Resolver<Array<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<QueryscheduledReleasesArgs, 'stage' | 'locales'>>;
  scheduledRelease?: Resolver<Maybe<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<QueryscheduledReleaseArgs, 'where' | 'stage' | 'locales'>>;
  scheduledReleasesConnection?: Resolver<ResolversTypes['ScheduledReleaseConnection'], ParentType, ContextType, RequireFields<QueryscheduledReleasesConnectionArgs, 'stage' | 'locales'>>;
  banners?: Resolver<Array<ResolversTypes['Banner']>, ParentType, ContextType, RequireFields<QuerybannersArgs, 'stage' | 'locales'>>;
  banner?: Resolver<Maybe<ResolversTypes['Banner']>, ParentType, ContextType, RequireFields<QuerybannerArgs, 'where' | 'stage' | 'locales'>>;
  bannersConnection?: Resolver<ResolversTypes['BannerConnection'], ParentType, ContextType, RequireFields<QuerybannersConnectionArgs, 'stage' | 'locales'>>;
  bannerVersion?: Resolver<Maybe<ResolversTypes['DocumentVersion']>, ParentType, ContextType, RequireFields<QuerybannerVersionArgs, 'where'>>;
  availableStores?: Resolver<Maybe<Array<Maybe<ResolversTypes['StoreConfig']>>>, ParentType, ContextType, Partial<QueryavailableStoresArgs>>;
  cart?: Resolver<Maybe<ResolversTypes['Cart']>, ParentType, ContextType, RequireFields<QuerycartArgs, 'cart_id'>>;
  categories?: Resolver<Maybe<ResolversTypes['CategoryResult']>, ParentType, ContextType, RequireFields<QuerycategoriesArgs, 'pageSize' | 'currentPage'>>;
  category?: Resolver<Maybe<ResolversTypes['CategoryTree']>, ParentType, ContextType, Partial<QuerycategoryArgs>>;
  categoryList?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryTree']>>>, ParentType, ContextType, Partial<QuerycategoryListArgs>>;
  chatData?: Resolver<Maybe<ResolversTypes['ChatData']>, ParentType, ContextType>;
  checkoutAgreements?: Resolver<Maybe<Array<Maybe<ResolversTypes['CheckoutAgreement']>>>, ParentType, ContextType>;
  cmsBlocks?: Resolver<Maybe<ResolversTypes['CmsBlocks']>, ParentType, ContextType, Partial<QuerycmsBlocksArgs>>;
  cmsPage?: Resolver<Maybe<ResolversTypes['CmsPage']>, ParentType, ContextType, Partial<QuerycmsPageArgs>>;
  compareList?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType, RequireFields<QuerycompareListArgs, 'uid'>>;
  countries?: Resolver<Maybe<Array<Maybe<ResolversTypes['Country']>>>, ParentType, ContextType>;
  country?: Resolver<Maybe<ResolversTypes['Country']>, ParentType, ContextType, Partial<QuerycountryArgs>>;
  currency?: Resolver<Maybe<ResolversTypes['Currency']>, ParentType, ContextType>;
  customAttributeMetadata?: Resolver<Maybe<ResolversTypes['CustomAttributeMetadata']>, ParentType, ContextType, RequireFields<QuerycustomAttributeMetadataArgs, 'attributes'>>;
  customer?: Resolver<Maybe<ResolversTypes['Customer']>, ParentType, ContextType>;
  customerCart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  customerDownloadableProducts?: Resolver<Maybe<ResolversTypes['CustomerDownloadableProducts']>, ParentType, ContextType>;
  customerOrders?: Resolver<Maybe<ResolversTypes['CustomerOrders']>, ParentType, ContextType>;
  customerPaymentTokens?: Resolver<Maybe<ResolversTypes['CustomerPaymentTokens']>, ParentType, ContextType>;
  emailCaptureCheckout?: Resolver<Maybe<ResolversTypes['IsConfigSettingEnabledOutput']>, ParentType, ContextType>;
  emailCaptureNewsletter?: Resolver<Maybe<ResolversTypes['IsConfigSettingEnabledOutput']>, ParentType, ContextType>;
  getHostedProUrl?: Resolver<Maybe<ResolversTypes['HostedProUrl']>, ParentType, ContextType, RequireFields<QuerygetHostedProUrlArgs, 'input'>>;
  getPayflowLinkToken?: Resolver<Maybe<ResolversTypes['PayflowLinkToken']>, ParentType, ContextType, RequireFields<QuerygetPayflowLinkTokenArgs, 'input'>>;
  isEmailAvailable?: Resolver<Maybe<ResolversTypes['IsEmailAvailableOutput']>, ParentType, ContextType, RequireFields<QueryisEmailAvailableArgs, 'email'>>;
  mollieCustomerOrder?: Resolver<Maybe<ResolversTypes['CustomerOrder']>, ParentType, ContextType, Partial<QuerymollieCustomerOrderArgs>>;
  molliePaymentMethods?: Resolver<Maybe<ResolversTypes['MolliePaymentMethodsOutput']>, ParentType, ContextType, Partial<QuerymolliePaymentMethodsArgs>>;
  orderData?: Resolver<Maybe<ResolversTypes['Order']>, ParentType, ContextType, RequireFields<QueryorderDataArgs, 'orderId'>>;
  pickupLocations?: Resolver<Maybe<ResolversTypes['PickupLocations']>, ParentType, ContextType, RequireFields<QuerypickupLocationsArgs, 'pageSize' | 'currentPage'>>;
  productReviewRatingsMetadata?: Resolver<ResolversTypes['ProductReviewRatingsMetadata'], ParentType, ContextType>;
  products?: Resolver<Maybe<ResolversTypes['Products']>, ParentType, ContextType, RequireFields<QueryproductsArgs, 'pageSize' | 'currentPage'>>;
  route?: Resolver<Maybe<ResolversTypes['RoutableInterface']>, ParentType, ContextType, RequireFields<QueryrouteArgs, 'url'>>;
  storeConfig?: Resolver<Maybe<ResolversTypes['StoreConfig']>, ParentType, ContextType>;
  trackingData?: Resolver<Maybe<ResolversTypes['TrackingData']>, ParentType, ContextType>;
  urlResolver?: Resolver<Maybe<ResolversTypes['EntityUrl']>, ParentType, ContextType, RequireFields<QueryurlResolverArgs, 'url'>>;
  wishlist?: Resolver<Maybe<ResolversTypes['WishlistOutput']>, ParentType, ContextType>;
  currentCartId?: Resolver<Maybe<ResolversTypes['CurrentCartId']>, ParentType, ContextType>;
  customerToken?: Resolver<Maybe<ResolversTypes['CustomerToken']>, ParentType, ContextType>;
}>;

export type MutationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Mutation'] = ResolversParentTypes['Mutation']> = ResolversObject<{
  addBundleProductsToCart?: Resolver<Maybe<ResolversTypes['AddBundleProductsToCartOutput']>, ParentType, ContextType, Partial<MutationaddBundleProductsToCartArgs>>;
  addConfigurableProductsToCart?: Resolver<Maybe<ResolversTypes['AddConfigurableProductsToCartOutput']>, ParentType, ContextType, Partial<MutationaddConfigurableProductsToCartArgs>>;
  addDownloadableProductsToCart?: Resolver<Maybe<ResolversTypes['AddDownloadableProductsToCartOutput']>, ParentType, ContextType, Partial<MutationaddDownloadableProductsToCartArgs>>;
  addProductsToCart?: Resolver<Maybe<ResolversTypes['AddProductsToCartOutput']>, ParentType, ContextType, RequireFields<MutationaddProductsToCartArgs, 'cartId' | 'cartItems'>>;
  addProductsToCompareList?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType, Partial<MutationaddProductsToCompareListArgs>>;
  addProductsToWishlist?: Resolver<Maybe<ResolversTypes['AddProductsToWishlistOutput']>, ParentType, ContextType, RequireFields<MutationaddProductsToWishlistArgs, 'wishlistId' | 'wishlistItems'>>;
  addSimpleProductsToCart?: Resolver<Maybe<ResolversTypes['AddSimpleProductsToCartOutput']>, ParentType, ContextType, Partial<MutationaddSimpleProductsToCartArgs>>;
  addVirtualProductsToCart?: Resolver<Maybe<ResolversTypes['AddVirtualProductsToCartOutput']>, ParentType, ContextType, Partial<MutationaddVirtualProductsToCartArgs>>;
  addWishlistItemsToCart?: Resolver<Maybe<ResolversTypes['AddWishlistItemsToCartOutput']>, ParentType, ContextType, RequireFields<MutationaddWishlistItemsToCartArgs, 'wishlistId'>>;
  applyCouponToCart?: Resolver<Maybe<ResolversTypes['ApplyCouponToCartOutput']>, ParentType, ContextType, Partial<MutationapplyCouponToCartArgs>>;
  assignCompareListToCustomer?: Resolver<Maybe<ResolversTypes['AssignCompareListToCustomerOutput']>, ParentType, ContextType, RequireFields<MutationassignCompareListToCustomerArgs, 'uid'>>;
  changeCustomerPassword?: Resolver<Maybe<ResolversTypes['Customer']>, ParentType, ContextType, RequireFields<MutationchangeCustomerPasswordArgs, 'currentPassword' | 'newPassword'>>;
  createBraintreeClientToken?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createCompareList?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType, Partial<MutationcreateCompareListArgs>>;
  createCustomer?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationcreateCustomerArgs, 'input'>>;
  createCustomerAddress?: Resolver<Maybe<ResolversTypes['CustomerAddress']>, ParentType, ContextType, RequireFields<MutationcreateCustomerAddressArgs, 'input'>>;
  createCustomerV2?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationcreateCustomerV2Args, 'input'>>;
  createEmptyCart?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType, Partial<MutationcreateEmptyCartArgs>>;
  createKlarnaPaymentsSession?: Resolver<Maybe<ResolversTypes['createKlarnaPaymentsSessionOutput']>, ParentType, ContextType, Partial<MutationcreateKlarnaPaymentsSessionArgs>>;
  createMollieTransaction?: Resolver<Maybe<ResolversTypes['MollieTransactionOutput']>, ParentType, ContextType, Partial<MutationcreateMollieTransactionArgs>>;
  createPayflowProToken?: Resolver<Maybe<ResolversTypes['CreatePayflowProTokenOutput']>, ParentType, ContextType, RequireFields<MutationcreatePayflowProTokenArgs, 'input'>>;
  createPaypalExpressToken?: Resolver<Maybe<ResolversTypes['PaypalExpressTokenOutput']>, ParentType, ContextType, RequireFields<MutationcreatePaypalExpressTokenArgs, 'input'>>;
  createProductReview?: Resolver<ResolversTypes['CreateProductReviewOutput'], ParentType, ContextType, RequireFields<MutationcreateProductReviewArgs, 'input'>>;
  deleteCompareList?: Resolver<Maybe<ResolversTypes['DeleteCompareListOutput']>, ParentType, ContextType, RequireFields<MutationdeleteCompareListArgs, 'uid'>>;
  deleteCustomerAddress?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationdeleteCustomerAddressArgs, 'id'>>;
  deletePaymentToken?: Resolver<Maybe<ResolversTypes['DeletePaymentTokenOutput']>, ParentType, ContextType, RequireFields<MutationdeletePaymentTokenArgs, 'public_hash'>>;
  generateCustomerToken?: Resolver<Maybe<ResolversTypes['CustomerToken']>, ParentType, ContextType, RequireFields<MutationgenerateCustomerTokenArgs, 'email' | 'password'>>;
  generateCustomerTokenAsAdmin?: Resolver<Maybe<ResolversTypes['GenerateCustomerTokenAsAdminOutput']>, ParentType, ContextType, RequireFields<MutationgenerateCustomerTokenAsAdminArgs, 'input'>>;
  handlePayflowProResponse?: Resolver<Maybe<ResolversTypes['PayflowProResponseOutput']>, ParentType, ContextType, RequireFields<MutationhandlePayflowProResponseArgs, 'input'>>;
  mergeCarts?: Resolver<ResolversTypes['Cart'], ParentType, ContextType, RequireFields<MutationmergeCartsArgs, 'source_cart_id'>>;
  mollieProcessTransaction?: Resolver<Maybe<ResolversTypes['MollieProcessTransactionOutput']>, ParentType, ContextType, Partial<MutationmollieProcessTransactionArgs>>;
  mollieRestoreCart?: Resolver<Maybe<ResolversTypes['MollieResetCartOutput']>, ParentType, ContextType, Partial<MutationmollieRestoreCartArgs>>;
  placeOrder?: Resolver<Maybe<ResolversTypes['PlaceOrderOutput']>, ParentType, ContextType, Partial<MutationplaceOrderArgs>>;
  removeCouponFromCart?: Resolver<Maybe<ResolversTypes['RemoveCouponFromCartOutput']>, ParentType, ContextType, Partial<MutationremoveCouponFromCartArgs>>;
  removeItemFromCart?: Resolver<Maybe<ResolversTypes['RemoveItemFromCartOutput']>, ParentType, ContextType, Partial<MutationremoveItemFromCartArgs>>;
  removeProductsFromCompareList?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType, Partial<MutationremoveProductsFromCompareListArgs>>;
  removeProductsFromWishlist?: Resolver<Maybe<ResolversTypes['RemoveProductsFromWishlistOutput']>, ParentType, ContextType, RequireFields<MutationremoveProductsFromWishlistArgs, 'wishlistId' | 'wishlistItemsIds'>>;
  reorderItems?: Resolver<Maybe<ResolversTypes['ReorderItemsOutput']>, ParentType, ContextType, RequireFields<MutationreorderItemsArgs, 'orderNumber'>>;
  requestPasswordResetEmail?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationrequestPasswordResetEmailArgs, 'email'>>;
  resetPassword?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationresetPasswordArgs, 'email' | 'resetPasswordToken' | 'newPassword'>>;
  revokeCustomerToken?: Resolver<Maybe<ResolversTypes['RevokeCustomerTokenOutput']>, ParentType, ContextType>;
  sendEmailToFriend?: Resolver<Maybe<ResolversTypes['SendEmailToFriendOutput']>, ParentType, ContextType, Partial<MutationsendEmailToFriendArgs>>;
  setBillingAddressOnCart?: Resolver<Maybe<ResolversTypes['SetBillingAddressOnCartOutput']>, ParentType, ContextType, Partial<MutationsetBillingAddressOnCartArgs>>;
  setGuestEmailOnCart?: Resolver<Maybe<ResolversTypes['SetGuestEmailOnCartOutput']>, ParentType, ContextType, Partial<MutationsetGuestEmailOnCartArgs>>;
  setPaymentMethodAndPlaceOrder?: Resolver<Maybe<ResolversTypes['PlaceOrderOutput']>, ParentType, ContextType, Partial<MutationsetPaymentMethodAndPlaceOrderArgs>>;
  setPaymentMethodOnCart?: Resolver<Maybe<ResolversTypes['SetPaymentMethodOnCartOutput']>, ParentType, ContextType, Partial<MutationsetPaymentMethodOnCartArgs>>;
  setShippingAddressesOnCart?: Resolver<Maybe<ResolversTypes['SetShippingAddressesOnCartOutput']>, ParentType, ContextType, Partial<MutationsetShippingAddressesOnCartArgs>>;
  setShippingMethodsOnCart?: Resolver<Maybe<ResolversTypes['SetShippingMethodsOnCartOutput']>, ParentType, ContextType, Partial<MutationsetShippingMethodsOnCartArgs>>;
  subscribeEmailToNewsletter?: Resolver<Maybe<ResolversTypes['SubscribeEmailToNewsletterOutput']>, ParentType, ContextType, RequireFields<MutationsubscribeEmailToNewsletterArgs, 'email'>>;
  updateCartItems?: Resolver<Maybe<ResolversTypes['UpdateCartItemsOutput']>, ParentType, ContextType, Partial<MutationupdateCartItemsArgs>>;
  updateChatProfile?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationupdateChatProfileArgs, 'profileId'>>;
  updateCustomer?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationupdateCustomerArgs, 'input'>>;
  updateCustomerAddress?: Resolver<Maybe<ResolversTypes['CustomerAddress']>, ParentType, ContextType, RequireFields<MutationupdateCustomerAddressArgs, 'id'>>;
  updateCustomerEmail?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationupdateCustomerEmailArgs, 'email' | 'password'>>;
  updateCustomerV2?: Resolver<Maybe<ResolversTypes['CustomerOutput']>, ParentType, ContextType, RequireFields<MutationupdateCustomerV2Args, 'input'>>;
  updateProductsInWishlist?: Resolver<Maybe<ResolversTypes['UpdateProductsInWishlistOutput']>, ParentType, ContextType, RequireFields<MutationupdateProductsInWishlistArgs, 'wishlistId' | 'wishlistItems'>>;
  updateQuoteEmail?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType, RequireFields<MutationupdateQuoteEmailArgs, 'email' | 'cartId'>>;
}>;

export type AggregateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Aggregate'] = ResolversParentTypes['Aggregate']> = ResolversObject<{
  count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AssetResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Asset'] = ResolversParentTypes['Asset']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<AssetlocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['Asset']>, ParentType, ContextType, RequireFields<AssetdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<AssetcreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<AssetupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<AssetpublishedAtArgs, 'variation'>>;
  handle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  fileName?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  height?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  width?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  mimeType?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  alt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AssetcreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AssetupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<AssetpublishedByArgs>>;
  assetRowHeroBanner?: Resolver<Array<ResolversTypes['RowHeroBanner']>, ParentType, ContextType, Partial<AssetassetRowHeroBannerArgs>>;
  rowSpecialBannerAsset?: Resolver<Array<ResolversTypes['RowSpecialBanner']>, ParentType, ContextType, Partial<AssetrowSpecialBannerAssetArgs>>;
  assetPage?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<AssetassetPageArgs>>;
  assetPageLink?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, Partial<AssetassetPageLinkArgs>>;
  assetRowProduct?: Resolver<Array<ResolversTypes['RowProduct']>, ParentType, ContextType, Partial<AssetassetRowProductArgs>>;
  imageBanner?: Resolver<Array<ResolversTypes['Banner']>, ParentType, ContextType, Partial<AssetimageBannerArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<AssetscheduledInArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<AssethistoryArgs, 'limit' | 'skip'>>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType, Partial<AsseturlArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AssetConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AssetConnection'] = ResolversParentTypes['AssetConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['AssetEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AssetEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AssetEdge'] = ResolversParentTypes['AssetEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['Asset'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BannerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Banner'] = ResolversParentTypes['Banner']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['Banner']>, ParentType, ContextType, RequireFields<BannerlocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['Banner']>, ParentType, ContextType, RequireFields<BannerdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<BannercreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<BannerupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<BannerpublishedAtArgs, 'variation'>>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  copy?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<BannercreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<BannerupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<BannerpublishedByArgs>>;
  image?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, Partial<BannerimageArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<BannerscheduledInArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<BannerpagesArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<BannerhistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BannerConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BannerConnection'] = ResolversParentTypes['BannerConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['BannerEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BannerEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BannerEdge'] = ResolversParentTypes['BannerEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['Banner'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BatchPayloadResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BatchPayload'] = ResolversParentTypes['BatchPayload']> = ResolversObject<{
  count?: Resolver<ResolversTypes['Long'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ColorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Color'] = ResolversParentTypes['Color']> = ResolversObject<{
  hex?: Resolver<ResolversTypes['Hex'], ParentType, ContextType>;
  rgba?: Resolver<ResolversTypes['RGBA'], ParentType, ContextType>;
  css?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface DateScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Date'], any> {
  name: 'Date';
}

export interface DateTimeScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['DateTime'], any> {
  name: 'DateTime';
}

export type DocumentVersionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DocumentVersion'] = ResolversParentTypes['DocumentVersion']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  revision?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  data?: Resolver<Maybe<ResolversTypes['Json']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FooterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Footer'] = ResolversParentTypes['Footer']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['Footer']>, ParentType, ContextType, RequireFields<FooterdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  copyright?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FootercreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FooterupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<FooterpublishedByArgs>>;
  socialLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, Partial<FootersocialLinksArgs>>;
  legalLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, Partial<FooterlegalLinksArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<FooterscheduledInArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<FooterhistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FooterConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FooterConnection'] = ResolversParentTypes['FooterConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['FooterEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FooterEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FooterEdge'] = ResolversParentTypes['FooterEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['Footer'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface HexScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Hex'], any> {
  name: 'Hex';
}

export interface JsonScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Json'], any> {
  name: 'Json';
}

export type LocationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Location'] = ResolversParentTypes['Location']> = ResolversObject<{
  latitude?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  longitude?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  distance?: Resolver<ResolversTypes['Float'], ParentType, ContextType, RequireFields<LocationdistanceArgs, 'from'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface LongScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['Long'], any> {
  name: 'Long';
}

export type NodeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Node'] = ResolversParentTypes['Node']> = ResolversObject<{
  __resolveType: TypeResolveFn<'Asset' | 'Banner' | 'Footer' | 'Page' | 'PageLink' | 'RowBlogContent' | 'RowButtonLinkList' | 'RowColumnOne' | 'RowColumnThree' | 'RowColumnTwo' | 'RowContentLinks' | 'RowHeroBanner' | 'RowProduct' | 'RowQuote' | 'RowServiceOptions' | 'RowSpecialBanner' | 'ScheduledOperation' | 'ScheduledRelease' | 'User' | 'Usps', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
}>;

export type PageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Page'] = ResolversParentTypes['Page']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<PagelocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, RequireFields<PagedocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<PagecreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<PageupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<PagepublishedAtArgs, 'variation'>>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  metaTitle?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  metaDescription?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  date?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  author?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PagecreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PagepublishedByArgs>>;
  asset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, Partial<PageassetArgs>>;
  relatedPages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<PagerelatedPagesArgs>>;
  rowButtonLinkLists?: Resolver<Array<ResolversTypes['RowButtonLinkList']>, ParentType, ContextType, Partial<PagerowButtonLinkListsArgs>>;
  childPages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<PagechildPagesArgs>>;
  metaRobots?: Resolver<ResolversTypes['MetaRobots'], ParentType, ContextType>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<PagescheduledInArgs>>;
  content?: Resolver<Array<ResolversTypes['PageContent']>, ParentType, ContextType, Partial<PagecontentArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<PagehistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PageConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageConnection'] = ResolversParentTypes['PageConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['PageEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PageContentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageContent'] = ResolversParentTypes['PageContent']> = ResolversObject<{
  __resolveType: TypeResolveFn<'Banner' | 'RowBlogContent' | 'RowButtonLinkList' | 'RowColumnOne' | 'RowColumnThree' | 'RowColumnTwo' | 'RowContentLinks' | 'RowHeroBanner' | 'RowProduct' | 'RowQuote' | 'RowServiceOptions' | 'RowSpecialBanner', ParentType, ContextType>;
}>;

export type PageEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageEdge'] = ResolversParentTypes['PageEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['Page'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PageInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageInfo'] = ResolversParentTypes['PageInfo']> = ResolversObject<{
  hasNextPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  hasPreviousPage?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  startCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  endCursor?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pageSize?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PageLinkResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageLink'] = ResolversParentTypes['PageLink']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<PageLinklocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, RequireFields<PageLinkdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<PageLinkcreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<PageLinkupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<PageLinkpublishedAtArgs, 'variation'>>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
  url?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageLinkcreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageLinkupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<PageLinkpublishedByArgs>>;
  rowHeroBanners?: Resolver<Array<ResolversTypes['RowHeroBanner']>, ParentType, ContextType, Partial<PageLinkrowHeroBannersArgs>>;
  rowSpecialBanners?: Resolver<Array<ResolversTypes['RowSpecialBanner']>, ParentType, ContextType, Partial<PageLinkrowSpecialBannersArgs>>;
  footerSocialLinks?: Resolver<Array<ResolversTypes['Footer']>, ParentType, ContextType, Partial<PageLinkfooterSocialLinksArgs>>;
  footerLegalLinks?: Resolver<Array<ResolversTypes['Footer']>, ParentType, ContextType, Partial<PageLinkfooterLegalLinksArgs>>;
  rowServiceOptionsMultiple?: Resolver<Array<ResolversTypes['RowServiceOptions']>, ParentType, ContextType, Partial<PageLinkrowServiceOptionsMultipleArgs>>;
  rowContentLinks?: Resolver<Maybe<ResolversTypes['RowContentLinks']>, ParentType, ContextType, Partial<PageLinkrowContentLinksArgs>>;
  asset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, Partial<PageLinkassetArgs>>;
  uspsMultiple?: Resolver<Array<ResolversTypes['Usps']>, ParentType, ContextType, Partial<PageLinkuspsMultipleArgs>>;
  rowProductMultiple?: Resolver<Array<ResolversTypes['RowProduct']>, ParentType, ContextType, Partial<PageLinkrowProductMultipleArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<PageLinkscheduledInArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<PageLinkhistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PageLinkConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageLinkConnection'] = ResolversParentTypes['PageLinkConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['PageLinkEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PageLinkEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PageLinkEdge'] = ResolversParentTypes['PageLinkEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['PageLink'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RGBAResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RGBA'] = ResolversParentTypes['RGBA']> = ResolversObject<{
  r?: Resolver<ResolversTypes['RGBAHue'], ParentType, ContextType>;
  g?: Resolver<ResolversTypes['RGBAHue'], ParentType, ContextType>;
  b?: Resolver<ResolversTypes['RGBAHue'], ParentType, ContextType>;
  a?: Resolver<ResolversTypes['RGBATransparency'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface RGBAHueScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['RGBAHue'], any> {
  name: 'RGBAHue';
}

export interface RGBATransparencyScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['RGBATransparency'], any> {
  name: 'RGBATransparency';
}

export type RichTextResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RichText'] = ResolversParentTypes['RichText']> = ResolversObject<{
  raw?: Resolver<ResolversTypes['RichTextAST'], ParentType, ContextType>;
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  markdown?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export interface RichTextASTScalarConfig extends GraphQLScalarTypeConfig<ResolversTypes['RichTextAST'], any> {
  name: 'RichTextAST';
}

export type RowBlogContentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowBlogContent'] = ResolversParentTypes['RowBlogContent']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['RowBlogContent']>, ParentType, ContextType, RequireFields<RowBlogContentlocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['RowBlogContent']>, ParentType, ContextType, RequireFields<RowBlogContentdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowBlogContentcreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowBlogContentupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowBlogContentpublishedAtArgs, 'variation'>>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  content?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowBlogContentcreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowBlogContentupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowBlogContentpublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<RowBlogContentscheduledInArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<RowBlogContentpagesArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowBlogContenthistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowBlogContentConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowBlogContentConnection'] = ResolversParentTypes['RowBlogContentConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['RowBlogContentEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowBlogContentEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowBlogContentEdge'] = ResolversParentTypes['RowBlogContentEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['RowBlogContent'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowButtonLinkListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowButtonLinkList'] = ResolversParentTypes['RowButtonLinkList']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['RowButtonLinkList']>, ParentType, ContextType, RequireFields<RowButtonLinkListlocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['RowButtonLinkList']>, ParentType, ContextType, RequireFields<RowButtonLinkListdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowButtonLinkListcreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowButtonLinkListupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowButtonLinkListpublishedAtArgs, 'variation'>>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowButtonLinkListcreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowButtonLinkListupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowButtonLinkListpublishedByArgs>>;
  links?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<RowButtonLinkListlinksArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<RowButtonLinkListscheduledInArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<RowButtonLinkListpagesArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowButtonLinkListhistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowButtonLinkListConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowButtonLinkListConnection'] = ResolversParentTypes['RowButtonLinkListConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['RowButtonLinkListEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowButtonLinkListEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowButtonLinkListEdge'] = ResolversParentTypes['RowButtonLinkListEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['RowButtonLinkList'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowColumnOneResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnOne'] = ResolversParentTypes['RowColumnOne']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['RowColumnOne']>, ParentType, ContextType, RequireFields<RowColumnOnelocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['RowColumnOne']>, ParentType, ContextType, RequireFields<RowColumnOnedocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowColumnOnecreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowColumnOneupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowColumnOnepublishedAtArgs, 'variation'>>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  colOne?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowColumnOnecreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowColumnOneupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowColumnOnepublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<RowColumnOnescheduledInArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<RowColumnOnepagesArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowColumnOnehistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowColumnOneConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnOneConnection'] = ResolversParentTypes['RowColumnOneConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['RowColumnOneEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowColumnOneEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnOneEdge'] = ResolversParentTypes['RowColumnOneEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['RowColumnOne'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowColumnThreeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnThree'] = ResolversParentTypes['RowColumnThree']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['RowColumnThree']>, ParentType, ContextType, RequireFields<RowColumnThreelocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['RowColumnThree']>, ParentType, ContextType, RequireFields<RowColumnThreedocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowColumnThreecreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowColumnThreeupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowColumnThreepublishedAtArgs, 'variation'>>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  colOne?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  colTwo?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  colThree?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowColumnThreecreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowColumnThreeupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowColumnThreepublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<RowColumnThreescheduledInArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<RowColumnThreepagesArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowColumnThreehistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowColumnThreeConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnThreeConnection'] = ResolversParentTypes['RowColumnThreeConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['RowColumnThreeEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowColumnThreeEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnThreeEdge'] = ResolversParentTypes['RowColumnThreeEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['RowColumnThree'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowColumnTwoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnTwo'] = ResolversParentTypes['RowColumnTwo']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['RowColumnTwo']>, ParentType, ContextType, RequireFields<RowColumnTwolocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['RowColumnTwo']>, ParentType, ContextType, RequireFields<RowColumnTwodocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowColumnTwocreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowColumnTwoupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowColumnTwopublishedAtArgs, 'variation'>>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  colOne?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  colTwo?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowColumnTwocreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowColumnTwoupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowColumnTwopublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<RowColumnTwoscheduledInArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<RowColumnTwopagesArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowColumnTwohistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowColumnTwoConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnTwoConnection'] = ResolversParentTypes['RowColumnTwoConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['RowColumnTwoEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowColumnTwoEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowColumnTwoEdge'] = ResolversParentTypes['RowColumnTwoEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['RowColumnTwo'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowContentLinksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowContentLinks'] = ResolversParentTypes['RowContentLinks']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['RowContentLinks']>, ParentType, ContextType, RequireFields<RowContentLinkslocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['RowContentLinks']>, ParentType, ContextType, RequireFields<RowContentLinksdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowContentLinkscreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowContentLinksupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowContentLinkspublishedAtArgs, 'variation'>>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowContentLinkscreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowContentLinksupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowContentLinkspublishedByArgs>>;
  contentLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, Partial<RowContentLinkscontentLinksArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<RowContentLinksscheduledInArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<RowContentLinkspagesArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowContentLinkshistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowContentLinksConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowContentLinksConnection'] = ResolversParentTypes['RowContentLinksConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['RowContentLinksEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowContentLinksEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowContentLinksEdge'] = ResolversParentTypes['RowContentLinksEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['RowContentLinks'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowHeroBannerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowHeroBanner'] = ResolversParentTypes['RowHeroBanner']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['RowHeroBanner']>, ParentType, ContextType, RequireFields<RowHeroBannerlocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['RowHeroBanner']>, ParentType, ContextType, RequireFields<RowHeroBannerdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowHeroBannercreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowHeroBannerupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowHeroBannerpublishedAtArgs, 'variation'>>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  copy?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowHeroBannercreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowHeroBannerupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowHeroBannerpublishedByArgs>>;
  asset?: Resolver<ResolversTypes['Asset'], ParentType, ContextType, Partial<RowHeroBannerassetArgs>>;
  pageLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, Partial<RowHeroBannerpageLinksArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<RowHeroBannerscheduledInArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<RowHeroBannerpagesArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowHeroBannerhistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowHeroBannerConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowHeroBannerConnection'] = ResolversParentTypes['RowHeroBannerConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['RowHeroBannerEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowHeroBannerEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowHeroBannerEdge'] = ResolversParentTypes['RowHeroBannerEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['RowHeroBanner'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProduct'] = ResolversParentTypes['RowProduct']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['RowProduct']>, ParentType, ContextType, RequireFields<RowProductlocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['RowProduct']>, ParentType, ContextType, RequireFields<RowProductdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductcreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowProductupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowProductpublishedAtArgs, 'variation'>>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  productCopy?: Resolver<Maybe<ResolversTypes['RichText']>, ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowProductcreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowProductupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowProductpublishedByArgs>>;
  pageLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, Partial<RowProductpageLinksArgs>>;
  asset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, Partial<RowProductassetArgs>>;
  variant?: Resolver<Maybe<ResolversTypes['RowProductVariants']>, ParentType, ContextType>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<RowProductscheduledInArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<RowProductpagesArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowProducthistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowProductConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductConnection'] = ResolversParentTypes['RowProductConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['RowProductEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowProductEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowProductEdge'] = ResolversParentTypes['RowProductEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['RowProduct'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowQuoteResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowQuote'] = ResolversParentTypes['RowQuote']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['RowQuote']>, ParentType, ContextType, RequireFields<RowQuotelocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['RowQuote']>, ParentType, ContextType, RequireFields<RowQuotedocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowQuotecreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowQuoteupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowQuotepublishedAtArgs, 'variation'>>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quote?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowQuotecreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowQuoteupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowQuotepublishedByArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<RowQuotescheduledInArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<RowQuotepagesArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowQuotehistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowQuoteConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowQuoteConnection'] = ResolversParentTypes['RowQuoteConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['RowQuoteEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowQuoteEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowQuoteEdge'] = ResolversParentTypes['RowQuoteEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['RowQuote'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowServiceOptionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowServiceOptions'] = ResolversParentTypes['RowServiceOptions']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['RowServiceOptions']>, ParentType, ContextType, RequireFields<RowServiceOptionslocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['RowServiceOptions']>, ParentType, ContextType, RequireFields<RowServiceOptionsdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowServiceOptionscreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowServiceOptionsupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowServiceOptionspublishedAtArgs, 'variation'>>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowServiceOptionscreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowServiceOptionsupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowServiceOptionspublishedByArgs>>;
  serviceOptions?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, Partial<RowServiceOptionsserviceOptionsArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<RowServiceOptionsscheduledInArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<RowServiceOptionspagesArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowServiceOptionshistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowServiceOptionsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowServiceOptionsConnection'] = ResolversParentTypes['RowServiceOptionsConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['RowServiceOptionsEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowServiceOptionsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowServiceOptionsEdge'] = ResolversParentTypes['RowServiceOptionsEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['RowServiceOptions'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowSpecialBannerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowSpecialBanner'] = ResolversParentTypes['RowSpecialBanner']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  locale?: Resolver<ResolversTypes['Locale'], ParentType, ContextType>;
  localizations?: Resolver<Array<ResolversTypes['RowSpecialBanner']>, ParentType, ContextType, RequireFields<RowSpecialBannerlocalizationsArgs, 'locales' | 'includeCurrent'>>;
  documentInStages?: Resolver<Array<ResolversTypes['RowSpecialBanner']>, ParentType, ContextType, RequireFields<RowSpecialBannerdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowSpecialBannercreatedAtArgs, 'variation'>>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType, RequireFields<RowSpecialBannerupdatedAtArgs, 'variation'>>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType, RequireFields<RowSpecialBannerpublishedAtArgs, 'variation'>>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  topic?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  copy?: Resolver<ResolversTypes['RichText'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowSpecialBannercreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowSpecialBannerupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<RowSpecialBannerpublishedByArgs>>;
  asset?: Resolver<Maybe<ResolversTypes['Asset']>, ParentType, ContextType, Partial<RowSpecialBannerassetArgs>>;
  pageLinks?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, Partial<RowSpecialBannerpageLinksArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<RowSpecialBannerscheduledInArgs>>;
  pages?: Resolver<Array<ResolversTypes['Page']>, ParentType, ContextType, Partial<RowSpecialBannerpagesArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<RowSpecialBannerhistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowSpecialBannerConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowSpecialBannerConnection'] = ResolversParentTypes['RowSpecialBannerConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['RowSpecialBannerEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RowSpecialBannerEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RowSpecialBannerEdge'] = ResolversParentTypes['RowSpecialBannerEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['RowSpecialBanner'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ScheduledOperationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ScheduledOperation'] = ResolversParentTypes['ScheduledOperation']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, RequireFields<ScheduledOperationdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  errorMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rawPayload?: Resolver<ResolversTypes['Json'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledOperationcreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledOperationupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledOperationpublishedByArgs>>;
  release?: Resolver<Maybe<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, Partial<ScheduledOperationreleaseArgs>>;
  status?: Resolver<ResolversTypes['ScheduledOperationStatus'], ParentType, ContextType>;
  affectedDocuments?: Resolver<Array<ResolversTypes['ScheduledOperationAffectedDocument']>, ParentType, ContextType, Partial<ScheduledOperationaffectedDocumentsArgs>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ScheduledOperationAffectedDocumentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ScheduledOperationAffectedDocument'] = ResolversParentTypes['ScheduledOperationAffectedDocument']> = ResolversObject<{
  __resolveType: TypeResolveFn<'Asset' | 'Banner' | 'Footer' | 'Page' | 'PageLink' | 'RowBlogContent' | 'RowButtonLinkList' | 'RowColumnOne' | 'RowColumnThree' | 'RowColumnTwo' | 'RowContentLinks' | 'RowHeroBanner' | 'RowProduct' | 'RowQuote' | 'RowServiceOptions' | 'RowSpecialBanner' | 'Usps', ParentType, ContextType>;
}>;

export type ScheduledOperationConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ScheduledOperationConnection'] = ResolversParentTypes['ScheduledOperationConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ScheduledOperationEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ScheduledOperationEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ScheduledOperationEdge'] = ResolversParentTypes['ScheduledOperationEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['ScheduledOperation'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ScheduledReleaseResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ScheduledRelease'] = ResolversParentTypes['ScheduledRelease']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['ScheduledRelease']>, ParentType, ContextType, RequireFields<ScheduledReleasedocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  errorMessage?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  isImplicit?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  releaseAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledReleasecreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledReleaseupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<ScheduledReleasepublishedByArgs>>;
  operations?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<ScheduledReleaseoperationsArgs>>;
  status?: Resolver<ResolversTypes['ScheduledReleaseStatus'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ScheduledReleaseConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ScheduledReleaseConnection'] = ResolversParentTypes['ScheduledReleaseConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['ScheduledReleaseEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ScheduledReleaseEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ScheduledReleaseEdge'] = ResolversParentTypes['ScheduledReleaseEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['ScheduledRelease'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type UserResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['User'] = ResolversParentTypes['User']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['User']>, ParentType, ContextType, RequireFields<UserdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  picture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  isActive?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  kind?: Resolver<ResolversTypes['UserKind'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type UserConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UserConnection'] = ResolversParentTypes['UserConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['UserEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type UserEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UserEdge'] = ResolversParentTypes['UserEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['User'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type UspsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Usps'] = ResolversParentTypes['Usps']> = ResolversObject<{
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  documentInStages?: Resolver<Array<ResolversTypes['Usps']>, ParentType, ContextType, RequireFields<UspsdocumentInStagesArgs, 'stages' | 'includeCurrent' | 'inheritLocale'>>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  updatedAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  publishedAt?: Resolver<Maybe<ResolversTypes['DateTime']>, ParentType, ContextType>;
  identity?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  createdBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<UspscreatedByArgs>>;
  updatedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<UspsupdatedByArgs>>;
  publishedBy?: Resolver<Maybe<ResolversTypes['User']>, ParentType, ContextType, Partial<UspspublishedByArgs>>;
  uspsMultiple?: Resolver<Array<ResolversTypes['PageLink']>, ParentType, ContextType, Partial<UspsuspsMultipleArgs>>;
  scheduledIn?: Resolver<Array<ResolversTypes['ScheduledOperation']>, ParentType, ContextType, Partial<UspsscheduledInArgs>>;
  history?: Resolver<Array<ResolversTypes['Version']>, ParentType, ContextType, RequireFields<UspshistoryArgs, 'limit' | 'skip'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type UspsConnectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UspsConnection'] = ResolversParentTypes['UspsConnection']> = ResolversObject<{
  pageInfo?: Resolver<ResolversTypes['PageInfo'], ParentType, ContextType>;
  edges?: Resolver<Array<ResolversTypes['UspsEdge']>, ParentType, ContextType>;
  aggregate?: Resolver<ResolversTypes['Aggregate'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type UspsEdgeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UspsEdge'] = ResolversParentTypes['UspsEdge']> = ResolversObject<{
  node?: Resolver<ResolversTypes['Usps'], ParentType, ContextType>;
  cursor?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type VersionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Version'] = ResolversParentTypes['Version']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  stage?: Resolver<ResolversTypes['Stage'], ParentType, ContextType>;
  revision?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  createdAt?: Resolver<ResolversTypes['DateTime'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type StoreConfigResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['StoreConfig'] = ResolversParentTypes['StoreConfig']> = ResolversObject<{
  absolute_footer?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  allow_guests_to_write_product_reviews?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  allow_items?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  allow_order?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  autocomplete_on_storefront?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  base_currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  base_link_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  base_media_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  base_static_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  base_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  braintree_cc_vault_active?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  catalog_default_sort_by?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  category_fixed_product_tax_display_setting?: Resolver<Maybe<ResolversTypes['FixedProductTaxDisplaySettings']>, ParentType, ContextType>;
  category_url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cms_home_page?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cms_no_cookies?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cms_no_route?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  configurable_thumbnail_source?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  copyright?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_display_currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  demonotice?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  front?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  grid_per_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  grid_per_page_values?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  head_includes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  head_shortcut_icon?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  header_logo_src?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_default_store?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  is_default_store_group?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  list_mode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  list_per_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  list_per_page_values?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logo_alt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  logo_height?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  logo_width?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  magento_wishlist_general_is_enabled?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  minimum_password_length?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  no_route?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payment_payflowpro_cc_vault_active?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_fixed_product_tax_display_setting?: Resolver<Maybe<ResolversTypes['FixedProductTaxDisplaySettings']>, ParentType, ContextType>;
  product_reviews_enabled?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required_character_classes_number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  root_category_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  root_category_uid?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  sales_fixed_product_tax_display_setting?: Resolver<Maybe<ResolversTypes['FixedProductTaxDisplaySettings']>, ParentType, ContextType>;
  secure_base_link_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  secure_base_media_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  secure_base_static_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  secure_base_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  send_friend?: Resolver<Maybe<ResolversTypes['SendFriendConfiguration']>, ParentType, ContextType>;
  show_cms_breadcrumbs?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  store_code?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  store_group_code?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  store_group_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  timezone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title_prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title_separator?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  use_store_in_url?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  website_code?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  website_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  website_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  weight_unit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  welcome?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SendFriendConfigurationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SendFriendConfiguration'] = ResolversParentTypes['SendFriendConfiguration']> = ResolversObject<{
  enabled_for_customers?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  enabled_for_guests?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CartResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Cart'] = ResolversParentTypes['Cart']> = ResolversObject<{
  applied_coupon?: Resolver<Maybe<ResolversTypes['AppliedCoupon']>, ParentType, ContextType>;
  applied_coupons?: Resolver<Maybe<Array<Maybe<ResolversTypes['AppliedCoupon']>>>, ParentType, ContextType>;
  available_payment_methods?: Resolver<Maybe<Array<Maybe<ResolversTypes['AvailablePaymentMethod']>>>, ParentType, ContextType>;
  billing_address?: Resolver<Maybe<ResolversTypes['BillingCartAddress']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  is_virtual?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemInterface']>>>, ParentType, ContextType>;
  mollie_available_issuers?: Resolver<Maybe<Array<Maybe<ResolversTypes['MollieIssuer']>>>, ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartPrices']>, ParentType, ContextType>;
  selected_payment_method?: Resolver<Maybe<ResolversTypes['SelectedPaymentMethod']>, ParentType, ContextType>;
  shipping_addresses?: Resolver<Array<Maybe<ResolversTypes['ShippingCartAddress']>>, ParentType, ContextType>;
  total_quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AppliedCouponResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AppliedCoupon'] = ResolversParentTypes['AppliedCoupon']> = ResolversObject<{
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AvailablePaymentMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AvailablePaymentMethod'] = ResolversParentTypes['AvailablePaymentMethod']> = ResolversObject<{
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  mollie_available_issuers?: Resolver<Maybe<Array<Maybe<ResolversTypes['MollieIssuer']>>>, ParentType, ContextType>;
  mollie_meta?: Resolver<ResolversTypes['MolliePaymentMethodMeta'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MollieIssuerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MollieIssuer'] = ResolversParentTypes['MollieIssuer']> = ResolversObject<{
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  svg?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MolliePaymentMethodMetaResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MolliePaymentMethodMeta'] = ResolversParentTypes['MolliePaymentMethodMeta']> = ResolversObject<{
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BillingCartAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BillingCartAddress'] = ResolversParentTypes['BillingCartAddress']> = ResolversObject<{
  city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<ResolversTypes['CartAddressCountry'], ParentType, ContextType>;
  customer_notes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['CartAddressRegion']>, ParentType, ContextType>;
  street?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  telephone?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CartAddressInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartAddressInterface'] = ResolversParentTypes['CartAddressInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BillingCartAddress' | 'ShippingCartAddress', ParentType, ContextType>;
  city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<ResolversTypes['CartAddressCountry'], ParentType, ContextType>;
  firstname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['CartAddressRegion']>, ParentType, ContextType>;
  street?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  telephone?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
}>;

export type CartAddressCountryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartAddressCountry'] = ResolversParentTypes['CartAddressCountry']> = ResolversObject<{
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CartAddressRegionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartAddressRegion'] = ResolversParentTypes['CartAddressRegion']> = ResolversObject<{
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GiftMessageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GiftMessage'] = ResolversParentTypes['GiftMessage']> = ResolversObject<{
  from?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  to?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CartItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartItemInterface'] = ResolversParentTypes['CartItemInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'SimpleCartItem' | 'VirtualCartItem' | 'DownloadableCartItem' | 'BundleCartItem' | 'ConfigurableCartItem', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
}>;

export type CartItemPricesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartItemPrices'] = ResolversParentTypes['CartItemPrices']> = ResolversObject<{
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  fixed_product_taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['FixedProductTax']>>>, ParentType, ContextType>;
  price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  row_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  row_total_including_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  total_item_discount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DiscountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Discount'] = ResolversParentTypes['Discount']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MoneyResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Money'] = ResolversParentTypes['Money']> = ResolversObject<{
  currency?: Resolver<Maybe<ResolversTypes['CurrencyEnum']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type FixedProductTaxResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['FixedProductTax'] = ResolversParentTypes['FixedProductTax']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductInterface'] = ResolversParentTypes['ProductInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'VirtualProduct' | 'SimpleProduct' | 'DownloadableProduct' | 'BundleProduct' | 'GroupedProduct' | 'ConfigurableProduct', ParentType, ContextType>;
  activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<ProductInterfacereviewsArgs, 'pageSize' | 'currentPage'>>;
  sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  th_test_attribute?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
}>;

export type CategoryInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CategoryInterface'] = ResolversParentTypes['CategoryInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'CategoryTree', ParentType, ContextType>;
  available_sort_by?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  breadcrumbs?: Resolver<Maybe<Array<Maybe<ResolversTypes['Breadcrumb']>>>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  children_count?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cms_block?: Resolver<Maybe<ResolversTypes['CmsBlock']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  custom_layout_update_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_sort_by?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  display_mode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filter_price_range?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  include_in_menu?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_anchor?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  landing_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  level?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  path_in_store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  products?: Resolver<Maybe<ResolversTypes['CategoryProducts']>, ParentType, ContextType, RequireFields<CategoryInterfaceproductsArgs, 'pageSize' | 'currentPage'>>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type BreadcrumbResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Breadcrumb'] = ResolversParentTypes['Breadcrumb']> = ResolversObject<{
  category_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  category_level?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  category_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  category_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  category_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  category_url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsBlockResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CmsBlock'] = ResolversParentTypes['CmsBlock']> = ResolversObject<{
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  identifier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CategoryProductsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CategoryProducts'] = ResolversParentTypes['CategoryProducts']> = ResolversObject<{
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SearchResultPageInfoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SearchResultPageInfo'] = ResolversParentTypes['SearchResultPageInfo']> = ResolversObject<{
  current_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  page_size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  total_pages?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ComplexTextValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ComplexTextValue'] = ResolversParentTypes['ComplexTextValue']> = ResolversObject<{
  html?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductImageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductImage'] = ResolversParentTypes['ProductImage']> = ResolversObject<{
  disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MediaGalleryInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MediaGalleryInterface'] = ResolversParentTypes['MediaGalleryInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'ProductImage' | 'ProductVideo', ParentType, ContextType>;
  disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type MediaGalleryEntryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MediaGalleryEntry'] = ResolversParentTypes['MediaGalleryEntry']> = ResolversObject<{
  content?: Resolver<Maybe<ResolversTypes['ProductMediaGalleryEntriesContent']>, ParentType, ContextType>;
  disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  media_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  types?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  video_content?: Resolver<Maybe<ResolversTypes['ProductMediaGalleryEntriesVideoContent']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductMediaGalleryEntriesContentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductMediaGalleryEntriesContent'] = ResolversParentTypes['ProductMediaGalleryEntriesContent']> = ResolversObject<{
  base64_encoded_data?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductMediaGalleryEntriesVideoContentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductMediaGalleryEntriesVideoContent'] = ResolversParentTypes['ProductMediaGalleryEntriesVideoContent']> = ResolversObject<{
  media_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_metadata?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_provider?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductPricesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductPrices'] = ResolversParentTypes['ProductPrices']> = ResolversObject<{
  maximalPrice?: Resolver<Maybe<ResolversTypes['Price']>, ParentType, ContextType>;
  minimalPrice?: Resolver<Maybe<ResolversTypes['Price']>, ParentType, ContextType>;
  regularPrice?: Resolver<Maybe<ResolversTypes['Price']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PriceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Price'] = ResolversParentTypes['Price']> = ResolversObject<{
  adjustments?: Resolver<Maybe<Array<Maybe<ResolversTypes['PriceAdjustment']>>>, ParentType, ContextType>;
  amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PriceAdjustmentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PriceAdjustment'] = ResolversParentTypes['PriceAdjustment']> = ResolversObject<{
  amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  code?: Resolver<Maybe<ResolversTypes['PriceAdjustmentCodesEnum']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['PriceAdjustmentDescriptionEnum']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PriceRangeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PriceRange'] = ResolversParentTypes['PriceRange']> = ResolversObject<{
  maximum_price?: Resolver<Maybe<ResolversTypes['ProductPrice']>, ParentType, ContextType>;
  minimum_price?: Resolver<ResolversTypes['ProductPrice'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductPriceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductPrice'] = ResolversParentTypes['ProductPrice']> = ResolversObject<{
  discount?: Resolver<Maybe<ResolversTypes['ProductDiscount']>, ParentType, ContextType>;
  final_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  fixed_product_taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['FixedProductTax']>>>, ParentType, ContextType>;
  regular_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductDiscountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductDiscount'] = ResolversParentTypes['ProductDiscount']> = ResolversObject<{
  amount_off?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  percent_off?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TierPriceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TierPrice'] = ResolversParentTypes['TierPrice']> = ResolversObject<{
  discount?: Resolver<Maybe<ResolversTypes['ProductDiscount']>, ParentType, ContextType>;
  final_price?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductLinksInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductLinksInterface'] = ResolversParentTypes['ProductLinksInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'ProductLinks', ParentType, ContextType>;
  link_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  linked_product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  linked_product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type ProductReviewsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductReviews'] = ResolversParentTypes['ProductReviews']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['ProductReview']>>, ParentType, ContextType>;
  page_info?: Resolver<ResolversTypes['SearchResultPageInfo'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductReviewResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductReview'] = ResolversParentTypes['ProductReview']> = ResolversObject<{
  average_rating?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  created_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  nickname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  ratings_breakdown?: Resolver<Array<Maybe<ResolversTypes['ProductReviewRating']>>, ParentType, ContextType>;
  summary?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductReviewRatingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductReviewRating'] = ResolversParentTypes['ProductReviewRating']> = ResolversObject<{
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductTierPricesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductTierPrices'] = ResolversParentTypes['ProductTierPrices']> = ResolversObject<{
  customer_group_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  percentage_value?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  website_id?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type UrlRewriteResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UrlRewrite'] = ResolversParentTypes['UrlRewrite']> = ResolversObject<{
  parameters?: Resolver<Maybe<Array<Maybe<ResolversTypes['HttpQueryParameter']>>>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type HttpQueryParameterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['HttpQueryParameter'] = ResolversParentTypes['HttpQueryParameter']> = ResolversObject<{
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WebsiteResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Website'] = ResolversParentTypes['Website']> = ResolversObject<{
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_group_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_default?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CartPricesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartPrices'] = ResolversParentTypes['CartPrices']> = ResolversObject<{
  applied_taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartTaxItem']>>>, ParentType, ContextType>;
  discount?: Resolver<Maybe<ResolversTypes['CartDiscount']>, ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  grand_total?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  subtotal_excluding_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  subtotal_including_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  subtotal_with_discount_excluding_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CartTaxItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartTaxItem'] = ResolversParentTypes['CartTaxItem']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CartDiscountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartDiscount'] = ResolversParentTypes['CartDiscount']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  label?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SelectedPaymentMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedPaymentMethod'] = ResolversParentTypes['SelectedPaymentMethod']> = ResolversObject<{
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  mollie_meta?: Resolver<ResolversTypes['MolliePaymentMethodMeta'], ParentType, ContextType>;
  purchase_order_number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShippingCartAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShippingCartAddress'] = ResolversParentTypes['ShippingCartAddress']> = ResolversObject<{
  available_shipping_methods?: Resolver<Maybe<Array<Maybe<ResolversTypes['AvailableShippingMethod']>>>, ParentType, ContextType>;
  cart_items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemQuantity']>>>, ParentType, ContextType>;
  cart_items_v2?: Resolver<Maybe<Array<Maybe<ResolversTypes['CartItemInterface']>>>, ParentType, ContextType>;
  city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country?: Resolver<ResolversTypes['CartAddressCountry'], ParentType, ContextType>;
  customer_notes?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  items_weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  lastname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  pickup_location_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['CartAddressRegion']>, ParentType, ContextType>;
  selected_shipping_method?: Resolver<Maybe<ResolversTypes['SelectedShippingMethod']>, ParentType, ContextType>;
  street?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  telephone?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AvailableShippingMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AvailableShippingMethod'] = ResolversParentTypes['AvailableShippingMethod']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  available?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  base_amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  carrier_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  carrier_title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  error_message?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  method_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  method_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  price_excl_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  price_incl_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CartItemQuantityResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartItemQuantity'] = ResolversParentTypes['CartItemQuantity']> = ResolversObject<{
  cart_item_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SelectedShippingMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedShippingMethod'] = ResolversParentTypes['SelectedShippingMethod']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  base_amount?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  carrier_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  carrier_title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  method_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  method_title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CategoryResultResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CategoryResult'] = ResolversParentTypes['CategoryResult']> = ResolversObject<{
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryTree']>>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CategoryTreeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CategoryTree'] = ResolversParentTypes['CategoryTree']> = ResolversObject<{
  available_sort_by?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  breadcrumbs?: Resolver<Maybe<Array<Maybe<ResolversTypes['Breadcrumb']>>>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  children?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryTree']>>>, ParentType, ContextType>;
  children_count?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cms_block?: Resolver<Maybe<ResolversTypes['CmsBlock']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  custom_layout_update_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_sort_by?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  display_mode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  filter_price_range?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  include_in_menu?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_anchor?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  landing_page?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  level?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  path_in_store?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  products?: Resolver<Maybe<ResolversTypes['CategoryProducts']>, ParentType, ContextType, RequireFields<CategoryTreeproductsArgs, 'pageSize' | 'currentPage'>>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RoutableInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RoutableInterface'] = ResolversParentTypes['RoutableInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'CategoryTree' | 'CmsPage' | 'VirtualProduct' | 'SimpleProduct' | 'DownloadableProduct' | 'BundleProduct' | 'GroupedProduct' | 'ConfigurableProduct', ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
}>;

export type ChatDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ChatData'] = ResolversParentTypes['ChatData']> = ResolversObject<{
  api_space_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  cookie_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  is_enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CheckoutAgreementResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CheckoutAgreement'] = ResolversParentTypes['CheckoutAgreement']> = ResolversObject<{
  agreement_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  checkbox_text?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  content?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  content_height?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  is_html?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  mode?: Resolver<ResolversTypes['CheckoutAgreementMode'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsBlocksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CmsBlocks'] = ResolversParentTypes['CmsBlocks']> = ResolversObject<{
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CmsBlock']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CmsPageResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CmsPage'] = ResolversParentTypes['CmsPage']> = ResolversObject<{
  content?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  content_heading?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  identifier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keywords?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  page_layout?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CompareListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CompareList'] = ResolversParentTypes['CompareList']> = ResolversObject<{
  attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['ComparableAttribute']>>>, ParentType, ContextType>;
  item_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ComparableItem']>>>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ComparableAttributeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ComparableAttribute'] = ResolversParentTypes['ComparableAttribute']> = ResolversObject<{
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ComparableItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ComparableItem'] = ResolversParentTypes['ComparableItem']> = ResolversObject<{
  attributes?: Resolver<Array<Maybe<ResolversTypes['ProductAttribute']>>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductAttributeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductAttribute'] = ResolversParentTypes['ProductAttribute']> = ResolversObject<{
  code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CountryResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Country'] = ResolversParentTypes['Country']> = ResolversObject<{
  available_regions?: Resolver<Maybe<Array<Maybe<ResolversTypes['Region']>>>, ParentType, ContextType>;
  full_name_english?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  full_name_locale?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  three_letter_abbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  two_letter_abbreviation?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RegionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Region'] = ResolversParentTypes['Region']> = ResolversObject<{
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CurrencyResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Currency'] = ResolversParentTypes['Currency']> = ResolversObject<{
  available_currency_codes?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  base_currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  base_currency_symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_display_currecy_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_display_currecy_symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_display_currency_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_display_currency_symbol?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  exchange_rates?: Resolver<Maybe<Array<Maybe<ResolversTypes['ExchangeRate']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ExchangeRateResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ExchangeRate'] = ResolversParentTypes['ExchangeRate']> = ResolversObject<{
  currency_to?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  rate?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomAttributeMetadataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomAttributeMetadata'] = ResolversParentTypes['CustomAttributeMetadata']> = ResolversObject<{
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['Attribute']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AttributeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Attribute'] = ResolversParentTypes['Attribute']> = ResolversObject<{
  attribute_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['AttributeOption']>>>, ParentType, ContextType>;
  attribute_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entity_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  input_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  storefront_properties?: Resolver<Maybe<ResolversTypes['StorefrontProperties']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AttributeOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AttributeOption'] = ResolversParentTypes['AttributeOption']> = ResolversObject<{
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type StorefrontPropertiesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['StorefrontProperties'] = ResolversParentTypes['StorefrontProperties']> = ResolversObject<{
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  use_in_layered_navigation?: Resolver<Maybe<ResolversTypes['UseInLayeredNavigationOptions']>, ParentType, ContextType>;
  use_in_product_listing?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  use_in_search_results_layered_navigation?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  visible_on_catalog_pages?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Customer'] = ResolversParentTypes['Customer']> = ResolversObject<{
  addresses?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomerAddress']>>>, ParentType, ContextType>;
  allow_remote_shopping_assistance?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  compare_list?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  date_of_birth?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_billing?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  default_shipping?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  dob?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  group_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_subscribed?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  lastname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  middlename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  orders?: Resolver<Maybe<ResolversTypes['CustomerOrders']>, ParentType, ContextType, RequireFields<CustomerordersArgs, 'currentPage' | 'pageSize'>>;
  prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<CustomerreviewsArgs, 'pageSize' | 'currentPage'>>;
  suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  taxvat?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
  wishlist_v2?: Resolver<Maybe<ResolversTypes['Wishlist']>, ParentType, ContextType, RequireFields<Customerwishlist_v2Args, 'id'>>;
  wishlists?: Resolver<Array<Maybe<ResolversTypes['Wishlist']>>, ParentType, ContextType, RequireFields<CustomerwishlistsArgs, 'pageSize' | 'currentPage'>>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerAddress'] = ResolversParentTypes['CustomerAddress']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country_code?: Resolver<Maybe<ResolversTypes['CountryCodeEnum']>, ParentType, ContextType>;
  country_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  custom_attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomerAddressAttribute']>>>, ParentType, ContextType>;
  customer_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  default_billing?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  default_shipping?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  extension_attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomerAddressAttribute']>>>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  lastname?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  middlename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['CustomerAddressRegion']>, ParentType, ContextType>;
  region_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  street?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  telephone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  vat_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerAddressAttributeResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerAddressAttribute'] = ResolversParentTypes['CustomerAddressAttribute']> = ResolversObject<{
  attribute_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerAddressRegionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerAddressRegion'] = ResolversParentTypes['CustomerAddressRegion']> = ResolversObject<{
  region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerOrdersResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerOrders'] = ResolversParentTypes['CustomerOrders']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['CustomerOrder']>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerOrderResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerOrder'] = ResolversParentTypes['CustomerOrder']> = ResolversObject<{
  billing_address?: Resolver<Maybe<ResolversTypes['OrderAddress']>, ParentType, ContextType>;
  carrier?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['SalesCommentItem']>>>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  credit_memos?: Resolver<Maybe<Array<Maybe<ResolversTypes['CreditMemo']>>>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  grand_total?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  increment_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  invoices?: Resolver<Array<Maybe<ResolversTypes['Invoice']>>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemInterface']>>>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  order_date?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  order_number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  payment_methods?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderPaymentMethod']>>>, ParentType, ContextType>;
  shipments?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderShipment']>>>, ParentType, ContextType>;
  shipping_address?: Resolver<Maybe<ResolversTypes['OrderAddress']>, ParentType, ContextType>;
  shipping_method?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  total?: Resolver<Maybe<ResolversTypes['OrderTotal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrderAddressResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderAddress'] = ResolversParentTypes['OrderAddress']> = ResolversObject<{
  city?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  company?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country_code?: Resolver<Maybe<ResolversTypes['CountryCodeEnum']>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  firstname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  lastname?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  middlename?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region_id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  street?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  telephone?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  vat_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SalesCommentItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SalesCommentItem'] = ResolversParentTypes['SalesCommentItem']> = ResolversObject<{
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  timestamp?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CreditMemoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditMemo'] = ResolversParentTypes['CreditMemo']> = ResolversObject<{
  comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['SalesCommentItem']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CreditMemoItemInterface']>>>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  total?: Resolver<Maybe<ResolversTypes['CreditMemoTotal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CreditMemoItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditMemoItemInterface'] = ResolversParentTypes['CreditMemoItemInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'DownloadableCreditMemoItem' | 'BundleCreditMemoItem' | 'CreditMemoItem', ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
}>;

export type OrderItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderItemInterface'] = ResolversParentTypes['OrderItemInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'DownloadableOrderItem' | 'BundleOrderItem' | 'OrderItem', ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  entered_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quantity_canceled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_ordered?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_returned?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_shipped?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  selected_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type OrderItemOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderItemOption'] = ResolversParentTypes['OrderItemOption']> = ResolversObject<{
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CreditMemoTotalResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditMemoTotal'] = ResolversParentTypes['CreditMemoTotal']> = ResolversObject<{
  adjustment?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  base_grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  shipping_handling?: Resolver<Maybe<ResolversTypes['ShippingHandling']>, ParentType, ContextType>;
  subtotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxItem']>>>, ParentType, ContextType>;
  total_shipping?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  total_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShippingHandlingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShippingHandling'] = ResolversParentTypes['ShippingHandling']> = ResolversObject<{
  amount_excluding_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  amount_including_tax?: Resolver<Maybe<ResolversTypes['Money']>, ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['ShippingDiscount']>>>, ParentType, ContextType>;
  taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxItem']>>>, ParentType, ContextType>;
  total_amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShippingDiscountResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShippingDiscount'] = ResolversParentTypes['ShippingDiscount']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TaxItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TaxItem'] = ResolversParentTypes['TaxItem']> = ResolversObject<{
  amount?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  rate?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InvoiceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Invoice'] = ResolversParentTypes['Invoice']> = ResolversObject<{
  comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['SalesCommentItem']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['InvoiceItemInterface']>>>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  total?: Resolver<Maybe<ResolversTypes['InvoiceTotal']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InvoiceItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceItemInterface'] = ResolversParentTypes['InvoiceItemInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'DownloadableInvoiceItem' | 'BundleInvoiceItem' | 'InvoiceItem', ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
}>;

export type InvoiceTotalResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceTotal'] = ResolversParentTypes['InvoiceTotal']> = ResolversObject<{
  base_grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  shipping_handling?: Resolver<Maybe<ResolversTypes['ShippingHandling']>, ParentType, ContextType>;
  subtotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxItem']>>>, ParentType, ContextType>;
  total_shipping?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  total_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrderPaymentMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderPaymentMethod'] = ResolversParentTypes['OrderPaymentMethod']> = ResolversObject<{
  additional_data?: Resolver<Maybe<Array<Maybe<ResolversTypes['KeyValue']>>>, ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type KeyValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['KeyValue'] = ResolversParentTypes['KeyValue']> = ResolversObject<{
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrderShipmentResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderShipment'] = ResolversParentTypes['OrderShipment']> = ResolversObject<{
  comments?: Resolver<Maybe<Array<Maybe<ResolversTypes['SalesCommentItem']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ShipmentItemInterface']>>>, ParentType, ContextType>;
  number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  tracking?: Resolver<Maybe<Array<Maybe<ResolversTypes['ShipmentTracking']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShipmentItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShipmentItemInterface'] = ResolversParentTypes['ShipmentItemInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'BundleShipmentItem' | 'ShipmentItem', ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_shipped?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
}>;

export type ShipmentTrackingResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShipmentTracking'] = ResolversParentTypes['ShipmentTracking']> = ResolversObject<{
  carrier?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  number?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrderTotalResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderTotal'] = ResolversParentTypes['OrderTotal']> = ResolversObject<{
  base_grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  grand_total?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  shipping_handling?: Resolver<Maybe<ResolversTypes['ShippingHandling']>, ParentType, ContextType>;
  subtotal?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  taxes?: Resolver<Maybe<Array<Maybe<ResolversTypes['TaxItem']>>>, ParentType, ContextType>;
  total_shipping?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  total_tax?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WishlistResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Wishlist'] = ResolversParentTypes['Wishlist']> = ResolversObject<{
  id?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['WishlistItem']>>>, ParentType, ContextType>;
  items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  items_v2?: Resolver<Maybe<ResolversTypes['WishlistItems']>, ParentType, ContextType, RequireFields<Wishlistitems_v2Args, 'currentPage' | 'pageSize'>>;
  sharing_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WishlistItem'] = ResolversParentTypes['WishlistItem']> = ResolversObject<{
  added_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WishlistItemsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WishlistItems'] = ResolversParentTypes['WishlistItems']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['WishlistItemInterface']>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WishlistItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WishlistItemInterface'] = ResolversParentTypes['WishlistItemInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'SimpleWishlistItem' | 'VirtualWishlistItem' | 'DownloadableWishlistItem' | 'BundleWishlistItem' | 'GroupedProductWishlistItem' | 'ConfigurableWishlistItem', ParentType, ContextType>;
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
}>;

export type SelectedCustomizableOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedCustomizableOption'] = ResolversParentTypes['SelectedCustomizableOption']> = ResolversObject<{
  customizable_option_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  is_required?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  sort_order?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  values?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOptionValue']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SelectedCustomizableOptionValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedCustomizableOptionValue'] = ResolversParentTypes['SelectedCustomizableOptionValue']> = ResolversObject<{
  customizable_option_value_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  price?: Resolver<ResolversTypes['CartItemSelectedOptionValuePrice'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CartItemSelectedOptionValuePriceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartItemSelectedOptionValuePrice'] = ResolversParentTypes['CartItemSelectedOptionValuePrice']> = ResolversObject<{
  type?: Resolver<ResolversTypes['PriceTypeEnum'], ParentType, ContextType>;
  units?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerDownloadableProductsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerDownloadableProducts'] = ResolversParentTypes['CustomerDownloadableProducts']> = ResolversObject<{
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomerDownloadableProduct']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerDownloadableProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerDownloadableProduct'] = ResolversParentTypes['CustomerDownloadableProduct']> = ResolversObject<{
  date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  download_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  order_increment_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  remaining_downloads?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerPaymentTokensResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerPaymentTokens'] = ResolversParentTypes['CustomerPaymentTokens']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['PaymentToken']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaymentTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaymentToken'] = ResolversParentTypes['PaymentToken']> = ResolversObject<{
  details?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payment_method_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  public_hash?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['PaymentTokenTypeEnum'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IsConfigSettingEnabledOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IsConfigSettingEnabledOutput'] = ResolversParentTypes['IsConfigSettingEnabledOutput']> = ResolversObject<{
  is_enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type HostedProUrlResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['HostedProUrl'] = ResolversParentTypes['HostedProUrl']> = ResolversObject<{
  secure_form_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PayflowLinkTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PayflowLinkToken'] = ResolversParentTypes['PayflowLinkToken']> = ResolversObject<{
  mode?: Resolver<Maybe<ResolversTypes['PayflowLinkMode']>, ParentType, ContextType>;
  paypal_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  secure_token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  secure_token_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type IsEmailAvailableOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['IsEmailAvailableOutput'] = ResolversParentTypes['IsEmailAvailableOutput']> = ResolversObject<{
  is_email_available?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MolliePaymentMethodsOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MolliePaymentMethodsOutput'] = ResolversParentTypes['MolliePaymentMethodsOutput']> = ResolversObject<{
  methods?: Resolver<Maybe<Array<Maybe<ResolversTypes['MolliePaymentMethod']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MolliePaymentMethodResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MolliePaymentMethod'] = ResolversParentTypes['MolliePaymentMethod']> = ResolversObject<{
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrderResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Order'] = ResolversParentTypes['Order']> = ResolversObject<{
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['String']>>>, ParentType, ContextType>;
  mollie_payment_token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  mollie_redirect_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  order_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  order_number?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  total?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PickupLocationsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PickupLocations'] = ResolversParentTypes['PickupLocations']> = ResolversObject<{
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['PickupLocation']>>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PickupLocationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PickupLocation'] = ResolversParentTypes['PickupLocation']> = ResolversObject<{
  city?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  contact_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  country_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  email?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  fax?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  latitude?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  longitude?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  phone?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pickup_location_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  postcode?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  region_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  street?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductReviewRatingsMetadataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductReviewRatingsMetadata'] = ResolversParentTypes['ProductReviewRatingsMetadata']> = ResolversObject<{
  items?: Resolver<Array<Maybe<ResolversTypes['ProductReviewRatingMetadata']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductReviewRatingMetadataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductReviewRatingMetadata'] = ResolversParentTypes['ProductReviewRatingMetadata']> = ResolversObject<{
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  values?: Resolver<Array<Maybe<ResolversTypes['ProductReviewRatingValueMetadata']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductReviewRatingValueMetadataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductReviewRatingValueMetadata'] = ResolversParentTypes['ProductReviewRatingValueMetadata']> = ResolversObject<{
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Products'] = ResolversParentTypes['Products']> = ResolversObject<{
  aggregations?: Resolver<Maybe<Array<Maybe<ResolversTypes['Aggregation']>>>, ParentType, ContextType>;
  filters?: Resolver<Maybe<Array<Maybe<ResolversTypes['LayerFilter']>>>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  page_info?: Resolver<Maybe<ResolversTypes['SearchResultPageInfo']>, ParentType, ContextType>;
  sort_fields?: Resolver<Maybe<ResolversTypes['SortFields']>, ParentType, ContextType>;
  total_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AggregationResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Aggregation'] = ResolversParentTypes['Aggregation']> = ResolversObject<{
  attribute_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['AggregationOption']>>>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AggregationOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AggregationOption'] = ResolversParentTypes['AggregationOption']> = ResolversObject<{
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AggregationOptionInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AggregationOptionInterface'] = ResolversParentTypes['AggregationOptionInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'AggregationOption', ParentType, ContextType>;
  count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
}>;

export type LayerFilterResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LayerFilter'] = ResolversParentTypes['LayerFilter']> = ResolversObject<{
  filter_items?: Resolver<Maybe<Array<Maybe<ResolversTypes['LayerFilterItemInterface']>>>, ParentType, ContextType>;
  filter_items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  request_var?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LayerFilterItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LayerFilterItemInterface'] = ResolversParentTypes['LayerFilterItemInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'LayerFilterItem' | 'SwatchLayerFilterItem', ParentType, ContextType>;
  items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value_string?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type SortFieldsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SortFields'] = ResolversParentTypes['SortFields']> = ResolversObject<{
  default?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['SortField']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SortFieldResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SortField'] = ResolversParentTypes['SortField']> = ResolversObject<{
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TrackingDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TrackingData'] = ResolversParentTypes['TrackingData']> = ResolversObject<{
  page_tracking_enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  region_prefix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  roi_tracking_enabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  wbt_profile_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type EntityUrlResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['EntityUrl'] = ResolversParentTypes['EntityUrl']> = ResolversObject<{
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  entity_uid?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  redirectCode?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WishlistOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WishlistOutput'] = ResolversParentTypes['WishlistOutput']> = ResolversObject<{
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['WishlistItem']>>>, ParentType, ContextType>;
  items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sharing_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddBundleProductsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddBundleProductsToCartOutput'] = ResolversParentTypes['AddBundleProductsToCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddConfigurableProductsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddConfigurableProductsToCartOutput'] = ResolversParentTypes['AddConfigurableProductsToCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddDownloadableProductsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddDownloadableProductsToCartOutput'] = ResolversParentTypes['AddDownloadableProductsToCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddProductsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddProductsToCartOutput'] = ResolversParentTypes['AddProductsToCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  user_errors?: Resolver<Array<Maybe<ResolversTypes['CartUserInputError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CartUserInputErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CartUserInputError'] = ResolversParentTypes['CartUserInputError']> = ResolversObject<{
  code?: Resolver<ResolversTypes['CartUserInputErrorType'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddProductsToWishlistOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddProductsToWishlistOutput'] = ResolversParentTypes['AddProductsToWishlistOutput']> = ResolversObject<{
  user_errors?: Resolver<Array<Maybe<ResolversTypes['WishListUserInputError']>>, ParentType, ContextType>;
  wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WishListUserInputErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WishListUserInputError'] = ResolversParentTypes['WishListUserInputError']> = ResolversObject<{
  code?: Resolver<ResolversTypes['WishListUserInputErrorType'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddSimpleProductsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddSimpleProductsToCartOutput'] = ResolversParentTypes['AddSimpleProductsToCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddVirtualProductsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddVirtualProductsToCartOutput'] = ResolversParentTypes['AddVirtualProductsToCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AddWishlistItemsToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AddWishlistItemsToCartOutput'] = ResolversParentTypes['AddWishlistItemsToCartOutput']> = ResolversObject<{
  add_wishlist_items_to_cart_user_errors?: Resolver<Array<Maybe<ResolversTypes['WishlistCartUserInputError']>>, ParentType, ContextType>;
  status?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type WishlistCartUserInputErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['WishlistCartUserInputError'] = ResolversParentTypes['WishlistCartUserInputError']> = ResolversObject<{
  code?: Resolver<ResolversTypes['WishlistCartUserInputErrorType'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  wishlistId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  wishlistItemId?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ApplyCouponToCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ApplyCouponToCartOutput'] = ResolversParentTypes['ApplyCouponToCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AssignCompareListToCustomerOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['AssignCompareListToCustomerOutput'] = ResolversParentTypes['AssignCompareListToCustomerOutput']> = ResolversObject<{
  compare_list?: Resolver<Maybe<ResolversTypes['CompareList']>, ParentType, ContextType>;
  result?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerOutput'] = ResolversParentTypes['CustomerOutput']> = ResolversObject<{
  customer?: Resolver<ResolversTypes['Customer'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type createKlarnaPaymentsSessionOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['createKlarnaPaymentsSessionOutput'] = ResolversParentTypes['createKlarnaPaymentsSessionOutput']> = ResolversObject<{
  client_token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  payment_method_categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['Categories']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CategoriesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Categories'] = ResolversParentTypes['Categories']> = ResolversObject<{
  asset_urls?: Resolver<Maybe<Array<Maybe<ResolversTypes['Assets']>>>, ParentType, ContextType>;
  identifier?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type AssetsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['Assets'] = ResolversParentTypes['Assets']> = ResolversObject<{
  descriptive?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  standard?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MollieTransactionOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MollieTransactionOutput'] = ResolversParentTypes['MollieTransactionOutput']> = ResolversObject<{
  checkout_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CreatePayflowProTokenOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreatePayflowProTokenOutput'] = ResolversParentTypes['CreatePayflowProTokenOutput']> = ResolversObject<{
  response_message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  result?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  result_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  secure_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  secure_token_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaypalExpressTokenOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaypalExpressTokenOutput'] = ResolversParentTypes['PaypalExpressTokenOutput']> = ResolversObject<{
  paypal_urls?: Resolver<Maybe<ResolversTypes['PaypalExpressUrlList']>, ParentType, ContextType>;
  token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaypalExpressUrlListResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaypalExpressUrlList'] = ResolversParentTypes['PaypalExpressUrlList']> = ResolversObject<{
  edit?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  start?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CreateProductReviewOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreateProductReviewOutput'] = ResolversParentTypes['CreateProductReviewOutput']> = ResolversObject<{
  review?: Resolver<ResolversTypes['ProductReview'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeleteCompareListOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeleteCompareListOutput'] = ResolversParentTypes['DeleteCompareListOutput']> = ResolversObject<{
  result?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DeletePaymentTokenOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DeletePaymentTokenOutput'] = ResolversParentTypes['DeletePaymentTokenOutput']> = ResolversObject<{
  customerPaymentTokens?: Resolver<Maybe<ResolversTypes['CustomerPaymentTokens']>, ParentType, ContextType>;
  result?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomerTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomerToken'] = ResolversParentTypes['CustomerToken']> = ResolversObject<{
  token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  createdAt?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  valid?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GenerateCustomerTokenAsAdminOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GenerateCustomerTokenAsAdminOutput'] = ResolversParentTypes['GenerateCustomerTokenAsAdminOutput']> = ResolversObject<{
  customer_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PayflowProResponseOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PayflowProResponseOutput'] = ResolversParentTypes['PayflowProResponseOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MollieProcessTransactionOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MollieProcessTransactionOutput'] = ResolversParentTypes['MollieProcessTransactionOutput']> = ResolversObject<{
  cart?: Resolver<Maybe<ResolversTypes['Cart']>, ParentType, ContextType>;
  paymentStatus?: Resolver<Maybe<ResolversTypes['PaymentStatusEnum']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type MollieResetCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['MollieResetCartOutput'] = ResolversParentTypes['MollieResetCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PlaceOrderOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PlaceOrderOutput'] = ResolversParentTypes['PlaceOrderOutput']> = ResolversObject<{
  order?: Resolver<ResolversTypes['Order'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RemoveCouponFromCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RemoveCouponFromCartOutput'] = ResolversParentTypes['RemoveCouponFromCartOutput']> = ResolversObject<{
  cart?: Resolver<Maybe<ResolversTypes['Cart']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RemoveItemFromCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RemoveItemFromCartOutput'] = ResolversParentTypes['RemoveItemFromCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RemoveProductsFromWishlistOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RemoveProductsFromWishlistOutput'] = ResolversParentTypes['RemoveProductsFromWishlistOutput']> = ResolversObject<{
  user_errors?: Resolver<Array<Maybe<ResolversTypes['WishListUserInputError']>>, ParentType, ContextType>;
  wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ReorderItemsOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ReorderItemsOutput'] = ResolversParentTypes['ReorderItemsOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  userInputErrors?: Resolver<Array<Maybe<ResolversTypes['CheckoutUserInputError']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CheckoutUserInputErrorResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CheckoutUserInputError'] = ResolversParentTypes['CheckoutUserInputError']> = ResolversObject<{
  code?: Resolver<ResolversTypes['CheckoutUserInputErrorCodes'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  path?: Resolver<Array<Maybe<ResolversTypes['String']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type RevokeCustomerTokenOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['RevokeCustomerTokenOutput'] = ResolversParentTypes['RevokeCustomerTokenOutput']> = ResolversObject<{
  result?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SendEmailToFriendOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SendEmailToFriendOutput'] = ResolversParentTypes['SendEmailToFriendOutput']> = ResolversObject<{
  recipients?: Resolver<Maybe<Array<Maybe<ResolversTypes['SendEmailToFriendRecipient']>>>, ParentType, ContextType>;
  sender?: Resolver<Maybe<ResolversTypes['SendEmailToFriendSender']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SendEmailToFriendRecipientResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SendEmailToFriendRecipient'] = ResolversParentTypes['SendEmailToFriendRecipient']> = ResolversObject<{
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SendEmailToFriendSenderResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SendEmailToFriendSender'] = ResolversParentTypes['SendEmailToFriendSender']> = ResolversObject<{
  email?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SetBillingAddressOnCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetBillingAddressOnCartOutput'] = ResolversParentTypes['SetBillingAddressOnCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SetGuestEmailOnCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetGuestEmailOnCartOutput'] = ResolversParentTypes['SetGuestEmailOnCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SetPaymentMethodOnCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetPaymentMethodOnCartOutput'] = ResolversParentTypes['SetPaymentMethodOnCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SetShippingAddressesOnCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetShippingAddressesOnCartOutput'] = ResolversParentTypes['SetShippingAddressesOnCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SetShippingMethodsOnCartOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SetShippingMethodsOnCartOutput'] = ResolversParentTypes['SetShippingMethodsOnCartOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SubscribeEmailToNewsletterOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SubscribeEmailToNewsletterOutput'] = ResolversParentTypes['SubscribeEmailToNewsletterOutput']> = ResolversObject<{
  status?: Resolver<Maybe<ResolversTypes['SubscriptionStatusesEnum']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type UpdateCartItemsOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UpdateCartItemsOutput'] = ResolversParentTypes['UpdateCartItemsOutput']> = ResolversObject<{
  cart?: Resolver<ResolversTypes['Cart'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type UpdateProductsInWishlistOutputResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['UpdateProductsInWishlistOutput'] = ResolversParentTypes['UpdateProductsInWishlistOutput']> = ResolversObject<{
  user_errors?: Resolver<Array<Maybe<ResolversTypes['WishListUserInputError']>>, ParentType, ContextType>;
  wishlist?: Resolver<ResolversTypes['Wishlist'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductLinksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductLinks'] = ResolversParentTypes['ProductLinks']> = ResolversObject<{
  link_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  linked_product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  linked_product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PhysicalProductInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PhysicalProductInterface'] = ResolversParentTypes['PhysicalProductInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'SimpleProduct' | 'BundleProduct' | 'GroupedProduct' | 'ConfigurableProduct', ParentType, ContextType>;
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
}>;

export type CustomizableAreaOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableAreaOption'] = ResolversParentTypes['CustomizableAreaOption']> = ResolversObject<{
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['CustomizableAreaValue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableOptionInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableOptionInterface'] = ResolversParentTypes['CustomizableOptionInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'CustomizableAreaOption' | 'CustomizableDateOption' | 'CustomizableDropDownOption' | 'CustomizableMultipleOption' | 'CustomizableFieldOption' | 'CustomizableFileOption' | 'CustomizableRadioOption' | 'CustomizableCheckboxOption', ParentType, ContextType>;
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
}>;

export type CustomizableAreaValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableAreaValue'] = ResolversParentTypes['CustomizableAreaValue']> = ResolversObject<{
  max_characters?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableDateOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableDateOption'] = ResolversParentTypes['CustomizableDateOption']> = ResolversObject<{
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['CustomizableDateValue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableDateValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableDateValue'] = ResolversParentTypes['CustomizableDateValue']> = ResolversObject<{
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['CustomizableDateTypeEnum']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableDropDownOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableDropDownOption'] = ResolversParentTypes['CustomizableDropDownOption']> = ResolversObject<{
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableDropDownValue']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableDropDownValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableDropDownValue'] = ResolversParentTypes['CustomizableDropDownValue']> = ResolversObject<{
  option_type_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableMultipleOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableMultipleOption'] = ResolversParentTypes['CustomizableMultipleOption']> = ResolversObject<{
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableMultipleValue']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableMultipleValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableMultipleValue'] = ResolversParentTypes['CustomizableMultipleValue']> = ResolversObject<{
  option_type_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableFieldOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableFieldOption'] = ResolversParentTypes['CustomizableFieldOption']> = ResolversObject<{
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['CustomizableFieldValue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableFieldValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableFieldValue'] = ResolversParentTypes['CustomizableFieldValue']> = ResolversObject<{
  max_characters?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableFileOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableFileOption'] = ResolversParentTypes['CustomizableFileOption']> = ResolversObject<{
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['CustomizableFileValue']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableFileValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableFileValue'] = ResolversParentTypes['CustomizableFileValue']> = ResolversObject<{
  file_extension?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  image_size_x?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image_size_y?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ProductVideoResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ProductVideo'] = ResolversParentTypes['ProductVideo']> = ResolversObject<{
  disabled?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  video_content?: Resolver<Maybe<ResolversTypes['ProductMediaGalleryEntriesVideoContent']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableProductInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableProductInterface'] = ResolversParentTypes['CustomizableProductInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'VirtualProduct' | 'SimpleProduct' | 'DownloadableProduct' | 'BundleProduct' | 'ConfigurableProduct', ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
}>;

export type CustomizableRadioOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableRadioOption'] = ResolversParentTypes['CustomizableRadioOption']> = ResolversObject<{
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableRadioValue']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableRadioValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableRadioValue'] = ResolversParentTypes['CustomizableRadioValue']> = ResolversObject<{
  option_type_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableCheckboxOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableCheckboxOption'] = ResolversParentTypes['CustomizableCheckboxOption']> = ResolversObject<{
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableCheckboxValue']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CustomizableCheckboxValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CustomizableCheckboxValue'] = ResolversParentTypes['CustomizableCheckboxValue']> = ResolversObject<{
  option_type_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type VirtualProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VirtualProduct'] = ResolversParentTypes['VirtualProduct']> = ResolversObject<{
  activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<VirtualProductreviewsArgs, 'pageSize' | 'currentPage'>>;
  sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  th_test_attribute?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SimpleProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SimpleProduct'] = ResolversParentTypes['SimpleProduct']> = ResolversObject<{
  activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<SimpleProductreviewsArgs, 'pageSize' | 'currentPage'>>;
  sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  th_test_attribute?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type LayerFilterItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['LayerFilterItem'] = ResolversParentTypes['LayerFilterItem']> = ResolversObject<{
  items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value_string?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SimpleWishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SimpleWishlistItem'] = ResolversParentTypes['SimpleWishlistItem']> = ResolversObject<{
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type VirtualWishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VirtualWishlistItem'] = ResolversParentTypes['VirtualWishlistItem']> = ResolversObject<{
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SimpleCartItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SimpleCartItem'] = ResolversParentTypes['SimpleCartItem']> = ResolversObject<{
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type VirtualCartItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['VirtualCartItem'] = ResolversParentTypes['VirtualCartItem']> = ResolversObject<{
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DownloadableCartItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableCartItem'] = ResolversParentTypes['DownloadableCartItem']> = ResolversObject<{
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductLinks']>>>, ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  samples?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductSamples']>>>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DownloadableProductLinksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableProductLinks'] = ResolversParentTypes['DownloadableProductLinks']> = ResolversObject<{
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_shareable?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  link_type?: Resolver<Maybe<ResolversTypes['DownloadableFileTypeEnum']>, ParentType, ContextType>;
  number_of_downloads?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  sample_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sample_type?: Resolver<Maybe<ResolversTypes['DownloadableFileTypeEnum']>, ParentType, ContextType>;
  sample_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DownloadableProductSamplesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableProductSamples'] = ResolversParentTypes['DownloadableProductSamples']> = ResolversObject<{
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sample_file?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sample_type?: Resolver<Maybe<ResolversTypes['DownloadableFileTypeEnum']>, ParentType, ContextType>;
  sample_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DownloadableProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableProduct'] = ResolversParentTypes['DownloadableProduct']> = ResolversObject<{
  activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  downloadable_product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductLinks']>>>, ParentType, ContextType>;
  downloadable_product_samples?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductSamples']>>>, ParentType, ContextType>;
  eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  links_purchased_separately?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  links_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<DownloadableProductreviewsArgs, 'pageSize' | 'currentPage'>>;
  sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  th_test_attribute?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DownloadableOrderItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableOrderItem'] = ResolversParentTypes['DownloadableOrderItem']> = ResolversObject<{
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  downloadable_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableItemsLinks']>>>, ParentType, ContextType>;
  entered_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quantity_canceled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_ordered?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_returned?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_shipped?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  selected_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DownloadableItemsLinksResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableItemsLinks'] = ResolversParentTypes['DownloadableItemsLinks']> = ResolversObject<{
  sort_order?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DownloadableInvoiceItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableInvoiceItem'] = ResolversParentTypes['DownloadableInvoiceItem']> = ResolversObject<{
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  downloadable_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableItemsLinks']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DownloadableCreditMemoItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableCreditMemoItem'] = ResolversParentTypes['DownloadableCreditMemoItem']> = ResolversObject<{
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  downloadable_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableItemsLinks']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type DownloadableWishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['DownloadableWishlistItem'] = ResolversParentTypes['DownloadableWishlistItem']> = ResolversObject<{
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  links_v2?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductLinks']>>>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  samples?: Resolver<Maybe<Array<Maybe<ResolversTypes['DownloadableProductSamples']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BundleCartItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleCartItem'] = ResolversParentTypes['BundleCartItem']> = ResolversObject<{
  bundle_options?: Resolver<Array<Maybe<ResolversTypes['SelectedBundleOption']>>, ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SelectedBundleOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedBundleOption'] = ResolversParentTypes['SelectedBundleOption']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  type?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  values?: Resolver<Array<Maybe<ResolversTypes['SelectedBundleOptionValue']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SelectedBundleOptionValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedBundleOptionValue'] = ResolversParentTypes['SelectedBundleOptionValue']> = ResolversObject<{
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  price?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BundleItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleItem'] = ResolversParentTypes['BundleItem']> = ResolversObject<{
  option_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['BundleItemOption']>>>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  required?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BundleItemOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleItemOption'] = ResolversParentTypes['BundleItemOption']> = ResolversObject<{
  can_change_quantity?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  is_default?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  price_type?: Resolver<Maybe<ResolversTypes['PriceTypeEnum']>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BundleProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleProduct'] = ResolversParentTypes['BundleProduct']> = ResolversObject<{
  activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  dynamic_price?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  dynamic_sku?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  dynamic_weight?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['BundleItem']>>>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  price_view?: Resolver<Maybe<ResolversTypes['PriceViewEnum']>, ParentType, ContextType>;
  print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<BundleProductreviewsArgs, 'pageSize' | 'currentPage'>>;
  sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  ship_bundle_items?: Resolver<Maybe<ResolversTypes['ShipBundleItemsEnum']>, ParentType, ContextType>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  th_test_attribute?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BundleOrderItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleOrderItem'] = ResolversParentTypes['BundleOrderItem']> = ResolversObject<{
  bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOption']>>>, ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  entered_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quantity_canceled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_ordered?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_returned?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_shipped?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  selected_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ItemSelectedBundleOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ItemSelectedBundleOption'] = ResolversParentTypes['ItemSelectedBundleOption']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  values?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOptionValue']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ItemSelectedBundleOptionValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ItemSelectedBundleOptionValue'] = ResolversParentTypes['ItemSelectedBundleOptionValue']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_name?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BundleInvoiceItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleInvoiceItem'] = ResolversParentTypes['BundleInvoiceItem']> = ResolversObject<{
  bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOption']>>>, ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BundleShipmentItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleShipmentItem'] = ResolversParentTypes['BundleShipmentItem']> = ResolversObject<{
  bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOption']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_shipped?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BundleCreditMemoItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleCreditMemoItem'] = ResolversParentTypes['BundleCreditMemoItem']> = ResolversObject<{
  bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ItemSelectedBundleOption']>>>, ParentType, ContextType>;
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type BundleWishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['BundleWishlistItem'] = ResolversParentTypes['BundleWishlistItem']> = ResolversObject<{
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  bundle_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['SelectedBundleOption']>>>, ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ConfigurableCartItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableCartItem'] = ResolversParentTypes['ConfigurableCartItem']> = ResolversObject<{
  configurable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedConfigurableOption']>>, ParentType, ContextType>;
  configured_variant?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  customizable_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>>, ParentType, ContextType>;
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  prices?: Resolver<Maybe<ResolversTypes['CartItemPrices']>, ParentType, ContextType>;
  product?: Resolver<ResolversTypes['ProductInterface'], ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SelectedConfigurableOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SelectedConfigurableOption'] = ResolversParentTypes['SelectedConfigurableOption']> = ResolversObject<{
  configurable_product_option_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  configurable_product_option_value_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  option_label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  value_id?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  value_label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SalesItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SalesItemInterface'] = ResolversParentTypes['SalesItemInterface']> = ResolversObject<{
  gift_message?: Resolver<Maybe<ResolversTypes['GiftMessage']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GroupedProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GroupedProduct'] = ResolversParentTypes['GroupedProduct']> = ResolversObject<{
  activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  items?: Resolver<Maybe<Array<Maybe<ResolversTypes['GroupedProductItem']>>>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<GroupedProductreviewsArgs, 'pageSize' | 'currentPage'>>;
  sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  th_test_attribute?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GroupedProductItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GroupedProductItem'] = ResolversParentTypes['GroupedProductItem']> = ResolversObject<{
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  qty?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type GroupedProductWishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['GroupedProductWishlistItem'] = ResolversParentTypes['GroupedProductWishlistItem']> = ResolversObject<{
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ConfigurableProductResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableProduct'] = ResolversParentTypes['ConfigurableProduct']> = ResolversObject<{
  activity?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_set_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  backorder_delivery_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  backorder_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  canonical_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  categories?: Resolver<Maybe<Array<Maybe<ResolversTypes['CategoryInterface']>>>, ParentType, ContextType>;
  category_gear?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  climate?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  collar?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  colors?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  compatible_phones?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  configurable_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOptions']>>>, ParentType, ContextType>;
  configurable_product_options_selection?: Resolver<Maybe<ResolversTypes['ConfigurableProductOptionsSelection']>, ParentType, ContextType, Partial<ConfigurableProductconfigurable_product_options_selectionArgs>>;
  country_of_manufacture?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  created_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  crosssell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  dominant_color?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  eco_collection?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  erin_recommends?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  features_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  format?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  gender?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  gift_message_available?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  in_stock_delivery_period?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  manufacturer?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  material?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  media_gallery_entries?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryEntry']>>>, ParentType, ContextType>;
  meta_description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_keyword?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  meta_title?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  new_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  new_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  only_x_left_in_stock?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  options?: Resolver<Maybe<Array<Maybe<ResolversTypes['CustomizableOptionInterface']>>>, ParentType, ContextType>;
  options_container?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  pattern?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  performance_fabric?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  price?: Resolver<Maybe<ResolversTypes['ProductPrices']>, ParentType, ContextType>;
  price_range?: Resolver<ResolversTypes['PriceRange'], ParentType, ContextType>;
  price_tiers?: Resolver<Maybe<Array<Maybe<ResolversTypes['TierPrice']>>>, ParentType, ContextType>;
  print_art?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_holiday?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_labels?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landmarks?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_landscape?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_mood?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  print_pattern_swatch?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  print_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_links?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductLinksInterface']>>>, ParentType, ContextType>;
  rating_summary?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  redirect_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  related_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  relative_url?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  review_count?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  reviews?: Resolver<ResolversTypes['ProductReviews'], ParentType, ContextType, RequireFields<ConfigurableProductreviewsArgs, 'pageSize' | 'currentPage'>>;
  sale?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  short_description?: Resolver<Maybe<ResolversTypes['ComplexTextValue']>, ParentType, ContextType>;
  size?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  sku?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  sleeve?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  small_image?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  special_from_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  special_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  special_to_date?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  stock_status?: Resolver<Maybe<ResolversTypes['ProductStockStatus']>, ParentType, ContextType>;
  strap_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bags?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_bottom?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  style_general?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_image?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  th_test_attribute?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  thumbnail?: Resolver<Maybe<ResolversTypes['ProductImage']>, ParentType, ContextType>;
  tier_price?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  tier_prices?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductTierPrices']>>>, ParentType, ContextType>;
  type?: Resolver<Maybe<ResolversTypes['UrlRewriteEntityTypeEnum']>, ParentType, ContextType>;
  type_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  updated_at?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  upsell_products?: Resolver<Maybe<Array<Maybe<ResolversTypes['ProductInterface']>>>, ParentType, ContextType>;
  url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_path?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  url_rewrites?: Resolver<Maybe<Array<Maybe<ResolversTypes['UrlRewrite']>>>, ParentType, ContextType>;
  url_suffix?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  variants?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableVariant']>>>, ParentType, ContextType>;
  websites?: Resolver<Maybe<Array<Maybe<ResolversTypes['Website']>>>, ParentType, ContextType>;
  weight?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ConfigurableProductOptionsResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableProductOptions'] = ResolversParentTypes['ConfigurableProductOptions']> = ResolversObject<{
  attribute_code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  attribute_id_v2?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  attribute_uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  position?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  product_id?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  use_default?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  values?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOptionsValues']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ConfigurableProductOptionsValuesResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableProductOptionsValues'] = ResolversParentTypes['ConfigurableProductOptionsValues']> = ResolversObject<{
  default_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  store_label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_data?: Resolver<Maybe<ResolversTypes['SwatchDataInterface']>, ParentType, ContextType>;
  uid?: Resolver<Maybe<ResolversTypes['ID']>, ParentType, ContextType>;
  use_default_value?: Resolver<Maybe<ResolversTypes['Boolean']>, ParentType, ContextType>;
  value_index?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SwatchDataInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SwatchDataInterface'] = ResolversParentTypes['SwatchDataInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'ImageSwatchData' | 'TextSwatchData' | 'ColorSwatchData', ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
}>;

export type ConfigurableProductOptionsSelectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableProductOptionsSelection'] = ResolversParentTypes['ConfigurableProductOptionsSelection']> = ResolversObject<{
  configurable_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOption']>>>, ParentType, ContextType>;
  media_gallery?: Resolver<Maybe<Array<Maybe<ResolversTypes['MediaGalleryInterface']>>>, ParentType, ContextType>;
  options_available_for_selection?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableOptionAvailableForSelection']>>>, ParentType, ContextType>;
  variant?: Resolver<Maybe<ResolversTypes['SimpleProduct']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ConfigurableProductOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableProductOption'] = ResolversParentTypes['ConfigurableProductOption']> = ResolversObject<{
  attribute_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  values?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableProductOptionValue']>>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ConfigurableProductOptionValueResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableProductOptionValue'] = ResolversParentTypes['ConfigurableProductOptionValue']> = ResolversObject<{
  is_available?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  is_use_default?: Resolver<ResolversTypes['Boolean'], ParentType, ContextType>;
  label?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  swatch?: Resolver<Maybe<ResolversTypes['SwatchDataInterface']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ConfigurableOptionAvailableForSelectionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableOptionAvailableForSelection'] = ResolversParentTypes['ConfigurableOptionAvailableForSelection']> = ResolversObject<{
  attribute_code?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  option_value_uids?: Resolver<Array<Maybe<ResolversTypes['ID']>>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ConfigurableVariantResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableVariant'] = ResolversParentTypes['ConfigurableVariant']> = ResolversObject<{
  attributes?: Resolver<Maybe<Array<Maybe<ResolversTypes['ConfigurableAttributeOption']>>>, ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['SimpleProduct']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ConfigurableAttributeOptionResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableAttributeOption'] = ResolversParentTypes['ConfigurableAttributeOption']> = ResolversObject<{
  code?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  uid?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  value_index?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ConfigurableWishlistItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ConfigurableWishlistItem'] = ResolversParentTypes['ConfigurableWishlistItem']> = ResolversObject<{
  added_at?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  child_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  configurable_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['SelectedConfigurableOption']>>>, ParentType, ContextType>;
  customizable_options?: Resolver<Array<Maybe<ResolversTypes['SelectedCustomizableOption']>>, ParentType, ContextType>;
  description?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product?: Resolver<Maybe<ResolversTypes['ProductInterface']>, ParentType, ContextType>;
  quantity?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PaypalExpressTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PaypalExpressToken'] = ResolversParentTypes['PaypalExpressToken']> = ResolversObject<{
  paypal_urls?: Resolver<Maybe<ResolversTypes['PaypalExpressUrlList']>, ParentType, ContextType>;
  token?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type PayflowProTokenResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['PayflowProToken'] = ResolversParentTypes['PayflowProToken']> = ResolversObject<{
  response_message?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  result?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  result_code?: Resolver<ResolversTypes['Int'], ParentType, ContextType>;
  secure_token?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  secure_token_id?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type OrderItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['OrderItem'] = ResolversParentTypes['OrderItem']> = ResolversObject<{
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  entered_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  product_type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_url_key?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  quantity_canceled?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_ordered?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_returned?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  quantity_shipped?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  selected_options?: Resolver<Maybe<Array<Maybe<ResolversTypes['OrderItemOption']>>>, ParentType, ContextType>;
  status?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type InvoiceItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['InvoiceItem'] = ResolversParentTypes['InvoiceItem']> = ResolversObject<{
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_invoiced?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ShipmentItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ShipmentItem'] = ResolversParentTypes['ShipmentItem']> = ResolversObject<{
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_shipped?: Resolver<ResolversTypes['Float'], ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CreditMemoItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CreditMemoItem'] = ResolversParentTypes['CreditMemoItem']> = ResolversObject<{
  discounts?: Resolver<Maybe<Array<Maybe<ResolversTypes['Discount']>>>, ParentType, ContextType>;
  id?: Resolver<ResolversTypes['ID'], ParentType, ContextType>;
  order_item?: Resolver<Maybe<ResolversTypes['OrderItemInterface']>, ParentType, ContextType>;
  product_name?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  product_sale_price?: Resolver<ResolversTypes['Money'], ParentType, ContextType>;
  product_sku?: Resolver<ResolversTypes['String'], ParentType, ContextType>;
  quantity_refunded?: Resolver<Maybe<ResolversTypes['Float']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SwatchLayerFilterItemInterfaceResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SwatchLayerFilterItemInterface'] = ResolversParentTypes['SwatchLayerFilterItemInterface']> = ResolversObject<{
  __resolveType: TypeResolveFn<'SwatchLayerFilterItem', ParentType, ContextType>;
  swatch_data?: Resolver<Maybe<ResolversTypes['SwatchData']>, ParentType, ContextType>;
}>;

export type SwatchDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SwatchData'] = ResolversParentTypes['SwatchData']> = ResolversObject<{
  type?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type SwatchLayerFilterItemResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['SwatchLayerFilterItem'] = ResolversParentTypes['SwatchLayerFilterItem']> = ResolversObject<{
  items_count?: Resolver<Maybe<ResolversTypes['Int']>, ParentType, ContextType>;
  label?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  swatch_data?: Resolver<Maybe<ResolversTypes['SwatchData']>, ParentType, ContextType>;
  value_string?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ImageSwatchDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ImageSwatchData'] = ResolversParentTypes['ImageSwatchData']> = ResolversObject<{
  thumbnail?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type TextSwatchDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['TextSwatchData'] = ResolversParentTypes['TextSwatchData']> = ResolversObject<{
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type ColorSwatchDataResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['ColorSwatchData'] = ResolversParentTypes['ColorSwatchData']> = ResolversObject<{
  value?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type CurrentCartIdResolvers<ContextType = MeshContext, ParentType extends ResolversParentTypes['CurrentCartId'] = ResolversParentTypes['CurrentCartId']> = ResolversObject<{
  id?: Resolver<Maybe<ResolversTypes['String']>, ParentType, ContextType>;
  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
}>;

export type Resolvers<ContextType = MeshContext> = ResolversObject<{
  Query?: QueryResolvers<ContextType>;
  Mutation?: MutationResolvers<ContextType>;
  Aggregate?: AggregateResolvers<ContextType>;
  Asset?: AssetResolvers<ContextType>;
  AssetConnection?: AssetConnectionResolvers<ContextType>;
  AssetEdge?: AssetEdgeResolvers<ContextType>;
  Banner?: BannerResolvers<ContextType>;
  BannerConnection?: BannerConnectionResolvers<ContextType>;
  BannerEdge?: BannerEdgeResolvers<ContextType>;
  BatchPayload?: BatchPayloadResolvers<ContextType>;
  Color?: ColorResolvers<ContextType>;
  Date?: GraphQLScalarType;
  DateTime?: GraphQLScalarType;
  DocumentVersion?: DocumentVersionResolvers<ContextType>;
  Footer?: FooterResolvers<ContextType>;
  FooterConnection?: FooterConnectionResolvers<ContextType>;
  FooterEdge?: FooterEdgeResolvers<ContextType>;
  Hex?: GraphQLScalarType;
  Json?: GraphQLScalarType;
  Location?: LocationResolvers<ContextType>;
  Long?: GraphQLScalarType;
  Node?: NodeResolvers<ContextType>;
  Page?: PageResolvers<ContextType>;
  PageConnection?: PageConnectionResolvers<ContextType>;
  PageContent?: PageContentResolvers<ContextType>;
  PageEdge?: PageEdgeResolvers<ContextType>;
  PageInfo?: PageInfoResolvers<ContextType>;
  PageLink?: PageLinkResolvers<ContextType>;
  PageLinkConnection?: PageLinkConnectionResolvers<ContextType>;
  PageLinkEdge?: PageLinkEdgeResolvers<ContextType>;
  RGBA?: RGBAResolvers<ContextType>;
  RGBAHue?: GraphQLScalarType;
  RGBATransparency?: GraphQLScalarType;
  RichText?: RichTextResolvers<ContextType>;
  RichTextAST?: GraphQLScalarType;
  RowBlogContent?: RowBlogContentResolvers<ContextType>;
  RowBlogContentConnection?: RowBlogContentConnectionResolvers<ContextType>;
  RowBlogContentEdge?: RowBlogContentEdgeResolvers<ContextType>;
  RowButtonLinkList?: RowButtonLinkListResolvers<ContextType>;
  RowButtonLinkListConnection?: RowButtonLinkListConnectionResolvers<ContextType>;
  RowButtonLinkListEdge?: RowButtonLinkListEdgeResolvers<ContextType>;
  RowColumnOne?: RowColumnOneResolvers<ContextType>;
  RowColumnOneConnection?: RowColumnOneConnectionResolvers<ContextType>;
  RowColumnOneEdge?: RowColumnOneEdgeResolvers<ContextType>;
  RowColumnThree?: RowColumnThreeResolvers<ContextType>;
  RowColumnThreeConnection?: RowColumnThreeConnectionResolvers<ContextType>;
  RowColumnThreeEdge?: RowColumnThreeEdgeResolvers<ContextType>;
  RowColumnTwo?: RowColumnTwoResolvers<ContextType>;
  RowColumnTwoConnection?: RowColumnTwoConnectionResolvers<ContextType>;
  RowColumnTwoEdge?: RowColumnTwoEdgeResolvers<ContextType>;
  RowContentLinks?: RowContentLinksResolvers<ContextType>;
  RowContentLinksConnection?: RowContentLinksConnectionResolvers<ContextType>;
  RowContentLinksEdge?: RowContentLinksEdgeResolvers<ContextType>;
  RowHeroBanner?: RowHeroBannerResolvers<ContextType>;
  RowHeroBannerConnection?: RowHeroBannerConnectionResolvers<ContextType>;
  RowHeroBannerEdge?: RowHeroBannerEdgeResolvers<ContextType>;
  RowProduct?: RowProductResolvers<ContextType>;
  RowProductConnection?: RowProductConnectionResolvers<ContextType>;
  RowProductEdge?: RowProductEdgeResolvers<ContextType>;
  RowQuote?: RowQuoteResolvers<ContextType>;
  RowQuoteConnection?: RowQuoteConnectionResolvers<ContextType>;
  RowQuoteEdge?: RowQuoteEdgeResolvers<ContextType>;
  RowServiceOptions?: RowServiceOptionsResolvers<ContextType>;
  RowServiceOptionsConnection?: RowServiceOptionsConnectionResolvers<ContextType>;
  RowServiceOptionsEdge?: RowServiceOptionsEdgeResolvers<ContextType>;
  RowSpecialBanner?: RowSpecialBannerResolvers<ContextType>;
  RowSpecialBannerConnection?: RowSpecialBannerConnectionResolvers<ContextType>;
  RowSpecialBannerEdge?: RowSpecialBannerEdgeResolvers<ContextType>;
  ScheduledOperation?: ScheduledOperationResolvers<ContextType>;
  ScheduledOperationAffectedDocument?: ScheduledOperationAffectedDocumentResolvers<ContextType>;
  ScheduledOperationConnection?: ScheduledOperationConnectionResolvers<ContextType>;
  ScheduledOperationEdge?: ScheduledOperationEdgeResolvers<ContextType>;
  ScheduledRelease?: ScheduledReleaseResolvers<ContextType>;
  ScheduledReleaseConnection?: ScheduledReleaseConnectionResolvers<ContextType>;
  ScheduledReleaseEdge?: ScheduledReleaseEdgeResolvers<ContextType>;
  User?: UserResolvers<ContextType>;
  UserConnection?: UserConnectionResolvers<ContextType>;
  UserEdge?: UserEdgeResolvers<ContextType>;
  Usps?: UspsResolvers<ContextType>;
  UspsConnection?: UspsConnectionResolvers<ContextType>;
  UspsEdge?: UspsEdgeResolvers<ContextType>;
  Version?: VersionResolvers<ContextType>;
  StoreConfig?: StoreConfigResolvers<ContextType>;
  SendFriendConfiguration?: SendFriendConfigurationResolvers<ContextType>;
  Cart?: CartResolvers<ContextType>;
  AppliedCoupon?: AppliedCouponResolvers<ContextType>;
  AvailablePaymentMethod?: AvailablePaymentMethodResolvers<ContextType>;
  MollieIssuer?: MollieIssuerResolvers<ContextType>;
  MolliePaymentMethodMeta?: MolliePaymentMethodMetaResolvers<ContextType>;
  BillingCartAddress?: BillingCartAddressResolvers<ContextType>;
  CartAddressInterface?: CartAddressInterfaceResolvers<ContextType>;
  CartAddressCountry?: CartAddressCountryResolvers<ContextType>;
  CartAddressRegion?: CartAddressRegionResolvers<ContextType>;
  GiftMessage?: GiftMessageResolvers<ContextType>;
  CartItemInterface?: CartItemInterfaceResolvers<ContextType>;
  CartItemPrices?: CartItemPricesResolvers<ContextType>;
  Discount?: DiscountResolvers<ContextType>;
  Money?: MoneyResolvers<ContextType>;
  FixedProductTax?: FixedProductTaxResolvers<ContextType>;
  ProductInterface?: ProductInterfaceResolvers<ContextType>;
  CategoryInterface?: CategoryInterfaceResolvers<ContextType>;
  Breadcrumb?: BreadcrumbResolvers<ContextType>;
  CmsBlock?: CmsBlockResolvers<ContextType>;
  CategoryProducts?: CategoryProductsResolvers<ContextType>;
  SearchResultPageInfo?: SearchResultPageInfoResolvers<ContextType>;
  ComplexTextValue?: ComplexTextValueResolvers<ContextType>;
  ProductImage?: ProductImageResolvers<ContextType>;
  MediaGalleryInterface?: MediaGalleryInterfaceResolvers<ContextType>;
  MediaGalleryEntry?: MediaGalleryEntryResolvers<ContextType>;
  ProductMediaGalleryEntriesContent?: ProductMediaGalleryEntriesContentResolvers<ContextType>;
  ProductMediaGalleryEntriesVideoContent?: ProductMediaGalleryEntriesVideoContentResolvers<ContextType>;
  ProductPrices?: ProductPricesResolvers<ContextType>;
  Price?: PriceResolvers<ContextType>;
  PriceAdjustment?: PriceAdjustmentResolvers<ContextType>;
  PriceRange?: PriceRangeResolvers<ContextType>;
  ProductPrice?: ProductPriceResolvers<ContextType>;
  ProductDiscount?: ProductDiscountResolvers<ContextType>;
  TierPrice?: TierPriceResolvers<ContextType>;
  ProductLinksInterface?: ProductLinksInterfaceResolvers<ContextType>;
  ProductReviews?: ProductReviewsResolvers<ContextType>;
  ProductReview?: ProductReviewResolvers<ContextType>;
  ProductReviewRating?: ProductReviewRatingResolvers<ContextType>;
  ProductTierPrices?: ProductTierPricesResolvers<ContextType>;
  UrlRewrite?: UrlRewriteResolvers<ContextType>;
  HttpQueryParameter?: HttpQueryParameterResolvers<ContextType>;
  Website?: WebsiteResolvers<ContextType>;
  CartPrices?: CartPricesResolvers<ContextType>;
  CartTaxItem?: CartTaxItemResolvers<ContextType>;
  CartDiscount?: CartDiscountResolvers<ContextType>;
  SelectedPaymentMethod?: SelectedPaymentMethodResolvers<ContextType>;
  ShippingCartAddress?: ShippingCartAddressResolvers<ContextType>;
  AvailableShippingMethod?: AvailableShippingMethodResolvers<ContextType>;
  CartItemQuantity?: CartItemQuantityResolvers<ContextType>;
  SelectedShippingMethod?: SelectedShippingMethodResolvers<ContextType>;
  CategoryResult?: CategoryResultResolvers<ContextType>;
  CategoryTree?: CategoryTreeResolvers<ContextType>;
  RoutableInterface?: RoutableInterfaceResolvers<ContextType>;
  ChatData?: ChatDataResolvers<ContextType>;
  CheckoutAgreement?: CheckoutAgreementResolvers<ContextType>;
  CmsBlocks?: CmsBlocksResolvers<ContextType>;
  CmsPage?: CmsPageResolvers<ContextType>;
  CompareList?: CompareListResolvers<ContextType>;
  ComparableAttribute?: ComparableAttributeResolvers<ContextType>;
  ComparableItem?: ComparableItemResolvers<ContextType>;
  ProductAttribute?: ProductAttributeResolvers<ContextType>;
  Country?: CountryResolvers<ContextType>;
  Region?: RegionResolvers<ContextType>;
  Currency?: CurrencyResolvers<ContextType>;
  ExchangeRate?: ExchangeRateResolvers<ContextType>;
  CustomAttributeMetadata?: CustomAttributeMetadataResolvers<ContextType>;
  Attribute?: AttributeResolvers<ContextType>;
  AttributeOption?: AttributeOptionResolvers<ContextType>;
  StorefrontProperties?: StorefrontPropertiesResolvers<ContextType>;
  Customer?: CustomerResolvers<ContextType>;
  CustomerAddress?: CustomerAddressResolvers<ContextType>;
  CustomerAddressAttribute?: CustomerAddressAttributeResolvers<ContextType>;
  CustomerAddressRegion?: CustomerAddressRegionResolvers<ContextType>;
  CustomerOrders?: CustomerOrdersResolvers<ContextType>;
  CustomerOrder?: CustomerOrderResolvers<ContextType>;
  OrderAddress?: OrderAddressResolvers<ContextType>;
  SalesCommentItem?: SalesCommentItemResolvers<ContextType>;
  CreditMemo?: CreditMemoResolvers<ContextType>;
  CreditMemoItemInterface?: CreditMemoItemInterfaceResolvers<ContextType>;
  OrderItemInterface?: OrderItemInterfaceResolvers<ContextType>;
  OrderItemOption?: OrderItemOptionResolvers<ContextType>;
  CreditMemoTotal?: CreditMemoTotalResolvers<ContextType>;
  ShippingHandling?: ShippingHandlingResolvers<ContextType>;
  ShippingDiscount?: ShippingDiscountResolvers<ContextType>;
  TaxItem?: TaxItemResolvers<ContextType>;
  Invoice?: InvoiceResolvers<ContextType>;
  InvoiceItemInterface?: InvoiceItemInterfaceResolvers<ContextType>;
  InvoiceTotal?: InvoiceTotalResolvers<ContextType>;
  OrderPaymentMethod?: OrderPaymentMethodResolvers<ContextType>;
  KeyValue?: KeyValueResolvers<ContextType>;
  OrderShipment?: OrderShipmentResolvers<ContextType>;
  ShipmentItemInterface?: ShipmentItemInterfaceResolvers<ContextType>;
  ShipmentTracking?: ShipmentTrackingResolvers<ContextType>;
  OrderTotal?: OrderTotalResolvers<ContextType>;
  Wishlist?: WishlistResolvers<ContextType>;
  WishlistItem?: WishlistItemResolvers<ContextType>;
  WishlistItems?: WishlistItemsResolvers<ContextType>;
  WishlistItemInterface?: WishlistItemInterfaceResolvers<ContextType>;
  SelectedCustomizableOption?: SelectedCustomizableOptionResolvers<ContextType>;
  SelectedCustomizableOptionValue?: SelectedCustomizableOptionValueResolvers<ContextType>;
  CartItemSelectedOptionValuePrice?: CartItemSelectedOptionValuePriceResolvers<ContextType>;
  CustomerDownloadableProducts?: CustomerDownloadableProductsResolvers<ContextType>;
  CustomerDownloadableProduct?: CustomerDownloadableProductResolvers<ContextType>;
  CustomerPaymentTokens?: CustomerPaymentTokensResolvers<ContextType>;
  PaymentToken?: PaymentTokenResolvers<ContextType>;
  IsConfigSettingEnabledOutput?: IsConfigSettingEnabledOutputResolvers<ContextType>;
  HostedProUrl?: HostedProUrlResolvers<ContextType>;
  PayflowLinkToken?: PayflowLinkTokenResolvers<ContextType>;
  IsEmailAvailableOutput?: IsEmailAvailableOutputResolvers<ContextType>;
  MolliePaymentMethodsOutput?: MolliePaymentMethodsOutputResolvers<ContextType>;
  MolliePaymentMethod?: MolliePaymentMethodResolvers<ContextType>;
  Order?: OrderResolvers<ContextType>;
  PickupLocations?: PickupLocationsResolvers<ContextType>;
  PickupLocation?: PickupLocationResolvers<ContextType>;
  ProductReviewRatingsMetadata?: ProductReviewRatingsMetadataResolvers<ContextType>;
  ProductReviewRatingMetadata?: ProductReviewRatingMetadataResolvers<ContextType>;
  ProductReviewRatingValueMetadata?: ProductReviewRatingValueMetadataResolvers<ContextType>;
  Products?: ProductsResolvers<ContextType>;
  Aggregation?: AggregationResolvers<ContextType>;
  AggregationOption?: AggregationOptionResolvers<ContextType>;
  AggregationOptionInterface?: AggregationOptionInterfaceResolvers<ContextType>;
  LayerFilter?: LayerFilterResolvers<ContextType>;
  LayerFilterItemInterface?: LayerFilterItemInterfaceResolvers<ContextType>;
  SortFields?: SortFieldsResolvers<ContextType>;
  SortField?: SortFieldResolvers<ContextType>;
  TrackingData?: TrackingDataResolvers<ContextType>;
  EntityUrl?: EntityUrlResolvers<ContextType>;
  WishlistOutput?: WishlistOutputResolvers<ContextType>;
  AddBundleProductsToCartOutput?: AddBundleProductsToCartOutputResolvers<ContextType>;
  AddConfigurableProductsToCartOutput?: AddConfigurableProductsToCartOutputResolvers<ContextType>;
  AddDownloadableProductsToCartOutput?: AddDownloadableProductsToCartOutputResolvers<ContextType>;
  AddProductsToCartOutput?: AddProductsToCartOutputResolvers<ContextType>;
  CartUserInputError?: CartUserInputErrorResolvers<ContextType>;
  AddProductsToWishlistOutput?: AddProductsToWishlistOutputResolvers<ContextType>;
  WishListUserInputError?: WishListUserInputErrorResolvers<ContextType>;
  AddSimpleProductsToCartOutput?: AddSimpleProductsToCartOutputResolvers<ContextType>;
  AddVirtualProductsToCartOutput?: AddVirtualProductsToCartOutputResolvers<ContextType>;
  AddWishlistItemsToCartOutput?: AddWishlistItemsToCartOutputResolvers<ContextType>;
  WishlistCartUserInputError?: WishlistCartUserInputErrorResolvers<ContextType>;
  ApplyCouponToCartOutput?: ApplyCouponToCartOutputResolvers<ContextType>;
  AssignCompareListToCustomerOutput?: AssignCompareListToCustomerOutputResolvers<ContextType>;
  CustomerOutput?: CustomerOutputResolvers<ContextType>;
  createKlarnaPaymentsSessionOutput?: createKlarnaPaymentsSessionOutputResolvers<ContextType>;
  Categories?: CategoriesResolvers<ContextType>;
  Assets?: AssetsResolvers<ContextType>;
  MollieTransactionOutput?: MollieTransactionOutputResolvers<ContextType>;
  CreatePayflowProTokenOutput?: CreatePayflowProTokenOutputResolvers<ContextType>;
  PaypalExpressTokenOutput?: PaypalExpressTokenOutputResolvers<ContextType>;
  PaypalExpressUrlList?: PaypalExpressUrlListResolvers<ContextType>;
  CreateProductReviewOutput?: CreateProductReviewOutputResolvers<ContextType>;
  DeleteCompareListOutput?: DeleteCompareListOutputResolvers<ContextType>;
  DeletePaymentTokenOutput?: DeletePaymentTokenOutputResolvers<ContextType>;
  CustomerToken?: CustomerTokenResolvers<ContextType>;
  GenerateCustomerTokenAsAdminOutput?: GenerateCustomerTokenAsAdminOutputResolvers<ContextType>;
  PayflowProResponseOutput?: PayflowProResponseOutputResolvers<ContextType>;
  MollieProcessTransactionOutput?: MollieProcessTransactionOutputResolvers<ContextType>;
  MollieResetCartOutput?: MollieResetCartOutputResolvers<ContextType>;
  PlaceOrderOutput?: PlaceOrderOutputResolvers<ContextType>;
  RemoveCouponFromCartOutput?: RemoveCouponFromCartOutputResolvers<ContextType>;
  RemoveItemFromCartOutput?: RemoveItemFromCartOutputResolvers<ContextType>;
  RemoveProductsFromWishlistOutput?: RemoveProductsFromWishlistOutputResolvers<ContextType>;
  ReorderItemsOutput?: ReorderItemsOutputResolvers<ContextType>;
  CheckoutUserInputError?: CheckoutUserInputErrorResolvers<ContextType>;
  RevokeCustomerTokenOutput?: RevokeCustomerTokenOutputResolvers<ContextType>;
  SendEmailToFriendOutput?: SendEmailToFriendOutputResolvers<ContextType>;
  SendEmailToFriendRecipient?: SendEmailToFriendRecipientResolvers<ContextType>;
  SendEmailToFriendSender?: SendEmailToFriendSenderResolvers<ContextType>;
  SetBillingAddressOnCartOutput?: SetBillingAddressOnCartOutputResolvers<ContextType>;
  SetGuestEmailOnCartOutput?: SetGuestEmailOnCartOutputResolvers<ContextType>;
  SetPaymentMethodOnCartOutput?: SetPaymentMethodOnCartOutputResolvers<ContextType>;
  SetShippingAddressesOnCartOutput?: SetShippingAddressesOnCartOutputResolvers<ContextType>;
  SetShippingMethodsOnCartOutput?: SetShippingMethodsOnCartOutputResolvers<ContextType>;
  SubscribeEmailToNewsletterOutput?: SubscribeEmailToNewsletterOutputResolvers<ContextType>;
  UpdateCartItemsOutput?: UpdateCartItemsOutputResolvers<ContextType>;
  UpdateProductsInWishlistOutput?: UpdateProductsInWishlistOutputResolvers<ContextType>;
  ProductLinks?: ProductLinksResolvers<ContextType>;
  PhysicalProductInterface?: PhysicalProductInterfaceResolvers<ContextType>;
  CustomizableAreaOption?: CustomizableAreaOptionResolvers<ContextType>;
  CustomizableOptionInterface?: CustomizableOptionInterfaceResolvers<ContextType>;
  CustomizableAreaValue?: CustomizableAreaValueResolvers<ContextType>;
  CustomizableDateOption?: CustomizableDateOptionResolvers<ContextType>;
  CustomizableDateValue?: CustomizableDateValueResolvers<ContextType>;
  CustomizableDropDownOption?: CustomizableDropDownOptionResolvers<ContextType>;
  CustomizableDropDownValue?: CustomizableDropDownValueResolvers<ContextType>;
  CustomizableMultipleOption?: CustomizableMultipleOptionResolvers<ContextType>;
  CustomizableMultipleValue?: CustomizableMultipleValueResolvers<ContextType>;
  CustomizableFieldOption?: CustomizableFieldOptionResolvers<ContextType>;
  CustomizableFieldValue?: CustomizableFieldValueResolvers<ContextType>;
  CustomizableFileOption?: CustomizableFileOptionResolvers<ContextType>;
  CustomizableFileValue?: CustomizableFileValueResolvers<ContextType>;
  ProductVideo?: ProductVideoResolvers<ContextType>;
  CustomizableProductInterface?: CustomizableProductInterfaceResolvers<ContextType>;
  CustomizableRadioOption?: CustomizableRadioOptionResolvers<ContextType>;
  CustomizableRadioValue?: CustomizableRadioValueResolvers<ContextType>;
  CustomizableCheckboxOption?: CustomizableCheckboxOptionResolvers<ContextType>;
  CustomizableCheckboxValue?: CustomizableCheckboxValueResolvers<ContextType>;
  VirtualProduct?: VirtualProductResolvers<ContextType>;
  SimpleProduct?: SimpleProductResolvers<ContextType>;
  LayerFilterItem?: LayerFilterItemResolvers<ContextType>;
  SimpleWishlistItem?: SimpleWishlistItemResolvers<ContextType>;
  VirtualWishlistItem?: VirtualWishlistItemResolvers<ContextType>;
  SimpleCartItem?: SimpleCartItemResolvers<ContextType>;
  VirtualCartItem?: VirtualCartItemResolvers<ContextType>;
  DownloadableCartItem?: DownloadableCartItemResolvers<ContextType>;
  DownloadableProductLinks?: DownloadableProductLinksResolvers<ContextType>;
  DownloadableProductSamples?: DownloadableProductSamplesResolvers<ContextType>;
  DownloadableProduct?: DownloadableProductResolvers<ContextType>;
  DownloadableOrderItem?: DownloadableOrderItemResolvers<ContextType>;
  DownloadableItemsLinks?: DownloadableItemsLinksResolvers<ContextType>;
  DownloadableInvoiceItem?: DownloadableInvoiceItemResolvers<ContextType>;
  DownloadableCreditMemoItem?: DownloadableCreditMemoItemResolvers<ContextType>;
  DownloadableWishlistItem?: DownloadableWishlistItemResolvers<ContextType>;
  BundleCartItem?: BundleCartItemResolvers<ContextType>;
  SelectedBundleOption?: SelectedBundleOptionResolvers<ContextType>;
  SelectedBundleOptionValue?: SelectedBundleOptionValueResolvers<ContextType>;
  BundleItem?: BundleItemResolvers<ContextType>;
  BundleItemOption?: BundleItemOptionResolvers<ContextType>;
  BundleProduct?: BundleProductResolvers<ContextType>;
  BundleOrderItem?: BundleOrderItemResolvers<ContextType>;
  ItemSelectedBundleOption?: ItemSelectedBundleOptionResolvers<ContextType>;
  ItemSelectedBundleOptionValue?: ItemSelectedBundleOptionValueResolvers<ContextType>;
  BundleInvoiceItem?: BundleInvoiceItemResolvers<ContextType>;
  BundleShipmentItem?: BundleShipmentItemResolvers<ContextType>;
  BundleCreditMemoItem?: BundleCreditMemoItemResolvers<ContextType>;
  BundleWishlistItem?: BundleWishlistItemResolvers<ContextType>;
  ConfigurableCartItem?: ConfigurableCartItemResolvers<ContextType>;
  SelectedConfigurableOption?: SelectedConfigurableOptionResolvers<ContextType>;
  SalesItemInterface?: SalesItemInterfaceResolvers<ContextType>;
  GroupedProduct?: GroupedProductResolvers<ContextType>;
  GroupedProductItem?: GroupedProductItemResolvers<ContextType>;
  GroupedProductWishlistItem?: GroupedProductWishlistItemResolvers<ContextType>;
  ConfigurableProduct?: ConfigurableProductResolvers<ContextType>;
  ConfigurableProductOptions?: ConfigurableProductOptionsResolvers<ContextType>;
  ConfigurableProductOptionsValues?: ConfigurableProductOptionsValuesResolvers<ContextType>;
  SwatchDataInterface?: SwatchDataInterfaceResolvers<ContextType>;
  ConfigurableProductOptionsSelection?: ConfigurableProductOptionsSelectionResolvers<ContextType>;
  ConfigurableProductOption?: ConfigurableProductOptionResolvers<ContextType>;
  ConfigurableProductOptionValue?: ConfigurableProductOptionValueResolvers<ContextType>;
  ConfigurableOptionAvailableForSelection?: ConfigurableOptionAvailableForSelectionResolvers<ContextType>;
  ConfigurableVariant?: ConfigurableVariantResolvers<ContextType>;
  ConfigurableAttributeOption?: ConfigurableAttributeOptionResolvers<ContextType>;
  ConfigurableWishlistItem?: ConfigurableWishlistItemResolvers<ContextType>;
  PaypalExpressToken?: PaypalExpressTokenResolvers<ContextType>;
  PayflowProToken?: PayflowProTokenResolvers<ContextType>;
  OrderItem?: OrderItemResolvers<ContextType>;
  InvoiceItem?: InvoiceItemResolvers<ContextType>;
  ShipmentItem?: ShipmentItemResolvers<ContextType>;
  CreditMemoItem?: CreditMemoItemResolvers<ContextType>;
  SwatchLayerFilterItemInterface?: SwatchLayerFilterItemInterfaceResolvers<ContextType>;
  SwatchData?: SwatchDataResolvers<ContextType>;
  SwatchLayerFilterItem?: SwatchLayerFilterItemResolvers<ContextType>;
  ImageSwatchData?: ImageSwatchDataResolvers<ContextType>;
  TextSwatchData?: TextSwatchDataResolvers<ContextType>;
  ColorSwatchData?: ColorSwatchDataResolvers<ContextType>;
  CurrentCartId?: CurrentCartIdResolvers<ContextType>;
}>;

export type DirectiveResolvers<ContextType = MeshContext> = ResolversObject<{
  injectable?: injectableDirectiveResolver<any, any, ContextType>;
  inject?: injectDirectiveResolver<any, any, ContextType>;
}>;

import { MeshContext as BaseMeshContext, MeshInstance } from '@graphql-mesh/runtime';

import { InContextSdkMethod } from '@graphql-mesh/types';


    export namespace GraphcmsTypes {
      export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  Date: any;
  DateTime: any;
  Hex: any;
  Json: any;
  Long: any;
  RGBAHue: any;
  RGBATransparency: any;
  RichTextAST: any;
};

export type Aggregate = {
  count: Scalars['Int'];
};

/** Asset system model */
export type Asset = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Asset>;
  /** Get the document in other stages */
  documentInStages: Array<Asset>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** The file handle */
  handle: Scalars['String'];
  /** The file name */
  fileName: Scalars['String'];
  /** The height of the file */
  height?: Maybe<Scalars['Float']>;
  /** The file width */
  width?: Maybe<Scalars['Float']>;
  /** The file size */
  size?: Maybe<Scalars['Float']>;
  /** The mime type of the file */
  mimeType?: Maybe<Scalars['String']>;
  alt?: Maybe<Scalars['String']>;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  assetRowHeroBanner: Array<RowHeroBanner>;
  rowSpecialBannerAsset: Array<RowSpecialBanner>;
  assetPage: Array<Page>;
  assetPageLink: Array<PageLink>;
  assetRowProduct: Array<RowProduct>;
  imageBanner: Array<Banner>;
  scheduledIn: Array<ScheduledOperation>;
  /** List of Asset versions */
  history: Array<Version>;
  /** Get the url for the asset with provided transformations applied. */
  url: Scalars['String'];
};


/** Asset system model */
export type AssetlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


/** Asset system model */
export type AssetdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


/** Asset system model */
export type AssetcreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


/** Asset system model */
export type AssetcreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetassetRowHeroBannerArgs = {
  where?: InputMaybe<RowHeroBannerWhereInput>;
  orderBy?: InputMaybe<RowHeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetrowSpecialBannerAssetArgs = {
  where?: InputMaybe<RowSpecialBannerWhereInput>;
  orderBy?: InputMaybe<RowSpecialBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetassetPageArgs = {
  where?: InputMaybe<PageWhereInput>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetassetPageLinkArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetassetRowProductArgs = {
  where?: InputMaybe<RowProductWhereInput>;
  orderBy?: InputMaybe<RowProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetimageBannerArgs = {
  where?: InputMaybe<BannerWhereInput>;
  orderBy?: InputMaybe<BannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssetscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


/** Asset system model */
export type AssethistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};


/** Asset system model */
export type AsseturlArgs = {
  transformation?: InputMaybe<AssetTransformationInput>;
};

export type AssetConnectInput = {
  /** Document to connect */
  where: AssetWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type AssetConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<AssetEdge>;
  aggregate: Aggregate;
};

export type AssetCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  handle: Scalars['String'];
  fileName: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** alt input for default locale (en) */
  alt?: InputMaybe<Scalars['String']>;
  assetRowHeroBanner?: InputMaybe<RowHeroBannerCreateManyInlineInput>;
  rowSpecialBannerAsset?: InputMaybe<RowSpecialBannerCreateManyInlineInput>;
  assetPage?: InputMaybe<PageCreateManyInlineInput>;
  assetPageLink?: InputMaybe<PageLinkCreateManyInlineInput>;
  assetRowProduct?: InputMaybe<RowProductCreateManyInlineInput>;
  imageBanner?: InputMaybe<BannerCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<AssetCreateLocalizationsInput>;
};

export type AssetCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  handle: Scalars['String'];
  fileName: Scalars['String'];
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
};

export type AssetCreateLocalizationInput = {
  /** Localization input */
  data: AssetCreateLocalizationDataInput;
  locale: Locale;
};

export type AssetCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
};

export type AssetCreateManyInlineInput = {
  /** Create and connect multiple existing Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetWhereUniqueInput>>;
};

export type AssetCreateOneInlineInput = {
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
  /** Connect one existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
};

/** An edge in a connection. */
export type AssetEdge = {
  /** The item at the end of the edge. */
  node: Asset;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type AssetManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  assetRowHeroBanner_every?: InputMaybe<RowHeroBannerWhereInput>;
  assetRowHeroBanner_some?: InputMaybe<RowHeroBannerWhereInput>;
  assetRowHeroBanner_none?: InputMaybe<RowHeroBannerWhereInput>;
  rowSpecialBannerAsset_every?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBannerAsset_some?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBannerAsset_none?: InputMaybe<RowSpecialBannerWhereInput>;
  assetPage_every?: InputMaybe<PageWhereInput>;
  assetPage_some?: InputMaybe<PageWhereInput>;
  assetPage_none?: InputMaybe<PageWhereInput>;
  assetPageLink_every?: InputMaybe<PageLinkWhereInput>;
  assetPageLink_some?: InputMaybe<PageLinkWhereInput>;
  assetPageLink_none?: InputMaybe<PageLinkWhereInput>;
  assetRowProduct_every?: InputMaybe<RowProductWhereInput>;
  assetRowProduct_some?: InputMaybe<RowProductWhereInput>;
  assetRowProduct_none?: InputMaybe<RowProductWhereInput>;
  imageBanner_every?: InputMaybe<BannerWhereInput>;
  imageBanner_some?: InputMaybe<BannerWhereInput>;
  imageBanner_none?: InputMaybe<BannerWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

export type AssetOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'handle_ASC'
  | 'handle_DESC'
  | 'fileName_ASC'
  | 'fileName_DESC'
  | 'height_ASC'
  | 'height_DESC'
  | 'width_ASC'
  | 'width_DESC'
  | 'size_ASC'
  | 'size_DESC'
  | 'mimeType_ASC'
  | 'mimeType_DESC'
  | 'alt_ASC'
  | 'alt_DESC';

/** Transformations for Assets */
export type AssetTransformationInput = {
  image?: InputMaybe<ImageTransformationInput>;
  document?: InputMaybe<DocumentTransformationInput>;
  /** Pass true if you want to validate the passed transformation parameters */
  validateOptions?: InputMaybe<Scalars['Boolean']>;
};

export type AssetUpdateInput = {
  handle?: InputMaybe<Scalars['String']>;
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** alt input for default locale (en) */
  alt?: InputMaybe<Scalars['String']>;
  assetRowHeroBanner?: InputMaybe<RowHeroBannerUpdateManyInlineInput>;
  rowSpecialBannerAsset?: InputMaybe<RowSpecialBannerUpdateManyInlineInput>;
  assetPage?: InputMaybe<PageUpdateManyInlineInput>;
  assetPageLink?: InputMaybe<PageLinkUpdateManyInlineInput>;
  assetRowProduct?: InputMaybe<RowProductUpdateManyInlineInput>;
  imageBanner?: InputMaybe<BannerUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<AssetUpdateLocalizationsInput>;
};

export type AssetUpdateLocalizationDataInput = {
  handle?: InputMaybe<Scalars['String']>;
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
};

export type AssetUpdateLocalizationInput = {
  data: AssetUpdateLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<AssetCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<AssetUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type AssetUpdateManyInlineInput = {
  /** Create and connect multiple Asset documents */
  create?: InputMaybe<Array<AssetCreateInput>>;
  /** Connect multiple existing Asset documents */
  connect?: InputMaybe<Array<AssetConnectInput>>;
  /** Override currently-connected documents with multiple existing Asset documents */
  set?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Update multiple Asset documents */
  update?: InputMaybe<Array<AssetUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Asset documents */
  upsert?: InputMaybe<Array<AssetUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple Asset documents */
  disconnect?: InputMaybe<Array<AssetWhereUniqueInput>>;
  /** Delete multiple Asset documents */
  delete?: InputMaybe<Array<AssetWhereUniqueInput>>;
};

export type AssetUpdateManyInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** alt input for default locale (en) */
  alt?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<AssetUpdateManyLocalizationsInput>;
};

export type AssetUpdateManyLocalizationDataInput = {
  fileName?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
};

export type AssetUpdateManyLocalizationInput = {
  data: AssetUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type AssetUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<AssetUpdateManyLocalizationInput>>;
};

export type AssetUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: AssetWhereInput;
  /** Update many input */
  data: AssetUpdateManyInput;
};

export type AssetUpdateOneInlineInput = {
  /** Create and connect one Asset document */
  create?: InputMaybe<AssetCreateInput>;
  /** Update single Asset document */
  update?: InputMaybe<AssetUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Asset document */
  upsert?: InputMaybe<AssetUpsertWithNestedWhereUniqueInput>;
  /** Connect existing Asset document */
  connect?: InputMaybe<AssetWhereUniqueInput>;
  /** Disconnect currently connected Asset document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected Asset document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type AssetUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: AssetWhereUniqueInput;
  /** Document to update */
  data: AssetUpdateInput;
};

export type AssetUpsertInput = {
  /** Create document if it didn't exist */
  create: AssetCreateInput;
  /** Update document if it exists */
  update: AssetUpdateInput;
};

export type AssetUpsertLocalizationInput = {
  update: AssetUpdateLocalizationDataInput;
  create: AssetCreateLocalizationDataInput;
  locale: Locale;
};

export type AssetUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: AssetWhereUniqueInput;
  /** Upsert data */
  data: AssetUpsertInput;
};

/** Identifies documents */
export type AssetWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<AssetWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<AssetWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  handle?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  handle_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  handle_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  handle_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  handle_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  handle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  handle_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  handle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  handle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  handle_not_ends_with?: InputMaybe<Scalars['String']>;
  fileName?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  fileName_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fileName_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  fileName_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  fileName_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  fileName_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  fileName_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  fileName_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  fileName_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  fileName_not_ends_with?: InputMaybe<Scalars['String']>;
  height?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  height_not?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  height_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  height_not_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  height_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  height_lte?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  height_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  height_gte?: InputMaybe<Scalars['Float']>;
  width?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  width_not?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  width_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  width_not_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  width_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  width_lte?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  width_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  width_gte?: InputMaybe<Scalars['Float']>;
  size?: InputMaybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  size_not?: InputMaybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  size_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  size_not_in?: InputMaybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  size_lt?: InputMaybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  size_lte?: InputMaybe<Scalars['Float']>;
  /** All values greater than the given value. */
  size_gt?: InputMaybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  size_gte?: InputMaybe<Scalars['Float']>;
  mimeType?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  mimeType_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mimeType_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  mimeType_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  mimeType_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  mimeType_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  mimeType_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  mimeType_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  mimeType_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  mimeType_not_ends_with?: InputMaybe<Scalars['String']>;
  alt?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  alt_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  alt_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  alt_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  alt_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  alt_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  alt_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  alt_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  alt_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  alt_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  assetRowHeroBanner_every?: InputMaybe<RowHeroBannerWhereInput>;
  assetRowHeroBanner_some?: InputMaybe<RowHeroBannerWhereInput>;
  assetRowHeroBanner_none?: InputMaybe<RowHeroBannerWhereInput>;
  rowSpecialBannerAsset_every?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBannerAsset_some?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBannerAsset_none?: InputMaybe<RowSpecialBannerWhereInput>;
  assetPage_every?: InputMaybe<PageWhereInput>;
  assetPage_some?: InputMaybe<PageWhereInput>;
  assetPage_none?: InputMaybe<PageWhereInput>;
  assetPageLink_every?: InputMaybe<PageLinkWhereInput>;
  assetPageLink_some?: InputMaybe<PageLinkWhereInput>;
  assetPageLink_none?: InputMaybe<PageLinkWhereInput>;
  assetRowProduct_every?: InputMaybe<RowProductWhereInput>;
  assetRowProduct_some?: InputMaybe<RowProductWhereInput>;
  assetRowProduct_none?: InputMaybe<RowProductWhereInput>;
  imageBanner_every?: InputMaybe<BannerWhereInput>;
  imageBanner_some?: InputMaybe<BannerWhereInput>;
  imageBanner_none?: InputMaybe<BannerWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

/** References Asset record uniquely */
export type AssetWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Banner = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Banner>;
  /** Get the document in other stages */
  documentInStages: Array<Banner>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  copy: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  image?: Maybe<Asset>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of Banner versions */
  history: Array<Version>;
};


export type BannerlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type BannerdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type BannercreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type BannerupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type BannerpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type BannercreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerimageArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerpagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type BannerhistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type BannerConnectInput = {
  /** Document to connect */
  where: BannerWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type BannerConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<BannerEdge>;
  aggregate: Aggregate;
};

export type BannerCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** copy input for default locale (en) */
  copy: Scalars['RichTextAST'];
  image?: InputMaybe<AssetCreateOneInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<BannerCreateLocalizationsInput>;
};

export type BannerCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  copy: Scalars['RichTextAST'];
};

export type BannerCreateLocalizationInput = {
  /** Localization input */
  data: BannerCreateLocalizationDataInput;
  locale: Locale;
};

export type BannerCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<BannerCreateLocalizationInput>>;
};

export type BannerCreateManyInlineInput = {
  /** Create and connect multiple existing Banner documents */
  create?: InputMaybe<Array<BannerCreateInput>>;
  /** Connect multiple existing Banner documents */
  connect?: InputMaybe<Array<BannerWhereUniqueInput>>;
};

export type BannerCreateOneInlineInput = {
  /** Create and connect one Banner document */
  create?: InputMaybe<BannerCreateInput>;
  /** Connect one existing Banner document */
  connect?: InputMaybe<BannerWhereUniqueInput>;
};

/** An edge in a connection. */
export type BannerEdge = {
  /** The item at the end of the edge. */
  node: Banner;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type BannerManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BannerWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  image?: InputMaybe<AssetWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type BannerOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type BannerUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** copy input for default locale (en) */
  copy?: InputMaybe<Scalars['RichTextAST']>;
  image?: InputMaybe<AssetUpdateOneInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<BannerUpdateLocalizationsInput>;
};

export type BannerUpdateLocalizationDataInput = {
  copy?: InputMaybe<Scalars['RichTextAST']>;
};

export type BannerUpdateLocalizationInput = {
  data: BannerUpdateLocalizationDataInput;
  locale: Locale;
};

export type BannerUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<BannerCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<BannerUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<BannerUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type BannerUpdateManyInlineInput = {
  /** Create and connect multiple Banner documents */
  create?: InputMaybe<Array<BannerCreateInput>>;
  /** Connect multiple existing Banner documents */
  connect?: InputMaybe<Array<BannerConnectInput>>;
  /** Override currently-connected documents with multiple existing Banner documents */
  set?: InputMaybe<Array<BannerWhereUniqueInput>>;
  /** Update multiple Banner documents */
  update?: InputMaybe<Array<BannerUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Banner documents */
  upsert?: InputMaybe<Array<BannerUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple Banner documents */
  disconnect?: InputMaybe<Array<BannerWhereUniqueInput>>;
  /** Delete multiple Banner documents */
  delete?: InputMaybe<Array<BannerWhereUniqueInput>>;
};

export type BannerUpdateManyInput = {
  /** copy input for default locale (en) */
  copy?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<BannerUpdateManyLocalizationsInput>;
};

export type BannerUpdateManyLocalizationDataInput = {
  copy?: InputMaybe<Scalars['RichTextAST']>;
};

export type BannerUpdateManyLocalizationInput = {
  data: BannerUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type BannerUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<BannerUpdateManyLocalizationInput>>;
};

export type BannerUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: BannerWhereInput;
  /** Update many input */
  data: BannerUpdateManyInput;
};

export type BannerUpdateOneInlineInput = {
  /** Create and connect one Banner document */
  create?: InputMaybe<BannerCreateInput>;
  /** Update single Banner document */
  update?: InputMaybe<BannerUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Banner document */
  upsert?: InputMaybe<BannerUpsertWithNestedWhereUniqueInput>;
  /** Connect existing Banner document */
  connect?: InputMaybe<BannerWhereUniqueInput>;
  /** Disconnect currently connected Banner document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected Banner document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type BannerUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: BannerWhereUniqueInput;
  /** Document to update */
  data: BannerUpdateInput;
};

export type BannerUpsertInput = {
  /** Create document if it didn't exist */
  create: BannerCreateInput;
  /** Update document if it exists */
  update: BannerUpdateInput;
};

export type BannerUpsertLocalizationInput = {
  update: BannerUpdateLocalizationDataInput;
  create: BannerCreateLocalizationDataInput;
  locale: Locale;
};

export type BannerUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: BannerWhereUniqueInput;
  /** Upsert data */
  data: BannerUpsertInput;
};

/** Identifies documents */
export type BannerWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<BannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<BannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<BannerWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  image?: InputMaybe<AssetWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References Banner record uniquely */
export type BannerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type BatchPayload = {
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long'];
};

/** Representing a color value comprising of HEX, RGBA and css color values */
export type Color = {
  hex: Scalars['Hex'];
  rgba: RGBA;
  css: Scalars['String'];
};

/** Accepts either HEX or RGBA color value. At least one of hex or rgba value should be passed. If both are passed RGBA is used. */
export type ColorInput = {
  hex?: InputMaybe<Scalars['Hex']>;
  rgba?: InputMaybe<RGBAInput>;
};

export type ConnectPositionInput = {
  /** Connect document after specified document */
  after?: InputMaybe<Scalars['ID']>;
  /** Connect document before specified document */
  before?: InputMaybe<Scalars['ID']>;
  /** Connect document at first position */
  start?: InputMaybe<Scalars['Boolean']>;
  /** Connect document at last position */
  end?: InputMaybe<Scalars['Boolean']>;
};

export type DocumentFileTypes =
  | 'jpg'
  | 'odp'
  | 'ods'
  | 'odt'
  | 'png'
  | 'svg'
  | 'txt'
  | 'webp'
  | 'docx'
  | 'pdf'
  | 'html'
  | 'doc'
  | 'xlsx'
  | 'xls'
  | 'pptx'
  | 'ppt';

export type DocumentOutputInput = {
  /**
   * Transforms a document into a desired file type.
   * See this matrix for format support:
   *
   * PDF:	jpg, odp, ods, odt, png, svg, txt, and webp
   * DOC:	docx, html, jpg, odt, pdf, png, svg, txt, and webp
   * DOCX:	doc, html, jpg, odt, pdf, png, svg, txt, and webp
   * ODT:	doc, docx, html, jpg, pdf, png, svg, txt, and webp
   * XLS:	jpg, pdf, ods, png, svg, xlsx, and webp
   * XLSX:	jpg, pdf, ods, png, svg, xls, and webp
   * ODS:	jpg, pdf, png, xls, svg, xlsx, and webp
   * PPT:	jpg, odp, pdf, png, svg, pptx, and webp
   * PPTX:	jpg, odp, pdf, png, svg, ppt, and webp
   * ODP:	jpg, pdf, png, ppt, svg, pptx, and webp
   * BMP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * GIF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * JPG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * PNG:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * WEBP:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * TIFF:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * AI:	    jpg, odp, ods, odt, pdf, png, svg, and webp
   * PSD:	jpg, odp, ods, odt, pdf, png, svg, and webp
   * SVG:	jpg, odp, ods, odt, pdf, png, and webp
   * HTML:	jpg, odt, pdf, svg, txt, and webp
   * TXT:	jpg, html, odt, pdf, svg, and webp
   */
  format?: InputMaybe<DocumentFileTypes>;
};

/** Transformations for Documents */
export type DocumentTransformationInput = {
  /** Changes the output for the file. */
  output?: InputMaybe<DocumentOutputInput>;
};

export type DocumentVersion = {
  id: Scalars['ID'];
  stage: Stage;
  revision: Scalars['Int'];
  createdAt: Scalars['DateTime'];
  data?: Maybe<Scalars['Json']>;
};

export type Footer = Node & {
  /** System stage field */
  stage: Stage;
  /** Get the document in other stages */
  documentInStages: Array<Footer>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  copyright?: Maybe<Scalars['String']>;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  socialLinks: Array<PageLink>;
  legalLinks: Array<PageLink>;
  scheduledIn: Array<ScheduledOperation>;
  /** List of Footer versions */
  history: Array<Version>;
};


export type FooterdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type FootercreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type FootersocialLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterlegalLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type FooterhistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type FooterConnectInput = {
  /** Document to connect */
  where: FooterWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type FooterConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<FooterEdge>;
  aggregate: Aggregate;
};

export type FooterCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  copyright?: InputMaybe<Scalars['String']>;
  socialLinks?: InputMaybe<PageLinkCreateManyInlineInput>;
  legalLinks?: InputMaybe<PageLinkCreateManyInlineInput>;
};

export type FooterCreateManyInlineInput = {
  /** Create and connect multiple existing Footer documents */
  create?: InputMaybe<Array<FooterCreateInput>>;
  /** Connect multiple existing Footer documents */
  connect?: InputMaybe<Array<FooterWhereUniqueInput>>;
};

export type FooterCreateOneInlineInput = {
  /** Create and connect one Footer document */
  create?: InputMaybe<FooterCreateInput>;
  /** Connect one existing Footer document */
  connect?: InputMaybe<FooterWhereUniqueInput>;
};

/** An edge in a connection. */
export type FooterEdge = {
  /** The item at the end of the edge. */
  node: Footer;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type FooterManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  copyright?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  copyright_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  copyright_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  copyright_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  copyright_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  copyright_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  copyright_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  copyright_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  copyright_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  copyright_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  socialLinks_every?: InputMaybe<PageLinkWhereInput>;
  socialLinks_some?: InputMaybe<PageLinkWhereInput>;
  socialLinks_none?: InputMaybe<PageLinkWhereInput>;
  legalLinks_every?: InputMaybe<PageLinkWhereInput>;
  legalLinks_some?: InputMaybe<PageLinkWhereInput>;
  legalLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

export type FooterOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'copyright_ASC'
  | 'copyright_DESC';

export type FooterUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  copyright?: InputMaybe<Scalars['String']>;
  socialLinks?: InputMaybe<PageLinkUpdateManyInlineInput>;
  legalLinks?: InputMaybe<PageLinkUpdateManyInlineInput>;
};

export type FooterUpdateManyInlineInput = {
  /** Create and connect multiple Footer documents */
  create?: InputMaybe<Array<FooterCreateInput>>;
  /** Connect multiple existing Footer documents */
  connect?: InputMaybe<Array<FooterConnectInput>>;
  /** Override currently-connected documents with multiple existing Footer documents */
  set?: InputMaybe<Array<FooterWhereUniqueInput>>;
  /** Update multiple Footer documents */
  update?: InputMaybe<Array<FooterUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Footer documents */
  upsert?: InputMaybe<Array<FooterUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple Footer documents */
  disconnect?: InputMaybe<Array<FooterWhereUniqueInput>>;
  /** Delete multiple Footer documents */
  delete?: InputMaybe<Array<FooterWhereUniqueInput>>;
};

export type FooterUpdateManyInput = {
  copyright?: InputMaybe<Scalars['String']>;
};

export type FooterUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: FooterWhereInput;
  /** Update many input */
  data: FooterUpdateManyInput;
};

export type FooterUpdateOneInlineInput = {
  /** Create and connect one Footer document */
  create?: InputMaybe<FooterCreateInput>;
  /** Update single Footer document */
  update?: InputMaybe<FooterUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Footer document */
  upsert?: InputMaybe<FooterUpsertWithNestedWhereUniqueInput>;
  /** Connect existing Footer document */
  connect?: InputMaybe<FooterWhereUniqueInput>;
  /** Disconnect currently connected Footer document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected Footer document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type FooterUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: FooterWhereUniqueInput;
  /** Document to update */
  data: FooterUpdateInput;
};

export type FooterUpsertInput = {
  /** Create document if it didn't exist */
  create: FooterCreateInput;
  /** Update document if it exists */
  update: FooterUpdateInput;
};

export type FooterUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: FooterWhereUniqueInput;
  /** Upsert data */
  data: FooterUpsertInput;
};

/** Identifies documents */
export type FooterWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<FooterWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<FooterWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<FooterWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  copyright?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  copyright_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  copyright_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  copyright_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  copyright_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  copyright_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  copyright_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  copyright_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  copyright_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  copyright_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  socialLinks_every?: InputMaybe<PageLinkWhereInput>;
  socialLinks_some?: InputMaybe<PageLinkWhereInput>;
  socialLinks_none?: InputMaybe<PageLinkWhereInput>;
  legalLinks_every?: InputMaybe<PageLinkWhereInput>;
  legalLinks_some?: InputMaybe<PageLinkWhereInput>;
  legalLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

/** References Footer record uniquely */
export type FooterWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type ImageFit =
  /** Resizes the image to fit within the specified parameters without distorting, cropping, or changing the aspect ratio. */
  | 'clip'
  /** Resizes the image to fit the specified parameters exactly by removing any parts of the image that don't fit within the boundaries. */
  | 'crop'
  /** Resizes the image to fit the specified parameters exactly by scaling the image to the desired size. The aspect ratio of the image is not respected and the image can be distorted using this method. */
  | 'scale'
  /** Resizes the image to fit within the parameters, but as opposed to 'fit:clip' will not scale the image if the image is smaller than the output size. */
  | 'max';

export type ImageResizeInput = {
  /** The width in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  width?: InputMaybe<Scalars['Int']>;
  /** The height in pixels to resize the image to. The value must be an integer from 1 to 10000. */
  height?: InputMaybe<Scalars['Int']>;
  /** The default value for the fit parameter is fit:clip. */
  fit?: InputMaybe<ImageFit>;
};

/** Transformations for Images */
export type ImageTransformationInput = {
  /** Resizes the image */
  resize?: InputMaybe<ImageResizeInput>;
};

/** Locale system enumeration */
export type Locale =
  /** System locale */
  | 'en';

/** Representing a geolocation point with latitude and longitude */
export type Location = {
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
  distance: Scalars['Float'];
};


/** Representing a geolocation point with latitude and longitude */
export type LocationdistanceArgs = {
  from: LocationInput;
};

/** Input for a geolocation point with latitude and longitude */
export type LocationInput = {
  latitude: Scalars['Float'];
  longitude: Scalars['Float'];
};

export type MetaRobots =
  | 'INDEX_FOLLOW'
  | 'INDEX_NOFOLLOW'
  | 'NOINDEX_FOLLOW'
  | 'NOINDEX_NOFOLLOW';

export type Mutation = {};

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID'];
  /** The Stage of an object */
  stage: Stage;
};

export type Page = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<Page>;
  /** Get the document in other stages */
  documentInStages: Array<Page>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  url: Scalars['String'];
  title?: Maybe<Scalars['String']>;
  metaTitle: Scalars['String'];
  metaDescription: Scalars['String'];
  date?: Maybe<Scalars['DateTime']>;
  author?: Maybe<Scalars['String']>;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** 9:6 for general usage */
  asset?: Maybe<Asset>;
  relatedPages: Array<Page>;
  rowButtonLinkLists: Array<RowButtonLinkList>;
  childPages: Array<Page>;
  metaRobots: MetaRobots;
  scheduledIn: Array<ScheduledOperation>;
  content: Array<PageContent>;
  /** List of Page versions */
  history: Array<Version>;
};


export type PagelocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type PagedocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type PagecreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PagepublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PagecreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PagepublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageassetArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PagerelatedPagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PagerowButtonLinkListsArgs = {
  where?: InputMaybe<RowButtonLinkListWhereInput>;
  orderBy?: InputMaybe<RowButtonLinkListOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PagechildPagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PagescheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PagecontentArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PagehistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type PageConnectInput = {
  /** Document to connect */
  where: PageWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type PageConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<PageEdge>;
  aggregate: Aggregate;
};

export type PageContent = Banner | RowBlogContent | RowButtonLinkList | RowColumnOne | RowColumnThree | RowColumnTwo | RowContentLinks | RowHeroBanner | RowProduct | RowQuote | RowServiceOptions | RowSpecialBanner;

export type PageContentConnectInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerConnectInput>;
  RowColumnOne?: InputMaybe<RowColumnOneConnectInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoConnectInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeConnectInput>;
  RowQuote?: InputMaybe<RowQuoteConnectInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerConnectInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListConnectInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsConnectInput>;
  RowBlogContent?: InputMaybe<RowBlogContentConnectInput>;
  RowContentLinks?: InputMaybe<RowContentLinksConnectInput>;
  RowProduct?: InputMaybe<RowProductConnectInput>;
  Banner?: InputMaybe<BannerConnectInput>;
};

export type PageContentCreateInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerCreateInput>;
  RowColumnOne?: InputMaybe<RowColumnOneCreateInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoCreateInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeCreateInput>;
  RowQuote?: InputMaybe<RowQuoteCreateInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerCreateInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListCreateInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsCreateInput>;
  RowBlogContent?: InputMaybe<RowBlogContentCreateInput>;
  RowContentLinks?: InputMaybe<RowContentLinksCreateInput>;
  RowProduct?: InputMaybe<RowProductCreateInput>;
  Banner?: InputMaybe<BannerCreateInput>;
};

export type PageContentCreateManyInlineInput = {
  /** Create and connect multiple existing PageContent documents */
  create?: InputMaybe<Array<PageContentCreateInput>>;
  /** Connect multiple existing PageContent documents */
  connect?: InputMaybe<Array<PageContentWhereUniqueInput>>;
};

export type PageContentCreateOneInlineInput = {
  /** Create and connect one PageContent document */
  create?: InputMaybe<PageContentCreateInput>;
  /** Connect one existing PageContent document */
  connect?: InputMaybe<PageContentWhereUniqueInput>;
};

export type PageContentUpdateInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerUpdateInput>;
  RowColumnOne?: InputMaybe<RowColumnOneUpdateInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoUpdateInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeUpdateInput>;
  RowQuote?: InputMaybe<RowQuoteUpdateInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerUpdateInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListUpdateInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsUpdateInput>;
  RowBlogContent?: InputMaybe<RowBlogContentUpdateInput>;
  RowContentLinks?: InputMaybe<RowContentLinksUpdateInput>;
  RowProduct?: InputMaybe<RowProductUpdateInput>;
  Banner?: InputMaybe<BannerUpdateInput>;
};

export type PageContentUpdateManyInlineInput = {
  /** Create and connect multiple PageContent documents */
  create?: InputMaybe<Array<PageContentCreateInput>>;
  /** Connect multiple existing PageContent documents */
  connect?: InputMaybe<Array<PageContentConnectInput>>;
  /** Override currently-connected documents with multiple existing PageContent documents */
  set?: InputMaybe<Array<PageContentWhereUniqueInput>>;
  /** Update multiple PageContent documents */
  update?: InputMaybe<Array<PageContentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageContent documents */
  upsert?: InputMaybe<Array<PageContentUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple PageContent documents */
  disconnect?: InputMaybe<Array<PageContentWhereUniqueInput>>;
  /** Delete multiple PageContent documents */
  delete?: InputMaybe<Array<PageContentWhereUniqueInput>>;
};

export type PageContentUpdateManyWithNestedWhereInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerUpdateManyWithNestedWhereInput>;
  RowColumnOne?: InputMaybe<RowColumnOneUpdateManyWithNestedWhereInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoUpdateManyWithNestedWhereInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeUpdateManyWithNestedWhereInput>;
  RowQuote?: InputMaybe<RowQuoteUpdateManyWithNestedWhereInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerUpdateManyWithNestedWhereInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListUpdateManyWithNestedWhereInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsUpdateManyWithNestedWhereInput>;
  RowBlogContent?: InputMaybe<RowBlogContentUpdateManyWithNestedWhereInput>;
  RowContentLinks?: InputMaybe<RowContentLinksUpdateManyWithNestedWhereInput>;
  RowProduct?: InputMaybe<RowProductUpdateManyWithNestedWhereInput>;
  Banner?: InputMaybe<BannerUpdateManyWithNestedWhereInput>;
};

export type PageContentUpdateOneInlineInput = {
  /** Create and connect one PageContent document */
  create?: InputMaybe<PageContentCreateInput>;
  /** Update single PageContent document */
  update?: InputMaybe<PageContentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageContent document */
  upsert?: InputMaybe<PageContentUpsertWithNestedWhereUniqueInput>;
  /** Connect existing PageContent document */
  connect?: InputMaybe<PageContentWhereUniqueInput>;
  /** Disconnect currently connected PageContent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected PageContent document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type PageContentUpdateWithNestedWhereUniqueInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerUpdateWithNestedWhereUniqueInput>;
  RowColumnOne?: InputMaybe<RowColumnOneUpdateWithNestedWhereUniqueInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>;
  RowQuote?: InputMaybe<RowQuoteUpdateWithNestedWhereUniqueInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerUpdateWithNestedWhereUniqueInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListUpdateWithNestedWhereUniqueInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsUpdateWithNestedWhereUniqueInput>;
  RowBlogContent?: InputMaybe<RowBlogContentUpdateWithNestedWhereUniqueInput>;
  RowContentLinks?: InputMaybe<RowContentLinksUpdateWithNestedWhereUniqueInput>;
  RowProduct?: InputMaybe<RowProductUpdateWithNestedWhereUniqueInput>;
  Banner?: InputMaybe<BannerUpdateWithNestedWhereUniqueInput>;
};

export type PageContentUpsertWithNestedWhereUniqueInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerUpsertWithNestedWhereUniqueInput>;
  RowColumnOne?: InputMaybe<RowColumnOneUpsertWithNestedWhereUniqueInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>;
  RowQuote?: InputMaybe<RowQuoteUpsertWithNestedWhereUniqueInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerUpsertWithNestedWhereUniqueInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListUpsertWithNestedWhereUniqueInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsUpsertWithNestedWhereUniqueInput>;
  RowBlogContent?: InputMaybe<RowBlogContentUpsertWithNestedWhereUniqueInput>;
  RowContentLinks?: InputMaybe<RowContentLinksUpsertWithNestedWhereUniqueInput>;
  RowProduct?: InputMaybe<RowProductUpsertWithNestedWhereUniqueInput>;
  Banner?: InputMaybe<BannerUpsertWithNestedWhereUniqueInput>;
};

export type PageContentWhereInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerWhereInput>;
  RowColumnOne?: InputMaybe<RowColumnOneWhereInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoWhereInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeWhereInput>;
  RowQuote?: InputMaybe<RowQuoteWhereInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerWhereInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListWhereInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsWhereInput>;
  RowBlogContent?: InputMaybe<RowBlogContentWhereInput>;
  RowContentLinks?: InputMaybe<RowContentLinksWhereInput>;
  RowProduct?: InputMaybe<RowProductWhereInput>;
  Banner?: InputMaybe<BannerWhereInput>;
};

export type PageContentWhereUniqueInput = {
  RowSpecialBanner?: InputMaybe<RowSpecialBannerWhereUniqueInput>;
  RowColumnOne?: InputMaybe<RowColumnOneWhereUniqueInput>;
  RowColumnTwo?: InputMaybe<RowColumnTwoWhereUniqueInput>;
  RowColumnThree?: InputMaybe<RowColumnThreeWhereUniqueInput>;
  RowQuote?: InputMaybe<RowQuoteWhereUniqueInput>;
  RowHeroBanner?: InputMaybe<RowHeroBannerWhereUniqueInput>;
  RowButtonLinkList?: InputMaybe<RowButtonLinkListWhereUniqueInput>;
  RowServiceOptions?: InputMaybe<RowServiceOptionsWhereUniqueInput>;
  RowBlogContent?: InputMaybe<RowBlogContentWhereUniqueInput>;
  RowContentLinks?: InputMaybe<RowContentLinksWhereUniqueInput>;
  RowProduct?: InputMaybe<RowProductWhereUniqueInput>;
  Banner?: InputMaybe<BannerWhereUniqueInput>;
};

export type PageCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** url input for default locale (en) */
  url: Scalars['String'];
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** metaTitle input for default locale (en) */
  metaTitle: Scalars['String'];
  /** metaDescription input for default locale (en) */
  metaDescription: Scalars['String'];
  date?: InputMaybe<Scalars['DateTime']>;
  /** author input for default locale (en) */
  author?: InputMaybe<Scalars['String']>;
  asset?: InputMaybe<AssetCreateOneInlineInput>;
  relatedPages?: InputMaybe<PageCreateManyInlineInput>;
  rowButtonLinkLists?: InputMaybe<RowButtonLinkListCreateManyInlineInput>;
  childPages?: InputMaybe<PageCreateManyInlineInput>;
  /** metaRobots input for default locale (en) */
  metaRobots: MetaRobots;
  content?: InputMaybe<PageContentCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<PageCreateLocalizationsInput>;
};

export type PageCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  url: Scalars['String'];
  title?: InputMaybe<Scalars['String']>;
  metaTitle: Scalars['String'];
  metaDescription: Scalars['String'];
  author?: InputMaybe<Scalars['String']>;
  metaRobots: MetaRobots;
};

export type PageCreateLocalizationInput = {
  /** Localization input */
  data: PageCreateLocalizationDataInput;
  locale: Locale;
};

export type PageCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<PageCreateLocalizationInput>>;
};

export type PageCreateManyInlineInput = {
  /** Create and connect multiple existing Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageWhereUniqueInput>>;
};

export type PageCreateOneInlineInput = {
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
  /** Connect one existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
};

/** An edge in a connection. */
export type PageEdge = {
  /** The item at the end of the edge. */
  node: Page;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Information about pagination in a connection. */
export type PageInfo = {
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
  /** Number of items in the current page. */
  pageSize?: Maybe<Scalars['Int']>;
};

export type PageLink = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<PageLink>;
  /** Get the document in other stages */
  documentInStages: Array<PageLink>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  title: Scalars['String'];
  description?: Maybe<RichText>;
  url: Scalars['String'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  rowHeroBanners: Array<RowHeroBanner>;
  rowSpecialBanners: Array<RowSpecialBanner>;
  footerSocialLinks: Array<Footer>;
  footerLegalLinks: Array<Footer>;
  rowServiceOptionsMultiple: Array<RowServiceOptions>;
  rowContentLinks?: Maybe<RowContentLinks>;
  asset?: Maybe<Asset>;
  uspsMultiple: Array<Usps>;
  rowProductMultiple: Array<RowProduct>;
  scheduledIn: Array<ScheduledOperation>;
  /** List of PageLink versions */
  history: Array<Version>;
};


export type PageLinklocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type PageLinkdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type PageLinkcreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageLinkupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageLinkpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type PageLinkcreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkrowHeroBannersArgs = {
  where?: InputMaybe<RowHeroBannerWhereInput>;
  orderBy?: InputMaybe<RowHeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkrowSpecialBannersArgs = {
  where?: InputMaybe<RowSpecialBannerWhereInput>;
  orderBy?: InputMaybe<RowSpecialBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkfooterSocialLinksArgs = {
  where?: InputMaybe<FooterWhereInput>;
  orderBy?: InputMaybe<FooterOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkfooterLegalLinksArgs = {
  where?: InputMaybe<FooterWhereInput>;
  orderBy?: InputMaybe<FooterOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkrowServiceOptionsMultipleArgs = {
  where?: InputMaybe<RowServiceOptionsWhereInput>;
  orderBy?: InputMaybe<RowServiceOptionsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkrowContentLinksArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkassetArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkuspsMultipleArgs = {
  where?: InputMaybe<UspsWhereInput>;
  orderBy?: InputMaybe<UspsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkrowProductMultipleArgs = {
  where?: InputMaybe<RowProductWhereInput>;
  orderBy?: InputMaybe<RowProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type PageLinkhistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type PageLinkConnectInput = {
  /** Document to connect */
  where: PageLinkWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type PageLinkConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<PageLinkEdge>;
  aggregate: Aggregate;
};

export type PageLinkCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** title input for default locale (en) */
  title: Scalars['String'];
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  /** url input for default locale (en) */
  url: Scalars['String'];
  rowHeroBanners?: InputMaybe<RowHeroBannerCreateManyInlineInput>;
  rowSpecialBanners?: InputMaybe<RowSpecialBannerCreateManyInlineInput>;
  footerSocialLinks?: InputMaybe<FooterCreateManyInlineInput>;
  footerLegalLinks?: InputMaybe<FooterCreateManyInlineInput>;
  rowServiceOptionsMultiple?: InputMaybe<RowServiceOptionsCreateManyInlineInput>;
  rowContentLinks?: InputMaybe<RowContentLinksCreateOneInlineInput>;
  asset?: InputMaybe<AssetCreateOneInlineInput>;
  uspsMultiple?: InputMaybe<UspsCreateManyInlineInput>;
  rowProductMultiple?: InputMaybe<RowProductCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<PageLinkCreateLocalizationsInput>;
};

export type PageLinkCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  title: Scalars['String'];
  description?: InputMaybe<Scalars['RichTextAST']>;
  url: Scalars['String'];
};

export type PageLinkCreateLocalizationInput = {
  /** Localization input */
  data: PageLinkCreateLocalizationDataInput;
  locale: Locale;
};

export type PageLinkCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<PageLinkCreateLocalizationInput>>;
};

export type PageLinkCreateManyInlineInput = {
  /** Create and connect multiple existing PageLink documents */
  create?: InputMaybe<Array<PageLinkCreateInput>>;
  /** Connect multiple existing PageLink documents */
  connect?: InputMaybe<Array<PageLinkWhereUniqueInput>>;
};

export type PageLinkCreateOneInlineInput = {
  /** Create and connect one PageLink document */
  create?: InputMaybe<PageLinkCreateInput>;
  /** Connect one existing PageLink document */
  connect?: InputMaybe<PageLinkWhereUniqueInput>;
};

/** An edge in a connection. */
export type PageLinkEdge = {
  /** The item at the end of the edge. */
  node: PageLink;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type PageLinkManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageLinkWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  rowHeroBanners_every?: InputMaybe<RowHeroBannerWhereInput>;
  rowHeroBanners_some?: InputMaybe<RowHeroBannerWhereInput>;
  rowHeroBanners_none?: InputMaybe<RowHeroBannerWhereInput>;
  rowSpecialBanners_every?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBanners_some?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBanners_none?: InputMaybe<RowSpecialBannerWhereInput>;
  footerSocialLinks_every?: InputMaybe<FooterWhereInput>;
  footerSocialLinks_some?: InputMaybe<FooterWhereInput>;
  footerSocialLinks_none?: InputMaybe<FooterWhereInput>;
  footerLegalLinks_every?: InputMaybe<FooterWhereInput>;
  footerLegalLinks_some?: InputMaybe<FooterWhereInput>;
  footerLegalLinks_none?: InputMaybe<FooterWhereInput>;
  rowServiceOptionsMultiple_every?: InputMaybe<RowServiceOptionsWhereInput>;
  rowServiceOptionsMultiple_some?: InputMaybe<RowServiceOptionsWhereInput>;
  rowServiceOptionsMultiple_none?: InputMaybe<RowServiceOptionsWhereInput>;
  rowContentLinks?: InputMaybe<RowContentLinksWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  uspsMultiple_every?: InputMaybe<UspsWhereInput>;
  uspsMultiple_some?: InputMaybe<UspsWhereInput>;
  uspsMultiple_none?: InputMaybe<UspsWhereInput>;
  rowProductMultiple_every?: InputMaybe<RowProductWhereInput>;
  rowProductMultiple_some?: InputMaybe<RowProductWhereInput>;
  rowProductMultiple_none?: InputMaybe<RowProductWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

export type PageLinkOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'url_ASC'
  | 'url_DESC';

export type PageLinkUpdateInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  /** url input for default locale (en) */
  url?: InputMaybe<Scalars['String']>;
  rowHeroBanners?: InputMaybe<RowHeroBannerUpdateManyInlineInput>;
  rowSpecialBanners?: InputMaybe<RowSpecialBannerUpdateManyInlineInput>;
  footerSocialLinks?: InputMaybe<FooterUpdateManyInlineInput>;
  footerLegalLinks?: InputMaybe<FooterUpdateManyInlineInput>;
  rowServiceOptionsMultiple?: InputMaybe<RowServiceOptionsUpdateManyInlineInput>;
  rowContentLinks?: InputMaybe<RowContentLinksUpdateOneInlineInput>;
  asset?: InputMaybe<AssetUpdateOneInlineInput>;
  uspsMultiple?: InputMaybe<UspsUpdateManyInlineInput>;
  rowProductMultiple?: InputMaybe<RowProductUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<PageLinkUpdateLocalizationsInput>;
};

export type PageLinkUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  url?: InputMaybe<Scalars['String']>;
};

export type PageLinkUpdateLocalizationInput = {
  data: PageLinkUpdateLocalizationDataInput;
  locale: Locale;
};

export type PageLinkUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<PageLinkCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<PageLinkUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<PageLinkUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type PageLinkUpdateManyInlineInput = {
  /** Create and connect multiple PageLink documents */
  create?: InputMaybe<Array<PageLinkCreateInput>>;
  /** Connect multiple existing PageLink documents */
  connect?: InputMaybe<Array<PageLinkConnectInput>>;
  /** Override currently-connected documents with multiple existing PageLink documents */
  set?: InputMaybe<Array<PageLinkWhereUniqueInput>>;
  /** Update multiple PageLink documents */
  update?: InputMaybe<Array<PageLinkUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple PageLink documents */
  upsert?: InputMaybe<Array<PageLinkUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple PageLink documents */
  disconnect?: InputMaybe<Array<PageLinkWhereUniqueInput>>;
  /** Delete multiple PageLink documents */
  delete?: InputMaybe<Array<PageLinkWhereUniqueInput>>;
};

export type PageLinkUpdateManyInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** description input for default locale (en) */
  description?: InputMaybe<Scalars['RichTextAST']>;
  /** url input for default locale (en) */
  url?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<PageLinkUpdateManyLocalizationsInput>;
};

export type PageLinkUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['RichTextAST']>;
  url?: InputMaybe<Scalars['String']>;
};

export type PageLinkUpdateManyLocalizationInput = {
  data: PageLinkUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type PageLinkUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<PageLinkUpdateManyLocalizationInput>>;
};

export type PageLinkUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: PageLinkWhereInput;
  /** Update many input */
  data: PageLinkUpdateManyInput;
};

export type PageLinkUpdateOneInlineInput = {
  /** Create and connect one PageLink document */
  create?: InputMaybe<PageLinkCreateInput>;
  /** Update single PageLink document */
  update?: InputMaybe<PageLinkUpdateWithNestedWhereUniqueInput>;
  /** Upsert single PageLink document */
  upsert?: InputMaybe<PageLinkUpsertWithNestedWhereUniqueInput>;
  /** Connect existing PageLink document */
  connect?: InputMaybe<PageLinkWhereUniqueInput>;
  /** Disconnect currently connected PageLink document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected PageLink document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type PageLinkUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PageLinkWhereUniqueInput;
  /** Document to update */
  data: PageLinkUpdateInput;
};

export type PageLinkUpsertInput = {
  /** Create document if it didn't exist */
  create: PageLinkCreateInput;
  /** Update document if it exists */
  update: PageLinkUpdateInput;
};

export type PageLinkUpsertLocalizationInput = {
  update: PageLinkUpdateLocalizationDataInput;
  create: PageLinkCreateLocalizationDataInput;
  locale: Locale;
};

export type PageLinkUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PageLinkWhereUniqueInput;
  /** Upsert data */
  data: PageLinkUpsertInput;
};

/** Identifies documents */
export type PageLinkWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageLinkWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageLinkWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageLinkWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  rowHeroBanners_every?: InputMaybe<RowHeroBannerWhereInput>;
  rowHeroBanners_some?: InputMaybe<RowHeroBannerWhereInput>;
  rowHeroBanners_none?: InputMaybe<RowHeroBannerWhereInput>;
  rowSpecialBanners_every?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBanners_some?: InputMaybe<RowSpecialBannerWhereInput>;
  rowSpecialBanners_none?: InputMaybe<RowSpecialBannerWhereInput>;
  footerSocialLinks_every?: InputMaybe<FooterWhereInput>;
  footerSocialLinks_some?: InputMaybe<FooterWhereInput>;
  footerSocialLinks_none?: InputMaybe<FooterWhereInput>;
  footerLegalLinks_every?: InputMaybe<FooterWhereInput>;
  footerLegalLinks_some?: InputMaybe<FooterWhereInput>;
  footerLegalLinks_none?: InputMaybe<FooterWhereInput>;
  rowServiceOptionsMultiple_every?: InputMaybe<RowServiceOptionsWhereInput>;
  rowServiceOptionsMultiple_some?: InputMaybe<RowServiceOptionsWhereInput>;
  rowServiceOptionsMultiple_none?: InputMaybe<RowServiceOptionsWhereInput>;
  rowContentLinks?: InputMaybe<RowContentLinksWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  uspsMultiple_every?: InputMaybe<UspsWhereInput>;
  uspsMultiple_some?: InputMaybe<UspsWhereInput>;
  uspsMultiple_none?: InputMaybe<UspsWhereInput>;
  rowProductMultiple_every?: InputMaybe<RowProductWhereInput>;
  rowProductMultiple_some?: InputMaybe<RowProductWhereInput>;
  rowProductMultiple_none?: InputMaybe<RowProductWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

/** References PageLink record uniquely */
export type PageLinkWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Identifies documents */
export type PageManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  relatedPages_every?: InputMaybe<PageWhereInput>;
  relatedPages_some?: InputMaybe<PageWhereInput>;
  relatedPages_none?: InputMaybe<PageWhereInput>;
  rowButtonLinkLists_every?: InputMaybe<RowButtonLinkListWhereInput>;
  rowButtonLinkLists_some?: InputMaybe<RowButtonLinkListWhereInput>;
  rowButtonLinkLists_none?: InputMaybe<RowButtonLinkListWhereInput>;
  childPages_every?: InputMaybe<PageWhereInput>;
  childPages_some?: InputMaybe<PageWhereInput>;
  childPages_none?: InputMaybe<PageWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

export type PageOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'url_ASC'
  | 'url_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'metaTitle_ASC'
  | 'metaTitle_DESC'
  | 'metaDescription_ASC'
  | 'metaDescription_DESC'
  | 'date_ASC'
  | 'date_DESC'
  | 'author_ASC'
  | 'author_DESC'
  | 'metaRobots_ASC'
  | 'metaRobots_DESC';

export type PageUpdateInput = {
  /** url input for default locale (en) */
  url?: InputMaybe<Scalars['String']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** metaTitle input for default locale (en) */
  metaTitle?: InputMaybe<Scalars['String']>;
  /** metaDescription input for default locale (en) */
  metaDescription?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** author input for default locale (en) */
  author?: InputMaybe<Scalars['String']>;
  asset?: InputMaybe<AssetUpdateOneInlineInput>;
  relatedPages?: InputMaybe<PageUpdateManyInlineInput>;
  rowButtonLinkLists?: InputMaybe<RowButtonLinkListUpdateManyInlineInput>;
  childPages?: InputMaybe<PageUpdateManyInlineInput>;
  /** metaRobots input for default locale (en) */
  metaRobots?: InputMaybe<MetaRobots>;
  content?: InputMaybe<PageContentUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<PageUpdateLocalizationsInput>;
};

export type PageUpdateLocalizationDataInput = {
  url?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  metaTitle?: InputMaybe<Scalars['String']>;
  metaDescription?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  metaRobots?: InputMaybe<MetaRobots>;
};

export type PageUpdateLocalizationInput = {
  data: PageUpdateLocalizationDataInput;
  locale: Locale;
};

export type PageUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<PageCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<PageUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<PageUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type PageUpdateManyInlineInput = {
  /** Create and connect multiple Page documents */
  create?: InputMaybe<Array<PageCreateInput>>;
  /** Connect multiple existing Page documents */
  connect?: InputMaybe<Array<PageConnectInput>>;
  /** Override currently-connected documents with multiple existing Page documents */
  set?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Update multiple Page documents */
  update?: InputMaybe<Array<PageUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Page documents */
  upsert?: InputMaybe<Array<PageUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple Page documents */
  disconnect?: InputMaybe<Array<PageWhereUniqueInput>>;
  /** Delete multiple Page documents */
  delete?: InputMaybe<Array<PageWhereUniqueInput>>;
};

export type PageUpdateManyInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** metaTitle input for default locale (en) */
  metaTitle?: InputMaybe<Scalars['String']>;
  /** metaDescription input for default locale (en) */
  metaDescription?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** author input for default locale (en) */
  author?: InputMaybe<Scalars['String']>;
  /** metaRobots input for default locale (en) */
  metaRobots?: InputMaybe<MetaRobots>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<PageUpdateManyLocalizationsInput>;
};

export type PageUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
  metaTitle?: InputMaybe<Scalars['String']>;
  metaDescription?: InputMaybe<Scalars['String']>;
  author?: InputMaybe<Scalars['String']>;
  metaRobots?: InputMaybe<MetaRobots>;
};

export type PageUpdateManyLocalizationInput = {
  data: PageUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type PageUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<PageUpdateManyLocalizationInput>>;
};

export type PageUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: PageWhereInput;
  /** Update many input */
  data: PageUpdateManyInput;
};

export type PageUpdateOneInlineInput = {
  /** Create and connect one Page document */
  create?: InputMaybe<PageCreateInput>;
  /** Update single Page document */
  update?: InputMaybe<PageUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Page document */
  upsert?: InputMaybe<PageUpsertWithNestedWhereUniqueInput>;
  /** Connect existing Page document */
  connect?: InputMaybe<PageWhereUniqueInput>;
  /** Disconnect currently connected Page document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected Page document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type PageUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PageWhereUniqueInput;
  /** Document to update */
  data: PageUpdateInput;
};

export type PageUpsertInput = {
  /** Create document if it didn't exist */
  create: PageCreateInput;
  /** Update document if it exists */
  update: PageUpdateInput;
};

export type PageUpsertLocalizationInput = {
  update: PageUpdateLocalizationDataInput;
  create: PageCreateLocalizationDataInput;
  locale: Locale;
};

export type PageUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: PageWhereUniqueInput;
  /** Upsert data */
  data: PageUpsertInput;
};

/** Identifies documents */
export type PageWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<PageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<PageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<PageWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  url?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  url_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  url_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  url_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  url_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  url_not_ends_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  metaTitle?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  metaTitle_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaTitle_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  metaTitle_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  metaTitle_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaTitle_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaTitle_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  metaTitle_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaTitle_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaTitle_not_ends_with?: InputMaybe<Scalars['String']>;
  metaDescription?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  metaDescription_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  metaDescription_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  metaDescription_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  metaDescription_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  metaDescription_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  metaDescription_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  metaDescription_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  metaDescription_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  metaDescription_not_ends_with?: InputMaybe<Scalars['String']>;
  date?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: InputMaybe<Scalars['DateTime']>;
  author?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  author_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  author_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  author_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  author_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  author_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  author_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  author_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  author_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  author_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  relatedPages_every?: InputMaybe<PageWhereInput>;
  relatedPages_some?: InputMaybe<PageWhereInput>;
  relatedPages_none?: InputMaybe<PageWhereInput>;
  rowButtonLinkLists_every?: InputMaybe<RowButtonLinkListWhereInput>;
  rowButtonLinkLists_some?: InputMaybe<RowButtonLinkListWhereInput>;
  rowButtonLinkLists_none?: InputMaybe<RowButtonLinkListWhereInput>;
  childPages_every?: InputMaybe<PageWhereInput>;
  childPages_some?: InputMaybe<PageWhereInput>;
  childPages_none?: InputMaybe<PageWhereInput>;
  metaRobots?: InputMaybe<MetaRobots>;
  /** All values that are not equal to given value. */
  metaRobots_not?: InputMaybe<MetaRobots>;
  /** All values that are contained in given list. */
  metaRobots_in?: InputMaybe<Array<MetaRobots>>;
  /** All values that are not contained in given list. */
  metaRobots_not_in?: InputMaybe<Array<MetaRobots>>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

/** References Page record uniquely */
export type PageWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type PublishLocaleInput = {
  /** Locales to publish */
  locale: Locale;
  /** Stages to publish selected locales to */
  stages: Array<Stage>;
};

export type Query = {
  /** Fetches an object given its ID */
  node?: Maybe<Node>;
  /** Retrieve multiple rowServiceOptionsMultiple */
  rowServiceOptionsMultiple: Array<RowServiceOptions>;
  /** Retrieve a single rowServiceOptions */
  rowServiceOptions?: Maybe<RowServiceOptions>;
  /** Retrieve multiple rowServiceOptionsMultiple using the Relay connection interface */
  rowServiceOptionsMultipleConnection: RowServiceOptionsConnection;
  /** Retrieve document version */
  rowServiceOptionsVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pageLinks */
  pageLinks: Array<PageLink>;
  /** Retrieve a single pageLink */
  pageLink?: Maybe<PageLink>;
  /** Retrieve multiple pageLinks using the Relay connection interface */
  pageLinksConnection: PageLinkConnection;
  /** Retrieve document version */
  pageLinkVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple footers */
  footers: Array<Footer>;
  /** Retrieve a single footer */
  footer?: Maybe<Footer>;
  /** Retrieve multiple footers using the Relay connection interface */
  footersConnection: FooterConnection;
  /** Retrieve document version */
  footerVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowButtonLinkLists */
  rowButtonLinkLists: Array<RowButtonLinkList>;
  /** Retrieve a single rowButtonLinkList */
  rowButtonLinkList?: Maybe<RowButtonLinkList>;
  /** Retrieve multiple rowButtonLinkLists using the Relay connection interface */
  rowButtonLinkListsConnection: RowButtonLinkListConnection;
  /** Retrieve document version */
  rowButtonLinkListVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowQuotes */
  rowQuotes: Array<RowQuote>;
  /** Retrieve a single rowQuote */
  rowQuote?: Maybe<RowQuote>;
  /** Retrieve multiple rowQuotes using the Relay connection interface */
  rowQuotesConnection: RowQuoteConnection;
  /** Retrieve document version */
  rowQuoteVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowBlogContents */
  rowBlogContents: Array<RowBlogContent>;
  /** Retrieve a single rowBlogContent */
  rowBlogContent?: Maybe<RowBlogContent>;
  /** Retrieve multiple rowBlogContents using the Relay connection interface */
  rowBlogContentsConnection: RowBlogContentConnection;
  /** Retrieve document version */
  rowBlogContentVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple uspsMultiple */
  uspsMultiple: Array<Usps>;
  /** Retrieve a single usps */
  usps?: Maybe<Usps>;
  /** Retrieve multiple uspsMultiple using the Relay connection interface */
  uspsMultipleConnection: UspsConnection;
  /** Retrieve document version */
  uspsVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowContentLinksMultiple */
  rowContentLinksMultiple: Array<RowContentLinks>;
  /** Retrieve a single rowContentLinks */
  rowContentLinks?: Maybe<RowContentLinks>;
  /** Retrieve multiple rowContentLinksMultiple using the Relay connection interface */
  rowContentLinksMultipleConnection: RowContentLinksConnection;
  /** Retrieve document version */
  rowContentLinksVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowColumnOnes */
  rowColumnOnes: Array<RowColumnOne>;
  /** Retrieve a single rowColumnOne */
  rowColumnOne?: Maybe<RowColumnOne>;
  /** Retrieve multiple rowColumnOnes using the Relay connection interface */
  rowColumnOnesConnection: RowColumnOneConnection;
  /** Retrieve document version */
  rowColumnOneVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowColumnTwos */
  rowColumnTwos: Array<RowColumnTwo>;
  /** Retrieve a single rowColumnTwo */
  rowColumnTwo?: Maybe<RowColumnTwo>;
  /** Retrieve multiple rowColumnTwos using the Relay connection interface */
  rowColumnTwosConnection: RowColumnTwoConnection;
  /** Retrieve document version */
  rowColumnTwoVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowColumnThrees */
  rowColumnThrees: Array<RowColumnThree>;
  /** Retrieve a single rowColumnThree */
  rowColumnThree?: Maybe<RowColumnThree>;
  /** Retrieve multiple rowColumnThrees using the Relay connection interface */
  rowColumnThreesConnection: RowColumnThreeConnection;
  /** Retrieve document version */
  rowColumnThreeVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple pages */
  pages: Array<Page>;
  /** Retrieve a single page */
  page?: Maybe<Page>;
  /** Retrieve multiple pages using the Relay connection interface */
  pagesConnection: PageConnection;
  /** Retrieve document version */
  pageVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple assets */
  assets: Array<Asset>;
  /** Retrieve a single asset */
  asset?: Maybe<Asset>;
  /** Retrieve multiple assets using the Relay connection interface */
  assetsConnection: AssetConnection;
  /** Retrieve document version */
  assetVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple users */
  users: Array<User>;
  /** Retrieve a single user */
  user?: Maybe<User>;
  /** Retrieve multiple users using the Relay connection interface */
  usersConnection: UserConnection;
  /** Retrieve multiple rowSpecialBanners */
  rowSpecialBanners: Array<RowSpecialBanner>;
  /** Retrieve a single rowSpecialBanner */
  rowSpecialBanner?: Maybe<RowSpecialBanner>;
  /** Retrieve multiple rowSpecialBanners using the Relay connection interface */
  rowSpecialBannersConnection: RowSpecialBannerConnection;
  /** Retrieve document version */
  rowSpecialBannerVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowProductMultiple */
  rowProductMultiple: Array<RowProduct>;
  /** Retrieve a single rowProduct */
  rowProduct?: Maybe<RowProduct>;
  /** Retrieve multiple rowProductMultiple using the Relay connection interface */
  rowProductMultipleConnection: RowProductConnection;
  /** Retrieve document version */
  rowProductVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple rowHeroBanners */
  rowHeroBanners: Array<RowHeroBanner>;
  /** Retrieve a single rowHeroBanner */
  rowHeroBanner?: Maybe<RowHeroBanner>;
  /** Retrieve multiple rowHeroBanners using the Relay connection interface */
  rowHeroBannersConnection: RowHeroBannerConnection;
  /** Retrieve document version */
  rowHeroBannerVersion?: Maybe<DocumentVersion>;
  /** Retrieve multiple scheduledOperations */
  scheduledOperations: Array<ScheduledOperation>;
  /** Retrieve a single scheduledOperation */
  scheduledOperation?: Maybe<ScheduledOperation>;
  /** Retrieve multiple scheduledOperations using the Relay connection interface */
  scheduledOperationsConnection: ScheduledOperationConnection;
  /** Retrieve multiple scheduledReleases */
  scheduledReleases: Array<ScheduledRelease>;
  /** Retrieve a single scheduledRelease */
  scheduledRelease?: Maybe<ScheduledRelease>;
  /** Retrieve multiple scheduledReleases using the Relay connection interface */
  scheduledReleasesConnection: ScheduledReleaseConnection;
  /** Retrieve multiple banners */
  banners: Array<Banner>;
  /** Retrieve a single banner */
  banner?: Maybe<Banner>;
  /** Retrieve multiple banners using the Relay connection interface */
  bannersConnection: BannerConnection;
  /** Retrieve document version */
  bannerVersion?: Maybe<DocumentVersion>;
};


export type QuerynodeArgs = {
  id: Scalars['ID'];
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowServiceOptionsMultipleArgs = {
  where?: InputMaybe<RowServiceOptionsWhereInput>;
  orderBy?: InputMaybe<RowServiceOptionsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowServiceOptionsArgs = {
  where: RowServiceOptionsWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowServiceOptionsMultipleConnectionArgs = {
  where?: InputMaybe<RowServiceOptionsWhereInput>;
  orderBy?: InputMaybe<RowServiceOptionsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowServiceOptionsVersionArgs = {
  where: VersionWhereInput;
};


export type QuerypageLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerypageLinkArgs = {
  where: PageLinkWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerypageLinksConnectionArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerypageLinkVersionArgs = {
  where: VersionWhereInput;
};


export type QueryfootersArgs = {
  where?: InputMaybe<FooterWhereInput>;
  orderBy?: InputMaybe<FooterOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryfooterArgs = {
  where: FooterWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryfootersConnectionArgs = {
  where?: InputMaybe<FooterWhereInput>;
  orderBy?: InputMaybe<FooterOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryfooterVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowButtonLinkListsArgs = {
  where?: InputMaybe<RowButtonLinkListWhereInput>;
  orderBy?: InputMaybe<RowButtonLinkListOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowButtonLinkListArgs = {
  where: RowButtonLinkListWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowButtonLinkListsConnectionArgs = {
  where?: InputMaybe<RowButtonLinkListWhereInput>;
  orderBy?: InputMaybe<RowButtonLinkListOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowButtonLinkListVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowQuotesArgs = {
  where?: InputMaybe<RowQuoteWhereInput>;
  orderBy?: InputMaybe<RowQuoteOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowQuoteArgs = {
  where: RowQuoteWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowQuotesConnectionArgs = {
  where?: InputMaybe<RowQuoteWhereInput>;
  orderBy?: InputMaybe<RowQuoteOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowQuoteVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowBlogContentsArgs = {
  where?: InputMaybe<RowBlogContentWhereInput>;
  orderBy?: InputMaybe<RowBlogContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowBlogContentArgs = {
  where: RowBlogContentWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowBlogContentsConnectionArgs = {
  where?: InputMaybe<RowBlogContentWhereInput>;
  orderBy?: InputMaybe<RowBlogContentOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowBlogContentVersionArgs = {
  where: VersionWhereInput;
};


export type QueryuspsMultipleArgs = {
  where?: InputMaybe<UspsWhereInput>;
  orderBy?: InputMaybe<UspsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryuspsArgs = {
  where: UspsWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryuspsMultipleConnectionArgs = {
  where?: InputMaybe<UspsWhereInput>;
  orderBy?: InputMaybe<UspsOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryuspsVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowContentLinksMultipleArgs = {
  where?: InputMaybe<RowContentLinksWhereInput>;
  orderBy?: InputMaybe<RowContentLinksOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowContentLinksArgs = {
  where: RowContentLinksWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowContentLinksMultipleConnectionArgs = {
  where?: InputMaybe<RowContentLinksWhereInput>;
  orderBy?: InputMaybe<RowContentLinksOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowContentLinksVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowColumnOnesArgs = {
  where?: InputMaybe<RowColumnOneWhereInput>;
  orderBy?: InputMaybe<RowColumnOneOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnOneArgs = {
  where: RowColumnOneWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnOnesConnectionArgs = {
  where?: InputMaybe<RowColumnOneWhereInput>;
  orderBy?: InputMaybe<RowColumnOneOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnOneVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowColumnTwosArgs = {
  where?: InputMaybe<RowColumnTwoWhereInput>;
  orderBy?: InputMaybe<RowColumnTwoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnTwoArgs = {
  where: RowColumnTwoWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnTwosConnectionArgs = {
  where?: InputMaybe<RowColumnTwoWhereInput>;
  orderBy?: InputMaybe<RowColumnTwoOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnTwoVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowColumnThreesArgs = {
  where?: InputMaybe<RowColumnThreeWhereInput>;
  orderBy?: InputMaybe<RowColumnThreeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnThreeArgs = {
  where: RowColumnThreeWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnThreesConnectionArgs = {
  where?: InputMaybe<RowColumnThreeWhereInput>;
  orderBy?: InputMaybe<RowColumnThreeOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowColumnThreeVersionArgs = {
  where: VersionWhereInput;
};


export type QuerypagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerypageArgs = {
  where: PageWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerypagesConnectionArgs = {
  where?: InputMaybe<PageWhereInput>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerypageVersionArgs = {
  where: VersionWhereInput;
};


export type QueryassetsArgs = {
  where?: InputMaybe<AssetWhereInput>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryassetArgs = {
  where: AssetWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryassetsConnectionArgs = {
  where?: InputMaybe<AssetWhereInput>;
  orderBy?: InputMaybe<AssetOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryassetVersionArgs = {
  where: VersionWhereInput;
};


export type QueryusersArgs = {
  where?: InputMaybe<UserWhereInput>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryuserArgs = {
  where: UserWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryusersConnectionArgs = {
  where?: InputMaybe<UserWhereInput>;
  orderBy?: InputMaybe<UserOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowSpecialBannersArgs = {
  where?: InputMaybe<RowSpecialBannerWhereInput>;
  orderBy?: InputMaybe<RowSpecialBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowSpecialBannerArgs = {
  where: RowSpecialBannerWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowSpecialBannersConnectionArgs = {
  where?: InputMaybe<RowSpecialBannerWhereInput>;
  orderBy?: InputMaybe<RowSpecialBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowSpecialBannerVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowProductMultipleArgs = {
  where?: InputMaybe<RowProductWhereInput>;
  orderBy?: InputMaybe<RowProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowProductArgs = {
  where: RowProductWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowProductMultipleConnectionArgs = {
  where?: InputMaybe<RowProductWhereInput>;
  orderBy?: InputMaybe<RowProductOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowProductVersionArgs = {
  where: VersionWhereInput;
};


export type QueryrowHeroBannersArgs = {
  where?: InputMaybe<RowHeroBannerWhereInput>;
  orderBy?: InputMaybe<RowHeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowHeroBannerArgs = {
  where: RowHeroBannerWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowHeroBannersConnectionArgs = {
  where?: InputMaybe<RowHeroBannerWhereInput>;
  orderBy?: InputMaybe<RowHeroBannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryrowHeroBannerVersionArgs = {
  where: VersionWhereInput;
};


export type QueryscheduledOperationsArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryscheduledOperationArgs = {
  where: ScheduledOperationWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryscheduledOperationsConnectionArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryscheduledReleasesArgs = {
  where?: InputMaybe<ScheduledReleaseWhereInput>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryscheduledReleaseArgs = {
  where: ScheduledReleaseWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QueryscheduledReleasesConnectionArgs = {
  where?: InputMaybe<ScheduledReleaseWhereInput>;
  orderBy?: InputMaybe<ScheduledReleaseOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerybannersArgs = {
  where?: InputMaybe<BannerWhereInput>;
  orderBy?: InputMaybe<BannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerybannerArgs = {
  where: BannerWhereUniqueInput;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerybannersConnectionArgs = {
  where?: InputMaybe<BannerWhereInput>;
  orderBy?: InputMaybe<BannerOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  stage?: Stage;
  locales?: Array<Locale>;
};


export type QuerybannerVersionArgs = {
  where: VersionWhereInput;
};

/** Representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RGBA = {
  r: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  b: Scalars['RGBAHue'];
  a: Scalars['RGBATransparency'];
};

/** Input type representing a RGBA color value: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb()_and_rgba() */
export type RGBAInput = {
  r: Scalars['RGBAHue'];
  g: Scalars['RGBAHue'];
  b: Scalars['RGBAHue'];
  a: Scalars['RGBATransparency'];
};

/** Custom type representing a rich text value comprising of raw rich text ast, html, markdown and text values */
export type RichText = {
  /** Returns AST representation */
  raw: Scalars['RichTextAST'];
  /** Returns HTMl representation */
  html: Scalars['String'];
  /** Returns Markdown representation */
  markdown: Scalars['String'];
  /** Returns plain-text contents of RichText */
  text: Scalars['String'];
};

export type RowBlogContent = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowBlogContent>;
  /** Get the document in other stages */
  documentInStages: Array<RowBlogContent>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  content?: Maybe<RichText>;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowBlogContent versions */
  history: Array<Version>;
};


export type RowBlogContentlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowBlogContentdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowBlogContentcreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowBlogContentupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowBlogContentpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowBlogContentcreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowBlogContentupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowBlogContentpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowBlogContentscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowBlogContentpagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowBlogContenthistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowBlogContentConnectInput = {
  /** Document to connect */
  where: RowBlogContentWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowBlogContentConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowBlogContentEdge>;
  aggregate: Aggregate;
};

export type RowBlogContentCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** content input for default locale (en) */
  content?: InputMaybe<Scalars['RichTextAST']>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowBlogContentCreateLocalizationsInput>;
};

export type RowBlogContentCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  content?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowBlogContentCreateLocalizationInput = {
  /** Localization input */
  data: RowBlogContentCreateLocalizationDataInput;
  locale: Locale;
};

export type RowBlogContentCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowBlogContentCreateLocalizationInput>>;
};

export type RowBlogContentCreateManyInlineInput = {
  /** Create and connect multiple existing RowBlogContent documents */
  create?: InputMaybe<Array<RowBlogContentCreateInput>>;
  /** Connect multiple existing RowBlogContent documents */
  connect?: InputMaybe<Array<RowBlogContentWhereUniqueInput>>;
};

export type RowBlogContentCreateOneInlineInput = {
  /** Create and connect one RowBlogContent document */
  create?: InputMaybe<RowBlogContentCreateInput>;
  /** Connect one existing RowBlogContent document */
  connect?: InputMaybe<RowBlogContentWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowBlogContentEdge = {
  /** The item at the end of the edge. */
  node: RowBlogContent;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowBlogContentManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowBlogContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowBlogContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowBlogContentWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowBlogContentOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type RowBlogContentUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** content input for default locale (en) */
  content?: InputMaybe<Scalars['RichTextAST']>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowBlogContentUpdateLocalizationsInput>;
};

export type RowBlogContentUpdateLocalizationDataInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowBlogContentUpdateLocalizationInput = {
  data: RowBlogContentUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowBlogContentUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowBlogContentCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowBlogContentUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowBlogContentUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowBlogContentUpdateManyInlineInput = {
  /** Create and connect multiple RowBlogContent documents */
  create?: InputMaybe<Array<RowBlogContentCreateInput>>;
  /** Connect multiple existing RowBlogContent documents */
  connect?: InputMaybe<Array<RowBlogContentConnectInput>>;
  /** Override currently-connected documents with multiple existing RowBlogContent documents */
  set?: InputMaybe<Array<RowBlogContentWhereUniqueInput>>;
  /** Update multiple RowBlogContent documents */
  update?: InputMaybe<Array<RowBlogContentUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowBlogContent documents */
  upsert?: InputMaybe<Array<RowBlogContentUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowBlogContent documents */
  disconnect?: InputMaybe<Array<RowBlogContentWhereUniqueInput>>;
  /** Delete multiple RowBlogContent documents */
  delete?: InputMaybe<Array<RowBlogContentWhereUniqueInput>>;
};

export type RowBlogContentUpdateManyInput = {
  /** content input for default locale (en) */
  content?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowBlogContentUpdateManyLocalizationsInput>;
};

export type RowBlogContentUpdateManyLocalizationDataInput = {
  content?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowBlogContentUpdateManyLocalizationInput = {
  data: RowBlogContentUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowBlogContentUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowBlogContentUpdateManyLocalizationInput>>;
};

export type RowBlogContentUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowBlogContentWhereInput;
  /** Update many input */
  data: RowBlogContentUpdateManyInput;
};

export type RowBlogContentUpdateOneInlineInput = {
  /** Create and connect one RowBlogContent document */
  create?: InputMaybe<RowBlogContentCreateInput>;
  /** Update single RowBlogContent document */
  update?: InputMaybe<RowBlogContentUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowBlogContent document */
  upsert?: InputMaybe<RowBlogContentUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowBlogContent document */
  connect?: InputMaybe<RowBlogContentWhereUniqueInput>;
  /** Disconnect currently connected RowBlogContent document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowBlogContent document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowBlogContentUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowBlogContentWhereUniqueInput;
  /** Document to update */
  data: RowBlogContentUpdateInput;
};

export type RowBlogContentUpsertInput = {
  /** Create document if it didn't exist */
  create: RowBlogContentCreateInput;
  /** Update document if it exists */
  update: RowBlogContentUpdateInput;
};

export type RowBlogContentUpsertLocalizationInput = {
  update: RowBlogContentUpdateLocalizationDataInput;
  create: RowBlogContentCreateLocalizationDataInput;
  locale: Locale;
};

export type RowBlogContentUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowBlogContentWhereUniqueInput;
  /** Upsert data */
  data: RowBlogContentUpsertInput;
};

/** Identifies documents */
export type RowBlogContentWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowBlogContentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowBlogContentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowBlogContentWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowBlogContent record uniquely */
export type RowBlogContentWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowButtonLinkList = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowButtonLinkList>;
  /** Get the document in other stages */
  documentInStages: Array<RowButtonLinkList>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  title: Scalars['String'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  links: Array<Page>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowButtonLinkList versions */
  history: Array<Version>;
};


export type RowButtonLinkListlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowButtonLinkListdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowButtonLinkListcreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowButtonLinkListupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowButtonLinkListpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowButtonLinkListcreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowButtonLinkListupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowButtonLinkListpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowButtonLinkListlinksArgs = {
  where?: InputMaybe<PageWhereInput>;
  orderBy?: InputMaybe<PageOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowButtonLinkListscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowButtonLinkListpagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowButtonLinkListhistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowButtonLinkListConnectInput = {
  /** Document to connect */
  where: RowButtonLinkListWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowButtonLinkListConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowButtonLinkListEdge>;
  aggregate: Aggregate;
};

export type RowButtonLinkListCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** title input for default locale (en) */
  title: Scalars['String'];
  links?: InputMaybe<PageCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowButtonLinkListCreateLocalizationsInput>;
};

export type RowButtonLinkListCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  title: Scalars['String'];
};

export type RowButtonLinkListCreateLocalizationInput = {
  /** Localization input */
  data: RowButtonLinkListCreateLocalizationDataInput;
  locale: Locale;
};

export type RowButtonLinkListCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowButtonLinkListCreateLocalizationInput>>;
};

export type RowButtonLinkListCreateManyInlineInput = {
  /** Create and connect multiple existing RowButtonLinkList documents */
  create?: InputMaybe<Array<RowButtonLinkListCreateInput>>;
  /** Connect multiple existing RowButtonLinkList documents */
  connect?: InputMaybe<Array<RowButtonLinkListWhereUniqueInput>>;
};

export type RowButtonLinkListCreateOneInlineInput = {
  /** Create and connect one RowButtonLinkList document */
  create?: InputMaybe<RowButtonLinkListCreateInput>;
  /** Connect one existing RowButtonLinkList document */
  connect?: InputMaybe<RowButtonLinkListWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowButtonLinkListEdge = {
  /** The item at the end of the edge. */
  node: RowButtonLinkList;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowButtonLinkListManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowButtonLinkListWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowButtonLinkListWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowButtonLinkListWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  links_every?: InputMaybe<PageWhereInput>;
  links_some?: InputMaybe<PageWhereInput>;
  links_none?: InputMaybe<PageWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowButtonLinkListOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'title_ASC'
  | 'title_DESC';

export type RowButtonLinkListUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  links?: InputMaybe<PageUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowButtonLinkListUpdateLocalizationsInput>;
};

export type RowButtonLinkListUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type RowButtonLinkListUpdateLocalizationInput = {
  data: RowButtonLinkListUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowButtonLinkListUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowButtonLinkListCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowButtonLinkListUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowButtonLinkListUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowButtonLinkListUpdateManyInlineInput = {
  /** Create and connect multiple RowButtonLinkList documents */
  create?: InputMaybe<Array<RowButtonLinkListCreateInput>>;
  /** Connect multiple existing RowButtonLinkList documents */
  connect?: InputMaybe<Array<RowButtonLinkListConnectInput>>;
  /** Override currently-connected documents with multiple existing RowButtonLinkList documents */
  set?: InputMaybe<Array<RowButtonLinkListWhereUniqueInput>>;
  /** Update multiple RowButtonLinkList documents */
  update?: InputMaybe<Array<RowButtonLinkListUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowButtonLinkList documents */
  upsert?: InputMaybe<Array<RowButtonLinkListUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowButtonLinkList documents */
  disconnect?: InputMaybe<Array<RowButtonLinkListWhereUniqueInput>>;
  /** Delete multiple RowButtonLinkList documents */
  delete?: InputMaybe<Array<RowButtonLinkListWhereUniqueInput>>;
};

export type RowButtonLinkListUpdateManyInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowButtonLinkListUpdateManyLocalizationsInput>;
};

export type RowButtonLinkListUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type RowButtonLinkListUpdateManyLocalizationInput = {
  data: RowButtonLinkListUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowButtonLinkListUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowButtonLinkListUpdateManyLocalizationInput>>;
};

export type RowButtonLinkListUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowButtonLinkListWhereInput;
  /** Update many input */
  data: RowButtonLinkListUpdateManyInput;
};

export type RowButtonLinkListUpdateOneInlineInput = {
  /** Create and connect one RowButtonLinkList document */
  create?: InputMaybe<RowButtonLinkListCreateInput>;
  /** Update single RowButtonLinkList document */
  update?: InputMaybe<RowButtonLinkListUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowButtonLinkList document */
  upsert?: InputMaybe<RowButtonLinkListUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowButtonLinkList document */
  connect?: InputMaybe<RowButtonLinkListWhereUniqueInput>;
  /** Disconnect currently connected RowButtonLinkList document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowButtonLinkList document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowButtonLinkListUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowButtonLinkListWhereUniqueInput;
  /** Document to update */
  data: RowButtonLinkListUpdateInput;
};

export type RowButtonLinkListUpsertInput = {
  /** Create document if it didn't exist */
  create: RowButtonLinkListCreateInput;
  /** Update document if it exists */
  update: RowButtonLinkListUpdateInput;
};

export type RowButtonLinkListUpsertLocalizationInput = {
  update: RowButtonLinkListUpdateLocalizationDataInput;
  create: RowButtonLinkListCreateLocalizationDataInput;
  locale: Locale;
};

export type RowButtonLinkListUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowButtonLinkListWhereUniqueInput;
  /** Upsert data */
  data: RowButtonLinkListUpsertInput;
};

/** Identifies documents */
export type RowButtonLinkListWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowButtonLinkListWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowButtonLinkListWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowButtonLinkListWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  links_every?: InputMaybe<PageWhereInput>;
  links_some?: InputMaybe<PageWhereInput>;
  links_none?: InputMaybe<PageWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowButtonLinkList record uniquely */
export type RowButtonLinkListWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowColumnOne = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowColumnOne>;
  /** Get the document in other stages */
  documentInStages: Array<RowColumnOne>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  colOne: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowColumnOne versions */
  history: Array<Version>;
};


export type RowColumnOnelocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowColumnOnedocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowColumnOnecreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnOneupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnOnepublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnOnecreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnOneupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnOnepublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnOnescheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnOnepagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnOnehistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowColumnOneConnectInput = {
  /** Document to connect */
  where: RowColumnOneWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowColumnOneConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowColumnOneEdge>;
  aggregate: Aggregate;
};

export type RowColumnOneCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** colOne input for default locale (en) */
  colOne: Scalars['RichTextAST'];
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowColumnOneCreateLocalizationsInput>;
};

export type RowColumnOneCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  colOne: Scalars['RichTextAST'];
};

export type RowColumnOneCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnOneCreateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnOneCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowColumnOneCreateLocalizationInput>>;
};

export type RowColumnOneCreateManyInlineInput = {
  /** Create and connect multiple existing RowColumnOne documents */
  create?: InputMaybe<Array<RowColumnOneCreateInput>>;
  /** Connect multiple existing RowColumnOne documents */
  connect?: InputMaybe<Array<RowColumnOneWhereUniqueInput>>;
};

export type RowColumnOneCreateOneInlineInput = {
  /** Create and connect one RowColumnOne document */
  create?: InputMaybe<RowColumnOneCreateInput>;
  /** Connect one existing RowColumnOne document */
  connect?: InputMaybe<RowColumnOneWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowColumnOneEdge = {
  /** The item at the end of the edge. */
  node: RowColumnOne;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowColumnOneManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowColumnOneWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowColumnOneWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowColumnOneWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowColumnOneOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type RowColumnOneUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** colOne input for default locale (en) */
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowColumnOneUpdateLocalizationsInput>;
};

export type RowColumnOneUpdateLocalizationDataInput = {
  colOne?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowColumnOneUpdateLocalizationInput = {
  data: RowColumnOneUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnOneUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowColumnOneCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowColumnOneUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowColumnOneUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowColumnOneUpdateManyInlineInput = {
  /** Create and connect multiple RowColumnOne documents */
  create?: InputMaybe<Array<RowColumnOneCreateInput>>;
  /** Connect multiple existing RowColumnOne documents */
  connect?: InputMaybe<Array<RowColumnOneConnectInput>>;
  /** Override currently-connected documents with multiple existing RowColumnOne documents */
  set?: InputMaybe<Array<RowColumnOneWhereUniqueInput>>;
  /** Update multiple RowColumnOne documents */
  update?: InputMaybe<Array<RowColumnOneUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowColumnOne documents */
  upsert?: InputMaybe<Array<RowColumnOneUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowColumnOne documents */
  disconnect?: InputMaybe<Array<RowColumnOneWhereUniqueInput>>;
  /** Delete multiple RowColumnOne documents */
  delete?: InputMaybe<Array<RowColumnOneWhereUniqueInput>>;
};

export type RowColumnOneUpdateManyInput = {
  /** colOne input for default locale (en) */
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowColumnOneUpdateManyLocalizationsInput>;
};

export type RowColumnOneUpdateManyLocalizationDataInput = {
  colOne?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowColumnOneUpdateManyLocalizationInput = {
  data: RowColumnOneUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowColumnOneUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowColumnOneUpdateManyLocalizationInput>>;
};

export type RowColumnOneUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowColumnOneWhereInput;
  /** Update many input */
  data: RowColumnOneUpdateManyInput;
};

export type RowColumnOneUpdateOneInlineInput = {
  /** Create and connect one RowColumnOne document */
  create?: InputMaybe<RowColumnOneCreateInput>;
  /** Update single RowColumnOne document */
  update?: InputMaybe<RowColumnOneUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowColumnOne document */
  upsert?: InputMaybe<RowColumnOneUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowColumnOne document */
  connect?: InputMaybe<RowColumnOneWhereUniqueInput>;
  /** Disconnect currently connected RowColumnOne document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowColumnOne document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowColumnOneUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnOneWhereUniqueInput;
  /** Document to update */
  data: RowColumnOneUpdateInput;
};

export type RowColumnOneUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnOneCreateInput;
  /** Update document if it exists */
  update: RowColumnOneUpdateInput;
};

export type RowColumnOneUpsertLocalizationInput = {
  update: RowColumnOneUpdateLocalizationDataInput;
  create: RowColumnOneCreateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnOneUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnOneWhereUniqueInput;
  /** Upsert data */
  data: RowColumnOneUpsertInput;
};

/** Identifies documents */
export type RowColumnOneWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowColumnOneWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowColumnOneWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowColumnOneWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowColumnOne record uniquely */
export type RowColumnOneWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowColumnThree = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowColumnThree>;
  /** Get the document in other stages */
  documentInStages: Array<RowColumnThree>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  colOne: RichText;
  colTwo: RichText;
  colThree: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowColumnThree versions */
  history: Array<Version>;
};


export type RowColumnThreelocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowColumnThreedocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowColumnThreecreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnThreeupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnThreepublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnThreecreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnThreeupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnThreepublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnThreescheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnThreepagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnThreehistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowColumnThreeConnectInput = {
  /** Document to connect */
  where: RowColumnThreeWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowColumnThreeConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowColumnThreeEdge>;
  aggregate: Aggregate;
};

export type RowColumnThreeCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** colOne input for default locale (en) */
  colOne: Scalars['RichTextAST'];
  /** colTwo input for default locale (en) */
  colTwo: Scalars['RichTextAST'];
  /** colThree input for default locale (en) */
  colThree: Scalars['RichTextAST'];
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowColumnThreeCreateLocalizationsInput>;
};

export type RowColumnThreeCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  colOne: Scalars['RichTextAST'];
  colTwo: Scalars['RichTextAST'];
  colThree: Scalars['RichTextAST'];
};

export type RowColumnThreeCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnThreeCreateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnThreeCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowColumnThreeCreateLocalizationInput>>;
};

export type RowColumnThreeCreateManyInlineInput = {
  /** Create and connect multiple existing RowColumnThree documents */
  create?: InputMaybe<Array<RowColumnThreeCreateInput>>;
  /** Connect multiple existing RowColumnThree documents */
  connect?: InputMaybe<Array<RowColumnThreeWhereUniqueInput>>;
};

export type RowColumnThreeCreateOneInlineInput = {
  /** Create and connect one RowColumnThree document */
  create?: InputMaybe<RowColumnThreeCreateInput>;
  /** Connect one existing RowColumnThree document */
  connect?: InputMaybe<RowColumnThreeWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowColumnThreeEdge = {
  /** The item at the end of the edge. */
  node: RowColumnThree;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowColumnThreeManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowColumnThreeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowColumnThreeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowColumnThreeWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowColumnThreeOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type RowColumnThreeUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** colOne input for default locale (en) */
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  /** colTwo input for default locale (en) */
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
  /** colThree input for default locale (en) */
  colThree?: InputMaybe<Scalars['RichTextAST']>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowColumnThreeUpdateLocalizationsInput>;
};

export type RowColumnThreeUpdateLocalizationDataInput = {
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
  colThree?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowColumnThreeUpdateLocalizationInput = {
  data: RowColumnThreeUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnThreeUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowColumnThreeCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowColumnThreeUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowColumnThreeUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowColumnThreeUpdateManyInlineInput = {
  /** Create and connect multiple RowColumnThree documents */
  create?: InputMaybe<Array<RowColumnThreeCreateInput>>;
  /** Connect multiple existing RowColumnThree documents */
  connect?: InputMaybe<Array<RowColumnThreeConnectInput>>;
  /** Override currently-connected documents with multiple existing RowColumnThree documents */
  set?: InputMaybe<Array<RowColumnThreeWhereUniqueInput>>;
  /** Update multiple RowColumnThree documents */
  update?: InputMaybe<Array<RowColumnThreeUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowColumnThree documents */
  upsert?: InputMaybe<Array<RowColumnThreeUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowColumnThree documents */
  disconnect?: InputMaybe<Array<RowColumnThreeWhereUniqueInput>>;
  /** Delete multiple RowColumnThree documents */
  delete?: InputMaybe<Array<RowColumnThreeWhereUniqueInput>>;
};

export type RowColumnThreeUpdateManyInput = {
  /** colOne input for default locale (en) */
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  /** colTwo input for default locale (en) */
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
  /** colThree input for default locale (en) */
  colThree?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowColumnThreeUpdateManyLocalizationsInput>;
};

export type RowColumnThreeUpdateManyLocalizationDataInput = {
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
  colThree?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowColumnThreeUpdateManyLocalizationInput = {
  data: RowColumnThreeUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowColumnThreeUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowColumnThreeUpdateManyLocalizationInput>>;
};

export type RowColumnThreeUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowColumnThreeWhereInput;
  /** Update many input */
  data: RowColumnThreeUpdateManyInput;
};

export type RowColumnThreeUpdateOneInlineInput = {
  /** Create and connect one RowColumnThree document */
  create?: InputMaybe<RowColumnThreeCreateInput>;
  /** Update single RowColumnThree document */
  update?: InputMaybe<RowColumnThreeUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowColumnThree document */
  upsert?: InputMaybe<RowColumnThreeUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowColumnThree document */
  connect?: InputMaybe<RowColumnThreeWhereUniqueInput>;
  /** Disconnect currently connected RowColumnThree document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowColumnThree document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowColumnThreeUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnThreeWhereUniqueInput;
  /** Document to update */
  data: RowColumnThreeUpdateInput;
};

export type RowColumnThreeUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnThreeCreateInput;
  /** Update document if it exists */
  update: RowColumnThreeUpdateInput;
};

export type RowColumnThreeUpsertLocalizationInput = {
  update: RowColumnThreeUpdateLocalizationDataInput;
  create: RowColumnThreeCreateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnThreeUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnThreeWhereUniqueInput;
  /** Upsert data */
  data: RowColumnThreeUpsertInput;
};

/** Identifies documents */
export type RowColumnThreeWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowColumnThreeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowColumnThreeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowColumnThreeWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowColumnThree record uniquely */
export type RowColumnThreeWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowColumnTwo = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowColumnTwo>;
  /** Get the document in other stages */
  documentInStages: Array<RowColumnTwo>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  colOne: RichText;
  colTwo: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowColumnTwo versions */
  history: Array<Version>;
};


export type RowColumnTwolocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowColumnTwodocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowColumnTwocreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnTwoupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnTwopublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowColumnTwocreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnTwoupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnTwopublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnTwoscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnTwopagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowColumnTwohistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowColumnTwoConnectInput = {
  /** Document to connect */
  where: RowColumnTwoWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowColumnTwoConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowColumnTwoEdge>;
  aggregate: Aggregate;
};

export type RowColumnTwoCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** colOne input for default locale (en) */
  colOne: Scalars['RichTextAST'];
  /** colTwo input for default locale (en) */
  colTwo: Scalars['RichTextAST'];
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowColumnTwoCreateLocalizationsInput>;
};

export type RowColumnTwoCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  colOne: Scalars['RichTextAST'];
  colTwo: Scalars['RichTextAST'];
};

export type RowColumnTwoCreateLocalizationInput = {
  /** Localization input */
  data: RowColumnTwoCreateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnTwoCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowColumnTwoCreateLocalizationInput>>;
};

export type RowColumnTwoCreateManyInlineInput = {
  /** Create and connect multiple existing RowColumnTwo documents */
  create?: InputMaybe<Array<RowColumnTwoCreateInput>>;
  /** Connect multiple existing RowColumnTwo documents */
  connect?: InputMaybe<Array<RowColumnTwoWhereUniqueInput>>;
};

export type RowColumnTwoCreateOneInlineInput = {
  /** Create and connect one RowColumnTwo document */
  create?: InputMaybe<RowColumnTwoCreateInput>;
  /** Connect one existing RowColumnTwo document */
  connect?: InputMaybe<RowColumnTwoWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowColumnTwoEdge = {
  /** The item at the end of the edge. */
  node: RowColumnTwo;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowColumnTwoManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowColumnTwoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowColumnTwoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowColumnTwoWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowColumnTwoOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type RowColumnTwoUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** colOne input for default locale (en) */
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  /** colTwo input for default locale (en) */
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowColumnTwoUpdateLocalizationsInput>;
};

export type RowColumnTwoUpdateLocalizationDataInput = {
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowColumnTwoUpdateLocalizationInput = {
  data: RowColumnTwoUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnTwoUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowColumnTwoCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowColumnTwoUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowColumnTwoUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowColumnTwoUpdateManyInlineInput = {
  /** Create and connect multiple RowColumnTwo documents */
  create?: InputMaybe<Array<RowColumnTwoCreateInput>>;
  /** Connect multiple existing RowColumnTwo documents */
  connect?: InputMaybe<Array<RowColumnTwoConnectInput>>;
  /** Override currently-connected documents with multiple existing RowColumnTwo documents */
  set?: InputMaybe<Array<RowColumnTwoWhereUniqueInput>>;
  /** Update multiple RowColumnTwo documents */
  update?: InputMaybe<Array<RowColumnTwoUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowColumnTwo documents */
  upsert?: InputMaybe<Array<RowColumnTwoUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowColumnTwo documents */
  disconnect?: InputMaybe<Array<RowColumnTwoWhereUniqueInput>>;
  /** Delete multiple RowColumnTwo documents */
  delete?: InputMaybe<Array<RowColumnTwoWhereUniqueInput>>;
};

export type RowColumnTwoUpdateManyInput = {
  /** colOne input for default locale (en) */
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  /** colTwo input for default locale (en) */
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowColumnTwoUpdateManyLocalizationsInput>;
};

export type RowColumnTwoUpdateManyLocalizationDataInput = {
  colOne?: InputMaybe<Scalars['RichTextAST']>;
  colTwo?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowColumnTwoUpdateManyLocalizationInput = {
  data: RowColumnTwoUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowColumnTwoUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowColumnTwoUpdateManyLocalizationInput>>;
};

export type RowColumnTwoUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowColumnTwoWhereInput;
  /** Update many input */
  data: RowColumnTwoUpdateManyInput;
};

export type RowColumnTwoUpdateOneInlineInput = {
  /** Create and connect one RowColumnTwo document */
  create?: InputMaybe<RowColumnTwoCreateInput>;
  /** Update single RowColumnTwo document */
  update?: InputMaybe<RowColumnTwoUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowColumnTwo document */
  upsert?: InputMaybe<RowColumnTwoUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowColumnTwo document */
  connect?: InputMaybe<RowColumnTwoWhereUniqueInput>;
  /** Disconnect currently connected RowColumnTwo document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowColumnTwo document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowColumnTwoUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnTwoWhereUniqueInput;
  /** Document to update */
  data: RowColumnTwoUpdateInput;
};

export type RowColumnTwoUpsertInput = {
  /** Create document if it didn't exist */
  create: RowColumnTwoCreateInput;
  /** Update document if it exists */
  update: RowColumnTwoUpdateInput;
};

export type RowColumnTwoUpsertLocalizationInput = {
  update: RowColumnTwoUpdateLocalizationDataInput;
  create: RowColumnTwoCreateLocalizationDataInput;
  locale: Locale;
};

export type RowColumnTwoUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowColumnTwoWhereUniqueInput;
  /** Upsert data */
  data: RowColumnTwoUpsertInput;
};

/** Identifies documents */
export type RowColumnTwoWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowColumnTwoWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowColumnTwoWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowColumnTwoWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowColumnTwo record uniquely */
export type RowColumnTwoWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowContentLinks = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowContentLinks>;
  /** Get the document in other stages */
  documentInStages: Array<RowContentLinks>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  title: Scalars['String'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  contentLinks: Array<PageLink>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowContentLinks versions */
  history: Array<Version>;
};


export type RowContentLinkslocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowContentLinksdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowContentLinkscreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowContentLinksupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowContentLinkspublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowContentLinkscreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowContentLinksupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowContentLinkspublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowContentLinkscontentLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowContentLinksscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowContentLinkspagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowContentLinkshistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowContentLinksConnectInput = {
  /** Document to connect */
  where: RowContentLinksWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowContentLinksConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowContentLinksEdge>;
  aggregate: Aggregate;
};

export type RowContentLinksCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** title input for default locale (en) */
  title: Scalars['String'];
  contentLinks?: InputMaybe<PageLinkCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowContentLinksCreateLocalizationsInput>;
};

export type RowContentLinksCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  title: Scalars['String'];
};

export type RowContentLinksCreateLocalizationInput = {
  /** Localization input */
  data: RowContentLinksCreateLocalizationDataInput;
  locale: Locale;
};

export type RowContentLinksCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowContentLinksCreateLocalizationInput>>;
};

export type RowContentLinksCreateManyInlineInput = {
  /** Create and connect multiple existing RowContentLinks documents */
  create?: InputMaybe<Array<RowContentLinksCreateInput>>;
  /** Connect multiple existing RowContentLinks documents */
  connect?: InputMaybe<Array<RowContentLinksWhereUniqueInput>>;
};

export type RowContentLinksCreateOneInlineInput = {
  /** Create and connect one RowContentLinks document */
  create?: InputMaybe<RowContentLinksCreateInput>;
  /** Connect one existing RowContentLinks document */
  connect?: InputMaybe<RowContentLinksWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowContentLinksEdge = {
  /** The item at the end of the edge. */
  node: RowContentLinks;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowContentLinksManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowContentLinksWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowContentLinksWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowContentLinksWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  contentLinks_every?: InputMaybe<PageLinkWhereInput>;
  contentLinks_some?: InputMaybe<PageLinkWhereInput>;
  contentLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowContentLinksOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'title_ASC'
  | 'title_DESC';

export type RowContentLinksUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  contentLinks?: InputMaybe<PageLinkUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowContentLinksUpdateLocalizationsInput>;
};

export type RowContentLinksUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type RowContentLinksUpdateLocalizationInput = {
  data: RowContentLinksUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowContentLinksUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowContentLinksCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowContentLinksUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowContentLinksUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowContentLinksUpdateManyInlineInput = {
  /** Create and connect multiple RowContentLinks documents */
  create?: InputMaybe<Array<RowContentLinksCreateInput>>;
  /** Connect multiple existing RowContentLinks documents */
  connect?: InputMaybe<Array<RowContentLinksConnectInput>>;
  /** Override currently-connected documents with multiple existing RowContentLinks documents */
  set?: InputMaybe<Array<RowContentLinksWhereUniqueInput>>;
  /** Update multiple RowContentLinks documents */
  update?: InputMaybe<Array<RowContentLinksUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowContentLinks documents */
  upsert?: InputMaybe<Array<RowContentLinksUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowContentLinks documents */
  disconnect?: InputMaybe<Array<RowContentLinksWhereUniqueInput>>;
  /** Delete multiple RowContentLinks documents */
  delete?: InputMaybe<Array<RowContentLinksWhereUniqueInput>>;
};

export type RowContentLinksUpdateManyInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowContentLinksUpdateManyLocalizationsInput>;
};

export type RowContentLinksUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type RowContentLinksUpdateManyLocalizationInput = {
  data: RowContentLinksUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowContentLinksUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowContentLinksUpdateManyLocalizationInput>>;
};

export type RowContentLinksUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowContentLinksWhereInput;
  /** Update many input */
  data: RowContentLinksUpdateManyInput;
};

export type RowContentLinksUpdateOneInlineInput = {
  /** Create and connect one RowContentLinks document */
  create?: InputMaybe<RowContentLinksCreateInput>;
  /** Update single RowContentLinks document */
  update?: InputMaybe<RowContentLinksUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowContentLinks document */
  upsert?: InputMaybe<RowContentLinksUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowContentLinks document */
  connect?: InputMaybe<RowContentLinksWhereUniqueInput>;
  /** Disconnect currently connected RowContentLinks document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowContentLinks document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowContentLinksUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowContentLinksWhereUniqueInput;
  /** Document to update */
  data: RowContentLinksUpdateInput;
};

export type RowContentLinksUpsertInput = {
  /** Create document if it didn't exist */
  create: RowContentLinksCreateInput;
  /** Update document if it exists */
  update: RowContentLinksUpdateInput;
};

export type RowContentLinksUpsertLocalizationInput = {
  update: RowContentLinksUpdateLocalizationDataInput;
  create: RowContentLinksCreateLocalizationDataInput;
  locale: Locale;
};

export type RowContentLinksUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowContentLinksWhereUniqueInput;
  /** Upsert data */
  data: RowContentLinksUpsertInput;
};

/** Identifies documents */
export type RowContentLinksWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowContentLinksWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowContentLinksWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowContentLinksWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  contentLinks_every?: InputMaybe<PageLinkWhereInput>;
  contentLinks_some?: InputMaybe<PageLinkWhereInput>;
  contentLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowContentLinks record uniquely */
export type RowContentLinksWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowHeroBanner = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowHeroBanner>;
  /** Get the document in other stages */
  documentInStages: Array<RowHeroBanner>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  copy: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Video, landscape */
  asset: Asset;
  pageLinks: Array<PageLink>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowHeroBanner versions */
  history: Array<Version>;
};


export type RowHeroBannerlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowHeroBannerdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowHeroBannercreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowHeroBannerupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowHeroBannerpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowHeroBannercreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerassetArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerpageLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerpagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowHeroBannerhistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowHeroBannerConnectInput = {
  /** Document to connect */
  where: RowHeroBannerWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowHeroBannerConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowHeroBannerEdge>;
  aggregate: Aggregate;
};

export type RowHeroBannerCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** copy input for default locale (en) */
  copy: Scalars['RichTextAST'];
  asset: AssetCreateOneInlineInput;
  pageLinks?: InputMaybe<PageLinkCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowHeroBannerCreateLocalizationsInput>;
};

export type RowHeroBannerCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  copy: Scalars['RichTextAST'];
};

export type RowHeroBannerCreateLocalizationInput = {
  /** Localization input */
  data: RowHeroBannerCreateLocalizationDataInput;
  locale: Locale;
};

export type RowHeroBannerCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowHeroBannerCreateLocalizationInput>>;
};

export type RowHeroBannerCreateManyInlineInput = {
  /** Create and connect multiple existing RowHeroBanner documents */
  create?: InputMaybe<Array<RowHeroBannerCreateInput>>;
  /** Connect multiple existing RowHeroBanner documents */
  connect?: InputMaybe<Array<RowHeroBannerWhereUniqueInput>>;
};

export type RowHeroBannerCreateOneInlineInput = {
  /** Create and connect one RowHeroBanner document */
  create?: InputMaybe<RowHeroBannerCreateInput>;
  /** Connect one existing RowHeroBanner document */
  connect?: InputMaybe<RowHeroBannerWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowHeroBannerEdge = {
  /** The item at the end of the edge. */
  node: RowHeroBanner;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowHeroBannerManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowHeroBannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowHeroBannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowHeroBannerWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  pageLinks_every?: InputMaybe<PageLinkWhereInput>;
  pageLinks_some?: InputMaybe<PageLinkWhereInput>;
  pageLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowHeroBannerOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type RowHeroBannerUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** copy input for default locale (en) */
  copy?: InputMaybe<Scalars['RichTextAST']>;
  asset?: InputMaybe<AssetUpdateOneInlineInput>;
  pageLinks?: InputMaybe<PageLinkUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowHeroBannerUpdateLocalizationsInput>;
};

export type RowHeroBannerUpdateLocalizationDataInput = {
  copy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowHeroBannerUpdateLocalizationInput = {
  data: RowHeroBannerUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowHeroBannerUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowHeroBannerCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowHeroBannerUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowHeroBannerUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowHeroBannerUpdateManyInlineInput = {
  /** Create and connect multiple RowHeroBanner documents */
  create?: InputMaybe<Array<RowHeroBannerCreateInput>>;
  /** Connect multiple existing RowHeroBanner documents */
  connect?: InputMaybe<Array<RowHeroBannerConnectInput>>;
  /** Override currently-connected documents with multiple existing RowHeroBanner documents */
  set?: InputMaybe<Array<RowHeroBannerWhereUniqueInput>>;
  /** Update multiple RowHeroBanner documents */
  update?: InputMaybe<Array<RowHeroBannerUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowHeroBanner documents */
  upsert?: InputMaybe<Array<RowHeroBannerUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowHeroBanner documents */
  disconnect?: InputMaybe<Array<RowHeroBannerWhereUniqueInput>>;
  /** Delete multiple RowHeroBanner documents */
  delete?: InputMaybe<Array<RowHeroBannerWhereUniqueInput>>;
};

export type RowHeroBannerUpdateManyInput = {
  /** copy input for default locale (en) */
  copy?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowHeroBannerUpdateManyLocalizationsInput>;
};

export type RowHeroBannerUpdateManyLocalizationDataInput = {
  copy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowHeroBannerUpdateManyLocalizationInput = {
  data: RowHeroBannerUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowHeroBannerUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowHeroBannerUpdateManyLocalizationInput>>;
};

export type RowHeroBannerUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowHeroBannerWhereInput;
  /** Update many input */
  data: RowHeroBannerUpdateManyInput;
};

export type RowHeroBannerUpdateOneInlineInput = {
  /** Create and connect one RowHeroBanner document */
  create?: InputMaybe<RowHeroBannerCreateInput>;
  /** Update single RowHeroBanner document */
  update?: InputMaybe<RowHeroBannerUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowHeroBanner document */
  upsert?: InputMaybe<RowHeroBannerUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowHeroBanner document */
  connect?: InputMaybe<RowHeroBannerWhereUniqueInput>;
  /** Disconnect currently connected RowHeroBanner document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowHeroBanner document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowHeroBannerUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowHeroBannerWhereUniqueInput;
  /** Document to update */
  data: RowHeroBannerUpdateInput;
};

export type RowHeroBannerUpsertInput = {
  /** Create document if it didn't exist */
  create: RowHeroBannerCreateInput;
  /** Update document if it exists */
  update: RowHeroBannerUpdateInput;
};

export type RowHeroBannerUpsertLocalizationInput = {
  update: RowHeroBannerUpdateLocalizationDataInput;
  create: RowHeroBannerCreateLocalizationDataInput;
  locale: Locale;
};

export type RowHeroBannerUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowHeroBannerWhereUniqueInput;
  /** Upsert data */
  data: RowHeroBannerUpsertInput;
};

/** Identifies documents */
export type RowHeroBannerWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowHeroBannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowHeroBannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowHeroBannerWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  pageLinks_every?: InputMaybe<PageLinkWhereInput>;
  pageLinks_some?: InputMaybe<PageLinkWhereInput>;
  pageLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowHeroBanner record uniquely */
export type RowHeroBannerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowProduct = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowProduct>;
  /** Get the document in other stages */
  documentInStages: Array<RowProduct>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  title: Scalars['String'];
  productCopy?: Maybe<RichText>;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  pageLinks: Array<PageLink>;
  asset?: Maybe<Asset>;
  /** Row Product component to render */
  variant?: Maybe<RowProductVariants>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowProduct versions */
  history: Array<Version>;
};


export type RowProductlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowProductdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowProductcreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowProductupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowProductpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowProductcreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProductupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProductpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProductpageLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProductassetArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProductscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProductpagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowProducthistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowProductConnectInput = {
  /** Document to connect */
  where: RowProductWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowProductConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowProductEdge>;
  aggregate: Aggregate;
};

export type RowProductCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** title input for default locale (en) */
  title: Scalars['String'];
  /** productCopy input for default locale (en) */
  productCopy?: InputMaybe<Scalars['RichTextAST']>;
  pageLinks?: InputMaybe<PageLinkCreateManyInlineInput>;
  asset?: InputMaybe<AssetCreateOneInlineInput>;
  variant?: InputMaybe<RowProductVariants>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowProductCreateLocalizationsInput>;
};

export type RowProductCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  title: Scalars['String'];
  productCopy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowProductCreateLocalizationInput = {
  /** Localization input */
  data: RowProductCreateLocalizationDataInput;
  locale: Locale;
};

export type RowProductCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowProductCreateLocalizationInput>>;
};

export type RowProductCreateManyInlineInput = {
  /** Create and connect multiple existing RowProduct documents */
  create?: InputMaybe<Array<RowProductCreateInput>>;
  /** Connect multiple existing RowProduct documents */
  connect?: InputMaybe<Array<RowProductWhereUniqueInput>>;
};

export type RowProductCreateOneInlineInput = {
  /** Create and connect one RowProduct document */
  create?: InputMaybe<RowProductCreateInput>;
  /** Connect one existing RowProduct document */
  connect?: InputMaybe<RowProductWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowProductEdge = {
  /** The item at the end of the edge. */
  node: RowProduct;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowProductManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowProductWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowProductWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowProductWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  pageLinks_every?: InputMaybe<PageLinkWhereInput>;
  pageLinks_some?: InputMaybe<PageLinkWhereInput>;
  pageLinks_none?: InputMaybe<PageLinkWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  variant?: InputMaybe<RowProductVariants>;
  /** All values that are not equal to given value. */
  variant_not?: InputMaybe<RowProductVariants>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<RowProductVariants>>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<RowProductVariants>>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowProductOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'variant_ASC'
  | 'variant_DESC';

export type RowProductUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** productCopy input for default locale (en) */
  productCopy?: InputMaybe<Scalars['RichTextAST']>;
  pageLinks?: InputMaybe<PageLinkUpdateManyInlineInput>;
  asset?: InputMaybe<AssetUpdateOneInlineInput>;
  variant?: InputMaybe<RowProductVariants>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowProductUpdateLocalizationsInput>;
};

export type RowProductUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
  productCopy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowProductUpdateLocalizationInput = {
  data: RowProductUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowProductUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowProductCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowProductUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowProductUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowProductUpdateManyInlineInput = {
  /** Create and connect multiple RowProduct documents */
  create?: InputMaybe<Array<RowProductCreateInput>>;
  /** Connect multiple existing RowProduct documents */
  connect?: InputMaybe<Array<RowProductConnectInput>>;
  /** Override currently-connected documents with multiple existing RowProduct documents */
  set?: InputMaybe<Array<RowProductWhereUniqueInput>>;
  /** Update multiple RowProduct documents */
  update?: InputMaybe<Array<RowProductUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowProduct documents */
  upsert?: InputMaybe<Array<RowProductUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowProduct documents */
  disconnect?: InputMaybe<Array<RowProductWhereUniqueInput>>;
  /** Delete multiple RowProduct documents */
  delete?: InputMaybe<Array<RowProductWhereUniqueInput>>;
};

export type RowProductUpdateManyInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** productCopy input for default locale (en) */
  productCopy?: InputMaybe<Scalars['RichTextAST']>;
  variant?: InputMaybe<RowProductVariants>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowProductUpdateManyLocalizationsInput>;
};

export type RowProductUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
  productCopy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowProductUpdateManyLocalizationInput = {
  data: RowProductUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowProductUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowProductUpdateManyLocalizationInput>>;
};

export type RowProductUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowProductWhereInput;
  /** Update many input */
  data: RowProductUpdateManyInput;
};

export type RowProductUpdateOneInlineInput = {
  /** Create and connect one RowProduct document */
  create?: InputMaybe<RowProductCreateInput>;
  /** Update single RowProduct document */
  update?: InputMaybe<RowProductUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowProduct document */
  upsert?: InputMaybe<RowProductUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowProduct document */
  connect?: InputMaybe<RowProductWhereUniqueInput>;
  /** Disconnect currently connected RowProduct document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowProduct document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowProductUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowProductWhereUniqueInput;
  /** Document to update */
  data: RowProductUpdateInput;
};

export type RowProductUpsertInput = {
  /** Create document if it didn't exist */
  create: RowProductCreateInput;
  /** Update document if it exists */
  update: RowProductUpdateInput;
};

export type RowProductUpsertLocalizationInput = {
  update: RowProductUpdateLocalizationDataInput;
  create: RowProductCreateLocalizationDataInput;
  locale: Locale;
};

export type RowProductUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowProductWhereUniqueInput;
  /** Upsert data */
  data: RowProductUpsertInput;
};

/** All different kind of possible Row Product components to render */
export type RowProductVariants =
  | 'Backstory'
  | 'Feature'
  | 'FeatureBoxed'
  | 'Grid'
  | 'Related'
  | 'Reviews'
  | 'Specs'
  | 'Upsells'
  | 'Swipeable';

/** Identifies documents */
export type RowProductWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowProductWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowProductWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowProductWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  pageLinks_every?: InputMaybe<PageLinkWhereInput>;
  pageLinks_some?: InputMaybe<PageLinkWhereInput>;
  pageLinks_none?: InputMaybe<PageLinkWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  variant?: InputMaybe<RowProductVariants>;
  /** All values that are not equal to given value. */
  variant_not?: InputMaybe<RowProductVariants>;
  /** All values that are contained in given list. */
  variant_in?: InputMaybe<Array<RowProductVariants>>;
  /** All values that are not contained in given list. */
  variant_not_in?: InputMaybe<Array<RowProductVariants>>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowProduct record uniquely */
export type RowProductWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowQuote = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowQuote>;
  /** Get the document in other stages */
  documentInStages: Array<RowQuote>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  quote: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowQuote versions */
  history: Array<Version>;
};


export type RowQuotelocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowQuotedocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowQuotecreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowQuoteupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowQuotepublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowQuotecreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowQuoteupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowQuotepublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowQuotescheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowQuotepagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowQuotehistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowQuoteConnectInput = {
  /** Document to connect */
  where: RowQuoteWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowQuoteConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowQuoteEdge>;
  aggregate: Aggregate;
};

export type RowQuoteCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** quote input for default locale (en) */
  quote: Scalars['RichTextAST'];
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowQuoteCreateLocalizationsInput>;
};

export type RowQuoteCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  quote: Scalars['RichTextAST'];
};

export type RowQuoteCreateLocalizationInput = {
  /** Localization input */
  data: RowQuoteCreateLocalizationDataInput;
  locale: Locale;
};

export type RowQuoteCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowQuoteCreateLocalizationInput>>;
};

export type RowQuoteCreateManyInlineInput = {
  /** Create and connect multiple existing RowQuote documents */
  create?: InputMaybe<Array<RowQuoteCreateInput>>;
  /** Connect multiple existing RowQuote documents */
  connect?: InputMaybe<Array<RowQuoteWhereUniqueInput>>;
};

export type RowQuoteCreateOneInlineInput = {
  /** Create and connect one RowQuote document */
  create?: InputMaybe<RowQuoteCreateInput>;
  /** Connect one existing RowQuote document */
  connect?: InputMaybe<RowQuoteWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowQuoteEdge = {
  /** The item at the end of the edge. */
  node: RowQuote;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowQuoteManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowQuoteWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowQuoteWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowQuoteWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowQuoteOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type RowQuoteUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** quote input for default locale (en) */
  quote?: InputMaybe<Scalars['RichTextAST']>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowQuoteUpdateLocalizationsInput>;
};

export type RowQuoteUpdateLocalizationDataInput = {
  quote?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowQuoteUpdateLocalizationInput = {
  data: RowQuoteUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowQuoteUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowQuoteCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowQuoteUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowQuoteUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowQuoteUpdateManyInlineInput = {
  /** Create and connect multiple RowQuote documents */
  create?: InputMaybe<Array<RowQuoteCreateInput>>;
  /** Connect multiple existing RowQuote documents */
  connect?: InputMaybe<Array<RowQuoteConnectInput>>;
  /** Override currently-connected documents with multiple existing RowQuote documents */
  set?: InputMaybe<Array<RowQuoteWhereUniqueInput>>;
  /** Update multiple RowQuote documents */
  update?: InputMaybe<Array<RowQuoteUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowQuote documents */
  upsert?: InputMaybe<Array<RowQuoteUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowQuote documents */
  disconnect?: InputMaybe<Array<RowQuoteWhereUniqueInput>>;
  /** Delete multiple RowQuote documents */
  delete?: InputMaybe<Array<RowQuoteWhereUniqueInput>>;
};

export type RowQuoteUpdateManyInput = {
  /** quote input for default locale (en) */
  quote?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowQuoteUpdateManyLocalizationsInput>;
};

export type RowQuoteUpdateManyLocalizationDataInput = {
  quote?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowQuoteUpdateManyLocalizationInput = {
  data: RowQuoteUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowQuoteUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowQuoteUpdateManyLocalizationInput>>;
};

export type RowQuoteUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowQuoteWhereInput;
  /** Update many input */
  data: RowQuoteUpdateManyInput;
};

export type RowQuoteUpdateOneInlineInput = {
  /** Create and connect one RowQuote document */
  create?: InputMaybe<RowQuoteCreateInput>;
  /** Update single RowQuote document */
  update?: InputMaybe<RowQuoteUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowQuote document */
  upsert?: InputMaybe<RowQuoteUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowQuote document */
  connect?: InputMaybe<RowQuoteWhereUniqueInput>;
  /** Disconnect currently connected RowQuote document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowQuote document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowQuoteUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowQuoteWhereUniqueInput;
  /** Document to update */
  data: RowQuoteUpdateInput;
};

export type RowQuoteUpsertInput = {
  /** Create document if it didn't exist */
  create: RowQuoteCreateInput;
  /** Update document if it exists */
  update: RowQuoteUpdateInput;
};

export type RowQuoteUpsertLocalizationInput = {
  update: RowQuoteUpdateLocalizationDataInput;
  create: RowQuoteCreateLocalizationDataInput;
  locale: Locale;
};

export type RowQuoteUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowQuoteWhereUniqueInput;
  /** Upsert data */
  data: RowQuoteUpsertInput;
};

/** Identifies documents */
export type RowQuoteWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowQuoteWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowQuoteWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowQuoteWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowQuote record uniquely */
export type RowQuoteWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowServiceOptions = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowServiceOptions>;
  /** Get the document in other stages */
  documentInStages: Array<RowServiceOptions>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  title: Scalars['String'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  serviceOptions: Array<PageLink>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowServiceOptions versions */
  history: Array<Version>;
};


export type RowServiceOptionslocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowServiceOptionsdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowServiceOptionscreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowServiceOptionsupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowServiceOptionspublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowServiceOptionscreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowServiceOptionsupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowServiceOptionspublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowServiceOptionsserviceOptionsArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowServiceOptionsscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowServiceOptionspagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowServiceOptionshistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowServiceOptionsConnectInput = {
  /** Document to connect */
  where: RowServiceOptionsWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowServiceOptionsConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowServiceOptionsEdge>;
  aggregate: Aggregate;
};

export type RowServiceOptionsCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** title input for default locale (en) */
  title: Scalars['String'];
  serviceOptions?: InputMaybe<PageLinkCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowServiceOptionsCreateLocalizationsInput>;
};

export type RowServiceOptionsCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  title: Scalars['String'];
};

export type RowServiceOptionsCreateLocalizationInput = {
  /** Localization input */
  data: RowServiceOptionsCreateLocalizationDataInput;
  locale: Locale;
};

export type RowServiceOptionsCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowServiceOptionsCreateLocalizationInput>>;
};

export type RowServiceOptionsCreateManyInlineInput = {
  /** Create and connect multiple existing RowServiceOptions documents */
  create?: InputMaybe<Array<RowServiceOptionsCreateInput>>;
  /** Connect multiple existing RowServiceOptions documents */
  connect?: InputMaybe<Array<RowServiceOptionsWhereUniqueInput>>;
};

export type RowServiceOptionsCreateOneInlineInput = {
  /** Create and connect one RowServiceOptions document */
  create?: InputMaybe<RowServiceOptionsCreateInput>;
  /** Connect one existing RowServiceOptions document */
  connect?: InputMaybe<RowServiceOptionsWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowServiceOptionsEdge = {
  /** The item at the end of the edge. */
  node: RowServiceOptions;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowServiceOptionsManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowServiceOptionsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowServiceOptionsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowServiceOptionsWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  serviceOptions_every?: InputMaybe<PageLinkWhereInput>;
  serviceOptions_some?: InputMaybe<PageLinkWhereInput>;
  serviceOptions_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowServiceOptionsOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'title_ASC'
  | 'title_DESC';

export type RowServiceOptionsUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  serviceOptions?: InputMaybe<PageLinkUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowServiceOptionsUpdateLocalizationsInput>;
};

export type RowServiceOptionsUpdateLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type RowServiceOptionsUpdateLocalizationInput = {
  data: RowServiceOptionsUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowServiceOptionsUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowServiceOptionsCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowServiceOptionsUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowServiceOptionsUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowServiceOptionsUpdateManyInlineInput = {
  /** Create and connect multiple RowServiceOptions documents */
  create?: InputMaybe<Array<RowServiceOptionsCreateInput>>;
  /** Connect multiple existing RowServiceOptions documents */
  connect?: InputMaybe<Array<RowServiceOptionsConnectInput>>;
  /** Override currently-connected documents with multiple existing RowServiceOptions documents */
  set?: InputMaybe<Array<RowServiceOptionsWhereUniqueInput>>;
  /** Update multiple RowServiceOptions documents */
  update?: InputMaybe<Array<RowServiceOptionsUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowServiceOptions documents */
  upsert?: InputMaybe<Array<RowServiceOptionsUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowServiceOptions documents */
  disconnect?: InputMaybe<Array<RowServiceOptionsWhereUniqueInput>>;
  /** Delete multiple RowServiceOptions documents */
  delete?: InputMaybe<Array<RowServiceOptionsWhereUniqueInput>>;
};

export type RowServiceOptionsUpdateManyInput = {
  /** title input for default locale (en) */
  title?: InputMaybe<Scalars['String']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowServiceOptionsUpdateManyLocalizationsInput>;
};

export type RowServiceOptionsUpdateManyLocalizationDataInput = {
  title?: InputMaybe<Scalars['String']>;
};

export type RowServiceOptionsUpdateManyLocalizationInput = {
  data: RowServiceOptionsUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowServiceOptionsUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowServiceOptionsUpdateManyLocalizationInput>>;
};

export type RowServiceOptionsUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowServiceOptionsWhereInput;
  /** Update many input */
  data: RowServiceOptionsUpdateManyInput;
};

export type RowServiceOptionsUpdateOneInlineInput = {
  /** Create and connect one RowServiceOptions document */
  create?: InputMaybe<RowServiceOptionsCreateInput>;
  /** Update single RowServiceOptions document */
  update?: InputMaybe<RowServiceOptionsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowServiceOptions document */
  upsert?: InputMaybe<RowServiceOptionsUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowServiceOptions document */
  connect?: InputMaybe<RowServiceOptionsWhereUniqueInput>;
  /** Disconnect currently connected RowServiceOptions document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowServiceOptions document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowServiceOptionsUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowServiceOptionsWhereUniqueInput;
  /** Document to update */
  data: RowServiceOptionsUpdateInput;
};

export type RowServiceOptionsUpsertInput = {
  /** Create document if it didn't exist */
  create: RowServiceOptionsCreateInput;
  /** Update document if it exists */
  update: RowServiceOptionsUpdateInput;
};

export type RowServiceOptionsUpsertLocalizationInput = {
  update: RowServiceOptionsUpdateLocalizationDataInput;
  create: RowServiceOptionsCreateLocalizationDataInput;
  locale: Locale;
};

export type RowServiceOptionsUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowServiceOptionsWhereUniqueInput;
  /** Upsert data */
  data: RowServiceOptionsUpsertInput;
};

/** Identifies documents */
export type RowServiceOptionsWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowServiceOptionsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowServiceOptionsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowServiceOptionsWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  serviceOptions_every?: InputMaybe<PageLinkWhereInput>;
  serviceOptions_some?: InputMaybe<PageLinkWhereInput>;
  serviceOptions_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowServiceOptions record uniquely */
export type RowServiceOptionsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type RowSpecialBanner = Node & {
  /** System stage field */
  stage: Stage;
  /** System Locale field */
  locale: Locale;
  /** Get the other localizations for this document */
  localizations: Array<RowSpecialBanner>;
  /** Get the document in other stages */
  documentInStages: Array<RowSpecialBanner>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  topic?: Maybe<Scalars['String']>;
  copy: RichText;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  asset?: Maybe<Asset>;
  pageLinks: Array<PageLink>;
  scheduledIn: Array<ScheduledOperation>;
  pages: Array<Page>;
  /** List of RowSpecialBanner versions */
  history: Array<Version>;
};


export type RowSpecialBannerlocalizationsArgs = {
  locales?: Array<Locale>;
  includeCurrent?: Scalars['Boolean'];
};


export type RowSpecialBannerdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type RowSpecialBannercreatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowSpecialBannerupdatedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowSpecialBannerpublishedAtArgs = {
  variation?: SystemDateTimeFieldVariation;
};


export type RowSpecialBannercreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerassetArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerpageLinksArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerpagesArgs = {
  where?: InputMaybe<PageWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type RowSpecialBannerhistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type RowSpecialBannerConnectInput = {
  /** Document to connect */
  where: RowSpecialBannerWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type RowSpecialBannerConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<RowSpecialBannerEdge>;
  aggregate: Aggregate;
};

export type RowSpecialBannerCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** topic input for default locale (en) */
  topic?: InputMaybe<Scalars['String']>;
  /** copy input for default locale (en) */
  copy: Scalars['RichTextAST'];
  asset?: InputMaybe<AssetCreateOneInlineInput>;
  pageLinks?: InputMaybe<PageLinkCreateManyInlineInput>;
  pages?: InputMaybe<PageCreateManyInlineInput>;
  /** Inline mutations for managing document localizations excluding the default locale */
  localizations?: InputMaybe<RowSpecialBannerCreateLocalizationsInput>;
};

export type RowSpecialBannerCreateLocalizationDataInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  topic?: InputMaybe<Scalars['String']>;
  copy: Scalars['RichTextAST'];
};

export type RowSpecialBannerCreateLocalizationInput = {
  /** Localization input */
  data: RowSpecialBannerCreateLocalizationDataInput;
  locale: Locale;
};

export type RowSpecialBannerCreateLocalizationsInput = {
  /** Create localizations for the newly-created document */
  create?: InputMaybe<Array<RowSpecialBannerCreateLocalizationInput>>;
};

export type RowSpecialBannerCreateManyInlineInput = {
  /** Create and connect multiple existing RowSpecialBanner documents */
  create?: InputMaybe<Array<RowSpecialBannerCreateInput>>;
  /** Connect multiple existing RowSpecialBanner documents */
  connect?: InputMaybe<Array<RowSpecialBannerWhereUniqueInput>>;
};

export type RowSpecialBannerCreateOneInlineInput = {
  /** Create and connect one RowSpecialBanner document */
  create?: InputMaybe<RowSpecialBannerCreateInput>;
  /** Connect one existing RowSpecialBanner document */
  connect?: InputMaybe<RowSpecialBannerWhereUniqueInput>;
};

/** An edge in a connection. */
export type RowSpecialBannerEdge = {
  /** The item at the end of the edge. */
  node: RowSpecialBanner;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type RowSpecialBannerManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowSpecialBannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowSpecialBannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowSpecialBannerWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  pageLinks_every?: InputMaybe<PageLinkWhereInput>;
  pageLinks_some?: InputMaybe<PageLinkWhereInput>;
  pageLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

export type RowSpecialBannerOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC'
  | 'topic_ASC'
  | 'topic_DESC';

export type RowSpecialBannerUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  /** topic input for default locale (en) */
  topic?: InputMaybe<Scalars['String']>;
  /** copy input for default locale (en) */
  copy?: InputMaybe<Scalars['RichTextAST']>;
  asset?: InputMaybe<AssetUpdateOneInlineInput>;
  pageLinks?: InputMaybe<PageLinkUpdateManyInlineInput>;
  pages?: InputMaybe<PageUpdateManyInlineInput>;
  /** Manage document localizations */
  localizations?: InputMaybe<RowSpecialBannerUpdateLocalizationsInput>;
};

export type RowSpecialBannerUpdateLocalizationDataInput = {
  topic?: InputMaybe<Scalars['String']>;
  copy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowSpecialBannerUpdateLocalizationInput = {
  data: RowSpecialBannerUpdateLocalizationDataInput;
  locale: Locale;
};

export type RowSpecialBannerUpdateLocalizationsInput = {
  /** Localizations to create */
  create?: InputMaybe<Array<RowSpecialBannerCreateLocalizationInput>>;
  /** Localizations to update */
  update?: InputMaybe<Array<RowSpecialBannerUpdateLocalizationInput>>;
  upsert?: InputMaybe<Array<RowSpecialBannerUpsertLocalizationInput>>;
  /** Localizations to delete */
  delete?: InputMaybe<Array<Locale>>;
};

export type RowSpecialBannerUpdateManyInlineInput = {
  /** Create and connect multiple RowSpecialBanner documents */
  create?: InputMaybe<Array<RowSpecialBannerCreateInput>>;
  /** Connect multiple existing RowSpecialBanner documents */
  connect?: InputMaybe<Array<RowSpecialBannerConnectInput>>;
  /** Override currently-connected documents with multiple existing RowSpecialBanner documents */
  set?: InputMaybe<Array<RowSpecialBannerWhereUniqueInput>>;
  /** Update multiple RowSpecialBanner documents */
  update?: InputMaybe<Array<RowSpecialBannerUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple RowSpecialBanner documents */
  upsert?: InputMaybe<Array<RowSpecialBannerUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple RowSpecialBanner documents */
  disconnect?: InputMaybe<Array<RowSpecialBannerWhereUniqueInput>>;
  /** Delete multiple RowSpecialBanner documents */
  delete?: InputMaybe<Array<RowSpecialBannerWhereUniqueInput>>;
};

export type RowSpecialBannerUpdateManyInput = {
  /** topic input for default locale (en) */
  topic?: InputMaybe<Scalars['String']>;
  /** copy input for default locale (en) */
  copy?: InputMaybe<Scalars['RichTextAST']>;
  /** Optional updates to localizations */
  localizations?: InputMaybe<RowSpecialBannerUpdateManyLocalizationsInput>;
};

export type RowSpecialBannerUpdateManyLocalizationDataInput = {
  topic?: InputMaybe<Scalars['String']>;
  copy?: InputMaybe<Scalars['RichTextAST']>;
};

export type RowSpecialBannerUpdateManyLocalizationInput = {
  data: RowSpecialBannerUpdateManyLocalizationDataInput;
  locale: Locale;
};

export type RowSpecialBannerUpdateManyLocalizationsInput = {
  /** Localizations to update */
  update?: InputMaybe<Array<RowSpecialBannerUpdateManyLocalizationInput>>;
};

export type RowSpecialBannerUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: RowSpecialBannerWhereInput;
  /** Update many input */
  data: RowSpecialBannerUpdateManyInput;
};

export type RowSpecialBannerUpdateOneInlineInput = {
  /** Create and connect one RowSpecialBanner document */
  create?: InputMaybe<RowSpecialBannerCreateInput>;
  /** Update single RowSpecialBanner document */
  update?: InputMaybe<RowSpecialBannerUpdateWithNestedWhereUniqueInput>;
  /** Upsert single RowSpecialBanner document */
  upsert?: InputMaybe<RowSpecialBannerUpsertWithNestedWhereUniqueInput>;
  /** Connect existing RowSpecialBanner document */
  connect?: InputMaybe<RowSpecialBannerWhereUniqueInput>;
  /** Disconnect currently connected RowSpecialBanner document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected RowSpecialBanner document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type RowSpecialBannerUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowSpecialBannerWhereUniqueInput;
  /** Document to update */
  data: RowSpecialBannerUpdateInput;
};

export type RowSpecialBannerUpsertInput = {
  /** Create document if it didn't exist */
  create: RowSpecialBannerCreateInput;
  /** Update document if it exists */
  update: RowSpecialBannerUpdateInput;
};

export type RowSpecialBannerUpsertLocalizationInput = {
  update: RowSpecialBannerUpdateLocalizationDataInput;
  create: RowSpecialBannerCreateLocalizationDataInput;
  locale: Locale;
};

export type RowSpecialBannerUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: RowSpecialBannerWhereUniqueInput;
  /** Upsert data */
  data: RowSpecialBannerUpsertInput;
};

/** Identifies documents */
export type RowSpecialBannerWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<RowSpecialBannerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<RowSpecialBannerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<RowSpecialBannerWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  topic?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  topic_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  topic_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  topic_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  topic_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  topic_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  topic_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  topic_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  topic_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  topic_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  asset?: InputMaybe<AssetWhereInput>;
  pageLinks_every?: InputMaybe<PageLinkWhereInput>;
  pageLinks_some?: InputMaybe<PageLinkWhereInput>;
  pageLinks_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
  pages_every?: InputMaybe<PageWhereInput>;
  pages_some?: InputMaybe<PageWhereInput>;
  pages_none?: InputMaybe<PageWhereInput>;
};

/** References RowSpecialBanner record uniquely */
export type RowSpecialBannerWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

/** Scheduled Operation system model */
export type ScheduledOperation = Node & {
  /** System stage field */
  stage: Stage;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledOperation>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** Operation description */
  description?: Maybe<Scalars['String']>;
  /** Operation error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** Raw operation payload including all details, this field is subject to change */
  rawPayload: Scalars['Json'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** The release this operation is scheduled for */
  release?: Maybe<ScheduledRelease>;
  /** operation Status */
  status: ScheduledOperationStatus;
  affectedDocuments: Array<ScheduledOperationAffectedDocument>;
};


/** Scheduled Operation system model */
export type ScheduledOperationdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


/** Scheduled Operation system model */
export type ScheduledOperationcreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationpublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationreleaseArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Operation system model */
export type ScheduledOperationaffectedDocumentsArgs = {
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledOperationAffectedDocument = Asset | Banner | Footer | Page | PageLink | RowBlogContent | RowButtonLinkList | RowColumnOne | RowColumnThree | RowColumnTwo | RowContentLinks | RowHeroBanner | RowProduct | RowQuote | RowServiceOptions | RowSpecialBanner | Usps;

export type ScheduledOperationConnectInput = {
  /** Document to connect */
  where: ScheduledOperationWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type ScheduledOperationConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<ScheduledOperationEdge>;
  aggregate: Aggregate;
};

export type ScheduledOperationCreateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationCreateOneInlineInput = {
  /** Connect one existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
};

/** An edge in a connection. */
export type ScheduledOperationEdge = {
  /** The item at the end of the edge. */
  node: ScheduledOperation;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type ScheduledOperationManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<ScheduledOperationStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<ScheduledOperationStatus>>;
};

export type ScheduledOperationOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'errorMessage_ASC'
  | 'errorMessage_DESC'
  | 'status_ASC'
  | 'status_DESC';

/** System Scheduled Operation Status */
export type ScheduledOperationStatus =
  | 'PENDING'
  | 'IN_PROGRESS'
  | 'COMPLETED'
  | 'FAILED'
  | 'CANCELED';

export type ScheduledOperationUpdateManyInlineInput = {
  /** Connect multiple existing ScheduledOperation documents */
  connect?: InputMaybe<Array<ScheduledOperationConnectInput>>;
  /** Override currently-connected documents with multiple existing ScheduledOperation documents */
  set?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
  /** Disconnect multiple ScheduledOperation documents */
  disconnect?: InputMaybe<Array<ScheduledOperationWhereUniqueInput>>;
};

export type ScheduledOperationUpdateOneInlineInput = {
  /** Connect existing ScheduledOperation document */
  connect?: InputMaybe<ScheduledOperationWhereUniqueInput>;
  /** Disconnect currently connected ScheduledOperation document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type ScheduledOperationWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledOperationWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  description?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  release?: InputMaybe<ScheduledReleaseWhereInput>;
  status?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledOperationStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<ScheduledOperationStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<ScheduledOperationStatus>>;
};

/** References ScheduledOperation record uniquely */
export type ScheduledOperationWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Scheduled Release system model */
export type ScheduledRelease = Node & {
  /** System stage field */
  stage: Stage;
  /** Get the document in other stages */
  documentInStages: Array<ScheduledRelease>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** Release Title */
  title?: Maybe<Scalars['String']>;
  /** Release description */
  description?: Maybe<Scalars['String']>;
  /** Release error message */
  errorMessage?: Maybe<Scalars['String']>;
  /** Whether scheduled release should be run */
  isActive: Scalars['Boolean'];
  /** Whether scheduled release is implicit */
  isImplicit: Scalars['Boolean'];
  /** Release date and time */
  releaseAt?: Maybe<Scalars['DateTime']>;
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  /** Operations to run with this release */
  operations: Array<ScheduledOperation>;
  /** Release Status */
  status: ScheduledReleaseStatus;
};


/** Scheduled Release system model */
export type ScheduledReleasedocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


/** Scheduled Release system model */
export type ScheduledReleasecreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleasepublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


/** Scheduled Release system model */
export type ScheduledReleaseoperationsArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  orderBy?: InputMaybe<ScheduledOperationOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};

export type ScheduledReleaseConnectInput = {
  /** Document to connect */
  where: ScheduledReleaseWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type ScheduledReleaseConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<ScheduledReleaseEdge>;
  aggregate: Aggregate;
};

export type ScheduledReleaseCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
};

export type ScheduledReleaseCreateManyInlineInput = {
  /** Create and connect multiple existing ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
};

export type ScheduledReleaseCreateOneInlineInput = {
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
  /** Connect one existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
};

/** An edge in a connection. */
export type ScheduledReleaseEdge = {
  /** The item at the end of the edge. */
  node: ScheduledRelease;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type ScheduledReleaseManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<ScheduledReleaseStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<ScheduledReleaseStatus>>;
};

export type ScheduledReleaseOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'errorMessage_ASC'
  | 'errorMessage_DESC'
  | 'isActive_ASC'
  | 'isActive_DESC'
  | 'isImplicit_ASC'
  | 'isImplicit_DESC'
  | 'releaseAt_ASC'
  | 'releaseAt_DESC'
  | 'status_ASC'
  | 'status_DESC';

/** System Scheduled Release Status */
export type ScheduledReleaseStatus =
  | 'PENDING'
  | 'IN_PROGRESS'
  | 'COMPLETED'
  | 'FAILED';

export type ScheduledReleaseUpdateInput = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
};

export type ScheduledReleaseUpdateManyInlineInput = {
  /** Create and connect multiple ScheduledRelease documents */
  create?: InputMaybe<Array<ScheduledReleaseCreateInput>>;
  /** Connect multiple existing ScheduledRelease documents */
  connect?: InputMaybe<Array<ScheduledReleaseConnectInput>>;
  /** Override currently-connected documents with multiple existing ScheduledRelease documents */
  set?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Update multiple ScheduledRelease documents */
  update?: InputMaybe<Array<ScheduledReleaseUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple ScheduledRelease documents */
  upsert?: InputMaybe<Array<ScheduledReleaseUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple ScheduledRelease documents */
  disconnect?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
  /** Delete multiple ScheduledRelease documents */
  delete?: InputMaybe<Array<ScheduledReleaseWhereUniqueInput>>;
};

export type ScheduledReleaseUpdateManyInput = {
  title?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
};

export type ScheduledReleaseUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: ScheduledReleaseWhereInput;
  /** Update many input */
  data: ScheduledReleaseUpdateManyInput;
};

export type ScheduledReleaseUpdateOneInlineInput = {
  /** Create and connect one ScheduledRelease document */
  create?: InputMaybe<ScheduledReleaseCreateInput>;
  /** Update single ScheduledRelease document */
  update?: InputMaybe<ScheduledReleaseUpdateWithNestedWhereUniqueInput>;
  /** Upsert single ScheduledRelease document */
  upsert?: InputMaybe<ScheduledReleaseUpsertWithNestedWhereUniqueInput>;
  /** Connect existing ScheduledRelease document */
  connect?: InputMaybe<ScheduledReleaseWhereUniqueInput>;
  /** Disconnect currently connected ScheduledRelease document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected ScheduledRelease document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type ScheduledReleaseUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
  /** Document to update */
  data: ScheduledReleaseUpdateInput;
};

export type ScheduledReleaseUpsertInput = {
  /** Create document if it didn't exist */
  create: ScheduledReleaseCreateInput;
  /** Update document if it exists */
  update: ScheduledReleaseUpdateInput;
};

export type ScheduledReleaseUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: ScheduledReleaseWhereUniqueInput;
  /** Upsert data */
  data: ScheduledReleaseUpsertInput;
};

/** Identifies documents */
export type ScheduledReleaseWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<ScheduledReleaseWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  title?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  title_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  title_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  title_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  title_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  title_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  title_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  title_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  title_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  title_not_ends_with?: InputMaybe<Scalars['String']>;
  description?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  description_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  description_not_ends_with?: InputMaybe<Scalars['String']>;
  errorMessage?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  errorMessage_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  errorMessage_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  errorMessage_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  errorMessage_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  errorMessage_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  errorMessage_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  errorMessage_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  errorMessage_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  errorMessage_not_ends_with?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  isImplicit?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isImplicit_not?: InputMaybe<Scalars['Boolean']>;
  releaseAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  releaseAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  releaseAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  releaseAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  releaseAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  releaseAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  releaseAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  releaseAt_gte?: InputMaybe<Scalars['DateTime']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  operations_every?: InputMaybe<ScheduledOperationWhereInput>;
  operations_some?: InputMaybe<ScheduledOperationWhereInput>;
  operations_none?: InputMaybe<ScheduledOperationWhereInput>;
  status?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are not equal to given value. */
  status_not?: InputMaybe<ScheduledReleaseStatus>;
  /** All values that are contained in given list. */
  status_in?: InputMaybe<Array<ScheduledReleaseStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: InputMaybe<Array<ScheduledReleaseStatus>>;
};

/** References ScheduledRelease record uniquely */
export type ScheduledReleaseWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

/** Stage system enumeration */
export type Stage =
  /** The Draft is the default stage for all your content. */
  | 'DRAFT'
  /** The Published stage is where you can publish your content to. */
  | 'PUBLISHED';

export type SystemDateTimeFieldVariation =
  | 'BASE'
  | 'LOCALIZATION'
  | 'COMBINED';

export type UnpublishLocaleInput = {
  /** Locales to unpublish */
  locale: Locale;
  /** Stages to unpublish selected locales from */
  stages: Array<Stage>;
};

/** User system model */
export type User = Node & {
  /** System stage field */
  stage: Stage;
  /** Get the document in other stages */
  documentInStages: Array<User>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  /** The username */
  name: Scalars['String'];
  /** Profile Picture url */
  picture?: Maybe<Scalars['String']>;
  /** Flag to determine if user is active or not */
  isActive: Scalars['Boolean'];
  /** User Kind. Can be either MEMBER, PAT or PUBLIC */
  kind: UserKind;
};


/** User system model */
export type UserdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};

export type UserConnectInput = {
  /** Document to connect */
  where: UserWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type UserConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<UserEdge>;
  aggregate: Aggregate;
};

export type UserCreateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserCreateOneInlineInput = {
  /** Connect one existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
};

/** An edge in a connection. */
export type UserEdge = {
  /** The item at the end of the edge. */
  node: User;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** System User Kind */
export type UserKind =
  | 'MEMBER'
  | 'PAT'
  | 'PUBLIC'
  | 'WEBHOOK';

/** Identifies documents */
export type UserManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are not equal to given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<UserKind>>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<UserKind>>;
};

export type UserOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'picture_ASC'
  | 'picture_DESC'
  | 'isActive_ASC'
  | 'isActive_DESC'
  | 'kind_ASC'
  | 'kind_DESC';

export type UserUpdateManyInlineInput = {
  /** Connect multiple existing User documents */
  connect?: InputMaybe<Array<UserConnectInput>>;
  /** Override currently-connected documents with multiple existing User documents */
  set?: InputMaybe<Array<UserWhereUniqueInput>>;
  /** Disconnect multiple User documents */
  disconnect?: InputMaybe<Array<UserWhereUniqueInput>>;
};

export type UserUpdateOneInlineInput = {
  /** Connect existing User document */
  connect?: InputMaybe<UserWhereUniqueInput>;
  /** Disconnect currently connected User document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
};

/** Identifies documents */
export type UserWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UserWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  name?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  name_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  name_not_ends_with?: InputMaybe<Scalars['String']>;
  picture?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  picture_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  picture_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  picture_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  picture_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  picture_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  picture_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  picture_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  picture_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  picture_not_ends_with?: InputMaybe<Scalars['String']>;
  isActive?: InputMaybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isActive_not?: InputMaybe<Scalars['Boolean']>;
  kind?: InputMaybe<UserKind>;
  /** All values that are not equal to given value. */
  kind_not?: InputMaybe<UserKind>;
  /** All values that are contained in given list. */
  kind_in?: InputMaybe<Array<UserKind>>;
  /** All values that are not contained in given list. */
  kind_not_in?: InputMaybe<Array<UserKind>>;
};

/** References User record uniquely */
export type UserWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
};

export type Usps = Node & {
  /** System stage field */
  stage: Stage;
  /** Get the document in other stages */
  documentInStages: Array<Usps>;
  /** The unique identifier */
  id: Scalars['ID'];
  /** The time the document was created */
  createdAt: Scalars['DateTime'];
  /** The time the document was updated */
  updatedAt: Scalars['DateTime'];
  /** The time the document was published. Null on documents in draft stage. */
  publishedAt?: Maybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  /** User that created this document */
  createdBy?: Maybe<User>;
  /** User that last updated this document */
  updatedBy?: Maybe<User>;
  /** User that last published this document */
  publishedBy?: Maybe<User>;
  uspsMultiple: Array<PageLink>;
  scheduledIn: Array<ScheduledOperation>;
  /** List of Usps versions */
  history: Array<Version>;
};


export type UspsdocumentInStagesArgs = {
  stages?: Array<Stage>;
  includeCurrent?: Scalars['Boolean'];
  inheritLocale?: Scalars['Boolean'];
};


export type UspscreatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type UspsupdatedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type UspspublishedByArgs = {
  locales?: InputMaybe<Array<Locale>>;
};


export type UspsuspsMultipleArgs = {
  where?: InputMaybe<PageLinkWhereInput>;
  orderBy?: InputMaybe<PageLinkOrderByInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type UspsscheduledInArgs = {
  where?: InputMaybe<ScheduledOperationWhereInput>;
  skip?: InputMaybe<Scalars['Int']>;
  after?: InputMaybe<Scalars['String']>;
  before?: InputMaybe<Scalars['String']>;
  first?: InputMaybe<Scalars['Int']>;
  last?: InputMaybe<Scalars['Int']>;
  locales?: InputMaybe<Array<Locale>>;
};


export type UspshistoryArgs = {
  limit?: Scalars['Int'];
  skip?: Scalars['Int'];
  stageOverride?: InputMaybe<Stage>;
};

export type UspsConnectInput = {
  /** Document to connect */
  where: UspsWhereUniqueInput;
  /** Allow to specify document position in list of connected documents, will default to appending at end of list */
  position?: InputMaybe<ConnectPositionInput>;
};

/** A connection to a list of items. */
export type UspsConnection = {
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<UspsEdge>;
  aggregate: Aggregate;
};

export type UspsCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  identity: Scalars['String'];
  uspsMultiple?: InputMaybe<PageLinkCreateManyInlineInput>;
};

export type UspsCreateManyInlineInput = {
  /** Create and connect multiple existing Usps documents */
  create?: InputMaybe<Array<UspsCreateInput>>;
  /** Connect multiple existing Usps documents */
  connect?: InputMaybe<Array<UspsWhereUniqueInput>>;
};

export type UspsCreateOneInlineInput = {
  /** Create and connect one Usps document */
  create?: InputMaybe<UspsCreateInput>;
  /** Connect one existing Usps document */
  connect?: InputMaybe<UspsWhereUniqueInput>;
};

/** An edge in a connection. */
export type UspsEdge = {
  /** The item at the end of the edge. */
  node: Usps;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
};

/** Identifies documents */
export type UspsManyWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UspsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UspsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UspsWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  uspsMultiple_every?: InputMaybe<PageLinkWhereInput>;
  uspsMultiple_some?: InputMaybe<PageLinkWhereInput>;
  uspsMultiple_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

export type UspsOrderByInput =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'publishedAt_ASC'
  | 'publishedAt_DESC'
  | 'identity_ASC'
  | 'identity_DESC';

export type UspsUpdateInput = {
  identity?: InputMaybe<Scalars['String']>;
  uspsMultiple?: InputMaybe<PageLinkUpdateManyInlineInput>;
};

export type UspsUpdateManyInlineInput = {
  /** Create and connect multiple Usps documents */
  create?: InputMaybe<Array<UspsCreateInput>>;
  /** Connect multiple existing Usps documents */
  connect?: InputMaybe<Array<UspsConnectInput>>;
  /** Override currently-connected documents with multiple existing Usps documents */
  set?: InputMaybe<Array<UspsWhereUniqueInput>>;
  /** Update multiple Usps documents */
  update?: InputMaybe<Array<UspsUpdateWithNestedWhereUniqueInput>>;
  /** Upsert multiple Usps documents */
  upsert?: InputMaybe<Array<UspsUpsertWithNestedWhereUniqueInput>>;
  /** Disconnect multiple Usps documents */
  disconnect?: InputMaybe<Array<UspsWhereUniqueInput>>;
  /** Delete multiple Usps documents */
  delete?: InputMaybe<Array<UspsWhereUniqueInput>>;
};

export type UspsUpdateManyInput = {
  /** No fields in updateMany data input */
  _?: InputMaybe<Scalars['String']>;
};

export type UspsUpdateManyWithNestedWhereInput = {
  /** Document search */
  where: UspsWhereInput;
  /** Update many input */
  data: UspsUpdateManyInput;
};

export type UspsUpdateOneInlineInput = {
  /** Create and connect one Usps document */
  create?: InputMaybe<UspsCreateInput>;
  /** Update single Usps document */
  update?: InputMaybe<UspsUpdateWithNestedWhereUniqueInput>;
  /** Upsert single Usps document */
  upsert?: InputMaybe<UspsUpsertWithNestedWhereUniqueInput>;
  /** Connect existing Usps document */
  connect?: InputMaybe<UspsWhereUniqueInput>;
  /** Disconnect currently connected Usps document */
  disconnect?: InputMaybe<Scalars['Boolean']>;
  /** Delete currently connected Usps document */
  delete?: InputMaybe<Scalars['Boolean']>;
};

export type UspsUpdateWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: UspsWhereUniqueInput;
  /** Document to update */
  data: UspsUpdateInput;
};

export type UspsUpsertInput = {
  /** Create document if it didn't exist */
  create: UspsCreateInput;
  /** Update document if it exists */
  update: UspsUpdateInput;
};

export type UspsUpsertWithNestedWhereUniqueInput = {
  /** Unique document search */
  where: UspsWhereUniqueInput;
  /** Upsert data */
  data: UspsUpsertInput;
};

/** Identifies documents */
export type UspsWhereInput = {
  /** Contains search across all appropriate fields. */
  _search?: InputMaybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: InputMaybe<Array<UspsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: InputMaybe<Array<UspsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: InputMaybe<Array<UspsWhereInput>>;
  id?: InputMaybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: InputMaybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: InputMaybe<Array<Scalars['ID']>>;
  /** All values containing the given string. */
  id_contains?: InputMaybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: InputMaybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: InputMaybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: InputMaybe<Scalars['ID']>;
  /** All values not ending with the given string */
  id_not_ends_with?: InputMaybe<Scalars['ID']>;
  createdAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: InputMaybe<Scalars['DateTime']>;
  updatedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: InputMaybe<Scalars['DateTime']>;
  publishedAt?: InputMaybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  publishedAt_not?: InputMaybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  publishedAt_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  publishedAt_not_in?: InputMaybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  publishedAt_lt?: InputMaybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  publishedAt_lte?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  publishedAt_gt?: InputMaybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  publishedAt_gte?: InputMaybe<Scalars['DateTime']>;
  identity?: InputMaybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  identity_not?: InputMaybe<Scalars['String']>;
  /** All values that are contained in given list. */
  identity_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  identity_not_in?: InputMaybe<Array<Scalars['String']>>;
  /** All values containing the given string. */
  identity_contains?: InputMaybe<Scalars['String']>;
  /** All values not containing the given string. */
  identity_not_contains?: InputMaybe<Scalars['String']>;
  /** All values starting with the given string. */
  identity_starts_with?: InputMaybe<Scalars['String']>;
  /** All values not starting with the given string. */
  identity_not_starts_with?: InputMaybe<Scalars['String']>;
  /** All values ending with the given string. */
  identity_ends_with?: InputMaybe<Scalars['String']>;
  /** All values not ending with the given string */
  identity_not_ends_with?: InputMaybe<Scalars['String']>;
  createdBy?: InputMaybe<UserWhereInput>;
  updatedBy?: InputMaybe<UserWhereInput>;
  publishedBy?: InputMaybe<UserWhereInput>;
  uspsMultiple_every?: InputMaybe<PageLinkWhereInput>;
  uspsMultiple_some?: InputMaybe<PageLinkWhereInput>;
  uspsMultiple_none?: InputMaybe<PageLinkWhereInput>;
  scheduledIn_every?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_some?: InputMaybe<ScheduledOperationWhereInput>;
  scheduledIn_none?: InputMaybe<ScheduledOperationWhereInput>;
};

/** References Usps record uniquely */
export type UspsWhereUniqueInput = {
  id?: InputMaybe<Scalars['ID']>;
  identity?: InputMaybe<Scalars['String']>;
};

export type Version = {
  id: Scalars['ID'];
  stage: Stage;
  revision: Scalars['Int'];
  createdAt: Scalars['DateTime'];
};

export type VersionWhereInput = {
  id: Scalars['ID'];
  stage: Stage;
  revision: Scalars['Int'];
};

export type _FilterKind =
  | 'search'
  | 'AND'
  | 'OR'
  | 'NOT'
  | 'eq'
  | 'eq_not'
  | 'in'
  | 'not_in'
  | 'lt'
  | 'lte'
  | 'gt'
  | 'gte'
  | 'contains'
  | 'not_contains'
  | 'starts_with'
  | 'not_starts_with'
  | 'ends_with'
  | 'not_ends_with'
  | 'contains_all'
  | 'contains_some'
  | 'contains_none'
  | 'relational_single'
  | 'relational_every'
  | 'relational_some'
  | 'relational_none';

export type _MutationInputFieldKind =
  | 'scalar'
  | 'richText'
  | 'richTextWithEmbeds'
  | 'enum'
  | 'relation'
  | 'union'
  | 'virtual';

export type _MutationKind =
  | 'create'
  | 'publish'
  | 'unpublish'
  | 'update'
  | 'upsert'
  | 'delete'
  | 'updateMany'
  | 'publishMany'
  | 'unpublishMany'
  | 'deleteMany'
  | 'schedulePublish'
  | 'scheduleUnpublish';

export type _OrderDirection =
  | 'asc'
  | 'desc';

export type _RelationInputCardinality =
  | 'one'
  | 'many';

export type _RelationInputKind =
  | 'create'
  | 'update';

export type _RelationKind =
  | 'regular'
  | 'union';

export type _SystemDateTimeFieldVariation =
  | 'base'
  | 'localization'
  | 'combined';

    }
    export type QueryGraphcmsSdk = {
  /** Fetches an object given its ID **/
  node: InContextSdkMethod<GraphcmsTypes.Query['node'], GraphcmsTypes.QuerynodeArgs, MeshContext>,
  /** Retrieve multiple rowServiceOptionsMultiple **/
  rowServiceOptionsMultiple: InContextSdkMethod<GraphcmsTypes.Query['rowServiceOptionsMultiple'], GraphcmsTypes.QueryrowServiceOptionsMultipleArgs, MeshContext>,
  /** Retrieve a single rowServiceOptions **/
  rowServiceOptions: InContextSdkMethod<GraphcmsTypes.Query['rowServiceOptions'], GraphcmsTypes.QueryrowServiceOptionsArgs, MeshContext>,
  /** Retrieve multiple rowServiceOptionsMultiple using the Relay connection interface **/
  rowServiceOptionsMultipleConnection: InContextSdkMethod<GraphcmsTypes.Query['rowServiceOptionsMultipleConnection'], GraphcmsTypes.QueryrowServiceOptionsMultipleConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  rowServiceOptionsVersion: InContextSdkMethod<GraphcmsTypes.Query['rowServiceOptionsVersion'], GraphcmsTypes.QueryrowServiceOptionsVersionArgs, MeshContext>,
  /** Retrieve multiple pageLinks **/
  pageLinks: InContextSdkMethod<GraphcmsTypes.Query['pageLinks'], GraphcmsTypes.QuerypageLinksArgs, MeshContext>,
  /** Retrieve a single pageLink **/
  pageLink: InContextSdkMethod<GraphcmsTypes.Query['pageLink'], GraphcmsTypes.QuerypageLinkArgs, MeshContext>,
  /** Retrieve multiple pageLinks using the Relay connection interface **/
  pageLinksConnection: InContextSdkMethod<GraphcmsTypes.Query['pageLinksConnection'], GraphcmsTypes.QuerypageLinksConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  pageLinkVersion: InContextSdkMethod<GraphcmsTypes.Query['pageLinkVersion'], GraphcmsTypes.QuerypageLinkVersionArgs, MeshContext>,
  /** Retrieve multiple footers **/
  footers: InContextSdkMethod<GraphcmsTypes.Query['footers'], GraphcmsTypes.QueryfootersArgs, MeshContext>,
  /** Retrieve a single footer **/
  footer: InContextSdkMethod<GraphcmsTypes.Query['footer'], GraphcmsTypes.QueryfooterArgs, MeshContext>,
  /** Retrieve multiple footers using the Relay connection interface **/
  footersConnection: InContextSdkMethod<GraphcmsTypes.Query['footersConnection'], GraphcmsTypes.QueryfootersConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  footerVersion: InContextSdkMethod<GraphcmsTypes.Query['footerVersion'], GraphcmsTypes.QueryfooterVersionArgs, MeshContext>,
  /** Retrieve multiple rowButtonLinkLists **/
  rowButtonLinkLists: InContextSdkMethod<GraphcmsTypes.Query['rowButtonLinkLists'], GraphcmsTypes.QueryrowButtonLinkListsArgs, MeshContext>,
  /** Retrieve a single rowButtonLinkList **/
  rowButtonLinkList: InContextSdkMethod<GraphcmsTypes.Query['rowButtonLinkList'], GraphcmsTypes.QueryrowButtonLinkListArgs, MeshContext>,
  /** Retrieve multiple rowButtonLinkLists using the Relay connection interface **/
  rowButtonLinkListsConnection: InContextSdkMethod<GraphcmsTypes.Query['rowButtonLinkListsConnection'], GraphcmsTypes.QueryrowButtonLinkListsConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  rowButtonLinkListVersion: InContextSdkMethod<GraphcmsTypes.Query['rowButtonLinkListVersion'], GraphcmsTypes.QueryrowButtonLinkListVersionArgs, MeshContext>,
  /** Retrieve multiple rowQuotes **/
  rowQuotes: InContextSdkMethod<GraphcmsTypes.Query['rowQuotes'], GraphcmsTypes.QueryrowQuotesArgs, MeshContext>,
  /** Retrieve a single rowQuote **/
  rowQuote: InContextSdkMethod<GraphcmsTypes.Query['rowQuote'], GraphcmsTypes.QueryrowQuoteArgs, MeshContext>,
  /** Retrieve multiple rowQuotes using the Relay connection interface **/
  rowQuotesConnection: InContextSdkMethod<GraphcmsTypes.Query['rowQuotesConnection'], GraphcmsTypes.QueryrowQuotesConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  rowQuoteVersion: InContextSdkMethod<GraphcmsTypes.Query['rowQuoteVersion'], GraphcmsTypes.QueryrowQuoteVersionArgs, MeshContext>,
  /** Retrieve multiple rowBlogContents **/
  rowBlogContents: InContextSdkMethod<GraphcmsTypes.Query['rowBlogContents'], GraphcmsTypes.QueryrowBlogContentsArgs, MeshContext>,
  /** Retrieve a single rowBlogContent **/
  rowBlogContent: InContextSdkMethod<GraphcmsTypes.Query['rowBlogContent'], GraphcmsTypes.QueryrowBlogContentArgs, MeshContext>,
  /** Retrieve multiple rowBlogContents using the Relay connection interface **/
  rowBlogContentsConnection: InContextSdkMethod<GraphcmsTypes.Query['rowBlogContentsConnection'], GraphcmsTypes.QueryrowBlogContentsConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  rowBlogContentVersion: InContextSdkMethod<GraphcmsTypes.Query['rowBlogContentVersion'], GraphcmsTypes.QueryrowBlogContentVersionArgs, MeshContext>,
  /** Retrieve multiple uspsMultiple **/
  uspsMultiple: InContextSdkMethod<GraphcmsTypes.Query['uspsMultiple'], GraphcmsTypes.QueryuspsMultipleArgs, MeshContext>,
  /** Retrieve a single usps **/
  usps: InContextSdkMethod<GraphcmsTypes.Query['usps'], GraphcmsTypes.QueryuspsArgs, MeshContext>,
  /** Retrieve multiple uspsMultiple using the Relay connection interface **/
  uspsMultipleConnection: InContextSdkMethod<GraphcmsTypes.Query['uspsMultipleConnection'], GraphcmsTypes.QueryuspsMultipleConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  uspsVersion: InContextSdkMethod<GraphcmsTypes.Query['uspsVersion'], GraphcmsTypes.QueryuspsVersionArgs, MeshContext>,
  /** Retrieve multiple rowContentLinksMultiple **/
  rowContentLinksMultiple: InContextSdkMethod<GraphcmsTypes.Query['rowContentLinksMultiple'], GraphcmsTypes.QueryrowContentLinksMultipleArgs, MeshContext>,
  /** Retrieve a single rowContentLinks **/
  rowContentLinks: InContextSdkMethod<GraphcmsTypes.Query['rowContentLinks'], GraphcmsTypes.QueryrowContentLinksArgs, MeshContext>,
  /** Retrieve multiple rowContentLinksMultiple using the Relay connection interface **/
  rowContentLinksMultipleConnection: InContextSdkMethod<GraphcmsTypes.Query['rowContentLinksMultipleConnection'], GraphcmsTypes.QueryrowContentLinksMultipleConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  rowContentLinksVersion: InContextSdkMethod<GraphcmsTypes.Query['rowContentLinksVersion'], GraphcmsTypes.QueryrowContentLinksVersionArgs, MeshContext>,
  /** Retrieve multiple rowColumnOnes **/
  rowColumnOnes: InContextSdkMethod<GraphcmsTypes.Query['rowColumnOnes'], GraphcmsTypes.QueryrowColumnOnesArgs, MeshContext>,
  /** Retrieve a single rowColumnOne **/
  rowColumnOne: InContextSdkMethod<GraphcmsTypes.Query['rowColumnOne'], GraphcmsTypes.QueryrowColumnOneArgs, MeshContext>,
  /** Retrieve multiple rowColumnOnes using the Relay connection interface **/
  rowColumnOnesConnection: InContextSdkMethod<GraphcmsTypes.Query['rowColumnOnesConnection'], GraphcmsTypes.QueryrowColumnOnesConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  rowColumnOneVersion: InContextSdkMethod<GraphcmsTypes.Query['rowColumnOneVersion'], GraphcmsTypes.QueryrowColumnOneVersionArgs, MeshContext>,
  /** Retrieve multiple rowColumnTwos **/
  rowColumnTwos: InContextSdkMethod<GraphcmsTypes.Query['rowColumnTwos'], GraphcmsTypes.QueryrowColumnTwosArgs, MeshContext>,
  /** Retrieve a single rowColumnTwo **/
  rowColumnTwo: InContextSdkMethod<GraphcmsTypes.Query['rowColumnTwo'], GraphcmsTypes.QueryrowColumnTwoArgs, MeshContext>,
  /** Retrieve multiple rowColumnTwos using the Relay connection interface **/
  rowColumnTwosConnection: InContextSdkMethod<GraphcmsTypes.Query['rowColumnTwosConnection'], GraphcmsTypes.QueryrowColumnTwosConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  rowColumnTwoVersion: InContextSdkMethod<GraphcmsTypes.Query['rowColumnTwoVersion'], GraphcmsTypes.QueryrowColumnTwoVersionArgs, MeshContext>,
  /** Retrieve multiple rowColumnThrees **/
  rowColumnThrees: InContextSdkMethod<GraphcmsTypes.Query['rowColumnThrees'], GraphcmsTypes.QueryrowColumnThreesArgs, MeshContext>,
  /** Retrieve a single rowColumnThree **/
  rowColumnThree: InContextSdkMethod<GraphcmsTypes.Query['rowColumnThree'], GraphcmsTypes.QueryrowColumnThreeArgs, MeshContext>,
  /** Retrieve multiple rowColumnThrees using the Relay connection interface **/
  rowColumnThreesConnection: InContextSdkMethod<GraphcmsTypes.Query['rowColumnThreesConnection'], GraphcmsTypes.QueryrowColumnThreesConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  rowColumnThreeVersion: InContextSdkMethod<GraphcmsTypes.Query['rowColumnThreeVersion'], GraphcmsTypes.QueryrowColumnThreeVersionArgs, MeshContext>,
  /** Retrieve multiple pages **/
  pages: InContextSdkMethod<GraphcmsTypes.Query['pages'], GraphcmsTypes.QuerypagesArgs, MeshContext>,
  /** Retrieve a single page **/
  page: InContextSdkMethod<GraphcmsTypes.Query['page'], GraphcmsTypes.QuerypageArgs, MeshContext>,
  /** Retrieve multiple pages using the Relay connection interface **/
  pagesConnection: InContextSdkMethod<GraphcmsTypes.Query['pagesConnection'], GraphcmsTypes.QuerypagesConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  pageVersion: InContextSdkMethod<GraphcmsTypes.Query['pageVersion'], GraphcmsTypes.QuerypageVersionArgs, MeshContext>,
  /** Retrieve multiple assets **/
  assets: InContextSdkMethod<GraphcmsTypes.Query['assets'], GraphcmsTypes.QueryassetsArgs, MeshContext>,
  /** Retrieve a single asset **/
  asset: InContextSdkMethod<GraphcmsTypes.Query['asset'], GraphcmsTypes.QueryassetArgs, MeshContext>,
  /** Retrieve multiple assets using the Relay connection interface **/
  assetsConnection: InContextSdkMethod<GraphcmsTypes.Query['assetsConnection'], GraphcmsTypes.QueryassetsConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  assetVersion: InContextSdkMethod<GraphcmsTypes.Query['assetVersion'], GraphcmsTypes.QueryassetVersionArgs, MeshContext>,
  /** Retrieve multiple users **/
  users: InContextSdkMethod<GraphcmsTypes.Query['users'], GraphcmsTypes.QueryusersArgs, MeshContext>,
  /** Retrieve a single user **/
  user: InContextSdkMethod<GraphcmsTypes.Query['user'], GraphcmsTypes.QueryuserArgs, MeshContext>,
  /** Retrieve multiple users using the Relay connection interface **/
  usersConnection: InContextSdkMethod<GraphcmsTypes.Query['usersConnection'], GraphcmsTypes.QueryusersConnectionArgs, MeshContext>,
  /** Retrieve multiple rowSpecialBanners **/
  rowSpecialBanners: InContextSdkMethod<GraphcmsTypes.Query['rowSpecialBanners'], GraphcmsTypes.QueryrowSpecialBannersArgs, MeshContext>,
  /** Retrieve a single rowSpecialBanner **/
  rowSpecialBanner: InContextSdkMethod<GraphcmsTypes.Query['rowSpecialBanner'], GraphcmsTypes.QueryrowSpecialBannerArgs, MeshContext>,
  /** Retrieve multiple rowSpecialBanners using the Relay connection interface **/
  rowSpecialBannersConnection: InContextSdkMethod<GraphcmsTypes.Query['rowSpecialBannersConnection'], GraphcmsTypes.QueryrowSpecialBannersConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  rowSpecialBannerVersion: InContextSdkMethod<GraphcmsTypes.Query['rowSpecialBannerVersion'], GraphcmsTypes.QueryrowSpecialBannerVersionArgs, MeshContext>,
  /** Retrieve multiple rowProductMultiple **/
  rowProductMultiple: InContextSdkMethod<GraphcmsTypes.Query['rowProductMultiple'], GraphcmsTypes.QueryrowProductMultipleArgs, MeshContext>,
  /** Retrieve a single rowProduct **/
  rowProduct: InContextSdkMethod<GraphcmsTypes.Query['rowProduct'], GraphcmsTypes.QueryrowProductArgs, MeshContext>,
  /** Retrieve multiple rowProductMultiple using the Relay connection interface **/
  rowProductMultipleConnection: InContextSdkMethod<GraphcmsTypes.Query['rowProductMultipleConnection'], GraphcmsTypes.QueryrowProductMultipleConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  rowProductVersion: InContextSdkMethod<GraphcmsTypes.Query['rowProductVersion'], GraphcmsTypes.QueryrowProductVersionArgs, MeshContext>,
  /** Retrieve multiple rowHeroBanners **/
  rowHeroBanners: InContextSdkMethod<GraphcmsTypes.Query['rowHeroBanners'], GraphcmsTypes.QueryrowHeroBannersArgs, MeshContext>,
  /** Retrieve a single rowHeroBanner **/
  rowHeroBanner: InContextSdkMethod<GraphcmsTypes.Query['rowHeroBanner'], GraphcmsTypes.QueryrowHeroBannerArgs, MeshContext>,
  /** Retrieve multiple rowHeroBanners using the Relay connection interface **/
  rowHeroBannersConnection: InContextSdkMethod<GraphcmsTypes.Query['rowHeroBannersConnection'], GraphcmsTypes.QueryrowHeroBannersConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  rowHeroBannerVersion: InContextSdkMethod<GraphcmsTypes.Query['rowHeroBannerVersion'], GraphcmsTypes.QueryrowHeroBannerVersionArgs, MeshContext>,
  /** Retrieve multiple scheduledOperations **/
  scheduledOperations: InContextSdkMethod<GraphcmsTypes.Query['scheduledOperations'], GraphcmsTypes.QueryscheduledOperationsArgs, MeshContext>,
  /** Retrieve a single scheduledOperation **/
  scheduledOperation: InContextSdkMethod<GraphcmsTypes.Query['scheduledOperation'], GraphcmsTypes.QueryscheduledOperationArgs, MeshContext>,
  /** Retrieve multiple scheduledOperations using the Relay connection interface **/
  scheduledOperationsConnection: InContextSdkMethod<GraphcmsTypes.Query['scheduledOperationsConnection'], GraphcmsTypes.QueryscheduledOperationsConnectionArgs, MeshContext>,
  /** Retrieve multiple scheduledReleases **/
  scheduledReleases: InContextSdkMethod<GraphcmsTypes.Query['scheduledReleases'], GraphcmsTypes.QueryscheduledReleasesArgs, MeshContext>,
  /** Retrieve a single scheduledRelease **/
  scheduledRelease: InContextSdkMethod<GraphcmsTypes.Query['scheduledRelease'], GraphcmsTypes.QueryscheduledReleaseArgs, MeshContext>,
  /** Retrieve multiple scheduledReleases using the Relay connection interface **/
  scheduledReleasesConnection: InContextSdkMethod<GraphcmsTypes.Query['scheduledReleasesConnection'], GraphcmsTypes.QueryscheduledReleasesConnectionArgs, MeshContext>,
  /** Retrieve multiple banners **/
  banners: InContextSdkMethod<GraphcmsTypes.Query['banners'], GraphcmsTypes.QuerybannersArgs, MeshContext>,
  /** Retrieve a single banner **/
  banner: InContextSdkMethod<GraphcmsTypes.Query['banner'], GraphcmsTypes.QuerybannerArgs, MeshContext>,
  /** Retrieve multiple banners using the Relay connection interface **/
  bannersConnection: InContextSdkMethod<GraphcmsTypes.Query['bannersConnection'], GraphcmsTypes.QuerybannersConnectionArgs, MeshContext>,
  /** Retrieve document version **/
  bannerVersion: InContextSdkMethod<GraphcmsTypes.Query['bannerVersion'], GraphcmsTypes.QuerybannerVersionArgs, MeshContext>
};

export type MutationGraphcmsSdk = {

};

export type SubscriptionGraphcmsSdk = {

};


    export namespace M2Types {
      export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
};

export type Query = {
  /** Get a list of available store views and their config information. */
  availableStores?: Maybe<Array<Maybe<StoreConfig>>>;
  /** Returns information about shopping cart */
  cart?: Maybe<Cart>;
  categories?: Maybe<CategoryResult>;
  /**
   * The category query searches for categories that match the criteria specified in the search and filter attributes.
   * @deprecated Use 'categoryList' query instead of 'category' query
   */
  category?: Maybe<CategoryTree>;
  /** Returns an array of categories based on the specified filters. */
  categoryList?: Maybe<Array<Maybe<CategoryTree>>>;
  /** Retrieves an array of configuration data for the chat widget. */
  chatData?: Maybe<ChatData>;
  /** The Checkout Agreements information */
  checkoutAgreements?: Maybe<Array<Maybe<CheckoutAgreement>>>;
  /** The CMS block query returns information about CMS blocks */
  cmsBlocks?: Maybe<CmsBlocks>;
  /** The CMS page query returns information about a CMS page */
  cmsPage?: Maybe<CmsPage>;
  /** Return products that have been added to the specified compare list */
  compareList?: Maybe<CompareList>;
  /** The countries query provides information for all countries. */
  countries?: Maybe<Array<Maybe<Country>>>;
  /** The countries query provides information for a single country. */
  country?: Maybe<Country>;
  /** The currency query returns information about store currency. */
  currency?: Maybe<Currency>;
  /** The customAttributeMetadata query returns the attribute type, given an attribute code and entity type */
  customAttributeMetadata?: Maybe<CustomAttributeMetadata>;
  /** The customer query returns information about a customer account */
  customer?: Maybe<Customer>;
  /** Returns information about the customer shopping cart */
  customerCart: Cart;
  /** The query returns the contents of a customer's downloadable products */
  customerDownloadableProducts?: Maybe<CustomerDownloadableProducts>;
  /** @deprecated Use orders from customer instead */
  customerOrders?: Maybe<CustomerOrders>;
  /** Return a list of customer payment tokens */
  customerPaymentTokens?: Maybe<CustomerPaymentTokens>;
  /** Returns status of Easy Email Capture for Checkout. */
  emailCaptureCheckout?: Maybe<IsConfigSettingEnabledOutput>;
  /** Returns status of Easy Email Capture for Newsletter. */
  emailCaptureNewsletter?: Maybe<IsConfigSettingEnabledOutput>;
  /** Retrieve secure PayPal url for Payments Pro Hosted Solution transaction. */
  getHostedProUrl?: Maybe<HostedProUrl>;
  /** Retrieve payment credentials for transaction. Use this query for Payflow Link and Payments Advanced payment methods. */
  getPayflowLinkToken?: Maybe<PayflowLinkToken>;
  isEmailAvailable?: Maybe<IsEmailAvailableOutput>;
  mollieCustomerOrder?: Maybe<CustomerOrder>;
  molliePaymentMethods?: Maybe<MolliePaymentMethodsOutput>;
  /** Retrieves information about an order by order id. */
  orderData?: Maybe<Order>;
  /** The pickup locations query searches for locations that match the search request requirements. */
  pickupLocations?: Maybe<PickupLocations>;
  /** Retrieves metadata required by clients to render the Reviews section. */
  productReviewRatingsMetadata: ProductReviewRatingsMetadata;
  /** The products query searches for products that match the criteria specified in the search and filter attributes. */
  products?: Maybe<Products>;
  /** Return the full details for a specified product, category, or CMS page given the specified url_key, appended by the url_suffix, if one exists */
  route?: Maybe<RoutableInterface>;
  /** The store config query */
  storeConfig?: Maybe<StoreConfig>;
  /** Retrieves an array of configuration data for different types of tracking. */
  trackingData?: Maybe<TrackingData>;
  /**
   * The urlResolver query returns the relative URL for a specified product, category or CMS page, using as input a url_key appended by the url_suffix, if one exists
   * @deprecated Use the 'route' query instead
   */
  urlResolver?: Maybe<EntityUrl>;
  /**
   * The wishlist query returns the contents of a customer's wish list
   * @deprecated Moved under `Customer` `wishlist`
   */
  wishlist?: Maybe<WishlistOutput>;
};


export type QueryavailableStoresArgs = {
  useCurrentGroup?: InputMaybe<Scalars['Boolean']>;
};


export type QuerycartArgs = {
  cart_id: Scalars['String'];
};


export type QuerycategoriesArgs = {
  filters?: InputMaybe<CategoryFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};


export type QuerycategoryArgs = {
  id?: InputMaybe<Scalars['Int']>;
};


export type QuerycategoryListArgs = {
  filters?: InputMaybe<CategoryFilterInput>;
};


export type QuerycmsBlocksArgs = {
  identifiers?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};


export type QuerycmsPageArgs = {
  id?: InputMaybe<Scalars['Int']>;
  identifier?: InputMaybe<Scalars['String']>;
};


export type QuerycompareListArgs = {
  uid: Scalars['ID'];
};


export type QuerycountryArgs = {
  id?: InputMaybe<Scalars['String']>;
};


export type QuerycustomAttributeMetadataArgs = {
  attributes: Array<AttributeInput>;
};


export type QuerygetHostedProUrlArgs = {
  input: HostedProUrlInput;
};


export type QuerygetPayflowLinkTokenArgs = {
  input: PayflowLinkTokenInput;
};


export type QueryisEmailAvailableArgs = {
  email: Scalars['String'];
};


export type QuerymollieCustomerOrderArgs = {
  hash?: InputMaybe<Scalars['String']>;
};


export type QuerymolliePaymentMethodsArgs = {
  input?: InputMaybe<MolliePaymentMethodsInput>;
};


export type QueryorderDataArgs = {
  orderId: Scalars['String'];
};


export type QuerypickupLocationsArgs = {
  area?: InputMaybe<AreaInput>;
  filters?: InputMaybe<PickupLocationFilterInput>;
  sort?: InputMaybe<PickupLocationSortInput>;
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
  productsInfo?: InputMaybe<Array<InputMaybe<ProductInfoInput>>>;
};


export type QueryproductsArgs = {
  search?: InputMaybe<Scalars['String']>;
  filter?: InputMaybe<ProductAttributeFilterInput>;
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};


export type QueryrouteArgs = {
  url: Scalars['String'];
};


export type QueryurlResolverArgs = {
  url: Scalars['String'];
};

/** The type contains information about a store config */
export type StoreConfig = {
  /** Footer Miscellaneous HTML */
  absolute_footer?: Maybe<Scalars['String']>;
  /** Indicates whether guest users can write product reviews. Possible values: 1 (Yes) and 0 (No) */
  allow_guests_to_write_product_reviews?: Maybe<Scalars['String']>;
  /** The value of the Allow Gift Messages for Order Items option */
  allow_items?: Maybe<Scalars['String']>;
  /** The value of the Allow Gift Messages on Order Level option */
  allow_order?: Maybe<Scalars['String']>;
  /** Enable autocomplete on login and forgot password forms */
  autocomplete_on_storefront?: Maybe<Scalars['Boolean']>;
  /** Base currency code */
  base_currency_code?: Maybe<Scalars['String']>;
  /** Base link URL for the store */
  base_link_url?: Maybe<Scalars['String']>;
  /** Base media URL for the store */
  base_media_url?: Maybe<Scalars['String']>;
  /** Base static URL for the store */
  base_static_url?: Maybe<Scalars['String']>;
  /** Base URL for the store */
  base_url?: Maybe<Scalars['String']>;
  /** Braintree cc vault status. */
  braintree_cc_vault_active?: Maybe<Scalars['String']>;
  /** Default Sort By. */
  catalog_default_sort_by?: Maybe<Scalars['String']>;
  /** Corresponds to the 'Display Prices In Product Lists' field. It indicates how FPT information is displayed on category pages */
  category_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
  /** Category URL Suffix. */
  category_url_suffix?: Maybe<Scalars['String']>;
  /** CMS Home Page */
  cms_home_page?: Maybe<Scalars['String']>;
  /** CMS No Cookies Page */
  cms_no_cookies?: Maybe<Scalars['String']>;
  /** CMS No Route Page */
  cms_no_route?: Maybe<Scalars['String']>;
  /**
   * A code assigned to the store to identify it
   * @deprecated Use `store_code` instead.
   */
  code?: Maybe<Scalars['String']>;
  /** The configuration setting determines which thumbnail should be used in the cart for configurable products. */
  configurable_thumbnail_source?: Maybe<Scalars['String']>;
  /** Copyright */
  copyright?: Maybe<Scalars['String']>;
  /** Default Meta Description */
  default_description?: Maybe<Scalars['String']>;
  /** Default display currency code */
  default_display_currency_code?: Maybe<Scalars['String']>;
  /** Default Meta Keywords */
  default_keywords?: Maybe<Scalars['String']>;
  /** Default Page Title */
  default_title?: Maybe<Scalars['String']>;
  /** Display Demo Store Notice */
  demonotice?: Maybe<Scalars['Int']>;
  /** Default Web URL */
  front?: Maybe<Scalars['String']>;
  /** Products per Page on Grid Default Value. */
  grid_per_page?: Maybe<Scalars['Int']>;
  /** Products per Page on Grid Allowed Values. */
  grid_per_page_values?: Maybe<Scalars['String']>;
  /** Scripts and Style Sheets */
  head_includes?: Maybe<Scalars['String']>;
  /** Favicon Icon */
  head_shortcut_icon?: Maybe<Scalars['String']>;
  /** Logo Image */
  header_logo_src?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the store
   * @deprecated Use `store_code` instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** Indicates whether the store view has been designated as the default within the store group */
  is_default_store?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the store group has been designated as the default within the website */
  is_default_store_group?: Maybe<Scalars['Boolean']>;
  /** List Mode. */
  list_mode?: Maybe<Scalars['String']>;
  /** Products per Page on List Default Value. */
  list_per_page?: Maybe<Scalars['Int']>;
  /** Products per Page on List Allowed Values. */
  list_per_page_values?: Maybe<Scalars['String']>;
  /** Store locale */
  locale?: Maybe<Scalars['String']>;
  /** Logo Image Alt */
  logo_alt?: Maybe<Scalars['String']>;
  /** Logo Attribute Height */
  logo_height?: Maybe<Scalars['Int']>;
  /** Logo Attribute Width */
  logo_width?: Maybe<Scalars['Int']>;
  /** Indicates whether wishlists are enabled (1) or disabled (0) */
  magento_wishlist_general_is_enabled?: Maybe<Scalars['String']>;
  /** The minimum number of characters required for a valid password. */
  minimum_password_length?: Maybe<Scalars['String']>;
  /** Default No-route URL */
  no_route?: Maybe<Scalars['String']>;
  /** Payflow Pro vault status. */
  payment_payflowpro_cc_vault_active?: Maybe<Scalars['String']>;
  /** Corresponds to the 'Display Prices On Product View Page' field. It indicates how FPT information is displayed on product pages */
  product_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
  /** Indicates whether product reviews are enabled. Possible values: 1 (Yes) and 0 (No) */
  product_reviews_enabled?: Maybe<Scalars['String']>;
  /** Product URL Suffix. */
  product_url_suffix?: Maybe<Scalars['String']>;
  /** The number of different character classes required in a password (lowercase, uppercase, digits, special characters). */
  required_character_classes_number?: Maybe<Scalars['String']>;
  /**
   * The ID of the root category
   * @deprecated Use `root_category_uid` instead
   */
  root_category_id?: Maybe<Scalars['Int']>;
  /** The unique ID for a `CategoryInterface` object. */
  root_category_uid?: Maybe<Scalars['ID']>;
  /** Corresponds to the 'Display Prices In Sales Modules' field. It indicates how FPT information is displayed on cart, checkout, and order pages */
  sales_fixed_product_tax_display_setting?: Maybe<FixedProductTaxDisplaySettings>;
  /** Secure base link URL for the store */
  secure_base_link_url?: Maybe<Scalars['String']>;
  /** Secure base media URL for the store */
  secure_base_media_url?: Maybe<Scalars['String']>;
  /** Secure base static URL for the store */
  secure_base_static_url?: Maybe<Scalars['String']>;
  /** Secure base URL for the store */
  secure_base_url?: Maybe<Scalars['String']>;
  /** Email to a Friend configuration. */
  send_friend?: Maybe<SendFriendConfiguration>;
  /** Show Breadcrumbs for CMS Pages */
  show_cms_breadcrumbs?: Maybe<Scalars['Int']>;
  /** The unique ID of the store view. In the Admin, this is called the Store View Code. When making a GraphQL call, assign this value to the `Store` header to provide the scope */
  store_code?: Maybe<Scalars['ID']>;
  /** The unique ID assigned to the store group. In the Admin, this is called the Store Name */
  store_group_code?: Maybe<Scalars['ID']>;
  /** The label assigned to the store group */
  store_group_name?: Maybe<Scalars['String']>;
  /** The label assigned to the store view */
  store_name?: Maybe<Scalars['String']>;
  /** The store view sort order */
  store_sort_order?: Maybe<Scalars['Int']>;
  /** Timezone of the store */
  timezone?: Maybe<Scalars['String']>;
  /** Page Title Prefix */
  title_prefix?: Maybe<Scalars['String']>;
  /** Page Title Separator. */
  title_separator?: Maybe<Scalars['String']>;
  /** Page Title Suffix */
  title_suffix?: Maybe<Scalars['String']>;
  /** The configuration determines if the store code should be used in the URL */
  use_store_in_url?: Maybe<Scalars['Boolean']>;
  /** The unique ID for the website */
  website_code?: Maybe<Scalars['ID']>;
  /**
   * The ID number assigned to the website store
   * @deprecated The field should not be used on the storefront
   */
  website_id?: Maybe<Scalars['Int']>;
  /** The label assigned to the website */
  website_name?: Maybe<Scalars['String']>;
  /** The unit of weight */
  weight_unit?: Maybe<Scalars['String']>;
  /** Welcome Text */
  welcome?: Maybe<Scalars['String']>;
};

/** This enumeration display settings for the fixed product tax */
export type FixedProductTaxDisplaySettings =
  /** The displayed price includes the FPT amount without displaying the ProductPrice.fixed_product_taxes values. This value corresponds to 'Including FPT only' */
  | 'INCLUDE_FPT_WITHOUT_DETAILS'
  /** The displayed price includes the FPT amount while displaying the values of ProductPrice.fixed_product_taxes separately. This value corresponds to 'Including FPT and FPT description' */
  | 'INCLUDE_FPT_WITH_DETAILS'
  /** The displayed price does not include the FPT amount. The values of ProductPrice.fixed_product_taxes and the price including the FPT are displayed separately. This value corresponds to 'Excluding FPT, Including FPT description and final price' */
  | 'EXCLUDE_FPT_AND_INCLUDE_WITH_DETAILS'
  /** The displayed price does not include the FPT amount. The values from ProductPrice.fixed_product_taxes are not displayed. This value corresponds to 'Excluding FPT' */
  | 'EXCLUDE_FPT_WITHOUT_DETAILS'
  /** The FPT feature is not enabled. You can omit  ProductPrice.fixed_product_taxes from your query */
  | 'FPT_DISABLED';

export type SendFriendConfiguration = {
  /** Indicates whether the Email to a Friend feature is enabled. */
  enabled_for_customers: Scalars['Boolean'];
  /** Indicates whether the Email to a Friend feature is enabled for guests. */
  enabled_for_guests: Scalars['Boolean'];
};

export type Cart = {
  /**
   * An array of coupons that have been applied to the cart
   * @deprecated Use applied_coupons instead
   */
  applied_coupon?: Maybe<AppliedCoupon>;
  /** An array of `AppliedCoupon` objects. Each object contains the `code` text attribute, which specifies the coupon code */
  applied_coupons?: Maybe<Array<Maybe<AppliedCoupon>>>;
  /** Available payment methods */
  available_payment_methods?: Maybe<Array<Maybe<AvailablePaymentMethod>>>;
  billing_address?: Maybe<BillingCartAddress>;
  email?: Maybe<Scalars['String']>;
  /** The entered gift message for the cart */
  gift_message?: Maybe<GiftMessage>;
  /** The unique ID for a `Cart` object */
  id: Scalars['ID'];
  is_virtual: Scalars['Boolean'];
  items?: Maybe<Array<Maybe<CartItemInterface>>>;
  /** Available issuers for the selected payment method */
  mollie_available_issuers?: Maybe<Array<Maybe<MollieIssuer>>>;
  prices?: Maybe<CartPrices>;
  selected_payment_method?: Maybe<SelectedPaymentMethod>;
  shipping_addresses: Array<Maybe<ShippingCartAddress>>;
  total_quantity: Scalars['Float'];
};

export type AppliedCoupon = {
  code: Scalars['String'];
};

export type AvailablePaymentMethod = {
  /** The payment method code */
  code: Scalars['String'];
  /** Available issuers for this payment method */
  mollie_available_issuers?: Maybe<Array<Maybe<MollieIssuer>>>;
  /** Retrieve meta information for this payment method (image) */
  mollie_meta: MolliePaymentMethodMeta;
  /** The payment method title. */
  title: Scalars['String'];
};

export type MollieIssuer = {
  code?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  svg?: Maybe<Scalars['String']>;
};

export type MolliePaymentMethodMeta = {
  image?: Maybe<Scalars['String']>;
};

export type BillingCartAddress = CartAddressInterface & {
  city: Scalars['String'];
  company?: Maybe<Scalars['String']>;
  country: CartAddressCountry;
  /** @deprecated The field is used only in shipping address */
  customer_notes?: Maybe<Scalars['String']>;
  firstname: Scalars['String'];
  lastname: Scalars['String'];
  postcode?: Maybe<Scalars['String']>;
  region?: Maybe<CartAddressRegion>;
  street: Array<Maybe<Scalars['String']>>;
  telephone: Scalars['String'];
};

export type CartAddressInterface = {
  city: Scalars['String'];
  company?: Maybe<Scalars['String']>;
  country: CartAddressCountry;
  firstname: Scalars['String'];
  lastname: Scalars['String'];
  postcode?: Maybe<Scalars['String']>;
  region?: Maybe<CartAddressRegion>;
  street: Array<Maybe<Scalars['String']>>;
  telephone: Scalars['String'];
};

export type CartAddressCountry = {
  code: Scalars['String'];
  label: Scalars['String'];
};

export type CartAddressRegion = {
  code?: Maybe<Scalars['String']>;
  label?: Maybe<Scalars['String']>;
  region_id?: Maybe<Scalars['Int']>;
};

/** Contains the text of a gift message, its sender, and recipient */
export type GiftMessage = {
  /** Sender name */
  from: Scalars['String'];
  /** Gift message text */
  message: Scalars['String'];
  /** Recipient name */
  to: Scalars['String'];
};

export type CartItemInterface = {
  /** @deprecated Use `uid` instead */
  id: Scalars['String'];
  prices?: Maybe<CartItemPrices>;
  product: ProductInterface;
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID'];
};

export type CartItemPrices = {
  /** An array of discounts to be applied to the cart item */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** Applied FPT to the cart item. */
  fixed_product_taxes?: Maybe<Array<Maybe<FixedProductTax>>>;
  price: Money;
  row_total: Money;
  row_total_including_tax: Money;
  /** The total of all discounts applied to the item */
  total_item_discount?: Maybe<Money>;
};

/** Defines an individual discount. A discount can be applied to the cart as a whole or to an item. */
export type Discount = {
  /** The amount of the discount */
  amount: Money;
  /** A description of the discount */
  label: Scalars['String'];
};

/** A Money object defines a monetary value, including a numeric value and a currency code. */
export type Money = {
  /** A three-letter currency code, such as USD or EUR */
  currency?: Maybe<CurrencyEnum>;
  /** A number expressing a monetary value */
  value?: Maybe<Scalars['Float']>;
};

/** The list of available currency codes */
export type CurrencyEnum =
  | 'AFN'
  | 'ALL'
  | 'AZN'
  | 'DZD'
  | 'AOA'
  | 'ARS'
  | 'AMD'
  | 'AWG'
  | 'AUD'
  | 'BSD'
  | 'BHD'
  | 'BDT'
  | 'BBD'
  | 'BYN'
  | 'BZD'
  | 'BMD'
  | 'BTN'
  | 'BOB'
  | 'BAM'
  | 'BWP'
  | 'BRL'
  | 'GBP'
  | 'BND'
  | 'BGN'
  | 'BUK'
  | 'BIF'
  | 'KHR'
  | 'CAD'
  | 'CVE'
  | 'CZK'
  | 'KYD'
  | 'GQE'
  | 'CLP'
  | 'CNY'
  | 'COP'
  | 'KMF'
  | 'CDF'
  | 'CRC'
  | 'HRK'
  | 'CUP'
  | 'DKK'
  | 'DJF'
  | 'DOP'
  | 'XCD'
  | 'EGP'
  | 'SVC'
  | 'ERN'
  | 'EEK'
  | 'ETB'
  | 'EUR'
  | 'FKP'
  | 'FJD'
  | 'GMD'
  | 'GEK'
  | 'GEL'
  | 'GHS'
  | 'GIP'
  | 'GTQ'
  | 'GNF'
  | 'GYD'
  | 'HTG'
  | 'HNL'
  | 'HKD'
  | 'HUF'
  | 'ISK'
  | 'INR'
  | 'IDR'
  | 'IRR'
  | 'IQD'
  | 'ILS'
  | 'JMD'
  | 'JPY'
  | 'JOD'
  | 'KZT'
  | 'KES'
  | 'KWD'
  | 'KGS'
  | 'LAK'
  | 'LVL'
  | 'LBP'
  | 'LSL'
  | 'LRD'
  | 'LYD'
  | 'LTL'
  | 'MOP'
  | 'MKD'
  | 'MGA'
  | 'MWK'
  | 'MYR'
  | 'MVR'
  | 'LSM'
  | 'MRO'
  | 'MUR'
  | 'MXN'
  | 'MDL'
  | 'MNT'
  | 'MAD'
  | 'MZN'
  | 'MMK'
  | 'NAD'
  | 'NPR'
  | 'ANG'
  | 'YTL'
  | 'NZD'
  | 'NIC'
  | 'NGN'
  | 'KPW'
  | 'NOK'
  | 'OMR'
  | 'PKR'
  | 'PAB'
  | 'PGK'
  | 'PYG'
  | 'PEN'
  | 'PHP'
  | 'PLN'
  | 'QAR'
  | 'RHD'
  | 'RON'
  | 'RUB'
  | 'RWF'
  | 'SHP'
  | 'STD'
  | 'SAR'
  | 'RSD'
  | 'SCR'
  | 'SLL'
  | 'SGD'
  | 'SKK'
  | 'SBD'
  | 'SOS'
  | 'ZAR'
  | 'KRW'
  | 'LKR'
  | 'SDG'
  | 'SRD'
  | 'SZL'
  | 'SEK'
  | 'CHF'
  | 'SYP'
  | 'TWD'
  | 'TJS'
  | 'TZS'
  | 'THB'
  | 'TOP'
  | 'TTD'
  | 'TND'
  | 'TMM'
  | 'USD'
  | 'UGX'
  | 'UAH'
  | 'AED'
  | 'UYU'
  | 'UZS'
  | 'VUV'
  | 'VEB'
  | 'VEF'
  | 'VND'
  | 'CHE'
  | 'CHW'
  | 'XOF'
  | 'WST'
  | 'YER'
  | 'ZMK'
  | 'ZWD'
  | 'TRY'
  | 'AZM'
  | 'ROL'
  | 'TRL'
  | 'XPF';

/** A single FPT that can be applied to a product price. */
export type FixedProductTax = {
  /** Amount of the FPT as a money object. */
  amount?: Maybe<Money>;
  /** The label assigned to the FPT to be displayed on the frontend. */
  label?: Maybe<Scalars['String']>;
};

/** The ProductInterface contains attributes that are common to all types of products. Note that descriptions may not be available for custom and EAV attributes. */
export type ProductInterface = {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
};


/** The ProductInterface contains attributes that are common to all types of products. Note that descriptions may not be available for custom and EAV attributes. */
export type ProductInterfacereviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** CategoryInterface contains the full set of attributes that can be returned in a category search. */
export type CategoryInterface = {
  available_sort_by?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Breadcrumbs, parent categories info. */
  breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  children_count?: Maybe<Scalars['String']>;
  /** Category CMS Block. */
  cms_block?: Maybe<CmsBlock>;
  /**
   * Timestamp indicating when the category was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  custom_layout_update_file?: Maybe<Scalars['String']>;
  /** The attribute to use for sorting. */
  default_sort_by?: Maybe<Scalars['String']>;
  /** An optional description of the category. */
  description?: Maybe<Scalars['String']>;
  display_mode?: Maybe<Scalars['String']>;
  filter_price_range?: Maybe<Scalars['Float']>;
  /**
   * An ID that uniquely identifies the category.
   * @deprecated Use the `uid` argument instead.
   */
  id?: Maybe<Scalars['Int']>;
  image?: Maybe<Scalars['String']>;
  include_in_menu?: Maybe<Scalars['Int']>;
  is_anchor?: Maybe<Scalars['Int']>;
  landing_page?: Maybe<Scalars['Int']>;
  /** Indicates the depth of the category within the tree. */
  level?: Maybe<Scalars['Int']>;
  meta_description?: Maybe<Scalars['String']>;
  meta_keywords?: Maybe<Scalars['String']>;
  meta_title?: Maybe<Scalars['String']>;
  /** The display name of the category. */
  name?: Maybe<Scalars['String']>;
  /** Category Path. */
  path?: Maybe<Scalars['String']>;
  /** Category path in store. */
  path_in_store?: Maybe<Scalars['String']>;
  /** The position of the category relative to other categories at the same level in tree. */
  position?: Maybe<Scalars['Int']>;
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  product_count?: Maybe<Scalars['Int']>;
  /** The list of products assigned to the category. */
  products?: Maybe<CategoryProducts>;
  /** The unique ID for a `CategoryInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the category was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** The url key assigned to the category. */
  url_key?: Maybe<Scalars['String']>;
  /** The url path assigned to the category. */
  url_path?: Maybe<Scalars['String']>;
  /** The part of the category URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
};


/** CategoryInterface contains the full set of attributes that can be returned in a category search. */
export type CategoryInterfaceproductsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};

/** Breadcrumb item. */
export type Breadcrumb = {
  /**
   * Category ID.
   * @deprecated Use the `category_uid` argument instead.
   */
  category_id?: Maybe<Scalars['Int']>;
  /** Category level. */
  category_level?: Maybe<Scalars['Int']>;
  /** Category name. */
  category_name?: Maybe<Scalars['String']>;
  /** The unique ID for a `Breadcrumb` object. */
  category_uid: Scalars['ID'];
  /** Category URL key. */
  category_url_key?: Maybe<Scalars['String']>;
  /** Category URL path. */
  category_url_path?: Maybe<Scalars['String']>;
};

/** CMS block defines all CMS block information */
export type CmsBlock = {
  /** CMS block content */
  content?: Maybe<Scalars['String']>;
  /** CMS block identifier */
  identifier?: Maybe<Scalars['String']>;
  /** CMS block title */
  title?: Maybe<Scalars['String']>;
};

/** ProductAttributeSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. It's possible to sort products using searchable attributes with enabled 'Use in Filter Options' option */
export type ProductAttributeSortInput = {
  /** Attribute label: Product Name */
  name?: InputMaybe<SortEnum>;
  /** Sort by the position assigned to each product. */
  position?: InputMaybe<SortEnum>;
  /** Attribute label: Price */
  price?: InputMaybe<SortEnum>;
  /** Sort by the search relevance score (default). */
  relevance?: InputMaybe<SortEnum>;
};

/** This enumeration indicates whether to return results in ascending or descending order */
export type SortEnum =
  | 'ASC'
  | 'DESC';

/** The category products object returned in the Category query. */
export type CategoryProducts = {
  /** An array of products that are assigned to the category. */
  items?: Maybe<Array<Maybe<ProductInterface>>>;
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  total_count?: Maybe<Scalars['Int']>;
};

/** SearchResultPageInfo provides navigation for the query response */
export type SearchResultPageInfo = {
  /** Specifies which page of results to return */
  current_page?: Maybe<Scalars['Int']>;
  /** Specifies the maximum number of items to return */
  page_size?: Maybe<Scalars['Int']>;
  /** Total pages */
  total_pages?: Maybe<Scalars['Int']>;
};

export type ComplexTextValue = {
  /** HTML format */
  html: Scalars['String'];
};

/** Product image information. Contains the image URL and label. */
export type ProductImage = MediaGalleryInterface & {
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>;
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>;
};

/** Contains basic information about a product image or video. */
export type MediaGalleryInterface = {
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>;
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>;
};

/** MediaGalleryEntry defines characteristics about images and videos associated with a specific product. */
export type MediaGalleryEntry = {
  /** Contains a ProductMediaGalleryEntriesContent object. */
  content?: Maybe<ProductMediaGalleryEntriesContent>;
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The path of the image on the server. */
  file?: Maybe<Scalars['String']>;
  /**
   * The identifier assigned to the object.
   * @deprecated Use `uid` instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The alt text displayed on the UI when the user points to the image. */
  label?: Maybe<Scalars['String']>;
  /** image or video. */
  media_type?: Maybe<Scalars['String']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>;
  /** Array of image types. It can have the following values: image, small_image, thumbnail. */
  types?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** The unique ID for a `MediaGalleryEntry` object. */
  uid: Scalars['ID'];
  /** Contains a ProductMediaGalleryEntriesVideoContent object. */
  video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>;
};

/** ProductMediaGalleryEntriesContent contains an image in base64 format and basic information about the image. */
export type ProductMediaGalleryEntriesContent = {
  /** The image in base64 format. */
  base64_encoded_data?: Maybe<Scalars['String']>;
  /** The file name of the image. */
  name?: Maybe<Scalars['String']>;
  /** The MIME type of the file, such as image/png. */
  type?: Maybe<Scalars['String']>;
};

/** ProductMediaGalleryEntriesVideoContent contains a link to a video file and basic information about the video. */
export type ProductMediaGalleryEntriesVideoContent = {
  /** Must be external-video. */
  media_type?: Maybe<Scalars['String']>;
  /** A description of the video. */
  video_description?: Maybe<Scalars['String']>;
  /** Optional data about the video. */
  video_metadata?: Maybe<Scalars['String']>;
  /** Describes the video source. */
  video_provider?: Maybe<Scalars['String']>;
  /** The title of the video. */
  video_title?: Maybe<Scalars['String']>;
  /** The URL to the video. */
  video_url?: Maybe<Scalars['String']>;
};

/** ProductPrices is deprecated, replaced by PriceRange. The ProductPrices object contains the regular price of an item, as well as its minimum and maximum prices. Only composite products, which include bundle, configurable, and grouped products, can contain a minimum and maximum price. */
export type ProductPrices = {
  /**
   * The highest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the to value.
   * @deprecated Use PriceRange.maximum_price.
   */
  maximalPrice?: Maybe<Price>;
  /**
   * The lowest possible final price for all the options defined within a composite product. If you are specifying a price range, this would be the from value.
   * @deprecated Use PriceRange.minimum_price.
   */
  minimalPrice?: Maybe<Price>;
  /**
   * The base price of a product.
   * @deprecated Use regular_price from PriceRange.minimum_price or PriceRange.maximum_price.
   */
  regularPrice?: Maybe<Price>;
};

/** Price is deprecated, replaced by ProductPrice. The Price object defines the price of a product as well as any tax-related adjustments. */
export type Price = {
  /**
   * An array that provides information about tax, weee, or weee_tax adjustments.
   * @deprecated Price is deprecated, use ProductPrice.
   */
  adjustments?: Maybe<Array<Maybe<PriceAdjustment>>>;
  /**
   * The price of a product plus a three-letter currency code.
   * @deprecated Price is deprecated, use ProductPrice.
   */
  amount?: Maybe<Money>;
};

/** PriceAdjustment is deprecated. Taxes will be included or excluded in the price. The PricedAdjustment object defines the amount of money to apply as an adjustment, the type of adjustment to apply, and whether the item is included or excluded from the adjustment. */
export type PriceAdjustment = {
  /** The amount of the price adjustment and its currency code. */
  amount?: Maybe<Money>;
  /**
   * Indicates whether the adjustment involves tax, weee, or weee_tax.
   * @deprecated PriceAdjustment is deprecated.
   */
  code?: Maybe<PriceAdjustmentCodesEnum>;
  /**
   * Indicates whether the entity described by the code attribute is included or excluded from the adjustment.
   * @deprecated PriceAdjustment is deprecated.
   */
  description?: Maybe<PriceAdjustmentDescriptionEnum>;
};

/** PriceAdjustment.code is deprecated. This enumeration contains values defined in modules other than the Catalog module. */
export type PriceAdjustmentCodesEnum =
  | 'TAX'
  | 'WEEE'
  | 'WEEE_TAX';

/** PriceAdjustmentDescriptionEnum is deprecated. This enumeration states whether a price adjustment is included or excluded. */
export type PriceAdjustmentDescriptionEnum =
  | 'INCLUDED'
  | 'EXCLUDED';

/** Price range for a product. If the product has a single price, the minimum and maximum price will be the same. */
export type PriceRange = {
  /** The highest possible price for the product. */
  maximum_price?: Maybe<ProductPrice>;
  /** The lowest possible price for the product. */
  minimum_price: ProductPrice;
};

/** Represents a product price. */
export type ProductPrice = {
  /** The price discount. Represents the difference between the regular and final price. */
  discount?: Maybe<ProductDiscount>;
  /** The final price of the product after discounts applied. */
  final_price: Money;
  /** The multiple FPTs that can be applied to a product price. */
  fixed_product_taxes?: Maybe<Array<Maybe<FixedProductTax>>>;
  /** The regular price of the product. */
  regular_price: Money;
};

/** A discount applied to a product price. */
export type ProductDiscount = {
  /** The actual value of the discount. */
  amount_off?: Maybe<Scalars['Float']>;
  /** The discount expressed a percentage. */
  percent_off?: Maybe<Scalars['Float']>;
};

/** A price based on the quantity purchased. */
export type TierPrice = {
  /** The price discount that this tier represents. */
  discount?: Maybe<ProductDiscount>;
  final_price?: Maybe<Money>;
  /** The minimum number of items that must be purchased to qualify for this price tier. */
  quantity?: Maybe<Scalars['Float']>;
};

/** ProductLinks contains information about linked products, including the link type and product type of each item. */
export type ProductLinksInterface = {
  /** One of related, associated, upsell, or crosssell. */
  link_type?: Maybe<Scalars['String']>;
  /** The SKU of the linked product. */
  linked_product_sku?: Maybe<Scalars['String']>;
  /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
  linked_product_type?: Maybe<Scalars['String']>;
  /** The position within the list of product links. */
  position?: Maybe<Scalars['Int']>;
  /** The identifier of the linked product. */
  sku?: Maybe<Scalars['String']>;
};

export type ProductReviews = {
  /** An array of product reviews. */
  items: Array<Maybe<ProductReview>>;
  /** Metadata for pagination rendering. */
  page_info: SearchResultPageInfo;
};

/** Details of a product review */
export type ProductReview = {
  /** The average rating for product review. */
  average_rating: Scalars['Float'];
  /** Date indicating when the review was created. */
  created_at: Scalars['String'];
  /** The customer's nickname. Defaults to the customer name, if logged in */
  nickname: Scalars['String'];
  /** Contains details about the reviewed product */
  product: ProductInterface;
  /** An array of ratings by rating category, such as quality, price, and value */
  ratings_breakdown: Array<Maybe<ProductReviewRating>>;
  /** The summary (title) of the review */
  summary: Scalars['String'];
  /** The review text. */
  text: Scalars['String'];
};

export type ProductReviewRating = {
  /** The label assigned to an aspect of a product that is being rated, such as quality or price */
  name: Scalars['String'];
  /** The rating value given by customer. By default, possible values range from 1 to 5. */
  value: Scalars['String'];
};

/** This enumeration states whether a product stock status is in stock or out of stock */
export type ProductStockStatus =
  | 'IN_STOCK'
  | 'OUT_OF_STOCK';

/** ProductTierPrices is deprecated and has been replaced by TierPrice. The ProductTierPrices object defines a tier price, which is a quantity discount offered to a specific customer group. */
export type ProductTierPrices = {
  /**
   * The ID of the customer group.
   * @deprecated customer_group_id is not relevant for storefront.
   */
  customer_group_id?: Maybe<Scalars['String']>;
  /**
   * The percentage discount of the item.
   * @deprecated ProductTierPrices is deprecated. Use TierPrice.discount.
   */
  percentage_value?: Maybe<Scalars['Float']>;
  /**
   * The number of items that must be purchased to qualify for tier pricing.
   * @deprecated ProductTierPrices is deprecated, use TierPrice.quantity.
   */
  qty?: Maybe<Scalars['Float']>;
  /**
   * The price of the fixed price item.
   * @deprecated ProductTierPrices is deprecated. Use TierPrice.final_price
   */
  value?: Maybe<Scalars['Float']>;
  /**
   * The ID assigned to the website.
   * @deprecated website_id is not relevant for storefront.
   */
  website_id?: Maybe<Scalars['Float']>;
};

/** The object contains URL rewrite details */
export type UrlRewrite = {
  /** Request parameters */
  parameters?: Maybe<Array<Maybe<HttpQueryParameter>>>;
  /** Request URL */
  url?: Maybe<Scalars['String']>;
};

/** The object details of target path parameters */
export type HttpQueryParameter = {
  /** Parameter name */
  name?: Maybe<Scalars['String']>;
  /** Parameter value */
  value?: Maybe<Scalars['String']>;
};

/** Website is deprecated because it is should not be used on storefront. The type contains information about a website */
export type Website = {
  /**
   * A code assigned to the website to identify it
   * @deprecated The field should not be used on the storefront.
   */
  code?: Maybe<Scalars['String']>;
  /**
   * The default group ID that the website has
   * @deprecated The field should not be used on the storefront.
   */
  default_group_id?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the website
   * @deprecated The field should not be used on the storefront.
   */
  id?: Maybe<Scalars['Int']>;
  /**
   * Specifies if this is the default website
   * @deprecated The field should not be used on the storefront.
   */
  is_default?: Maybe<Scalars['Boolean']>;
  /**
   * The website name. Websites use this name to identify it easier.
   * @deprecated The field should not be used on the storefront.
   */
  name?: Maybe<Scalars['String']>;
  /**
   * The attribute to use for sorting websites
   * @deprecated The field should not be used on the storefront.
   */
  sort_order?: Maybe<Scalars['Int']>;
};

export type CartPrices = {
  applied_taxes?: Maybe<Array<Maybe<CartTaxItem>>>;
  /** @deprecated Use discounts instead  */
  discount?: Maybe<CartDiscount>;
  /** An array of applied discounts */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  grand_total?: Maybe<Money>;
  subtotal_excluding_tax?: Maybe<Money>;
  subtotal_including_tax?: Maybe<Money>;
  subtotal_with_discount_excluding_tax?: Maybe<Money>;
};

export type CartTaxItem = {
  amount: Money;
  label: Scalars['String'];
};

export type CartDiscount = {
  amount: Money;
  label: Array<Maybe<Scalars['String']>>;
};

export type SelectedPaymentMethod = {
  /** The payment method code */
  code: Scalars['String'];
  /** Retrieve meta information for this payment method (image) */
  mollie_meta: MolliePaymentMethodMeta;
  /** The purchase order number. */
  purchase_order_number?: Maybe<Scalars['String']>;
  /** The payment method title. */
  title: Scalars['String'];
};

export type ShippingCartAddress = CartAddressInterface & {
  available_shipping_methods?: Maybe<Array<Maybe<AvailableShippingMethod>>>;
  /** @deprecated `cart_items_v2` should be used instead */
  cart_items?: Maybe<Array<Maybe<CartItemQuantity>>>;
  cart_items_v2?: Maybe<Array<Maybe<CartItemInterface>>>;
  city: Scalars['String'];
  company?: Maybe<Scalars['String']>;
  country: CartAddressCountry;
  customer_notes?: Maybe<Scalars['String']>;
  firstname: Scalars['String'];
  /** @deprecated This information shoud not be exposed on frontend */
  items_weight?: Maybe<Scalars['Float']>;
  lastname: Scalars['String'];
  pickup_location_code?: Maybe<Scalars['String']>;
  postcode?: Maybe<Scalars['String']>;
  region?: Maybe<CartAddressRegion>;
  selected_shipping_method?: Maybe<SelectedShippingMethod>;
  street: Array<Maybe<Scalars['String']>>;
  telephone: Scalars['String'];
};

export type AvailableShippingMethod = {
  amount: Money;
  available: Scalars['Boolean'];
  /** @deprecated The field should not be used on the storefront */
  base_amount?: Maybe<Money>;
  carrier_code: Scalars['String'];
  carrier_title: Scalars['String'];
  error_message?: Maybe<Scalars['String']>;
  /** Could be null if method is not available */
  method_code?: Maybe<Scalars['String']>;
  /** Could be null if method is not available */
  method_title?: Maybe<Scalars['String']>;
  price_excl_tax: Money;
  price_incl_tax: Money;
};

/** Deprecated: `cart_items` field of `ShippingCartAddress` returns now  `CartItemInterface` instead of `CartItemQuantity` */
export type CartItemQuantity = {
  /** @deprecated `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead of `CartItemQuantity` */
  cart_item_id: Scalars['Int'];
  /** @deprecated `cart_items` field of `ShippingCartAddress` returns now `CartItemInterface` instead of `CartItemQuantity` */
  quantity: Scalars['Float'];
};

export type SelectedShippingMethod = {
  amount: Money;
  /** @deprecated The field should not be used on the storefront */
  base_amount?: Maybe<Money>;
  carrier_code: Scalars['String'];
  carrier_title: Scalars['String'];
  method_code: Scalars['String'];
  method_title: Scalars['String'];
};

/** CategoryFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type CategoryFilterInput = {
  /** Filter by the unique category ID for a `CategoryInterface` object. */
  category_uid?: InputMaybe<FilterEqualTypeInput>;
  /** Deprecated: use 'category_uid' to filter uniquely identifiers of categories. */
  ids?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the display name of the category. */
  name?: InputMaybe<FilterMatchTypeInput>;
  /** Filter by the unique parent category ID for a `CategoryInterface` object. */
  parent_category_uid?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the unique parent category ID for a `CategoryInterface` object. */
  parent_id?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the part of the URL that identifies the category. */
  url_key?: InputMaybe<FilterEqualTypeInput>;
  /** Filter by the URL path for the category. */
  url_path?: InputMaybe<FilterEqualTypeInput>;
};

/** Defines a filter that matches the input exactly. */
export type FilterEqualTypeInput = {
  /** A string to filter on */
  eq?: InputMaybe<Scalars['String']>;
  /** An array of values to filter on */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
};

/** Defines a filter that performs a fuzzy search. */
export type FilterMatchTypeInput = {
  /** One or more words to filter on */
  match?: InputMaybe<Scalars['String']>;
};

/** A collection of CategoryTree objects and pagination information. */
export type CategoryResult = {
  /** A list of categories that match the filter criteria. */
  items?: Maybe<Array<Maybe<CategoryTree>>>;
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The total number of categories that match the criteria. */
  total_count?: Maybe<Scalars['Int']>;
};

/** Category tree implementation */
export type CategoryTree = CategoryInterface & RoutableInterface & {
  available_sort_by?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** Breadcrumbs, parent categories info. */
  breadcrumbs?: Maybe<Array<Maybe<Breadcrumb>>>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Categories' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** Child categories tree. */
  children?: Maybe<Array<Maybe<CategoryTree>>>;
  children_count?: Maybe<Scalars['String']>;
  /** Category CMS Block. */
  cms_block?: Maybe<CmsBlock>;
  /**
   * Timestamp indicating when the category was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  custom_layout_update_file?: Maybe<Scalars['String']>;
  /** The attribute to use for sorting. */
  default_sort_by?: Maybe<Scalars['String']>;
  /** An optional description of the category. */
  description?: Maybe<Scalars['String']>;
  display_mode?: Maybe<Scalars['String']>;
  filter_price_range?: Maybe<Scalars['Float']>;
  /**
   * An ID that uniquely identifies the category.
   * @deprecated Use the `uid` argument instead.
   */
  id?: Maybe<Scalars['Int']>;
  image?: Maybe<Scalars['String']>;
  include_in_menu?: Maybe<Scalars['Int']>;
  is_anchor?: Maybe<Scalars['Int']>;
  landing_page?: Maybe<Scalars['Int']>;
  /** Indicates the depth of the category within the tree. */
  level?: Maybe<Scalars['Int']>;
  meta_description?: Maybe<Scalars['String']>;
  meta_keywords?: Maybe<Scalars['String']>;
  meta_title?: Maybe<Scalars['String']>;
  /** The display name of the category. */
  name?: Maybe<Scalars['String']>;
  /** Category Path. */
  path?: Maybe<Scalars['String']>;
  /** Category path in store. */
  path_in_store?: Maybe<Scalars['String']>;
  /** The position of the category relative to other categories at the same level in tree. */
  position?: Maybe<Scalars['Int']>;
  /** The number of products in the category that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  product_count?: Maybe<Scalars['Int']>;
  /** The list of products assigned to the category. */
  products?: Maybe<CategoryProducts>;
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /** The unique ID for a `CategoryInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the category was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** The url key assigned to the category. */
  url_key?: Maybe<Scalars['String']>;
  /** The url path assigned to the category. */
  url_path?: Maybe<Scalars['String']>;
  /** The part of the category URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
};


/** Category tree implementation */
export type CategoryTreeproductsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
  sort?: InputMaybe<ProductAttributeSortInput>;
};

/** Routable entities serve as the model for a rendered page */
export type RoutableInterface = {
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
};

/** This enumeration defines the entity type. */
export type UrlRewriteEntityTypeEnum =
  | 'CMS_PAGE'
  | 'PRODUCT'
  | 'CATEGORY';

export type ChatData = {
  /** API space id */
  api_space_id?: Maybe<Scalars['String']>;
  /** Cookie name */
  cookie_name?: Maybe<Scalars['String']>;
  /** Is chat enabled */
  is_enabled?: Maybe<Scalars['Boolean']>;
};

/** Defines all Checkout Agreement information */
export type CheckoutAgreement = {
  /** Checkout Agreement identifier */
  agreement_id: Scalars['Int'];
  /** Checkout Agreement checkbox text */
  checkbox_text: Scalars['String'];
  /** Checkout Agreement content */
  content: Scalars['String'];
  /** Checkout Agreement content height */
  content_height?: Maybe<Scalars['String']>;
  /** Is Checkout Agreement content in HTML format */
  is_html: Scalars['Boolean'];
  mode: CheckoutAgreementMode;
  /** Checkout Agreement name */
  name: Scalars['String'];
};

export type CheckoutAgreementMode =
  | 'AUTO'
  | 'MANUAL';

/** CMS blocks information */
export type CmsBlocks = {
  /** An array of CMS blocks */
  items?: Maybe<Array<Maybe<CmsBlock>>>;
};

/** CMS page defines all CMS page information */
export type CmsPage = RoutableInterface & {
  /** CMS page content */
  content?: Maybe<Scalars['String']>;
  /** CMS page content heading */
  content_heading?: Maybe<Scalars['String']>;
  /** Identifier of the CMS page */
  identifier?: Maybe<Scalars['String']>;
  /** CMS page meta description */
  meta_description?: Maybe<Scalars['String']>;
  /** CMS page meta keywords */
  meta_keywords?: Maybe<Scalars['String']>;
  /** CMS page meta title */
  meta_title?: Maybe<Scalars['String']>;
  /** CMS page content heading */
  page_layout?: Maybe<Scalars['String']>;
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** CMS page title */
  title?: Maybe<Scalars['String']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /** URL key of CMS page */
  url_key?: Maybe<Scalars['String']>;
};

export type CompareList = {
  /** An array of attributes that can be used for comparing products */
  attributes?: Maybe<Array<Maybe<ComparableAttribute>>>;
  /** The number of items in the compare list */
  item_count: Scalars['Int'];
  /** An array of products to compare */
  items?: Maybe<Array<Maybe<ComparableItem>>>;
  /** The unique ID assigned to the compare list */
  uid: Scalars['ID'];
};

export type ComparableAttribute = {
  /** An attribute code that is enabled for product comparisons */
  code: Scalars['String'];
  /** The label of the attribute code */
  label: Scalars['String'];
};

export type ComparableItem = {
  /** An array of product attributes that can be used to compare products */
  attributes: Array<Maybe<ProductAttribute>>;
  /** Contains details about a product in a compare list */
  product: ProductInterface;
  /** The unique ID of an item in a compare list */
  uid: Scalars['ID'];
};

export type ProductAttribute = {
  /** The unique identifier for a product attribute code. */
  code: Scalars['String'];
  /** The display value of the attribute */
  value: Scalars['String'];
};

export type Country = {
  available_regions?: Maybe<Array<Maybe<Region>>>;
  full_name_english?: Maybe<Scalars['String']>;
  full_name_locale?: Maybe<Scalars['String']>;
  /** The unique ID for a `Country` object. */
  id?: Maybe<Scalars['String']>;
  three_letter_abbreviation?: Maybe<Scalars['String']>;
  two_letter_abbreviation?: Maybe<Scalars['String']>;
};

export type Region = {
  code?: Maybe<Scalars['String']>;
  /** The unique ID for a `Region` object. */
  id?: Maybe<Scalars['Int']>;
  name?: Maybe<Scalars['String']>;
};

export type Currency = {
  available_currency_codes?: Maybe<Array<Maybe<Scalars['String']>>>;
  base_currency_code?: Maybe<Scalars['String']>;
  base_currency_symbol?: Maybe<Scalars['String']>;
  /** @deprecated Symbol was missed. Use `default_display_currency_code`. */
  default_display_currecy_code?: Maybe<Scalars['String']>;
  /** @deprecated Symbol was missed. Use `default_display_currency_symbol`. */
  default_display_currecy_symbol?: Maybe<Scalars['String']>;
  default_display_currency_code?: Maybe<Scalars['String']>;
  default_display_currency_symbol?: Maybe<Scalars['String']>;
  exchange_rates?: Maybe<Array<Maybe<ExchangeRate>>>;
};

export type ExchangeRate = {
  currency_to?: Maybe<Scalars['String']>;
  rate?: Maybe<Scalars['Float']>;
};

/** AttributeInput specifies the attribute_code and entity_type to search */
export type AttributeInput = {
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  attribute_code?: InputMaybe<Scalars['String']>;
  /** The type of entity that defines the attribute */
  entity_type?: InputMaybe<Scalars['String']>;
};

/** CustomAttributeMetadata defines an array of attribute_codes and entity_types */
export type CustomAttributeMetadata = {
  /** An array of attributes */
  items?: Maybe<Array<Maybe<Attribute>>>;
};

/** Attribute contains the attribute_type of the specified attribute_code and entity_type */
export type Attribute = {
  /** The unique identifier for an attribute code. This value should be in lowercase letters without spaces. */
  attribute_code?: Maybe<Scalars['String']>;
  /** Attribute options list. */
  attribute_options?: Maybe<Array<Maybe<AttributeOption>>>;
  /** The data type of the attribute */
  attribute_type?: Maybe<Scalars['String']>;
  /** The type of entity that defines the attribute */
  entity_type?: Maybe<Scalars['String']>;
  /** The frontend input type of the attribute */
  input_type?: Maybe<Scalars['String']>;
  /** Contains details about the storefront properties configured for the attribute */
  storefront_properties?: Maybe<StorefrontProperties>;
};

/** Attribute option. */
export type AttributeOption = {
  /** Attribute option label. */
  label?: Maybe<Scalars['String']>;
  /** Attribute option value. */
  value?: Maybe<Scalars['String']>;
};

export type StorefrontProperties = {
  /** The relative position of the attribute in the layered navigation block */
  position?: Maybe<Scalars['Int']>;
  /** Indicates whether the attribute is filterable with results, without results, or not at all */
  use_in_layered_navigation?: Maybe<UseInLayeredNavigationOptions>;
  /** Indicates whether the attribute is displayed in product listings */
  use_in_product_listing?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the attribute can be used in layered navigation on search results pages */
  use_in_search_results_layered_navigation?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the attribute is displayed on product pages */
  visible_on_catalog_pages?: Maybe<Scalars['Boolean']>;
};

export type UseInLayeredNavigationOptions =
  | 'NO'
  | 'FILTERABLE_WITH_RESULTS'
  | 'FILTERABLE_NO_RESULT';

/** Customer defines the customer name and address and other details */
export type Customer = {
  /** An array containing the customer's shipping and billing addresses */
  addresses?: Maybe<Array<Maybe<CustomerAddress>>>;
  /** Indicates whether the customer has enabled remote shopping assistance */
  allow_remote_shopping_assistance: Scalars['Boolean'];
  /** The contents of the customer's compare list */
  compare_list?: Maybe<CompareList>;
  /** Timestamp indicating when the account was created */
  created_at?: Maybe<Scalars['String']>;
  /** The customer's date of birth */
  date_of_birth?: Maybe<Scalars['String']>;
  /** The ID assigned to the billing address */
  default_billing?: Maybe<Scalars['String']>;
  /** The ID assigned to the shipping address */
  default_shipping?: Maybe<Scalars['String']>;
  /**
   * The customer's date of birth
   * @deprecated Use `date_of_birth` instead
   */
  dob?: Maybe<Scalars['String']>;
  /** The customer's email address. Required */
  email?: Maybe<Scalars['String']>;
  /** The customer's first name */
  firstname?: Maybe<Scalars['String']>;
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: Maybe<Scalars['Int']>;
  /** @deprecated Customer group should not be exposed in the storefront scenarios */
  group_id?: Maybe<Scalars['Int']>;
  /**
   * The ID assigned to the customer
   * @deprecated id is not needed as part of Customer because on server side it can be identified based on customer token used for authentication. There is no need to know customer ID on the client side.
   */
  id?: Maybe<Scalars['Int']>;
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: Maybe<Scalars['Boolean']>;
  /** The customer's family name */
  lastname?: Maybe<Scalars['String']>;
  /** The customer's middle name */
  middlename?: Maybe<Scalars['String']>;
  orders?: Maybe<CustomerOrders>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>;
  /** Contains the customer's product reviews */
  reviews: ProductReviews;
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>;
  /** The customer's Value-added tax (VAT) number (for corporate customers) */
  taxvat?: Maybe<Scalars['String']>;
  /**
   * Contains a customer's wish lists
   * @deprecated Use `Customer.wishlists` or `Customer.wishlist_v2`
   */
  wishlist: Wishlist;
  /** Retrieve the specified wish list identified by the unique ID for a `Wishlist` object */
  wishlist_v2?: Maybe<Wishlist>;
  /** An array of wishlists. In Magento Open Source, customers are limited to one wish list. The number of wish lists is configurable for Magento Commerce */
  wishlists: Array<Maybe<Wishlist>>;
};


/** Customer defines the customer name and address and other details */
export type CustomerordersArgs = {
  filter?: InputMaybe<CustomerOrdersFilterInput>;
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};


/** Customer defines the customer name and address and other details */
export type CustomerreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};


/** Customer defines the customer name and address and other details */
export type Customerwishlist_v2Args = {
  id: Scalars['ID'];
};


/** Customer defines the customer name and address and other details */
export type CustomerwishlistsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** CustomerAddress contains detailed information about a customer's billing and shipping addresses */
export type CustomerAddress = {
  /** The city or town */
  city?: Maybe<Scalars['String']>;
  /** The customer's company */
  company?: Maybe<Scalars['String']>;
  /** The customer's country */
  country_code?: Maybe<CountryCodeEnum>;
  /**
   * The customer's country
   * @deprecated Use `country_code` instead.
   */
  country_id?: Maybe<Scalars['String']>;
  /** @deprecated Custom attributes should not be put into container */
  custom_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>;
  /**
   * The customer ID
   * @deprecated customer_id is not needed as part of CustomerAddress, address ID (id) is unique identifier for the addresses.
   */
  customer_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the address is the default billing address */
  default_billing?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the address is the default shipping address */
  default_shipping?: Maybe<Scalars['Boolean']>;
  /** Address extension attributes */
  extension_attributes?: Maybe<Array<Maybe<CustomerAddressAttribute>>>;
  /** The fax number */
  fax?: Maybe<Scalars['String']>;
  /** The first name of the person associated with the shipping/billing address */
  firstname?: Maybe<Scalars['String']>;
  /** The ID assigned to the address object */
  id?: Maybe<Scalars['Int']>;
  /** The family name of the person associated with the shipping/billing address */
  lastname?: Maybe<Scalars['String']>;
  /** The middle name of the person associated with the shipping/billing address */
  middlename?: Maybe<Scalars['String']>;
  /** The customer's ZIP or postal code */
  postcode?: Maybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>;
  /** An object containing the region name, region code, and region ID */
  region?: Maybe<CustomerAddressRegion>;
  /** The unique ID for a pre-defined region */
  region_id?: Maybe<Scalars['Int']>;
  /** An array of strings that define the street number and name */
  street?: Maybe<Array<Maybe<Scalars['String']>>>;
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>;
  /** The telephone number */
  telephone?: Maybe<Scalars['String']>;
  /** The customer's Value-added tax (VAT) number (for corporate customers) */
  vat_id?: Maybe<Scalars['String']>;
};

/** The list of countries codes */
export type CountryCodeEnum =
  /** Afghanistan */
  | 'AF'
  /** Åland Islands */
  | 'AX'
  /** Albania */
  | 'AL'
  /** Algeria */
  | 'DZ'
  /** American Samoa */
  | 'AS'
  /** Andorra */
  | 'AD'
  /** Angola */
  | 'AO'
  /** Anguilla */
  | 'AI'
  /** Antarctica */
  | 'AQ'
  /** Antigua & Barbuda */
  | 'AG'
  /** Argentina */
  | 'AR'
  /** Armenia */
  | 'AM'
  /** Aruba */
  | 'AW'
  /** Australia */
  | 'AU'
  /** Austria */
  | 'AT'
  /** Azerbaijan */
  | 'AZ'
  /** Bahamas */
  | 'BS'
  /** Bahrain */
  | 'BH'
  /** Bangladesh */
  | 'BD'
  /** Barbados */
  | 'BB'
  /** Belarus */
  | 'BY'
  /** Belgium */
  | 'BE'
  /** Belize */
  | 'BZ'
  /** Benin */
  | 'BJ'
  /** Bermuda */
  | 'BM'
  /** Bhutan */
  | 'BT'
  /** Bolivia */
  | 'BO'
  /** Bosnia & Herzegovina */
  | 'BA'
  /** Botswana */
  | 'BW'
  /** Bouvet Island */
  | 'BV'
  /** Brazil */
  | 'BR'
  /** British Indian Ocean Territory */
  | 'IO'
  /** British Virgin Islands */
  | 'VG'
  /** Brunei */
  | 'BN'
  /** Bulgaria */
  | 'BG'
  /** Burkina Faso */
  | 'BF'
  /** Burundi */
  | 'BI'
  /** Cambodia */
  | 'KH'
  /** Cameroon */
  | 'CM'
  /** Canada */
  | 'CA'
  /** Cape Verde */
  | 'CV'
  /** Cayman Islands */
  | 'KY'
  /** Central African Republic */
  | 'CF'
  /** Chad */
  | 'TD'
  /** Chile */
  | 'CL'
  /** China */
  | 'CN'
  /** Christmas Island */
  | 'CX'
  /** Cocos (Keeling) Islands */
  | 'CC'
  /** Colombia */
  | 'CO'
  /** Comoros */
  | 'KM'
  /** Congo-Brazzaville */
  | 'CG'
  /** Congo-Kinshasa */
  | 'CD'
  /** Cook Islands */
  | 'CK'
  /** Costa Rica */
  | 'CR'
  /** Côte d’Ivoire */
  | 'CI'
  /** Croatia */
  | 'HR'
  /** Cuba */
  | 'CU'
  /** Cyprus */
  | 'CY'
  /** Czech Republic */
  | 'CZ'
  /** Denmark */
  | 'DK'
  /** Djibouti */
  | 'DJ'
  /** Dominica */
  | 'DM'
  /** Dominican Republic */
  | 'DO'
  /** Ecuador */
  | 'EC'
  /** Egypt */
  | 'EG'
  /** El Salvador */
  | 'SV'
  /** Equatorial Guinea */
  | 'GQ'
  /** Eritrea */
  | 'ER'
  /** Estonia */
  | 'EE'
  /** Ethiopia */
  | 'ET'
  /** Falkland Islands */
  | 'FK'
  /** Faroe Islands */
  | 'FO'
  /** Fiji */
  | 'FJ'
  /** Finland */
  | 'FI'
  /** France */
  | 'FR'
  /** French Guiana */
  | 'GF'
  /** French Polynesia */
  | 'PF'
  /** French Southern Territories */
  | 'TF'
  /** Gabon */
  | 'GA'
  /** Gambia */
  | 'GM'
  /** Georgia */
  | 'GE'
  /** Germany */
  | 'DE'
  /** Ghana */
  | 'GH'
  /** Gibraltar */
  | 'GI'
  /** Greece */
  | 'GR'
  /** Greenland */
  | 'GL'
  /** Grenada */
  | 'GD'
  /** Guadeloupe */
  | 'GP'
  /** Guam */
  | 'GU'
  /** Guatemala */
  | 'GT'
  /** Guernsey */
  | 'GG'
  /** Guinea */
  | 'GN'
  /** Guinea-Bissau */
  | 'GW'
  /** Guyana */
  | 'GY'
  /** Haiti */
  | 'HT'
  /** Heard &amp; McDonald Islands */
  | 'HM'
  /** Honduras */
  | 'HN'
  /** Hong Kong SAR China */
  | 'HK'
  /** Hungary */
  | 'HU'
  /** Iceland */
  | 'IS'
  /** India */
  | 'IN'
  /** Indonesia */
  | 'ID'
  /** Iran */
  | 'IR'
  /** Iraq */
  | 'IQ'
  /** Ireland */
  | 'IE'
  /** Isle of Man */
  | 'IM'
  /** Israel */
  | 'IL'
  /** Italy */
  | 'IT'
  /** Jamaica */
  | 'JM'
  /** Japan */
  | 'JP'
  /** Jersey */
  | 'JE'
  /** Jordan */
  | 'JO'
  /** Kazakhstan */
  | 'KZ'
  /** Kenya */
  | 'KE'
  /** Kiribati */
  | 'KI'
  /** Kuwait */
  | 'KW'
  /** Kyrgyzstan */
  | 'KG'
  /** Laos */
  | 'LA'
  /** Latvia */
  | 'LV'
  /** Lebanon */
  | 'LB'
  /** Lesotho */
  | 'LS'
  /** Liberia */
  | 'LR'
  /** Libya */
  | 'LY'
  /** Liechtenstein */
  | 'LI'
  /** Lithuania */
  | 'LT'
  /** Luxembourg */
  | 'LU'
  /** Macau SAR China */
  | 'MO'
  /** Macedonia */
  | 'MK'
  /** Madagascar */
  | 'MG'
  /** Malawi */
  | 'MW'
  /** Malaysia */
  | 'MY'
  /** Maldives */
  | 'MV'
  /** Mali */
  | 'ML'
  /** Malta */
  | 'MT'
  /** Marshall Islands */
  | 'MH'
  /** Martinique */
  | 'MQ'
  /** Mauritania */
  | 'MR'
  /** Mauritius */
  | 'MU'
  /** Mayotte */
  | 'YT'
  /** Mexico */
  | 'MX'
  /** Micronesia */
  | 'FM'
  /** Moldova */
  | 'MD'
  /** Monaco */
  | 'MC'
  /** Mongolia */
  | 'MN'
  /** Montenegro */
  | 'ME'
  /** Montserrat */
  | 'MS'
  /** Morocco */
  | 'MA'
  /** Mozambique */
  | 'MZ'
  /** Myanmar (Burma) */
  | 'MM'
  /** Namibia */
  | 'NA'
  /** Nauru */
  | 'NR'
  /** Nepal */
  | 'NP'
  /** Netherlands */
  | 'NL'
  /** Netherlands Antilles */
  | 'AN'
  /** New Caledonia */
  | 'NC'
  /** New Zealand */
  | 'NZ'
  /** Nicaragua */
  | 'NI'
  /** Niger */
  | 'NE'
  /** Nigeria */
  | 'NG'
  /** Niue */
  | 'NU'
  /** Norfolk Island */
  | 'NF'
  /** Northern Mariana Islands */
  | 'MP'
  /** North Korea */
  | 'KP'
  /** Norway */
  | 'NO'
  /** Oman */
  | 'OM'
  /** Pakistan */
  | 'PK'
  /** Palau */
  | 'PW'
  /** Palestinian Territories */
  | 'PS'
  /** Panama */
  | 'PA'
  /** Papua New Guinea */
  | 'PG'
  /** Paraguay */
  | 'PY'
  /** Peru */
  | 'PE'
  /** Philippines */
  | 'PH'
  /** Pitcairn Islands */
  | 'PN'
  /** Poland */
  | 'PL'
  /** Portugal */
  | 'PT'
  /** Qatar */
  | 'QA'
  /** Réunion */
  | 'RE'
  /** Romania */
  | 'RO'
  /** Russia */
  | 'RU'
  /** Rwanda */
  | 'RW'
  /** Samoa */
  | 'WS'
  /** San Marino */
  | 'SM'
  /** São Tomé & Príncipe */
  | 'ST'
  /** Saudi Arabia */
  | 'SA'
  /** Senegal */
  | 'SN'
  /** Serbia */
  | 'RS'
  /** Seychelles */
  | 'SC'
  /** Sierra Leone */
  | 'SL'
  /** Singapore */
  | 'SG'
  /** Slovakia */
  | 'SK'
  /** Slovenia */
  | 'SI'
  /** Solomon Islands */
  | 'SB'
  /** Somalia */
  | 'SO'
  /** South Africa */
  | 'ZA'
  /** South Georgia & South Sandwich Islands */
  | 'GS'
  /** South Korea */
  | 'KR'
  /** Spain */
  | 'ES'
  /** Sri Lanka */
  | 'LK'
  /** St. Barthélemy */
  | 'BL'
  /** St. Helena */
  | 'SH'
  /** St. Kitts & Nevis */
  | 'KN'
  /** St. Lucia */
  | 'LC'
  /** St. Martin */
  | 'MF'
  /** St. Pierre & Miquelon */
  | 'PM'
  /** St. Vincent & Grenadines */
  | 'VC'
  /** Sudan */
  | 'SD'
  /** Suriname */
  | 'SR'
  /** Svalbard & Jan Mayen */
  | 'SJ'
  /** Swaziland */
  | 'SZ'
  /** Sweden */
  | 'SE'
  /** Switzerland */
  | 'CH'
  /** Syria */
  | 'SY'
  /** Taiwan */
  | 'TW'
  /** Tajikistan */
  | 'TJ'
  /** Tanzania */
  | 'TZ'
  /** Thailand */
  | 'TH'
  /** Timor-Leste */
  | 'TL'
  /** Togo */
  | 'TG'
  /** Tokelau */
  | 'TK'
  /** Tonga */
  | 'TO'
  /** Trinidad & Tobago */
  | 'TT'
  /** Tunisia */
  | 'TN'
  /** Turkey */
  | 'TR'
  /** Turkmenistan */
  | 'TM'
  /** Turks & Caicos Islands */
  | 'TC'
  /** Tuvalu */
  | 'TV'
  /** Uganda */
  | 'UG'
  /** Ukraine */
  | 'UA'
  /** United Arab Emirates */
  | 'AE'
  /** United Kingdom */
  | 'GB'
  /** United States */
  | 'US'
  /** Uruguay */
  | 'UY'
  /** U.S. Outlying Islands */
  | 'UM'
  /** U.S. Virgin Islands */
  | 'VI'
  /** Uzbekistan */
  | 'UZ'
  /** Vanuatu */
  | 'VU'
  /** Vatican City */
  | 'VA'
  /** Venezuela */
  | 'VE'
  /** Vietnam */
  | 'VN'
  /** Wallis & Futuna */
  | 'WF'
  /** Western Sahara */
  | 'EH'
  /** Yemen */
  | 'YE'
  /** Zambia */
  | 'ZM'
  /** Zimbabwe */
  | 'ZW';

export type CustomerAddressAttribute = {
  /** Attribute code */
  attribute_code?: Maybe<Scalars['String']>;
  /** Attribute value */
  value?: Maybe<Scalars['String']>;
};

/** CustomerAddressRegion defines the customer's state or province */
export type CustomerAddressRegion = {
  /** The state or province name */
  region?: Maybe<Scalars['String']>;
  /** The address region code */
  region_code?: Maybe<Scalars['String']>;
  /** The unique ID for a pre-defined region */
  region_id?: Maybe<Scalars['Int']>;
};

/** Identifies the filter to use for filtering orders. */
export type CustomerOrdersFilterInput = {
  /** Filters by order number. */
  number?: InputMaybe<FilterStringTypeInput>;
};

/** Defines a filter for an input string. */
export type FilterStringTypeInput = {
  /** Filters items that are exactly the same as the specified string. */
  eq?: InputMaybe<Scalars['String']>;
  /** Filters items that are exactly the same as entries specified in an array of strings. */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Defines a filter that performs a fuzzy search using the specified string. */
  match?: InputMaybe<Scalars['String']>;
};

/** The collection of orders that match the conditions defined in the filter */
export type CustomerOrders = {
  /** An array of customer orders */
  items: Array<Maybe<CustomerOrder>>;
  /** An object that includes the current_page, page_info, and page_size values specified in the query */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The total count of customer orders */
  total_count?: Maybe<Scalars['Int']>;
};

/** Contains details about each of the customer's orders */
export type CustomerOrder = {
  /** The billing address for the order */
  billing_address?: Maybe<OrderAddress>;
  /** The shipping carrier for the order delivery */
  carrier?: Maybe<Scalars['String']>;
  /** Comments about the order */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** @deprecated Use the order_date attribute instead */
  created_at?: Maybe<Scalars['String']>;
  /** A list of credit memos */
  credit_memos?: Maybe<Array<Maybe<CreditMemo>>>;
  /** The entered gift message for the order */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use the totals.grand_total attribute instead */
  grand_total?: Maybe<Scalars['Float']>;
  /** The unique ID for a `CustomerOrder` object */
  id: Scalars['ID'];
  /** @deprecated Use the id attribute instead */
  increment_id?: Maybe<Scalars['String']>;
  /** A list of invoices for the order */
  invoices: Array<Maybe<Invoice>>;
  /** An array containing the items purchased in this order */
  items?: Maybe<Array<Maybe<OrderItemInterface>>>;
  /** The order number */
  number: Scalars['String'];
  /** The date the order was placed */
  order_date: Scalars['String'];
  /** @deprecated Use the number attribute instead */
  order_number: Scalars['String'];
  /** Payment details for the order */
  payment_methods?: Maybe<Array<Maybe<OrderPaymentMethod>>>;
  /** A list of shipments for the order */
  shipments?: Maybe<Array<Maybe<OrderShipment>>>;
  /** The shipping address for the order */
  shipping_address?: Maybe<OrderAddress>;
  /** The delivery method for the order */
  shipping_method?: Maybe<Scalars['String']>;
  /** The current status of the order */
  status: Scalars['String'];
  /** Contains details about the calculated totals for this order */
  total?: Maybe<OrderTotal>;
};

/** OrderAddress contains detailed information about an order's billing and shipping addresses */
export type OrderAddress = {
  /** The city or town */
  city: Scalars['String'];
  /** The customer's company */
  company?: Maybe<Scalars['String']>;
  /** The customer's country */
  country_code?: Maybe<CountryCodeEnum>;
  /** The fax number */
  fax?: Maybe<Scalars['String']>;
  /** The first name of the person associated with the shipping/billing address */
  firstname: Scalars['String'];
  /** The family name of the person associated with the shipping/billing address */
  lastname: Scalars['String'];
  /** The middle name of the person associated with the shipping/billing address */
  middlename?: Maybe<Scalars['String']>;
  /** The customer's order ZIP or postal code */
  postcode?: Maybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: Maybe<Scalars['String']>;
  /** The state or province name */
  region?: Maybe<Scalars['String']>;
  /** The unique ID for a `Region` object of a pre-defined region */
  region_id?: Maybe<Scalars['ID']>;
  /** An array of strings that define the street number and name */
  street: Array<Maybe<Scalars['String']>>;
  /** A value such as Sr., Jr., or III */
  suffix?: Maybe<Scalars['String']>;
  /** The telephone number */
  telephone: Scalars['String'];
  /** The customer's Value-added tax (VAT) number (for corporate customers) */
  vat_id?: Maybe<Scalars['String']>;
};

/** Comment item details */
export type SalesCommentItem = {
  /** The text of the message */
  message: Scalars['String'];
  /** The timestamp of the comment */
  timestamp: Scalars['String'];
};

/** Credit memo details */
export type CreditMemo = {
  /** Comments on the credit memo */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** The unique ID for a `CreditMemo` object */
  id: Scalars['ID'];
  /** An array containing details about refunded items */
  items?: Maybe<Array<Maybe<CreditMemoItemInterface>>>;
  /** The sequential credit memo number */
  number: Scalars['String'];
  /** Contains details about the total refunded amount */
  total?: Maybe<CreditMemoTotal>;
};

/** Credit memo item details */
export type CreditMemoItemInterface = {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `CreditMemoItemInterface` object */
  id: Scalars['ID'];
  /** The order item the credit memo is applied to */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product, including selected options */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
};

/** Order item details */
export type OrderItemInterface = {
  /** The final discount information for the product */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The entered option for the base product, such as a logo or image */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The unique ID for a `OrderItemInterface` object */
  id: Scalars['ID'];
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price of the base product, including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>;
  /** URL key of the base product */
  product_url_key?: Maybe<Scalars['String']>;
  /** The number of canceled items */
  quantity_canceled?: Maybe<Scalars['Float']>;
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
  /** The number of units ordered for this item */
  quantity_ordered?: Maybe<Scalars['Float']>;
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
  /** The number of returned items */
  quantity_returned?: Maybe<Scalars['Float']>;
  /** The number of shipped items */
  quantity_shipped?: Maybe<Scalars['Float']>;
  /** The selected options for the base product, such as color or size */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item */
  status?: Maybe<Scalars['String']>;
};

/** Represents order item options like selected or entered */
export type OrderItemOption = {
  /** The name of the option */
  label: Scalars['String'];
  /** The value of the option */
  value: Scalars['String'];
};

/** Credit memo price details */
export type CreditMemoTotal = {
  /** An adjustment manually applied to the order */
  adjustment: Money;
  /** The final base grand total amount in the base currency */
  base_grand_total: Money;
  /** The applied discounts to the credit memo */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The final total amount, including shipping, discounts, and taxes */
  grand_total: Money;
  /** Contains details about the shipping and handling costs for the credit memo */
  shipping_handling?: Maybe<ShippingHandling>;
  /** The subtotal of the invoice, excluding shipping, discounts, and taxes */
  subtotal: Money;
  /** The credit memo tax details */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The shipping amount for the credit memo */
  total_shipping: Money;
  /** The amount of tax applied to the credit memo */
  total_tax: Money;
};

/** The Shipping handling details */
export type ShippingHandling = {
  /** The shipping amount, excluding tax */
  amount_excluding_tax?: Maybe<Money>;
  /** The shipping amount, including tax */
  amount_including_tax?: Maybe<Money>;
  /** The applied discounts to the shipping */
  discounts?: Maybe<Array<Maybe<ShippingDiscount>>>;
  /** Contains details about taxes applied for shipping */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The total amount for shipping */
  total_amount: Money;
};

/** Defines an individual shipping discount. This discount can be applied to shipping. */
export type ShippingDiscount = {
  /** The amount of the discount */
  amount: Money;
};

/** The tax item details */
export type TaxItem = {
  /** The amount of tax applied to the item */
  amount: Money;
  /** The rate used to calculate the tax */
  rate: Scalars['Float'];
  /** A title that describes the tax */
  title: Scalars['String'];
};

/** Invoice details */
export type Invoice = {
  /** Comments on the invoice */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** The unique ID for a `Invoice` object */
  id: Scalars['ID'];
  /** Invoiced product details */
  items?: Maybe<Array<Maybe<InvoiceItemInterface>>>;
  /** Sequential invoice number */
  number: Scalars['String'];
  /** Invoice total amount details */
  total?: Maybe<InvoiceTotal>;
};

/** Invoice item details */
export type InvoiceItemInterface = {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `InvoiceItemInterface` object */
  id: Scalars['ID'];
  /** Contains details about an individual order item */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
};

/** Contains price details from an invoice */
export type InvoiceTotal = {
  /** The final base grand total amount in the base currency */
  base_grand_total: Money;
  /** The applied discounts to the invoice */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The final total amount, including shipping, discounts, and taxes */
  grand_total: Money;
  /** Contains details about the shipping and handling costs for the invoice */
  shipping_handling?: Maybe<ShippingHandling>;
  /** The subtotal of the invoice, excluding shipping, discounts, and taxes */
  subtotal: Money;
  /** The invoice tax details */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The shipping amount for the invoice */
  total_shipping: Money;
  /** The amount of tax applied to the invoice */
  total_tax: Money;
};

/** Contains details about the payment method used to pay for the order */
export type OrderPaymentMethod = {
  /** Additional data per payment method type */
  additional_data?: Maybe<Array<Maybe<KeyValue>>>;
  /** The label that describes the payment method */
  name: Scalars['String'];
  /** The payment method code that indicates how the order was paid for */
  type: Scalars['String'];
};

/** The key-value type */
export type KeyValue = {
  /** The name part of the name/value pair */
  name?: Maybe<Scalars['String']>;
  /** The value part of the name/value pair */
  value?: Maybe<Scalars['String']>;
};

/** Order shipment details */
export type OrderShipment = {
  /** Comments added to the shipment */
  comments?: Maybe<Array<Maybe<SalesCommentItem>>>;
  /** The unique ID for a `OrderShipment` object */
  id: Scalars['ID'];
  /** Contains items included in the shipment */
  items?: Maybe<Array<Maybe<ShipmentItemInterface>>>;
  /** The sequential credit shipment number */
  number: Scalars['String'];
  /** Contains shipment tracking details */
  tracking?: Maybe<Array<Maybe<ShipmentTracking>>>;
};

/** Order shipment item details */
export type ShipmentItemInterface = {
  /** The unique ID for a `ShipmentItemInterface` object */
  id: Scalars['ID'];
  /** Associated order item */
  order_item?: Maybe<OrderItemInterface>;
  /** Name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** Sale price for the base product */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** Number of shipped items */
  quantity_shipped: Scalars['Float'];
};

/** Order shipment tracking details */
export type ShipmentTracking = {
  /** The shipping carrier for the order delivery */
  carrier: Scalars['String'];
  /** The tracking number of the order shipment */
  number?: Maybe<Scalars['String']>;
  /** The shipment tracking title */
  title: Scalars['String'];
};

/** Contains details about the sales total amounts used to calculate the final price */
export type OrderTotal = {
  /** The final base grand total amount in the base currency */
  base_grand_total: Money;
  /** The applied discounts to the order */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The final total amount, including shipping, discounts, and taxes */
  grand_total: Money;
  /** Contains details about the shipping and handling costs for the order */
  shipping_handling?: Maybe<ShippingHandling>;
  /** The subtotal of the order, excluding shipping, discounts, and taxes */
  subtotal: Money;
  /** The order tax details */
  taxes?: Maybe<Array<Maybe<TaxItem>>>;
  /** The shipping amount for the order */
  total_shipping: Money;
  /** The amount of tax applied to the order */
  total_tax: Money;
};

export type Wishlist = {
  /** The unique ID for a `Wishlist` object */
  id?: Maybe<Scalars['ID']>;
  /** @deprecated Use field `items_v2` from type `Wishlist` instead */
  items?: Maybe<Array<Maybe<WishlistItem>>>;
  /** The number of items in the wish list */
  items_count?: Maybe<Scalars['Int']>;
  /** An array of items in the customer's wish list */
  items_v2?: Maybe<WishlistItems>;
  /** An encrypted code that Magento uses to link to the wish list */
  sharing_code?: Maybe<Scalars['String']>;
  /** The time of the last modification to the wish list */
  updated_at?: Maybe<Scalars['String']>;
};


export type Wishlistitems_v2Args = {
  currentPage?: InputMaybe<Scalars['Int']>;
  pageSize?: InputMaybe<Scalars['Int']>;
};

export type WishlistItem = {
  /** The time when the customer added the item to the wish list */
  added_at?: Maybe<Scalars['String']>;
  /** The customer's comment about this item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItem` object */
  id?: Maybe<Scalars['Int']>;
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  qty?: Maybe<Scalars['Float']>;
};

export type WishlistItems = {
  /** A list of items in the wish list */
  items: Array<Maybe<WishlistItemInterface>>;
  /** Contains pagination metadata */
  page_info?: Maybe<SearchResultPageInfo>;
};

export type WishlistItemInterface = {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
};

export type SelectedCustomizableOption = {
  /** The unique ID for a `CustomizableRadioOption`, `CustomizableDropDownOption`, `CustomizableMultipleOption`, etc. of `CustomizableOptionInterface` objects */
  customizable_option_uid: Scalars['ID'];
  /** @deprecated Use SelectedCustomizableOption.customizable_option_uid instead */
  id: Scalars['Int'];
  is_required: Scalars['Boolean'];
  label: Scalars['String'];
  sort_order: Scalars['Int'];
  type: Scalars['String'];
  values: Array<Maybe<SelectedCustomizableOptionValue>>;
};

export type SelectedCustomizableOptionValue = {
  /** The unique ID for a `CustomizableMultipleValue`, `CustomizableRadioValue`, `CustomizableCheckboxValue`, `CustomizableDropDownValue`, etc. objects */
  customizable_option_value_uid: Scalars['ID'];
  /** @deprecated Use SelectedCustomizableOptionValue.customizable_option_value_uid instead */
  id: Scalars['Int'];
  label: Scalars['String'];
  price: CartItemSelectedOptionValuePrice;
  value: Scalars['String'];
};

export type CartItemSelectedOptionValuePrice = {
  type: PriceTypeEnum;
  units: Scalars['String'];
  value: Scalars['Float'];
};

/** This enumeration the price type. */
export type PriceTypeEnum =
  | 'FIXED'
  | 'PERCENT'
  | 'DYNAMIC';

export type CustomerDownloadableProducts = {
  /** List of purchased downloadable items */
  items?: Maybe<Array<Maybe<CustomerDownloadableProduct>>>;
};

export type CustomerDownloadableProduct = {
  date?: Maybe<Scalars['String']>;
  download_url?: Maybe<Scalars['String']>;
  order_increment_id?: Maybe<Scalars['String']>;
  remaining_downloads?: Maybe<Scalars['String']>;
  status?: Maybe<Scalars['String']>;
};

export type CustomerPaymentTokens = {
  /** An array of payment tokens */
  items: Array<Maybe<PaymentToken>>;
};

/** The stored payment method available to the customer */
export type PaymentToken = {
  /** Stored account details */
  details?: Maybe<Scalars['String']>;
  /** The payment method code associated with the token */
  payment_method_code: Scalars['String'];
  /** The public hash of the token */
  public_hash: Scalars['String'];
  type: PaymentTokenTypeEnum;
};

/** The list of available payment token types */
export type PaymentTokenTypeEnum =
  | 'card'
  | 'account';

export type IsConfigSettingEnabledOutput = {
  /** Is config setting enabled */
  is_enabled?: Maybe<Scalars['Boolean']>;
};

/** The required input to request the secure URL for Payments Pro Hosted Solution payment. */
export type HostedProUrlInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String'];
};

/** Contains secure URL used for Payments Pro Hosted Solution payment method. */
export type HostedProUrl = {
  /** Secure Url generated by PayPal */
  secure_form_url?: Maybe<Scalars['String']>;
};

/** Input required to fetch payment token information for Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkTokenInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String'];
};

/** Contains information used to generate PayPal iframe for transaction. Applies to Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkToken = {
  /** Mode for Payflow transaction */
  mode?: Maybe<PayflowLinkMode>;
  /** PayPal URL used for requesting Payflow form */
  paypal_url?: Maybe<Scalars['String']>;
  /** Secure token generated by PayPal */
  secure_token?: Maybe<Scalars['String']>;
  /** Secure token ID generated by PayPal */
  secure_token_id?: Maybe<Scalars['String']>;
};

/** Mode for payment: TEST or LIVE. Applies to Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkMode =
  | 'TEST'
  | 'LIVE';

export type IsEmailAvailableOutput = {
  /** Is email availabel value */
  is_email_available?: Maybe<Scalars['Boolean']>;
};

export type MolliePaymentMethodsInput = {
  amount: Scalars['Float'];
  currency: Scalars['String'];
};

export type MolliePaymentMethodsOutput = {
  methods?: Maybe<Array<Maybe<MolliePaymentMethod>>>;
};

export type MolliePaymentMethod = {
  code?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
};

/** Contains details about the requested order */
export type Order = {
  /** An array containing the items purchased in this order */
  items?: Maybe<Array<Maybe<Scalars['String']>>>;
  mollie_payment_token?: Maybe<Scalars['String']>;
  mollie_redirect_url?: Maybe<Scalars['String']>;
  /** @deprecated The order_id field is deprecated, use order_number instead. */
  order_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `Order` object. */
  order_number: Scalars['String'];
  /** Contains the calculated total for this order */
  total?: Maybe<Scalars['String']>;
};

/** AreaInput defines the parameters which will be used for filter by specified location. */
export type AreaInput = {
  /** The radius for the search in KM. */
  radius: Scalars['Int'];
  /** The country code where search must be performed. Required parameter together with region, city or postcode. */
  search_term: Scalars['String'];
};

/** PickupLocationFilterInput defines the list of attributes and filters for the search. */
export type PickupLocationFilterInput = {
  /** Filter by city. */
  city?: InputMaybe<FilterTypeInput>;
  /** Filter by country. */
  country_id?: InputMaybe<FilterTypeInput>;
  /** Filter by pickup location name. */
  name?: InputMaybe<FilterTypeInput>;
  /** Filter by pickup location code. */
  pickup_location_code?: InputMaybe<FilterTypeInput>;
  /** Filter by postcode. */
  postcode?: InputMaybe<FilterTypeInput>;
  /** Filter by region. */
  region?: InputMaybe<FilterTypeInput>;
  /** Filter by region id. */
  region_id?: InputMaybe<FilterTypeInput>;
  /** Filter by street. */
  street?: InputMaybe<FilterTypeInput>;
};

/** FilterTypeInput specifies which action will be performed in a query  */
export type FilterTypeInput = {
  /** Equals */
  eq?: InputMaybe<Scalars['String']>;
  finset?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** From. Must be used with 'to' */
  from?: InputMaybe<Scalars['String']>;
  /** Greater than */
  gt?: InputMaybe<Scalars['String']>;
  /** Greater than or equal to */
  gteq?: InputMaybe<Scalars['String']>;
  /** In. The value can contain a set of comma-separated values */
  in?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Like. The specified value can contain % (percent signs) to allow matching of 0 or more characters */
  like?: InputMaybe<Scalars['String']>;
  /** Less than */
  lt?: InputMaybe<Scalars['String']>;
  /** Less than or equal to */
  lteq?: InputMaybe<Scalars['String']>;
  /** More than or equal to */
  moreq?: InputMaybe<Scalars['String']>;
  /** Not equal to */
  neq?: InputMaybe<Scalars['String']>;
  /** Not in. The value can contain a set of comma-separated values */
  nin?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** Not null */
  notnull?: InputMaybe<Scalars['String']>;
  /** Is null */
  null?: InputMaybe<Scalars['String']>;
  /** To. Must be used with 'from' */
  to?: InputMaybe<Scalars['String']>;
};

/** PickupLocationSortInput specifies attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export type PickupLocationSortInput = {
  /** City where pickup location is placed. */
  city?: InputMaybe<SortEnum>;
  /** Name of the contact person. */
  contact_name?: InputMaybe<SortEnum>;
  /** Id of the country in two letters. */
  country_id?: InputMaybe<SortEnum>;
  /** Description of the pickup location. */
  description?: InputMaybe<SortEnum>;
  /** Distance to the address, requested by distance filter. Applicable only with distance filter. If distance sort order is present, all other sort orders will be ignored. */
  distance?: InputMaybe<SortEnum>;
  /** Contact email of the pickup location. */
  email?: InputMaybe<SortEnum>;
  /** Contact fax of the pickup location. */
  fax?: InputMaybe<SortEnum>;
  /** Geographic latitude where pickup location is placed. */
  latitude?: InputMaybe<SortEnum>;
  /** Geographic longitude where pickup location is placed. */
  longitude?: InputMaybe<SortEnum>;
  /** The pickup location name. Customer use this to identify the pickup location. */
  name?: InputMaybe<SortEnum>;
  /** Contact phone number of the pickup location. */
  phone?: InputMaybe<SortEnum>;
  /** A code assigned to pickup location to identify the source. */
  pickup_location_code?: InputMaybe<SortEnum>;
  /** Postcode where pickup location is placed. */
  postcode?: InputMaybe<SortEnum>;
  /** Name of the region. */
  region?: InputMaybe<SortEnum>;
  /** Id of the region. */
  region_id?: InputMaybe<SortEnum>;
  /** Street where pickup location is placed. */
  street?: InputMaybe<SortEnum>;
};

/** Product Information used for Pickup Locations search. */
export type ProductInfoInput = {
  /** Product SKU. */
  sku: Scalars['String'];
};

/** Top level object returned in a pickup locations search. */
export type PickupLocations = {
  /** An array of pickup locations that match the specific search request. */
  items?: Maybe<Array<Maybe<PickupLocation>>>;
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** The number of products returned. */
  total_count?: Maybe<Scalars['Int']>;
};

/** Defines Pickup Location information. */
export type PickupLocation = {
  city?: Maybe<Scalars['String']>;
  contact_name?: Maybe<Scalars['String']>;
  country_id?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  fax?: Maybe<Scalars['String']>;
  latitude?: Maybe<Scalars['Float']>;
  longitude?: Maybe<Scalars['Float']>;
  name?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  pickup_location_code?: Maybe<Scalars['String']>;
  postcode?: Maybe<Scalars['String']>;
  region?: Maybe<Scalars['String']>;
  region_id?: Maybe<Scalars['Int']>;
  street?: Maybe<Scalars['String']>;
};

export type ProductReviewRatingsMetadata = {
  /** List of product reviews sorted by position */
  items: Array<Maybe<ProductReviewRatingMetadata>>;
};

export type ProductReviewRatingMetadata = {
  /** An encoded rating ID. */
  id: Scalars['String'];
  /** The label assigned to an aspect of a product that is being rated, such as quality or price */
  name: Scalars['String'];
  /** List of product review ratings sorted by position. */
  values: Array<Maybe<ProductReviewRatingValueMetadata>>;
};

export type ProductReviewRatingValueMetadata = {
  /** A ratings scale, such as the number of stars awarded */
  value: Scalars['String'];
  /** An encoded rating value id. */
  value_id: Scalars['String'];
};

/** ProductAttributeFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type ProductAttributeFilterInput = {
  /** Attribute label: Activity */
  activity?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Category Gear */
  category_gear?: InputMaybe<FilterEqualTypeInput>;
  /** Deprecated: use `category_uid` to filter product by category id. */
  category_id?: InputMaybe<FilterEqualTypeInput>;
  /** Filter product by the unique ID for a `CategoryInterface` object. */
  category_uid?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Climate */
  climate?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Collar */
  collar?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Color */
  color?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Colors */
  colors?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Compatible Phones */
  compatible_phones?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Debug: colors */
  debug_colors?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Debug: labels */
  debug_labels?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Debug: landmarks */
  debug_landmarks?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Description */
  description?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Dominant color */
  dominant_color?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Eco Collection */
  eco_collection?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Erin Recommends */
  erin_recommends?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Features */
  features_bags?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Format */
  format?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Gender */
  gender?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Material */
  material?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Product Name */
  name?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: New */
  new?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Pattern */
  pattern?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Performance Fabric */
  performance_fabric?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Price */
  price?: InputMaybe<FilterRangeTypeInput>;
  /** Attribute label: Art */
  print_art?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Holiday */
  print_holiday?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Search Labels */
  print_labels?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Search Landmarks */
  print_landmarks?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Landscape */
  print_landscape?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Mood */
  print_mood?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Type */
  print_type?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Sale */
  sale?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Short Description */
  short_description?: InputMaybe<FilterMatchTypeInput>;
  /** Attribute label: Size */
  size?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: SKU */
  sku?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Sleeve */
  sleeve?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Strap/Handle */
  strap_bags?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Style Bags */
  style_bags?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Style Bottom */
  style_bottom?: InputMaybe<FilterEqualTypeInput>;
  /** Attribute label: Style General */
  style_general?: InputMaybe<FilterEqualTypeInput>;
  /** The part of the URL that identifies the product */
  url_key?: InputMaybe<FilterEqualTypeInput>;
};

/** Defines a filter that matches a range of values, such as prices or dates. */
export type FilterRangeTypeInput = {
  /** The beginning of the range */
  from?: InputMaybe<Scalars['String']>;
  /** The end of the range */
  to?: InputMaybe<Scalars['String']>;
};

/** The Products object is the top-level object returned in a product search. */
export type Products = {
  /** Layered navigation aggregations. */
  aggregations?: Maybe<Array<Maybe<Aggregation>>>;
  /**
   * Layered navigation filters array.
   * @deprecated Use aggregations instead
   */
  filters?: Maybe<Array<Maybe<LayerFilter>>>;
  /** An array of products that match the specified search criteria. */
  items?: Maybe<Array<Maybe<ProductInterface>>>;
  /** An object that includes the page_info and currentPage values specified in the query. */
  page_info?: Maybe<SearchResultPageInfo>;
  /** An object that includes the default sort field and all available sort fields. */
  sort_fields?: Maybe<SortFields>;
  /** The number of products that are marked as visible. By default, in complex products, parent products are visible, but their child products are not. */
  total_count?: Maybe<Scalars['Int']>;
};

/** A bucket that contains information for each filterable option (such as price, category `UID`, and custom attributes). */
export type Aggregation = {
  /** Attribute code of the aggregation group. */
  attribute_code: Scalars['String'];
  /** The number of options in the aggregation group. */
  count?: Maybe<Scalars['Int']>;
  /** The aggregation display name. */
  label?: Maybe<Scalars['String']>;
  /** Array of options for the aggregation. */
  options?: Maybe<Array<Maybe<AggregationOption>>>;
  /** The relative position of the attribute in a layered navigation block */
  position?: Maybe<Scalars['Int']>;
};

export type AggregationOption = AggregationOptionInterface & {
  /** The number of items that match the aggregation option. */
  count?: Maybe<Scalars['Int']>;
  /** Aggregation option display label. */
  label?: Maybe<Scalars['String']>;
  /** The internal ID that represents the value of the option. */
  value: Scalars['String'];
};

export type AggregationOptionInterface = {
  /** The number of items that match the aggregation option. */
  count?: Maybe<Scalars['Int']>;
  /** Aggregation option display label. */
  label?: Maybe<Scalars['String']>;
  /** The internal ID that represents the value of the option. */
  value: Scalars['String'];
};

export type LayerFilter = {
  /**
   * Array of filter items.
   * @deprecated Use Aggregation.options instead.
   */
  filter_items?: Maybe<Array<Maybe<LayerFilterItemInterface>>>;
  /**
   * Count of filter items in filter group.
   * @deprecated Use Aggregation.count instead.
   */
  filter_items_count?: Maybe<Scalars['Int']>;
  /**
   * Layered navigation filter name.
   * @deprecated Use Aggregation.label instead.
   */
  name?: Maybe<Scalars['String']>;
  /**
   * Request variable name for filter query.
   * @deprecated Use Aggregation.attribute_code instead.
   */
  request_var?: Maybe<Scalars['String']>;
};

export type LayerFilterItemInterface = {
  /**
   * Count of items by filter.
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: Maybe<Scalars['Int']>;
  /**
   * Filter label.
   * @deprecated Use AggregationOption.label instead.
   */
  label?: Maybe<Scalars['String']>;
  /**
   * Value for filter request variable to be used in query.
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: Maybe<Scalars['String']>;
};

/** SortFields contains a default value for sort fields and all available sort fields. */
export type SortFields = {
  /** Default value of sort fields. */
  default?: Maybe<Scalars['String']>;
  /** Available sort fields. */
  options?: Maybe<Array<Maybe<SortField>>>;
};

export type SortField = {
  /** Label of sort field. */
  label?: Maybe<Scalars['String']>;
  /** Attribute code of sort field. */
  value?: Maybe<Scalars['String']>;
};

export type TrackingData = {
  /** Is Page Tracking enabled */
  page_tracking_enabled?: Maybe<Scalars['Boolean']>;
  /** dotdigital region prefix */
  region_prefix?: Maybe<Scalars['String']>;
  /** Is ROI Tracking enabled */
  roi_tracking_enabled?: Maybe<Scalars['Boolean']>;
  /** Web Behaviour Tracking profile ID */
  wbt_profile_id?: Maybe<Scalars['String']>;
};

/** EntityUrl is an output object containing the `id`, `relative_url`, and `type` attributes */
export type EntityUrl = {
  /** @deprecated The canonical_url field is deprecated, use relative_url instead. */
  canonical_url?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface`, `CategoryInterface`, `CmsPage`, etc. object associated with the specified url. This could be a product UID, category UID, or cms page UID. */
  entity_uid?: Maybe<Scalars['ID']>;
  /**
   * The ID assigned to the object associated with the specified url. This could be a product ID, category ID, or page ID.
   * @deprecated Use `entity_uid` instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** 301 or 302 HTTP code for url permanent or temporary redirect or 0 for the 200 no redirect */
  redirectCode?: Maybe<Scalars['Int']>;
  /** The internal relative URL. If the specified  url is a redirect, the query returns the redirected URL, not the original. */
  relative_url?: Maybe<Scalars['String']>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
};

/** Deprecated: `Wishlist` type should be used instead */
export type WishlistOutput = {
  /**
   * An array of items in the customer's wish list
   * @deprecated Use field `items` from type `Wishlist` instead
   */
  items?: Maybe<Array<Maybe<WishlistItem>>>;
  /**
   * The number of items in the wish list
   * @deprecated Use field `items_count` from type `Wishlist` instead
   */
  items_count?: Maybe<Scalars['Int']>;
  /**
   * When multiple wish lists are enabled, the name the customer assigns to the wishlist
   * @deprecated This field is related to Commerce functionality and is always `null` in Open Source edition
   */
  name?: Maybe<Scalars['String']>;
  /**
   * An encrypted code that Magento uses to link to the wish list
   * @deprecated Use field `sharing_code` from type `Wishlist` instead
   */
  sharing_code?: Maybe<Scalars['String']>;
  /**
   * The time of the last modification to the wish list
   * @deprecated Use field `updated_at` from type `Wishlist` instead
   */
  updated_at?: Maybe<Scalars['String']>;
};

export type Mutation = {
  addBundleProductsToCart?: Maybe<AddBundleProductsToCartOutput>;
  addConfigurableProductsToCart?: Maybe<AddConfigurableProductsToCartOutput>;
  addDownloadableProductsToCart?: Maybe<AddDownloadableProductsToCartOutput>;
  /** Add any type of product to the cart */
  addProductsToCart?: Maybe<AddProductsToCartOutput>;
  /** Add products to the specified compare list */
  addProductsToCompareList?: Maybe<CompareList>;
  /** Adds one or more products to the specified wish list. This mutation supports all product types */
  addProductsToWishlist?: Maybe<AddProductsToWishlistOutput>;
  addSimpleProductsToCart?: Maybe<AddSimpleProductsToCartOutput>;
  addVirtualProductsToCart?: Maybe<AddVirtualProductsToCartOutput>;
  /** Add items in the specified wishlist to the customer's cart */
  addWishlistItemsToCart?: Maybe<AddWishlistItemsToCartOutput>;
  applyCouponToCart?: Maybe<ApplyCouponToCartOutput>;
  /** Assign the specified compare list to the logged in customer */
  assignCompareListToCustomer?: Maybe<AssignCompareListToCustomerOutput>;
  /** Changes the password for the logged-in customer */
  changeCustomerPassword?: Maybe<Customer>;
  /** Creates Client Token for Braintree Javascript SDK initialization. */
  createBraintreeClientToken: Scalars['String'];
  /** Creates a new compare list. The compare list is saved for logged in customers */
  createCompareList?: Maybe<CompareList>;
  /** Create customer account */
  createCustomer?: Maybe<CustomerOutput>;
  /** Create customer address */
  createCustomerAddress?: Maybe<CustomerAddress>;
  /** Create customer account */
  createCustomerV2?: Maybe<CustomerOutput>;
  /** Creates an empty shopping cart for a guest or logged in user */
  createEmptyCart?: Maybe<Scalars['String']>;
  /** Creates a Klarna Payments Session. */
  createKlarnaPaymentsSession?: Maybe<createKlarnaPaymentsSessionOutput>;
  /** @deprecated Using the Order.mollie_redirect_url attribuut */
  createMollieTransaction?: Maybe<MollieTransactionOutput>;
  /** Initiates a transaction and receives a token. Use this mutation for Payflow Pro and Payments Pro payment methods */
  createPayflowProToken?: Maybe<CreatePayflowProTokenOutput>;
  /** Initiates an Express Checkout transaction and receives a token. Use this mutation for Express Checkout and Payments Standard payment methods. */
  createPaypalExpressToken?: Maybe<PaypalExpressTokenOutput>;
  /** Creates a product review for the specified SKU */
  createProductReview: CreateProductReviewOutput;
  /** Delete the specified compare list */
  deleteCompareList?: Maybe<DeleteCompareListOutput>;
  /** Delete customer address */
  deleteCustomerAddress?: Maybe<Scalars['Boolean']>;
  /** Delete a customer payment token */
  deletePaymentToken?: Maybe<DeletePaymentTokenOutput>;
  /** Retrieve the customer token */
  generateCustomerToken?: Maybe<CustomerToken>;
  /** Request a customer token so that an administrator can perform remote shopping assistance */
  generateCustomerTokenAsAdmin?: Maybe<GenerateCustomerTokenAsAdminOutput>;
  /** Handles payment response and saves payment in Quote. Use this mutations for Payflow Pro and Payments Pro payment methods. */
  handlePayflowProResponse?: Maybe<PayflowProResponseOutput>;
  /** Merges the source cart into the destination cart */
  mergeCarts: Cart;
  mollieProcessTransaction?: Maybe<MollieProcessTransactionOutput>;
  mollieRestoreCart?: Maybe<MollieResetCartOutput>;
  placeOrder?: Maybe<PlaceOrderOutput>;
  removeCouponFromCart?: Maybe<RemoveCouponFromCartOutput>;
  removeItemFromCart?: Maybe<RemoveItemFromCartOutput>;
  /** Remove products from the specified compare list */
  removeProductsFromCompareList?: Maybe<CompareList>;
  /** Removes one or more products from the specified wish list */
  removeProductsFromWishlist?: Maybe<RemoveProductsFromWishlistOutput>;
  /** Adds all products from a customer's previous order to the cart. */
  reorderItems?: Maybe<ReorderItemsOutput>;
  /** Request an email with a reset password token for the registered customer identified by the specified email. */
  requestPasswordResetEmail?: Maybe<Scalars['Boolean']>;
  /** Reset a customer's password using the reset password token that the customer received in an email after requesting it using requestPasswordResetEmail. */
  resetPassword?: Maybe<Scalars['Boolean']>;
  /** Revoke the customer token */
  revokeCustomerToken?: Maybe<RevokeCustomerTokenOutput>;
  /** Recommends Product by Sending Single/Multiple Email */
  sendEmailToFriend?: Maybe<SendEmailToFriendOutput>;
  setBillingAddressOnCart?: Maybe<SetBillingAddressOnCartOutput>;
  setGuestEmailOnCart?: Maybe<SetGuestEmailOnCartOutput>;
  /** @deprecated Should use setPaymentMethodOnCart and placeOrder mutations in single request. */
  setPaymentMethodAndPlaceOrder?: Maybe<PlaceOrderOutput>;
  setPaymentMethodOnCart?: Maybe<SetPaymentMethodOnCartOutput>;
  setShippingAddressesOnCart?: Maybe<SetShippingAddressesOnCartOutput>;
  setShippingMethodsOnCart?: Maybe<SetShippingMethodsOnCartOutput>;
  /** Subscribes the specified email to a newsletter */
  subscribeEmailToNewsletter?: Maybe<SubscribeEmailToNewsletterOutput>;
  updateCartItems?: Maybe<UpdateCartItemsOutput>;
  /** Sends chat profile data to Engagement Cloud. */
  updateChatProfile?: Maybe<Scalars['Boolean']>;
  /** Deprecated. Use UpdateCustomerV2 instead. */
  updateCustomer?: Maybe<CustomerOutput>;
  /** Update customer address */
  updateCustomerAddress?: Maybe<CustomerAddress>;
  updateCustomerEmail?: Maybe<CustomerOutput>;
  /** Update the customer's personal information */
  updateCustomerV2?: Maybe<CustomerOutput>;
  /** Updates one or more products in the specified wish list */
  updateProductsInWishlist?: Maybe<UpdateProductsInWishlistOutput>;
  /** Updates the email address of a quote. */
  updateQuoteEmail?: Maybe<Scalars['Boolean']>;
};


export type MutationaddBundleProductsToCartArgs = {
  input?: InputMaybe<AddBundleProductsToCartInput>;
};


export type MutationaddConfigurableProductsToCartArgs = {
  input?: InputMaybe<AddConfigurableProductsToCartInput>;
};


export type MutationaddDownloadableProductsToCartArgs = {
  input?: InputMaybe<AddDownloadableProductsToCartInput>;
};


export type MutationaddProductsToCartArgs = {
  cartId: Scalars['String'];
  cartItems: Array<CartItemInput>;
};


export type MutationaddProductsToCompareListArgs = {
  input?: InputMaybe<AddProductsToCompareListInput>;
};


export type MutationaddProductsToWishlistArgs = {
  wishlistId: Scalars['ID'];
  wishlistItems: Array<WishlistItemInput>;
};


export type MutationaddSimpleProductsToCartArgs = {
  input?: InputMaybe<AddSimpleProductsToCartInput>;
};


export type MutationaddVirtualProductsToCartArgs = {
  input?: InputMaybe<AddVirtualProductsToCartInput>;
};


export type MutationaddWishlistItemsToCartArgs = {
  wishlistId: Scalars['ID'];
  wishlistItemIds?: InputMaybe<Array<Scalars['ID']>>;
};


export type MutationapplyCouponToCartArgs = {
  input?: InputMaybe<ApplyCouponToCartInput>;
};


export type MutationassignCompareListToCustomerArgs = {
  uid: Scalars['ID'];
};


export type MutationchangeCustomerPasswordArgs = {
  currentPassword: Scalars['String'];
  newPassword: Scalars['String'];
};


export type MutationcreateCompareListArgs = {
  input?: InputMaybe<CreateCompareListInput>;
};


export type MutationcreateCustomerArgs = {
  input: CustomerInput;
};


export type MutationcreateCustomerAddressArgs = {
  input: CustomerAddressInput;
};


export type MutationcreateCustomerV2Args = {
  input: CustomerCreateInput;
};


export type MutationcreateEmptyCartArgs = {
  input?: InputMaybe<createEmptyCartInput>;
};


export type MutationcreateKlarnaPaymentsSessionArgs = {
  input?: InputMaybe<createKlarnaPaymentsSessionInput>;
};


export type MutationcreateMollieTransactionArgs = {
  input?: InputMaybe<MollieTransactionInput>;
};


export type MutationcreatePayflowProTokenArgs = {
  input: PayflowProTokenInput;
};


export type MutationcreatePaypalExpressTokenArgs = {
  input: PaypalExpressTokenInput;
};


export type MutationcreateProductReviewArgs = {
  input: CreateProductReviewInput;
};


export type MutationdeleteCompareListArgs = {
  uid: Scalars['ID'];
};


export type MutationdeleteCustomerAddressArgs = {
  id: Scalars['Int'];
};


export type MutationdeletePaymentTokenArgs = {
  public_hash: Scalars['String'];
};


export type MutationgenerateCustomerTokenArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationgenerateCustomerTokenAsAdminArgs = {
  input: GenerateCustomerTokenAsAdminInput;
};


export type MutationhandlePayflowProResponseArgs = {
  input: PayflowProResponseInput;
};


export type MutationmergeCartsArgs = {
  source_cart_id: Scalars['String'];
  destination_cart_id?: InputMaybe<Scalars['String']>;
};


export type MutationmollieProcessTransactionArgs = {
  input?: InputMaybe<MollieProcessTransactionInput>;
};


export type MutationmollieRestoreCartArgs = {
  input?: InputMaybe<MollieResetCartInput>;
};


export type MutationplaceOrderArgs = {
  input?: InputMaybe<PlaceOrderInput>;
};


export type MutationremoveCouponFromCartArgs = {
  input?: InputMaybe<RemoveCouponFromCartInput>;
};


export type MutationremoveItemFromCartArgs = {
  input?: InputMaybe<RemoveItemFromCartInput>;
};


export type MutationremoveProductsFromCompareListArgs = {
  input?: InputMaybe<RemoveProductsFromCompareListInput>;
};


export type MutationremoveProductsFromWishlistArgs = {
  wishlistId: Scalars['ID'];
  wishlistItemsIds: Array<Scalars['ID']>;
};


export type MutationreorderItemsArgs = {
  orderNumber: Scalars['String'];
};


export type MutationrequestPasswordResetEmailArgs = {
  email: Scalars['String'];
};


export type MutationresetPasswordArgs = {
  email: Scalars['String'];
  resetPasswordToken: Scalars['String'];
  newPassword: Scalars['String'];
};


export type MutationsendEmailToFriendArgs = {
  input?: InputMaybe<SendEmailToFriendInput>;
};


export type MutationsetBillingAddressOnCartArgs = {
  input?: InputMaybe<SetBillingAddressOnCartInput>;
};


export type MutationsetGuestEmailOnCartArgs = {
  input?: InputMaybe<SetGuestEmailOnCartInput>;
};


export type MutationsetPaymentMethodAndPlaceOrderArgs = {
  input?: InputMaybe<SetPaymentMethodAndPlaceOrderInput>;
};


export type MutationsetPaymentMethodOnCartArgs = {
  input?: InputMaybe<SetPaymentMethodOnCartInput>;
};


export type MutationsetShippingAddressesOnCartArgs = {
  input?: InputMaybe<SetShippingAddressesOnCartInput>;
};


export type MutationsetShippingMethodsOnCartArgs = {
  input?: InputMaybe<SetShippingMethodsOnCartInput>;
};


export type MutationsubscribeEmailToNewsletterArgs = {
  email: Scalars['String'];
};


export type MutationupdateCartItemsArgs = {
  input?: InputMaybe<UpdateCartItemsInput>;
};


export type MutationupdateChatProfileArgs = {
  profileId: Scalars['String'];
  email?: InputMaybe<Scalars['String']>;
  firstname?: InputMaybe<Scalars['String']>;
  lastname?: InputMaybe<Scalars['String']>;
};


export type MutationupdateCustomerArgs = {
  input: CustomerInput;
};


export type MutationupdateCustomerAddressArgs = {
  id: Scalars['Int'];
  input?: InputMaybe<CustomerAddressInput>;
};


export type MutationupdateCustomerEmailArgs = {
  email: Scalars['String'];
  password: Scalars['String'];
};


export type MutationupdateCustomerV2Args = {
  input: CustomerUpdateInput;
};


export type MutationupdateProductsInWishlistArgs = {
  wishlistId: Scalars['ID'];
  wishlistItems: Array<WishlistItemUpdateInput>;
};


export type MutationupdateQuoteEmailArgs = {
  email: Scalars['String'];
  cartId: Scalars['String'];
};

export type AddBundleProductsToCartInput = {
  cart_id: Scalars['String'];
  cart_items: Array<InputMaybe<BundleProductCartItemInput>>;
};

export type BundleProductCartItemInput = {
  bundle_options: Array<InputMaybe<BundleOptionInput>>;
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  data: CartItemInput;
};

export type BundleOptionInput = {
  id: Scalars['Int'];
  quantity: Scalars['Float'];
  value: Array<InputMaybe<Scalars['String']>>;
};

export type CustomizableOptionInput = {
  /** The customizable option id of the product */
  id?: InputMaybe<Scalars['Int']>;
  /** The string value of the option */
  value_string: Scalars['String'];
};

export type CartItemInput = {
  /** An array of entered options for the base product, such as personalization text */
  entered_options?: InputMaybe<Array<InputMaybe<EnteredOptionInput>>>;
  /** For child products, the SKU of its parent product */
  parent_sku?: InputMaybe<Scalars['String']>;
  quantity: Scalars['Float'];
  /** The selected options for the base product, such as color or size with  unique ID for a `CustomizableRadioOption`, `CustomizableDropDownOption`, `ConfigurableProductOptionsValues`, etc. objects */
  selected_options?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  sku: Scalars['String'];
};

/** Defines a customer-entered option */
export type EnteredOptionInput = {
  /** The unique ID for a `CustomizableFieldOption`, `CustomizableFileOption`, `CustomizableAreaOption`, etc. of `CustomizableOptionInterface` objects */
  uid: Scalars['ID'];
  /** Text the customer entered */
  value: Scalars['String'];
};

export type AddBundleProductsToCartOutput = {
  cart: Cart;
};

export type AddConfigurableProductsToCartInput = {
  cart_id: Scalars['String'];
  cart_items: Array<InputMaybe<ConfigurableProductCartItemInput>>;
};

export type ConfigurableProductCartItemInput = {
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  data: CartItemInput;
  /** Configurable product SKU. */
  parent_sku?: InputMaybe<Scalars['String']>;
  /** Deprecated. Use CartItemInput.sku instead. */
  variant_sku?: InputMaybe<Scalars['String']>;
};

export type AddConfigurableProductsToCartOutput = {
  cart: Cart;
};

export type AddDownloadableProductsToCartInput = {
  cart_id: Scalars['String'];
  cart_items: Array<InputMaybe<DownloadableProductCartItemInput>>;
};

export type DownloadableProductCartItemInput = {
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  data: CartItemInput;
  downloadable_product_links?: InputMaybe<Array<InputMaybe<DownloadableProductLinksInput>>>;
};

export type DownloadableProductLinksInput = {
  link_id: Scalars['Int'];
};

export type AddDownloadableProductsToCartOutput = {
  cart: Cart;
};

export type AddProductsToCartOutput = {
  /** The cart after products have been added */
  cart: Cart;
  /** An error encountered while adding an item to the cart. */
  user_errors: Array<Maybe<CartUserInputError>>;
};

/** An error encountered while adding an item to the the cart. */
export type CartUserInputError = {
  /** Cart-specific error code */
  code: CartUserInputErrorType;
  /** A localized error message */
  message: Scalars['String'];
};

export type CartUserInputErrorType =
  | 'PRODUCT_NOT_FOUND'
  | 'NOT_SALABLE'
  | 'INSUFFICIENT_STOCK'
  | 'UNDEFINED';

export type AddProductsToCompareListInput = {
  /** An array of product IDs to add to the compare list */
  products: Array<InputMaybe<Scalars['ID']>>;
  /** The unique identifier of the compare list to modify */
  uid: Scalars['ID'];
};

/** Defines the items to add to a wish list */
export type WishlistItemInput = {
  /** An array of options that the customer entered */
  entered_options?: InputMaybe<Array<InputMaybe<EnteredOptionInput>>>;
  /** For complex product types, the SKU of the parent product */
  parent_sku?: InputMaybe<Scalars['String']>;
  /** The amount or number of items to add */
  quantity: Scalars['Float'];
  /** An array of strings corresponding to options the customer selected */
  selected_options?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** The SKU of the product to add. For complex product types, specify the child product SKU */
  sku: Scalars['String'];
};

/** Contains the customer's wish list and any errors encountered */
export type AddProductsToWishlistOutput = {
  /** An array of errors encountered while adding products to a wish list */
  user_errors: Array<Maybe<WishListUserInputError>>;
  /** Contains the wish list with all items that were successfully added */
  wishlist: Wishlist;
};

/** An error encountered while performing operations with WishList. */
export type WishListUserInputError = {
  /** Wishlist-specific error code */
  code: WishListUserInputErrorType;
  /** A localized error message */
  message: Scalars['String'];
};

export type WishListUserInputErrorType =
  | 'PRODUCT_NOT_FOUND'
  | 'UNDEFINED';

export type AddSimpleProductsToCartInput = {
  cart_id: Scalars['String'];
  cart_items: Array<InputMaybe<SimpleProductCartItemInput>>;
};

export type SimpleProductCartItemInput = {
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  data: CartItemInput;
};

export type AddSimpleProductsToCartOutput = {
  cart: Cart;
};

export type AddVirtualProductsToCartInput = {
  cart_id: Scalars['String'];
  cart_items: Array<InputMaybe<VirtualProductCartItemInput>>;
};

export type VirtualProductCartItemInput = {
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  data: CartItemInput;
};

export type AddVirtualProductsToCartOutput = {
  cart: Cart;
};

export type AddWishlistItemsToCartOutput = {
  /** An array of errors encountered while adding products to the customer's cart */
  add_wishlist_items_to_cart_user_errors: Array<Maybe<WishlistCartUserInputError>>;
  /** Indicates whether the attempt to add items to the customer's cart was successful */
  status: Scalars['Boolean'];
  /** Contains the wish list with all items that were successfully added */
  wishlist: Wishlist;
};

export type WishlistCartUserInputError = {
  /** An error code that describes the error encountered */
  code: WishlistCartUserInputErrorType;
  /** A localized error message */
  message: Scalars['String'];
  /** The unique ID of the `Wishlist` object containing an error */
  wishlistId: Scalars['ID'];
  /** The unique ID of the wish list item containing an error */
  wishlistItemId: Scalars['ID'];
};

export type WishlistCartUserInputErrorType =
  | 'PRODUCT_NOT_FOUND'
  | 'NOT_SALABLE'
  | 'INSUFFICIENT_STOCK'
  | 'UNDEFINED';

export type ApplyCouponToCartInput = {
  cart_id: Scalars['String'];
  coupon_code: Scalars['String'];
};

export type ApplyCouponToCartOutput = {
  cart: Cart;
};

export type AssignCompareListToCustomerOutput = {
  /** The contents of the customer's compare list */
  compare_list?: Maybe<CompareList>;
  result: Scalars['Boolean'];
};

export type CreateCompareListInput = {
  /** An array of product IDs to add to the compare list */
  products?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
};

export type CustomerInput = {
  /** The customer's date of birth */
  date_of_birth?: InputMaybe<Scalars['String']>;
  /** Deprecated: Use `date_of_birth` instead */
  dob?: InputMaybe<Scalars['String']>;
  /** The customer's email address. Required for customer creation */
  email?: InputMaybe<Scalars['String']>;
  /** The customer's first name */
  firstname?: InputMaybe<Scalars['String']>;
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: InputMaybe<Scalars['Int']>;
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: InputMaybe<Scalars['Boolean']>;
  /** The customer's family name */
  lastname?: InputMaybe<Scalars['String']>;
  /** The customer's middle name */
  middlename?: InputMaybe<Scalars['String']>;
  /** The customer's password */
  password?: InputMaybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']>;
  /** A value such as Sr., Jr., or III */
  suffix?: InputMaybe<Scalars['String']>;
  /** The customer's Tax/VAT number (for corporate customers) */
  taxvat?: InputMaybe<Scalars['String']>;
};

export type CustomerOutput = {
  customer: Customer;
};

export type CustomerAddressInput = {
  /** The city or town */
  city?: InputMaybe<Scalars['String']>;
  /** The customer's company */
  company?: InputMaybe<Scalars['String']>;
  /** The customer's country */
  country_code?: InputMaybe<CountryCodeEnum>;
  /** Deprecated: use `country_code` instead. */
  country_id?: InputMaybe<CountryCodeEnum>;
  /** Deprecated: Custom attributes should not be put into container. */
  custom_attributes?: InputMaybe<Array<InputMaybe<CustomerAddressAttributeInput>>>;
  /** Indicates whether the address is the default billing address */
  default_billing?: InputMaybe<Scalars['Boolean']>;
  /** Indicates whether the address is the default shipping address */
  default_shipping?: InputMaybe<Scalars['Boolean']>;
  /** The fax number */
  fax?: InputMaybe<Scalars['String']>;
  /** The first name of the person associated with the shipping/billing address */
  firstname?: InputMaybe<Scalars['String']>;
  /** The family name of the person associated with the shipping/billing address */
  lastname?: InputMaybe<Scalars['String']>;
  /** The middle name of the person associated with the shipping/billing address */
  middlename?: InputMaybe<Scalars['String']>;
  /** The customer's ZIP or postal code */
  postcode?: InputMaybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']>;
  /** An object containing the region name, region code, and region ID */
  region?: InputMaybe<CustomerAddressRegionInput>;
  /** An array of strings that define the street number and name */
  street?: InputMaybe<Array<InputMaybe<Scalars['String']>>>;
  /** A value such as Sr., Jr., or III */
  suffix?: InputMaybe<Scalars['String']>;
  /** The telephone number */
  telephone?: InputMaybe<Scalars['String']>;
  /** The customer's Tax/VAT number (for corporate customers) */
  vat_id?: InputMaybe<Scalars['String']>;
};

export type CustomerAddressAttributeInput = {
  /** Attribute code */
  attribute_code: Scalars['String'];
  /** Attribute value */
  value: Scalars['String'];
};

/** CustomerAddressRegionInput defines the customer's state or province */
export type CustomerAddressRegionInput = {
  /** The state or province name */
  region?: InputMaybe<Scalars['String']>;
  /** The address region code */
  region_code?: InputMaybe<Scalars['String']>;
  /** The unique ID for a pre-defined region */
  region_id?: InputMaybe<Scalars['Int']>;
};

export type CustomerCreateInput = {
  /** Indicates whether the customer has enabled remote shopping assistance */
  allow_remote_shopping_assistance?: InputMaybe<Scalars['Boolean']>;
  /** The customer's date of birth */
  date_of_birth?: InputMaybe<Scalars['String']>;
  /** Deprecated: Use `date_of_birth` instead */
  dob?: InputMaybe<Scalars['String']>;
  /** The customer's email address. Required for customer creation */
  email: Scalars['String'];
  /** The customer's first name */
  firstname: Scalars['String'];
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: InputMaybe<Scalars['Int']>;
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: InputMaybe<Scalars['Boolean']>;
  /** The customer's family name */
  lastname: Scalars['String'];
  /** The customer's middle name */
  middlename?: InputMaybe<Scalars['String']>;
  /** The customer's password */
  password?: InputMaybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']>;
  /** A value such as Sr., Jr., or III */
  suffix?: InputMaybe<Scalars['String']>;
  /** The customer's Tax/VAT number (for corporate customers) */
  taxvat?: InputMaybe<Scalars['String']>;
};

export type createEmptyCartInput = {
  cart_id?: InputMaybe<Scalars['String']>;
};

export type createKlarnaPaymentsSessionInput = {
  cart_id: Scalars['String'];
};

export type createKlarnaPaymentsSessionOutput = {
  /** The payment method client token */
  client_token?: Maybe<Scalars['String']>;
  /** The payment method categories */
  payment_method_categories?: Maybe<Array<Maybe<Categories>>>;
};

export type Categories = {
  /** The payment method assets */
  asset_urls?: Maybe<Array<Maybe<Assets>>>;
  /** The payment method identifier */
  identifier: Scalars['String'];
  /** The payment method name */
  name: Scalars['String'];
};

export type Assets = {
  /** The payment method logo url (descriptive) */
  descriptive?: Maybe<Scalars['String']>;
  /** The payment method logo url (standard) */
  standard?: Maybe<Scalars['String']>;
};

export type MollieTransactionInput = {
  issuer?: InputMaybe<Scalars['String']>;
  payment_token: Scalars['String'];
};

export type MollieTransactionOutput = {
  checkout_url?: Maybe<Scalars['String']>;
};

/** Input required to fetch payment token information for Payflow Pro and Payments Pro payment methods. */
export type PayflowProTokenInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String'];
  /** A set of relative URLs that PayPal uses for callback. */
  urls: PayflowProUrlInput;
};

/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payflow Pro and Payment Pro payment methods. */
export type PayflowProUrlInput = {
  /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String'];
  /** The relative URL of the transaction error page that PayPal will redirect to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html. */
  error_url: Scalars['String'];
  /** The relative URL of the final confirmation page that PayPal will redirect to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String'];
};

/** Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods. */
export type CreatePayflowProTokenOutput = {
  response_message: Scalars['String'];
  result: Scalars['Int'];
  result_code: Scalars['Int'];
  secure_token: Scalars['String'];
  secure_token_id: Scalars['String'];
};

/** Defines the attributes required to receive a payment token for Express Checkout and Payments Standard payment methods. */
export type PaypalExpressTokenInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String'];
  /** Payment method code */
  code: Scalars['String'];
  /** Indicates whether the buyer selected the quick checkout button. The default value is false */
  express_button?: InputMaybe<Scalars['Boolean']>;
  /** A set of relative URLs that PayPal uses in response to various actions during the authorization process */
  urls: PaypalExpressUrlsInput;
  /** Indicates whether the buyer clicked the PayPal credit button. The default value is false */
  use_paypal_credit?: InputMaybe<Scalars['Boolean']>;
};

/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Express Checkout and Payments Standard payment methods. */
export type PaypalExpressUrlsInput = {
  /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String'];
  /** The relative URL of the page that PayPal will redirect to when the payment has been put on hold for additional review. This condition mostly applies to ACH transactions, and is not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success_pending.html, the relative URL is paypal/action/success_pending.html.  */
  pending_url?: InputMaybe<Scalars['String']>;
  /** The relative URL of the final confirmation page that PayPal will redirect to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String'];
  /** The relative URL of the order confirmation page that PayPal will redirect to when the payment is successful and additional confirmation is not needed. Not applicable to most PayPal solutions. If the full URL to this page is https://www.example.com/paypal/action/success.html, the relative URL is paypal/action/success.html. */
  success_url?: InputMaybe<Scalars['String']>;
};

/** Contains the token returned by PayPal and a set of URLs that allow the buyer to authorize payment and adjust checkout details. Applies to Express Checkout and Payments Standard payment methods. */
export type PaypalExpressTokenOutput = {
  /** A set of URLs that allow the buyer to authorize payment and adjust checkout details */
  paypal_urls?: Maybe<PaypalExpressUrlList>;
  /** The token returned by PayPal */
  token?: Maybe<Scalars['String']>;
};

/** A set of URLs that allow the buyer to authorize payment and adjust checkout details for Express Checkout and Payments Standard transactions. */
export type PaypalExpressUrlList = {
  /** The PayPal URL that allows the buyer to edit their checkout details */
  edit?: Maybe<Scalars['String']>;
  /** The URL to the PayPal login page */
  start?: Maybe<Scalars['String']>;
};

export type CreateProductReviewInput = {
  /** The customer's nickname. Defaults to the customer name, if logged in */
  nickname: Scalars['String'];
  /** Ratings details by category. e.g price: 5, quality: 4 etc */
  ratings: Array<InputMaybe<ProductReviewRatingInput>>;
  /** The SKU of the reviewed product */
  sku: Scalars['String'];
  /** The summary (title) of the review */
  summary: Scalars['String'];
  /** The review text. */
  text: Scalars['String'];
};

export type ProductReviewRatingInput = {
  /** An encoded rating ID. */
  id: Scalars['String'];
  /** An encoded rating value id. */
  value_id: Scalars['String'];
};

export type CreateProductReviewOutput = {
  /** Contains the completed product review */
  review: ProductReview;
};

export type DeleteCompareListOutput = {
  /** Indicates whether the compare list was successfully deleted */
  result: Scalars['Boolean'];
};

export type DeletePaymentTokenOutput = {
  customerPaymentTokens?: Maybe<CustomerPaymentTokens>;
  result: Scalars['Boolean'];
};

export type CustomerToken = {
  /** The customer token */
  token?: Maybe<Scalars['String']>;
};

export type GenerateCustomerTokenAsAdminInput = {
  /** The email address of the customer requesting remote shopping assistance */
  customer_email: Scalars['String'];
};

export type GenerateCustomerTokenAsAdminOutput = {
  /** The generated customer token */
  customer_token: Scalars['String'];
};

/** Input required to complete payment. Applies to Payflow Pro and Payments Pro payment methods. */
export type PayflowProResponseInput = {
  cart_id: Scalars['String'];
  paypal_payload: Scalars['String'];
};

export type PayflowProResponseOutput = {
  cart: Cart;
};

export type MollieProcessTransactionInput = {
  /** The payment token returned from the PlaceOrder call/added to the return URL */
  payment_token: Scalars['String'];
};

export type MollieProcessTransactionOutput = {
  /** The cart is only available when the payment status is failed, canceled or expired. */
  cart?: Maybe<Cart>;
  paymentStatus?: Maybe<PaymentStatusEnum>;
};

export type PaymentStatusEnum =
  | 'CREATED'
  | 'PAID'
  | 'AUTHORIZED'
  | 'CANCELED'
  | 'SHIPPING'
  | 'COMPLETED'
  | 'EXPIRED'
  | 'PENDING'
  | 'REFUNDED'
  | 'ERROR'
  | 'FAILED'
  | 'OPEN';

export type MollieResetCartInput = {
  /** The unique ID that identifies the customer's cart */
  cart_id: Scalars['String'];
};

export type MollieResetCartOutput = {
  cart: Cart;
};

export type PlaceOrderInput = {
  cart_id: Scalars['String'];
  /** Optionally send a URL where the visitor is returned after completing the Mollie order */
  mollie_return_url?: InputMaybe<Scalars['String']>;
};

export type PlaceOrderOutput = {
  order: Order;
};

export type RemoveCouponFromCartInput = {
  cart_id: Scalars['String'];
};

export type RemoveCouponFromCartOutput = {
  cart?: Maybe<Cart>;
};

export type RemoveItemFromCartInput = {
  cart_id: Scalars['String'];
  /** Deprecated. Use `cart_item_uid` instead. */
  cart_item_id?: InputMaybe<Scalars['Int']>;
  /** Required field. The unique ID for a `CartItemInterface` object */
  cart_item_uid?: InputMaybe<Scalars['ID']>;
};

export type RemoveItemFromCartOutput = {
  cart: Cart;
};

export type RemoveProductsFromCompareListInput = {
  /** An array of product IDs to remove from the compare list */
  products: Array<InputMaybe<Scalars['ID']>>;
  /** The unique identifier of the compare list to modify */
  uid: Scalars['ID'];
};

/** Contains the customer's wish list and any errors encountered */
export type RemoveProductsFromWishlistOutput = {
  /** An array of errors encountered while deleting products from a wish list */
  user_errors: Array<Maybe<WishListUserInputError>>;
  /** Contains the wish list with after items were successfully deleted */
  wishlist: Wishlist;
};

export type ReorderItemsOutput = {
  /** Contains detailed information about the customer's cart. */
  cart: Cart;
  /** An array of reordering errors. */
  userInputErrors: Array<Maybe<CheckoutUserInputError>>;
};

/** An error encountered while adding an item the the cart. */
export type CheckoutUserInputError = {
  /** Checkout-specific error code */
  code: CheckoutUserInputErrorCodes;
  /** Localized error message */
  message: Scalars['String'];
  /** Path to the input field that caused an error. See the GraphQL specification about path errors for details: http://spec.graphql.org/draft/#sec-Errors */
  path: Array<Maybe<Scalars['String']>>;
};

export type CheckoutUserInputErrorCodes =
  | 'REORDER_NOT_AVAILABLE'
  | 'PRODUCT_NOT_FOUND'
  | 'NOT_SALABLE'
  | 'INSUFFICIENT_STOCK'
  | 'UNDEFINED';

export type RevokeCustomerTokenOutput = {
  result: Scalars['Boolean'];
};

export type SendEmailToFriendInput = {
  product_id: Scalars['Int'];
  recipients: Array<InputMaybe<SendEmailToFriendRecipientInput>>;
  sender: SendEmailToFriendSenderInput;
};

export type SendEmailToFriendRecipientInput = {
  email: Scalars['String'];
  name: Scalars['String'];
};

export type SendEmailToFriendSenderInput = {
  email: Scalars['String'];
  message: Scalars['String'];
  name: Scalars['String'];
};

export type SendEmailToFriendOutput = {
  recipients?: Maybe<Array<Maybe<SendEmailToFriendRecipient>>>;
  sender?: Maybe<SendEmailToFriendSender>;
};

export type SendEmailToFriendRecipient = {
  email: Scalars['String'];
  name: Scalars['String'];
};

export type SendEmailToFriendSender = {
  email: Scalars['String'];
  message: Scalars['String'];
  name: Scalars['String'];
};

export type SetBillingAddressOnCartInput = {
  billing_address: BillingAddressInput;
  cart_id: Scalars['String'];
};

export type BillingAddressInput = {
  address?: InputMaybe<CartAddressInput>;
  customer_address_id?: InputMaybe<Scalars['Int']>;
  /** Set billing address same as shipping */
  same_as_shipping?: InputMaybe<Scalars['Boolean']>;
  /** Deprecated: use `same_as_shipping` field instead */
  use_for_shipping?: InputMaybe<Scalars['Boolean']>;
};

export type CartAddressInput = {
  city: Scalars['String'];
  company?: InputMaybe<Scalars['String']>;
  country_code: Scalars['String'];
  firstname: Scalars['String'];
  lastname: Scalars['String'];
  postcode?: InputMaybe<Scalars['String']>;
  region?: InputMaybe<Scalars['String']>;
  region_id?: InputMaybe<Scalars['Int']>;
  /** Determines whether to save the address in the customer's address book. The default value is true */
  save_in_address_book?: InputMaybe<Scalars['Boolean']>;
  street: Array<InputMaybe<Scalars['String']>>;
  telephone: Scalars['String'];
};

export type SetBillingAddressOnCartOutput = {
  cart: Cart;
};

export type SetGuestEmailOnCartInput = {
  cart_id: Scalars['String'];
  email: Scalars['String'];
};

export type SetGuestEmailOnCartOutput = {
  cart: Cart;
};

export type SetPaymentMethodAndPlaceOrderInput = {
  cart_id: Scalars['String'];
  payment_method: PaymentMethodInput;
};

export type PaymentMethodInput = {
  braintree?: InputMaybe<BraintreeInput>;
  braintree_cc_vault?: InputMaybe<BraintreeCcVaultInput>;
  /** Payment method code */
  code: Scalars['String'];
  /** Required input for PayPal Hosted pro payments */
  hosted_pro?: InputMaybe<HostedProInput>;
  klarna?: InputMaybe<KlarnaInput>;
  /** The card token provided by Mollie Components */
  mollie_card_token?: InputMaybe<Scalars['String']>;
  /** Provided the issuer chosen by the end-user */
  mollie_selected_issuer?: InputMaybe<Scalars['String']>;
  /** Required input for Payflow Express Checkout payments */
  payflow_express?: InputMaybe<PayflowExpressInput>;
  /** Required input for PayPal Payflow Link and Payments Advanced payments */
  payflow_link?: InputMaybe<PayflowLinkInput>;
  /** Required input type for PayPal Payflow Pro and Payment Pro payments */
  payflowpro?: InputMaybe<PayflowProInput>;
  /** Required input type for PayPal Payflow Pro vault payments */
  payflowpro_cc_vault?: InputMaybe<VaultTokenInput>;
  /** Required input for Express Checkout and Payments Standard payments */
  paypal_express?: InputMaybe<PaypalExpressInput>;
  /** Purchase order number */
  purchase_order_number?: InputMaybe<Scalars['String']>;
};

export type BraintreeInput = {
  /** Contains a fingerprint provided by Braintree JS SDK and should be sent with sale transaction details to the Braintree payment gateway. Should be specified only in a case if Kount (advanced fraud protection) is enabled for Braintree payment integration. */
  device_data?: InputMaybe<Scalars['String']>;
  /** States whether an entered by a customer credit/debit card should be tokenized for later usage. Required only if Vault is enabled for Braintree payment integration. */
  is_active_payment_token_enabler: Scalars['Boolean'];
  /** The one-time payment token generated by Braintree payment gateway based on card details. Required field to make sale transaction. */
  payment_method_nonce: Scalars['String'];
};

export type BraintreeCcVaultInput = {
  device_data?: InputMaybe<Scalars['String']>;
  public_hash: Scalars['String'];
};

/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payments Pro Hosted Solution payment method. */
export type HostedProInput = {
  /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String'];
  /** The relative URL of the final confirmation page that PayPal will redirect to upon payment success. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String'];
};

export type KlarnaInput = {
  /** The authorization token must be provided to set any Klarna Payments method */
  authorization_token: Scalars['String'];
};

/** Required input for Payflow Express Checkout payments */
export type PayflowExpressInput = {
  /** The unique ID of the PayPal user */
  payer_id: Scalars['String'];
  /** The token returned by the createPaypalExpressToken mutation */
  token: Scalars['String'];
};

/** A set of relative URLs that PayPal will use in response to various actions during the authorization process. Magento prepends the base URL to this value to create a full URL. For example, if the full URL is https://www.example.com/path/to/page.html, the relative URL is path/to/page.html. Use this input for Payflow Link and Payments Advanced payment methods. */
export type PayflowLinkInput = {
  /** The relative URL of the page that PayPal will redirect to when the buyer cancels the transaction in order to choose a different payment method. If the full URL to this page is https://www.example.com/paypal/action/cancel.html, the relative URL is paypal/action/cancel.html. */
  cancel_url: Scalars['String'];
  /** The relative URL of the transaction error page that PayPal will redirect to upon payment error. If the full URL to this page is https://www.example.com/paypal/action/error.html, the relative URL is paypal/action/error.html. */
  error_url: Scalars['String'];
  /** The relative URL of the order confirmation page that PayPal will redirect to when the payment is successful and additional confirmation is not needed. If the full URL to this page is https://www.example.com/paypal/action/return.html, the relative URL is paypal/action/return.html. */
  return_url: Scalars['String'];
};

/** Required input for Payflow Pro and Payments Pro payment methods. */
export type PayflowProInput = {
  /** Required input for credit card related information */
  cc_details: CreditCardDetailsInput;
  /** States whether details about the customer's credit/debit card should be tokenized for later usage. Required only if Vault is enabled for PayPal Payflow Pro payment integration. */
  is_active_payment_token_enabler?: InputMaybe<Scalars['Boolean']>;
};

/** Required fields for Payflow Pro and Payments Pro credit card payments */
export type CreditCardDetailsInput = {
  /** Credit card expiration month */
  cc_exp_month: Scalars['Int'];
  /** Credit card expiration year */
  cc_exp_year: Scalars['Int'];
  /** Last 4 digits of the credit card */
  cc_last_4: Scalars['Int'];
  /** Credit card type */
  cc_type: Scalars['String'];
};

/** Required input for payment methods with Vault support. */
export type VaultTokenInput = {
  /** The public hash of the payment token */
  public_hash: Scalars['String'];
};

/** Required input for Express Checkout and Payments Standard payments */
export type PaypalExpressInput = {
  /** The unique ID of the PayPal user */
  payer_id: Scalars['String'];
  /** The token returned by the createPaypalExpressToken mutation */
  token: Scalars['String'];
};

export type SetPaymentMethodOnCartInput = {
  cart_id: Scalars['String'];
  payment_method: PaymentMethodInput;
};

export type SetPaymentMethodOnCartOutput = {
  cart: Cart;
};

export type SetShippingAddressesOnCartInput = {
  cart_id: Scalars['String'];
  shipping_addresses: Array<InputMaybe<ShippingAddressInput>>;
};

export type ShippingAddressInput = {
  address?: InputMaybe<CartAddressInput>;
  customer_address_id?: InputMaybe<Scalars['Int']>;
  customer_notes?: InputMaybe<Scalars['String']>;
  /** The code of Pickup Location which will be used for In-Store Pickup. */
  pickup_location_code?: InputMaybe<Scalars['String']>;
};

export type SetShippingAddressesOnCartOutput = {
  cart: Cart;
};

export type SetShippingMethodsOnCartInput = {
  cart_id: Scalars['String'];
  shipping_methods: Array<InputMaybe<ShippingMethodInput>>;
};

export type ShippingMethodInput = {
  carrier_code: Scalars['String'];
  method_code: Scalars['String'];
};

export type SetShippingMethodsOnCartOutput = {
  cart: Cart;
};

export type SubscribeEmailToNewsletterOutput = {
  /** Returns the status of the subscription request */
  status?: Maybe<SubscriptionStatusesEnum>;
};

export type SubscriptionStatusesEnum =
  | 'NOT_ACTIVE'
  | 'SUBSCRIBED'
  | 'UNSUBSCRIBED'
  | 'UNCONFIRMED';

export type UpdateCartItemsInput = {
  cart_id: Scalars['String'];
  cart_items: Array<InputMaybe<CartItemUpdateInput>>;
};

export type CartItemUpdateInput = {
  /** Deprecated. Use `cart_item_uid` instead. */
  cart_item_id?: InputMaybe<Scalars['Int']>;
  /** The unique ID for a `CartItemInterface` object */
  cart_item_uid?: InputMaybe<Scalars['ID']>;
  customizable_options?: InputMaybe<Array<InputMaybe<CustomizableOptionInput>>>;
  /** Gift message details for the cart item */
  gift_message?: InputMaybe<GiftMessageInput>;
  quantity?: InputMaybe<Scalars['Float']>;
};

/** Contains the text of a gift message, its sender, and recipient */
export type GiftMessageInput = {
  /** Sender name */
  from: Scalars['String'];
  /** Gift message text */
  message: Scalars['String'];
  /** Recipient name */
  to: Scalars['String'];
};

export type UpdateCartItemsOutput = {
  cart: Cart;
};

export type CustomerUpdateInput = {
  /** Indicates whether the customer has enabled remote shopping assistance */
  allow_remote_shopping_assistance?: InputMaybe<Scalars['Boolean']>;
  /** The customer's date of birth */
  date_of_birth?: InputMaybe<Scalars['String']>;
  /** Deprecated: Use `date_of_birth` instead */
  dob?: InputMaybe<Scalars['String']>;
  /** The customer's first name */
  firstname?: InputMaybe<Scalars['String']>;
  /** The customer's gender (Male - 1, Female - 2) */
  gender?: InputMaybe<Scalars['Int']>;
  /** Indicates whether the customer is subscribed to the company's newsletter */
  is_subscribed?: InputMaybe<Scalars['Boolean']>;
  /** The customer's family name */
  lastname?: InputMaybe<Scalars['String']>;
  /** The customer's middle name */
  middlename?: InputMaybe<Scalars['String']>;
  /** An honorific, such as Dr., Mr., or Mrs. */
  prefix?: InputMaybe<Scalars['String']>;
  /** A value such as Sr., Jr., or III */
  suffix?: InputMaybe<Scalars['String']>;
  /** The customer's Tax/VAT number (for corporate customers) */
  taxvat?: InputMaybe<Scalars['String']>;
};

/** Defines updates to items in a wish list */
export type WishlistItemUpdateInput = {
  /** Customer-entered comments about the item */
  description?: InputMaybe<Scalars['String']>;
  /** An array of options that the customer entered */
  entered_options?: InputMaybe<Array<InputMaybe<EnteredOptionInput>>>;
  /** The new amount or number of this item */
  quantity?: InputMaybe<Scalars['Float']>;
  /** An array of strings corresponding to options the customer selected */
  selected_options?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>;
  /** The unique ID for a `WishlistItemInterface` object */
  wishlist_item_id: Scalars['ID'];
};

/** Contains the customer's wish list and any errors encountered */
export type UpdateProductsInWishlistOutput = {
  /** An array of errors encountered while updating products in a wish list */
  user_errors: Array<Maybe<WishListUserInputError>>;
  /** Contains the wish list with all items that were successfully updated */
  wishlist: Wishlist;
};

/** This enumeration customizable date type. */
export type CustomizableDateTypeEnum =
  | 'DATE'
  | 'DATE_TIME'
  | 'TIME';

/** ProductLinks is an implementation of ProductLinksInterface. */
export type ProductLinks = ProductLinksInterface & {
  /** One of related, associated, upsell, or crosssell. */
  link_type?: Maybe<Scalars['String']>;
  /** The SKU of the linked product. */
  linked_product_sku?: Maybe<Scalars['String']>;
  /** The type of linked product (simple, virtual, bundle, downloadable, grouped, configurable). */
  linked_product_type?: Maybe<Scalars['String']>;
  /** The position within the list of product links. */
  position?: Maybe<Scalars['Int']>;
  /** The identifier of the linked product. */
  sku?: Maybe<Scalars['String']>;
};

/** PhysicalProductInterface contains attributes specific to tangible products. */
export type PhysicalProductInterface = {
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};

/** CustomizableAreaOption contains information about a text area that is defined as part of a customizable option. */
export type CustomizableAreaOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An object that defines a text area. */
  value?: Maybe<CustomizableAreaValue>;
};

/** The CustomizableOptionInterface contains basic information about a customizable option. It can be implemented by several types of configurable options. */
export type CustomizableOptionInterface = {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
};

/** CustomizableAreaValue defines the price and sku of a product whose page contains a customized text area. */
export type CustomizableAreaValue = {
  /** The maximum number of characters that can be entered for this customizable option. */
  max_characters?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableAreaValue` object. */
  uid: Scalars['ID'];
};

/** CustomizableDateOption contains information about a date picker that is defined as part of a customizable option. */
export type CustomizableDateOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An object that defines a date field in a customizable option. */
  value?: Maybe<CustomizableDateValue>;
};

/** CustomizableDateValue defines the price and sku of a product whose page contains a customized date picker. */
export type CustomizableDateValue = {
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** DATE, DATE_TIME or TIME */
  type?: Maybe<CustomizableDateTypeEnum>;
  /** The unique ID for a `CustomizableDateValue` object. */
  uid: Scalars['ID'];
};

/** CustomizableDropDownOption contains information about a drop down menu that is defined as part of a customizable option. */
export type CustomizableDropDownOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An array that defines the set of options for a drop down menu. */
  value?: Maybe<Array<Maybe<CustomizableDropDownValue>>>;
};

/** CustomizableDropDownValue defines the price and sku of a product whose page contains a customized drop down menu. */
export type CustomizableDropDownValue = {
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableDropDownValue` object. */
  uid: Scalars['ID'];
};

/** CustomizableMultipleOption contains information about a multiselect that is defined as part of a customizable option. */
export type CustomizableMultipleOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An array that defines the set of options for a multiselect. */
  value?: Maybe<Array<Maybe<CustomizableMultipleValue>>>;
};

/** CustomizableMultipleValue defines the price and sku of a product whose page contains a customized multiselect. */
export type CustomizableMultipleValue = {
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableMultipleValue` object. */
  uid: Scalars['ID'];
};

/** CustomizableFieldOption contains information about a text field that is defined as part of a customizable option. */
export type CustomizableFieldOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An object that defines a text field. */
  value?: Maybe<CustomizableFieldValue>;
};

/** CustomizableFieldValue defines the price and sku of a product whose page contains a customized text field. */
export type CustomizableFieldValue = {
  /** The maximum number of characters that can be entered for this customizable option. */
  max_characters?: Maybe<Scalars['Int']>;
  /** The price of the custom value. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableFieldValue` object. */
  uid: Scalars['ID'];
};

/** CustomizableFileOption contains information about a file picker that is defined as part of a customizable option. */
export type CustomizableFileOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** The Stock Keeping Unit of the base product. */
  product_sku?: Maybe<Scalars['String']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An object that defines a file value. */
  value?: Maybe<CustomizableFileValue>;
};

/** CustomizableFileValue defines the price and sku of a product whose page contains a customized file picker. */
export type CustomizableFileValue = {
  /** The file extension to accept. */
  file_extension?: Maybe<Scalars['String']>;
  /** The maximum width of an image. */
  image_size_x?: Maybe<Scalars['Int']>;
  /** The maximum height of an image. */
  image_size_y?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableFileValue` object. */
  uid: Scalars['ID'];
};

/** Contains information about a product video. */
export type ProductVideo = MediaGalleryInterface & {
  /** Whether the image is hidden from view. */
  disabled?: Maybe<Scalars['Boolean']>;
  /** The label of the product image or video. */
  label?: Maybe<Scalars['String']>;
  /** The media item's position after it has been sorted. */
  position?: Maybe<Scalars['Int']>;
  /** The URL of the product image or video. */
  url?: Maybe<Scalars['String']>;
  /** Contains a ProductMediaGalleryEntriesVideoContent object. */
  video_content?: Maybe<ProductMediaGalleryEntriesVideoContent>;
};

/** CustomizableProductInterface contains information about customizable product options. */
export type CustomizableProductInterface = {
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
};

/** CustomizableRadioOption contains information about a set of radio buttons that are defined as part of a customizable option. */
export type CustomizableRadioOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An array that defines a set of radio buttons. */
  value?: Maybe<Array<Maybe<CustomizableRadioValue>>>;
};

/** CustomizableRadioValue defines the price and sku of a product whose page contains a customized set of radio buttons. */
export type CustomizableRadioValue = {
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The order in which the radio button is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableRadioValue` object. */
  uid: Scalars['ID'];
};

/** CustomizableCheckbbixOption contains information about a set of checkbox values that are defined as part of a customizable option. */
export type CustomizableCheckboxOption = CustomizableOptionInterface & {
  /**
   * Option ID.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** Indicates whether the option is required. */
  required?: Maybe<Scalars['Boolean']>;
  /** The order in which the option is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableOptionInterface` object. */
  uid: Scalars['ID'];
  /** An array that defines a set of checkbox values. */
  value?: Maybe<Array<Maybe<CustomizableCheckboxValue>>>;
};

/** CustomizableCheckboxValue defines the price and sku of a product whose page contains a customized set of checkbox values. */
export type CustomizableCheckboxValue = {
  /** The ID assigned to the value. */
  option_type_id?: Maybe<Scalars['Int']>;
  /** The price assigned to this option. */
  price?: Maybe<Scalars['Float']>;
  /** FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** The Stock Keeping Unit for this option. */
  sku?: Maybe<Scalars['String']>;
  /** The order in which the checkbox value is displayed. */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name for this option. */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `CustomizableCheckboxValue` object. */
  uid: Scalars['ID'];
};

/** A virtual product is a non-tangible product that does not require shipping and is not kept in inventory */
export type VirtualProduct = ProductInterface & RoutableInterface & CustomizableProductInterface & {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
};


/** A virtual product is a non-tangible product that does not require shipping and is not kept in inventory */
export type VirtualProductreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** A simple product is tangible and is usually sold in single units or in fixed quantities */
export type SimpleProduct = ProductInterface & RoutableInterface & PhysicalProductInterface & CustomizableProductInterface & {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};


/** A simple product is tangible and is usually sold in single units or in fixed quantities */
export type SimpleProductreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. ProductFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for. */
export type ProductFilterInput = {
  /** Category ID the product belongs to. */
  category_id?: InputMaybe<FilterTypeInput>;
  /** The product's country of origin. */
  country_of_manufacture?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the product was created. */
  created_at?: InputMaybe<FilterTypeInput>;
  /** The name of a custom layout. */
  custom_layout?: InputMaybe<FilterTypeInput>;
  /** XML code that is applied as a layout update to the product page. */
  custom_layout_update?: InputMaybe<FilterTypeInput>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: InputMaybe<FilterTypeInput>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: InputMaybe<FilterTypeInput>;
  /** Indicates whether additional attributes have been created for the product. */
  has_options?: InputMaybe<FilterTypeInput>;
  /** The relative path to the main image on the product page. */
  image?: InputMaybe<FilterTypeInput>;
  /** The label assigned to a product image. */
  image_label?: InputMaybe<FilterTypeInput>;
  /** A number representing the product's manufacturer. */
  manufacturer?: InputMaybe<FilterTypeInput>;
  /** The numeric maximal price of the product. Do not include the currency code. */
  max_price?: InputMaybe<FilterTypeInput>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: InputMaybe<FilterTypeInput>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: InputMaybe<FilterTypeInput>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: InputMaybe<FilterTypeInput>;
  /** The numeric minimal price of the product. Do not include the currency code. */
  min_price?: InputMaybe<FilterTypeInput>;
  /** The product name. Customers use this name to identify the product. */
  name?: InputMaybe<FilterTypeInput>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  news_from_date?: InputMaybe<FilterTypeInput>;
  /** The end date for new product listings. */
  news_to_date?: InputMaybe<FilterTypeInput>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: InputMaybe<FilterTypeInput>;
  /** The keyword required to perform a logical OR comparison. */
  or?: InputMaybe<ProductFilterInput>;
  /** The price of an item. */
  price?: InputMaybe<FilterTypeInput>;
  /** Indicates whether the product has required options. */
  required_options?: InputMaybe<FilterTypeInput>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: InputMaybe<FilterTypeInput>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: InputMaybe<FilterTypeInput>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: InputMaybe<FilterTypeInput>;
  /** The label assigned to a product's small image. */
  small_image_label?: InputMaybe<FilterTypeInput>;
  /** The beginning date that a product has a special price. */
  special_from_date?: InputMaybe<FilterTypeInput>;
  /** The discounted price of the product. Do not include the currency code. */
  special_price?: InputMaybe<FilterTypeInput>;
  /** The end date that a product has a special price. */
  special_to_date?: InputMaybe<FilterTypeInput>;
  /** The file name of a swatch image */
  swatch_image?: InputMaybe<FilterTypeInput>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: InputMaybe<FilterTypeInput>;
  /** The label assigned to a product's thumbnail image. */
  thumbnail_label?: InputMaybe<FilterTypeInput>;
  /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
  tier_price?: InputMaybe<FilterTypeInput>;
  /** Timestamp indicating when the product was updated. */
  updated_at?: InputMaybe<FilterTypeInput>;
  /** The part of the URL that identifies the product */
  url_key?: InputMaybe<FilterTypeInput>;
  url_path?: InputMaybe<FilterTypeInput>;
  /** The weight of the item, in units defined by the store. */
  weight?: InputMaybe<FilterTypeInput>;
};

/** ProductSortInput is deprecated, use @ProductAttributeSortInput instead. ProductSortInput specifies the attribute to use for sorting search results and indicates whether the results are sorted in ascending or descending order. */
export type ProductSortInput = {
  /** The product's country of origin. */
  country_of_manufacture?: InputMaybe<SortEnum>;
  /** Timestamp indicating when the product was created. */
  created_at?: InputMaybe<SortEnum>;
  /** The name of a custom layout. */
  custom_layout?: InputMaybe<SortEnum>;
  /** XML code that is applied as a layout update to the product page. */
  custom_layout_update?: InputMaybe<SortEnum>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: InputMaybe<SortEnum>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: InputMaybe<SortEnum>;
  /** Indicates whether additional attributes have been created for the product. */
  has_options?: InputMaybe<SortEnum>;
  /** The relative path to the main image on the product page. */
  image?: InputMaybe<SortEnum>;
  /** The label assigned to a product image. */
  image_label?: InputMaybe<SortEnum>;
  /** A number representing the product's manufacturer. */
  manufacturer?: InputMaybe<SortEnum>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: InputMaybe<SortEnum>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: InputMaybe<SortEnum>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: InputMaybe<SortEnum>;
  /** The product name. Customers use this name to identify the product. */
  name?: InputMaybe<SortEnum>;
  /** The beginning date for new product listings, and determines if the product is featured as a new product. */
  news_from_date?: InputMaybe<SortEnum>;
  /** The end date for new product listings. */
  news_to_date?: InputMaybe<SortEnum>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: InputMaybe<SortEnum>;
  /** The price of the item. */
  price?: InputMaybe<SortEnum>;
  /** Indicates whether the product has required options. */
  required_options?: InputMaybe<SortEnum>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: InputMaybe<SortEnum>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: InputMaybe<SortEnum>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: InputMaybe<SortEnum>;
  /** The label assigned to a product's small image. */
  small_image_label?: InputMaybe<SortEnum>;
  /** The beginning date that a product has a special price. */
  special_from_date?: InputMaybe<SortEnum>;
  /** The discounted price of the product. */
  special_price?: InputMaybe<SortEnum>;
  /** The end date that a product has a special price. */
  special_to_date?: InputMaybe<SortEnum>;
  /** The file name of a swatch image */
  swatch_image?: InputMaybe<SortEnum>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: InputMaybe<SortEnum>;
  /** The label assigned to a product's thumbnail image. */
  thumbnail_label?: InputMaybe<SortEnum>;
  /** The price when tier pricing is in effect and the items purchased threshold has been reached. */
  tier_price?: InputMaybe<SortEnum>;
  /** Timestamp indicating when the product was updated. */
  updated_at?: InputMaybe<SortEnum>;
  /** The part of the URL that identifies the product */
  url_key?: InputMaybe<SortEnum>;
  url_path?: InputMaybe<SortEnum>;
  /** The weight of the item, in units defined by the store. */
  weight?: InputMaybe<SortEnum>;
};

export type LayerFilterItem = LayerFilterItemInterface & {
  /**
   * Count of items by filter.
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: Maybe<Scalars['Int']>;
  /**
   * Filter label.
   * @deprecated Use AggregationOption.label instead.
   */
  label?: Maybe<Scalars['String']>;
  /**
   * Value for filter request variable to be used in query.
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: Maybe<Scalars['String']>;
};

/** A simple product wish list Item */
export type SimpleWishlistItem = WishlistItemInterface & {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
};

/** A virtual product wish list item */
export type VirtualWishlistItem = WishlistItemInterface & {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
};

/** Simple Cart Item */
export type SimpleCartItem = CartItemInterface & {
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use `uid` instead */
  id: Scalars['String'];
  prices?: Maybe<CartItemPrices>;
  product: ProductInterface;
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID'];
};

/** Virtual Cart Item */
export type VirtualCartItem = CartItemInterface & {
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** @deprecated Use `uid` instead */
  id: Scalars['String'];
  prices?: Maybe<CartItemPrices>;
  product: ProductInterface;
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID'];
};

/** Downloadable Cart Item */
export type DownloadableCartItem = CartItemInterface & {
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** @deprecated Use `uid` instead */
  id: Scalars['String'];
  /** An array containing information about the links for the added to cart downloadable product */
  links?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
  prices?: Maybe<CartItemPrices>;
  product: ProductInterface;
  quantity: Scalars['Float'];
  /** DownloadableProductSamples defines characteristics of a downloadable product */
  samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID'];
};

/** DownloadableProductLinks defines characteristics of a downloadable product */
export type DownloadableProductLinks = {
  /** @deprecated This information should not be exposed on frontend */
  id?: Maybe<Scalars['Int']>;
  /** @deprecated This information should not be exposed on frontend */
  is_shareable?: Maybe<Scalars['Boolean']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  link_type?: Maybe<DownloadableFileTypeEnum>;
  /** @deprecated This information should not be exposed on frontend */
  number_of_downloads?: Maybe<Scalars['Int']>;
  /** The price of the downloadable product */
  price?: Maybe<Scalars['Float']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_file?: Maybe<Scalars['String']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_type?: Maybe<DownloadableFileTypeEnum>;
  /** URL to the downloadable sample */
  sample_url?: Maybe<Scalars['String']>;
  /** A number indicating the sort order */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name of the link */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `DownloadableProductLinks` object. */
  uid: Scalars['ID'];
};

export type DownloadableFileTypeEnum =
  | 'FILE'
  | 'URL';

/** DownloadableProductSamples defines characteristics of a downloadable product */
export type DownloadableProductSamples = {
  /** @deprecated This information should not be exposed on frontend */
  id?: Maybe<Scalars['Int']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_file?: Maybe<Scalars['String']>;
  /** @deprecated `sample_url` serves to get the downloadable sample */
  sample_type?: Maybe<DownloadableFileTypeEnum>;
  /** URL to the downloadable sample */
  sample_url?: Maybe<Scalars['String']>;
  /** A number indicating the sort order */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name of the sample */
  title?: Maybe<Scalars['String']>;
};

/** DownloadableProduct defines a product that the shopper downloads */
export type DownloadableProduct = ProductInterface & RoutableInterface & CustomizableProductInterface & {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  /** An array containing information about the links for this downloadable product */
  downloadable_product_links?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
  /** An array containing information about samples of this downloadable product. */
  downloadable_product_samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** A value of 1 indicates that each link in the array must be purchased separately */
  links_purchased_separately?: Maybe<Scalars['Int']>;
  /** The heading above the list of downloadable products */
  links_title?: Maybe<Scalars['String']>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
};


/** DownloadableProduct defines a product that the shopper downloads */
export type DownloadableProductreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

export type DownloadableOrderItem = OrderItemInterface & {
  /** The final discount information for the product */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** A list of downloadable links that are ordered from the downloadable product */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
  /** The entered option for the base product, such as a logo or image */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The unique ID for a `OrderItemInterface` object */
  id: Scalars['ID'];
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price of the base product, including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>;
  /** URL key of the base product */
  product_url_key?: Maybe<Scalars['String']>;
  /** The number of canceled items */
  quantity_canceled?: Maybe<Scalars['Float']>;
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
  /** The number of units ordered for this item */
  quantity_ordered?: Maybe<Scalars['Float']>;
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
  /** The number of returned items */
  quantity_returned?: Maybe<Scalars['Float']>;
  /** The number of shipped items */
  quantity_shipped?: Maybe<Scalars['Float']>;
  /** The selected options for the base product, such as color or size */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item */
  status?: Maybe<Scalars['String']>;
};

/** DownloadableProductLinks defines characteristics of a downloadable product */
export type DownloadableItemsLinks = {
  /** A number indicating the sort order */
  sort_order?: Maybe<Scalars['Int']>;
  /** The display name of the link */
  title?: Maybe<Scalars['String']>;
  /** The unique ID for a `DownloadableItemsLinks` object. */
  uid: Scalars['ID'];
};

export type DownloadableInvoiceItem = InvoiceItemInterface & {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** A list of downloadable links that are invoiced from the downloadable product */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
  /** The unique ID for a `InvoiceItemInterface` object */
  id: Scalars['ID'];
  /** Contains details about an individual order item */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
};

export type DownloadableCreditMemoItem = CreditMemoItemInterface & {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** A list of downloadable links that are refunded from the downloadable product */
  downloadable_links?: Maybe<Array<Maybe<DownloadableItemsLinks>>>;
  /** The unique ID for a `CreditMemoItemInterface` object */
  id: Scalars['ID'];
  /** The order item the credit memo is applied to */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product, including selected options */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
};

/** A downloadable product wish list item */
export type DownloadableWishlistItem = WishlistItemInterface & {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** An array containing information about the selected links */
  links_v2?: Maybe<Array<Maybe<DownloadableProductLinks>>>;
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
  /** An array containing information about the selected samples */
  samples?: Maybe<Array<Maybe<DownloadableProductSamples>>>;
};

export type BundleCartItem = CartItemInterface & {
  bundle_options: Array<Maybe<SelectedBundleOption>>;
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use `uid` instead */
  id: Scalars['String'];
  prices?: Maybe<CartItemPrices>;
  product: ProductInterface;
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID'];
};

export type SelectedBundleOption = {
  /** @deprecated Use `uid` instead */
  id: Scalars['Int'];
  label: Scalars['String'];
  type: Scalars['String'];
  /** The unique ID for a `SelectedBundleOption` object */
  uid: Scalars['ID'];
  values: Array<Maybe<SelectedBundleOptionValue>>;
};

export type SelectedBundleOptionValue = {
  /** Use `uid` instead */
  id: Scalars['Int'];
  label: Scalars['String'];
  price: Scalars['Float'];
  quantity: Scalars['Float'];
  /** The unique ID for a `SelectedBundleOptionValue` object */
  uid: Scalars['ID'];
};

/** BundleItem defines an individual item in a bundle product. */
export type BundleItem = {
  /**
   * An ID assigned to each type of item in a bundle product.
   * @deprecated Use `uid` instead
   */
  option_id?: Maybe<Scalars['Int']>;
  /** An array of additional options for this bundle item. */
  options?: Maybe<Array<Maybe<BundleItemOption>>>;
  /** he relative position of this item compared to the other bundle items. */
  position?: Maybe<Scalars['Int']>;
  /** Indicates whether the item must be included in the bundle. */
  required?: Maybe<Scalars['Boolean']>;
  /** The SKU of the bundle product. */
  sku?: Maybe<Scalars['String']>;
  /** The display name of the item. */
  title?: Maybe<Scalars['String']>;
  /** The input type that the customer uses to select the item. Examples include radio button and checkbox. */
  type?: Maybe<Scalars['String']>;
  /** The unique ID for a `BundleItem` object. */
  uid?: Maybe<Scalars['ID']>;
};

/** BundleItemOption defines characteristics and options for a specific bundle item. */
export type BundleItemOption = {
  /** Indicates whether the customer can change the number of items for this option. */
  can_change_quantity?: Maybe<Scalars['Boolean']>;
  /**
   * The ID assigned to the bundled item option.
   * @deprecated Use `uid` instead
   */
  id?: Maybe<Scalars['Int']>;
  /** Indicates whether this option is the default option. */
  is_default?: Maybe<Scalars['Boolean']>;
  /** The text that identifies the bundled item option. */
  label?: Maybe<Scalars['String']>;
  /** When a bundle item contains multiple options, the relative position of this option compared to the other options. */
  position?: Maybe<Scalars['Int']>;
  /** The price of the selected option. */
  price?: Maybe<Scalars['Float']>;
  /** One of FIXED, PERCENT, or DYNAMIC. */
  price_type?: Maybe<PriceTypeEnum>;
  /** Contains details about this product option. */
  product?: Maybe<ProductInterface>;
  /**
   * Indicates the quantity of this specific bundle item.
   * @deprecated The `qty` is deprecated. Use `quantity` instead.
   */
  qty?: Maybe<Scalars['Float']>;
  /** Indicates the quantity of this specific bundle item. */
  quantity?: Maybe<Scalars['Float']>;
  /** The unique ID for a `BundleItemOption` object. */
  uid: Scalars['ID'];
};

/** Defines basic features of a bundle product and contains multiple BundleItems */
export type BundleProduct = ProductInterface & RoutableInterface & PhysicalProductInterface & CustomizableProductInterface & {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  /** Indicates whether the bundle product has a dynamic price. */
  dynamic_price?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the bundle product has a dynamic SK. */
  dynamic_sku?: Maybe<Scalars['Boolean']>;
  /** Indicates whether the bundle product has a dynamically calculated weight. */
  dynamic_weight?: Maybe<Scalars['Boolean']>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** An array containing information about individual bundle items. */
  items?: Maybe<Array<Maybe<BundleItem>>>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  /** One of PRICE_RANGE or AS_LOW_AS. */
  price_view?: Maybe<PriceViewEnum>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** Indicates whether to ship bundle items together or individually. */
  ship_bundle_items?: Maybe<ShipBundleItemsEnum>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};


/** Defines basic features of a bundle product and contains multiple BundleItems */
export type BundleProductreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** This enumeration defines whether a bundle product's price is displayed as the lowest possible value or as a range. */
export type PriceViewEnum =
  | 'PRICE_RANGE'
  | 'AS_LOW_AS';

/** This enumeration defines whether bundle items must be shipped together. */
export type ShipBundleItemsEnum =
  | 'TOGETHER'
  | 'SEPARATELY';

export type BundleOrderItem = OrderItemInterface & {
  /** A list of bundle options that are assigned to the bundle product */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** The final discount information for the product */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The entered option for the base product, such as a logo or image */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The unique ID for a `OrderItemInterface` object */
  id: Scalars['ID'];
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price of the base product, including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>;
  /** URL key of the base product */
  product_url_key?: Maybe<Scalars['String']>;
  /** The number of canceled items */
  quantity_canceled?: Maybe<Scalars['Float']>;
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
  /** The number of units ordered for this item */
  quantity_ordered?: Maybe<Scalars['Float']>;
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
  /** The number of returned items */
  quantity_returned?: Maybe<Scalars['Float']>;
  /** The number of shipped items */
  quantity_shipped?: Maybe<Scalars['Float']>;
  /** The selected options for the base product, such as color or size */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item */
  status?: Maybe<Scalars['String']>;
};

/** A list of options of the selected bundle product */
export type ItemSelectedBundleOption = {
  /**
   * The unique ID for a `ItemSelectedBundleOption` object
   * @deprecated Use `uid` instead
   */
  id: Scalars['ID'];
  /** The label of the option */
  label: Scalars['String'];
  /** The unique ID for a `ItemSelectedBundleOption` object */
  uid: Scalars['ID'];
  /** A list of products that represent the values of the parent option */
  values?: Maybe<Array<Maybe<ItemSelectedBundleOptionValue>>>;
};

/** A list of values for the selected bundle product */
export type ItemSelectedBundleOptionValue = {
  /**
   * The unique ID for a `ItemSelectedBundleOptionValue` object
   * @deprecated Use `uid` instead
   */
  id: Scalars['ID'];
  /** The price of the child bundle product */
  price: Money;
  /** The name of the child bundle product */
  product_name: Scalars['String'];
  /** The SKU of the child bundle product */
  product_sku: Scalars['String'];
  /** Indicates how many of this bundle product were ordered */
  quantity: Scalars['Float'];
  /** The unique ID for a `ItemSelectedBundleOptionValue` object */
  uid: Scalars['ID'];
};

export type BundleInvoiceItem = InvoiceItemInterface & {
  /** A list of bundle options that are assigned to the bundle product */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `InvoiceItemInterface` object */
  id: Scalars['ID'];
  /** Contains details about an individual order item */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
};

export type BundleShipmentItem = ShipmentItemInterface & {
  /** A list of bundle options that are assigned to the bundle product */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** The unique ID for a `ShipmentItemInterface` object */
  id: Scalars['ID'];
  /** Associated order item */
  order_item?: Maybe<OrderItemInterface>;
  /** Name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** Sale price for the base product */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** Number of shipped items */
  quantity_shipped: Scalars['Float'];
};

export type BundleCreditMemoItem = CreditMemoItemInterface & {
  /** A list of bundle options that are assigned to the bundle product */
  bundle_options?: Maybe<Array<Maybe<ItemSelectedBundleOption>>>;
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `CreditMemoItemInterface` object */
  id: Scalars['ID'];
  /** The order item the credit memo is applied to */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product, including selected options */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
};

export type BundleWishlistItem = WishlistItemInterface & {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** An array containing information about the selected bundle items */
  bundle_options?: Maybe<Array<Maybe<SelectedBundleOption>>>;
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
};

export type ConfigurableCartItem = CartItemInterface & {
  configurable_options: Array<Maybe<SelectedConfigurableOption>>;
  /** Product details of the cart item */
  configured_variant: ProductInterface;
  customizable_options?: Maybe<Array<Maybe<SelectedCustomizableOption>>>;
  /** The entered gift message for the cart item */
  gift_message?: Maybe<GiftMessage>;
  /** @deprecated Use `uid` instead */
  id: Scalars['String'];
  prices?: Maybe<CartItemPrices>;
  product: ProductInterface;
  quantity: Scalars['Float'];
  /** The unique ID for a `CartItemInterface` object */
  uid: Scalars['ID'];
};

export type SelectedConfigurableOption = {
  /** The unique ID for a `ConfigurableProductOptions` object */
  configurable_product_option_uid: Scalars['ID'];
  /** The unique ID for a `ConfigurableProductOptionsValues` object */
  configurable_product_option_value_uid: Scalars['ID'];
  /** @deprecated Use SelectedConfigurableOption.configurable_product_option_uid instead */
  id: Scalars['Int'];
  option_label: Scalars['String'];
  /** @deprecated Use SelectedConfigurableOption.configurable_product_option_value_uid instead */
  value_id: Scalars['Int'];
  value_label: Scalars['String'];
};

export type SalesItemInterface = {
  /** The entered gift message for the order item */
  gift_message?: Maybe<GiftMessage>;
};

/** A grouped product consists of simple standalone products that are presented as a group */
export type GroupedProduct = ProductInterface & RoutableInterface & PhysicalProductInterface & {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** An array containing grouped product items */
  items?: Maybe<Array<Maybe<GroupedProductItem>>>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};


/** A grouped product consists of simple standalone products that are presented as a group */
export type GroupedProductreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** GroupedProductItem contains information about an individual grouped product item */
export type GroupedProductItem = {
  /** The relative position of this item compared to the other group items */
  position?: Maybe<Scalars['Int']>;
  /** The ProductInterface object, which contains details about this product option */
  product?: Maybe<ProductInterface>;
  /** The quantity of this grouped product item */
  qty?: Maybe<Scalars['Float']>;
};

/** A grouped product wish list item */
export type GroupedProductWishlistItem = WishlistItemInterface & {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
};

/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export type ConfigurableProduct = ProductInterface & RoutableInterface & PhysicalProductInterface & CustomizableProductInterface & {
  activity?: Maybe<Scalars['String']>;
  /**
   * The attribute set assigned to the product.
   * @deprecated The field should not be used on the storefront.
   */
  attribute_set_id?: Maybe<Scalars['Int']>;
  backorder_delivery_date?: Maybe<Scalars['String']>;
  backorder_delivery_period?: Maybe<Scalars['Int']>;
  /** Relative canonical URL. This value is returned only if the system setting 'Use Canonical Link Meta Tag For Products' is enabled */
  canonical_url?: Maybe<Scalars['String']>;
  /** The categories assigned to a product. */
  categories?: Maybe<Array<Maybe<CategoryInterface>>>;
  category_gear?: Maybe<Scalars['String']>;
  climate?: Maybe<Scalars['String']>;
  collar?: Maybe<Scalars['String']>;
  color?: Maybe<Scalars['Int']>;
  colors?: Maybe<Scalars['String']>;
  compatible_phones?: Maybe<Scalars['Int']>;
  /** An array of linked simple product items */
  configurable_options?: Maybe<Array<Maybe<ConfigurableProductOptions>>>;
  /** Specified configurable product options selection */
  configurable_product_options_selection?: Maybe<ConfigurableProductOptionsSelection>;
  /** The product's country of origin. */
  country_of_manufacture?: Maybe<Scalars['String']>;
  /**
   * Timestamp indicating when the product was created.
   * @deprecated The field should not be used on the storefront.
   */
  created_at?: Maybe<Scalars['String']>;
  /** Crosssell Products */
  crosssell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** Detailed information about the product. The value can include simple HTML tags. */
  description?: Maybe<ComplexTextValue>;
  dominant_color?: Maybe<Scalars['Int']>;
  eco_collection?: Maybe<Scalars['Int']>;
  erin_recommends?: Maybe<Scalars['Int']>;
  features_bags?: Maybe<Scalars['String']>;
  format?: Maybe<Scalars['Int']>;
  gender?: Maybe<Scalars['String']>;
  /** Indicates whether a gift message is available. */
  gift_message_available?: Maybe<Scalars['String']>;
  /**
   * The ID number assigned to the product.
   * @deprecated Use the `uid` field instead.
   */
  id?: Maybe<Scalars['Int']>;
  /** The relative path to the main image on the product page. */
  image?: Maybe<ProductImage>;
  in_stock_delivery_period?: Maybe<Scalars['Int']>;
  /** A number representing the product's manufacturer. */
  manufacturer?: Maybe<Scalars['Int']>;
  material?: Maybe<Scalars['Int']>;
  /** An array of Media Gallery objects. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /**
   * An array of MediaGalleryEntry objects.
   * @deprecated Use product's `media_gallery` instead
   */
  media_gallery_entries?: Maybe<Array<Maybe<MediaGalleryEntry>>>;
  /** A brief overview of the product for search results listings, maximum 255 characters. */
  meta_description?: Maybe<Scalars['String']>;
  /** A comma-separated list of keywords that are visible only to search engines. */
  meta_keyword?: Maybe<Scalars['String']>;
  /** A string that is displayed in the title bar and tab of the browser and in search results lists. */
  meta_title?: Maybe<Scalars['String']>;
  /** The product name. Customers use this name to identify the product. */
  name?: Maybe<Scalars['String']>;
  new?: Maybe<Scalars['Int']>;
  /**
   * The beginning date for new product listings, and determines if the product is featured as a new product.
   * @deprecated The field should not be used on the storefront.
   */
  new_from_date?: Maybe<Scalars['String']>;
  /**
   * The end date for new product listings.
   * @deprecated The field should not be used on the storefront.
   */
  new_to_date?: Maybe<Scalars['String']>;
  /** Product stock only x left count */
  only_x_left_in_stock?: Maybe<Scalars['Float']>;
  /** An array of options for a customizable product. */
  options?: Maybe<Array<Maybe<CustomizableOptionInterface>>>;
  /** If the product has multiple options, determines where they appear on the product page. */
  options_container?: Maybe<Scalars['String']>;
  pattern?: Maybe<Scalars['String']>;
  performance_fabric?: Maybe<Scalars['Int']>;
  /**
   * A ProductPrices object, indicating the price of an item.
   * @deprecated Use price_range for product price information.
   */
  price?: Maybe<ProductPrices>;
  /** A PriceRange object, indicating the range of prices for the product */
  price_range: PriceRange;
  /** An array of TierPrice objects. */
  price_tiers?: Maybe<Array<Maybe<TierPrice>>>;
  print_art?: Maybe<Scalars['String']>;
  print_holiday?: Maybe<Scalars['String']>;
  print_labels?: Maybe<Scalars['String']>;
  print_landmarks?: Maybe<Scalars['String']>;
  print_landscape?: Maybe<Scalars['String']>;
  print_mood?: Maybe<Scalars['String']>;
  print_pattern_swatch?: Maybe<Scalars['Int']>;
  print_type?: Maybe<Scalars['String']>;
  /** An array of ProductLinks objects. */
  product_links?: Maybe<Array<Maybe<ProductLinksInterface>>>;
  /** The average of all the ratings given to the product. */
  rating_summary: Scalars['Float'];
  /** Contains 0 when there is no redirect error. A value of 301 indicates the URL of the requested resource has been changed permanently, while a value of 302 indicates a temporary redirect */
  redirect_code: Scalars['Int'];
  /** Related Products */
  related_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The internal relative URL. If the specified URL is a redirect, the query returns the redirected URL, not the original */
  relative_url?: Maybe<Scalars['String']>;
  /** The total count of all the reviews given to the product. */
  review_count: Scalars['Int'];
  /** The list of products reviews. */
  reviews: ProductReviews;
  sale?: Maybe<Scalars['Int']>;
  /** A short description of the product. Its use depends on the theme. */
  short_description?: Maybe<ComplexTextValue>;
  size?: Maybe<Scalars['Int']>;
  /** A number or code assigned to a product to identify the product, options, price, and manufacturer. */
  sku?: Maybe<Scalars['String']>;
  sleeve?: Maybe<Scalars['String']>;
  /** The relative path to the small image, which is used on catalog pages. */
  small_image?: Maybe<ProductImage>;
  /**
   * The beginning date that a product has a special price.
   * @deprecated The field should not be used on the storefront.
   */
  special_from_date?: Maybe<Scalars['String']>;
  /** The discounted price of the product. */
  special_price?: Maybe<Scalars['Float']>;
  /** The end date that a product has a special price. */
  special_to_date?: Maybe<Scalars['String']>;
  /** Stock status of the product */
  stock_status?: Maybe<ProductStockStatus>;
  strap_bags?: Maybe<Scalars['String']>;
  style_bags?: Maybe<Scalars['String']>;
  style_bottom?: Maybe<Scalars['String']>;
  style_general?: Maybe<Scalars['String']>;
  /** The file name of a swatch image */
  swatch_image?: Maybe<Scalars['String']>;
  th_test_attribute?: Maybe<Scalars['String']>;
  /** The relative path to the product's thumbnail image. */
  thumbnail?: Maybe<ProductImage>;
  /**
   * The price when tier pricing is in effect and the items purchased threshold has been reached.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_price?: Maybe<Scalars['Float']>;
  /**
   * An array of ProductTierPrices objects.
   * @deprecated Use price_tiers for product tier price information.
   */
  tier_prices?: Maybe<Array<Maybe<ProductTierPrices>>>;
  /** One of PRODUCT, CATEGORY, or CMS_PAGE. */
  type?: Maybe<UrlRewriteEntityTypeEnum>;
  /**
   * One of simple, virtual, bundle, downloadable, grouped, or configurable.
   * @deprecated Use __typename instead.
   */
  type_id?: Maybe<Scalars['String']>;
  /** The unique ID for a `ProductInterface` object. */
  uid: Scalars['ID'];
  /**
   * Timestamp indicating when the product was updated.
   * @deprecated The field should not be used on the storefront.
   */
  updated_at?: Maybe<Scalars['String']>;
  /** Upsell Products */
  upsell_products?: Maybe<Array<Maybe<ProductInterface>>>;
  /** The part of the URL that identifies the product */
  url_key?: Maybe<Scalars['String']>;
  /** @deprecated Use product's `canonical_url` or url rewrites instead */
  url_path?: Maybe<Scalars['String']>;
  /** URL rewrites list */
  url_rewrites?: Maybe<Array<Maybe<UrlRewrite>>>;
  /** The part of the product URL that is appended after the url key */
  url_suffix?: Maybe<Scalars['String']>;
  /** An array of variants of products */
  variants?: Maybe<Array<Maybe<ConfigurableVariant>>>;
  /**
   * An array of websites in which the product is available.
   * @deprecated The field should not be used on the storefront.
   */
  websites?: Maybe<Array<Maybe<Website>>>;
  /** The weight of the item, in units defined by the store. */
  weight?: Maybe<Scalars['Float']>;
};


/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export type ConfigurableProductconfigurable_product_options_selectionArgs = {
  configurableOptionValueUids?: InputMaybe<Array<Scalars['ID']>>;
};


/** ConfigurableProduct defines basic features of a configurable product and its simple product variants */
export type ConfigurableProductreviewsArgs = {
  pageSize?: InputMaybe<Scalars['Int']>;
  currentPage?: InputMaybe<Scalars['Int']>;
};

/** ConfigurableProductOptions defines configurable attributes for the specified product */
export type ConfigurableProductOptions = {
  /** A string that identifies the attribute */
  attribute_code?: Maybe<Scalars['String']>;
  /**
   * The ID assigned to the attribute
   * @deprecated Use attribute_uid instead
   */
  attribute_id?: Maybe<Scalars['String']>;
  /**
   * The ID assigned to the attribute
   * @deprecated Use attribute_uid instead
   */
  attribute_id_v2?: Maybe<Scalars['Int']>;
  /** The unique ID for a `Attribute` object */
  attribute_uid: Scalars['ID'];
  /**
   * The configurable option ID number assigned by the system
   * @deprecated Use uid instead
   */
  id?: Maybe<Scalars['Int']>;
  /** A string that describes the configurable product option, which is displayed on the UI */
  label?: Maybe<Scalars['String']>;
  /** A number that indicates the order in which the attribute is displayed */
  position?: Maybe<Scalars['Int']>;
  /**
   * This is the same as a product's id field
   * @deprecated `product_id` is not needed and can be obtained from it's parent
   */
  product_id?: Maybe<Scalars['Int']>;
  /** The unique ID for a `ConfigurableProductOptions` object */
  uid: Scalars['ID'];
  /** Indicates whether the option is the default */
  use_default?: Maybe<Scalars['Boolean']>;
  /** An array that defines the value_index codes assigned to the configurable product */
  values?: Maybe<Array<Maybe<ConfigurableProductOptionsValues>>>;
};

/** ConfigurableProductOptionsValues contains the index number assigned to a configurable product option */
export type ConfigurableProductOptionsValues = {
  /** The label of the product on the default store */
  default_label?: Maybe<Scalars['String']>;
  /** The label of the product */
  label?: Maybe<Scalars['String']>;
  /** The label of the product on the current store */
  store_label?: Maybe<Scalars['String']>;
  /** Swatch data for configurable product option */
  swatch_data?: Maybe<SwatchDataInterface>;
  /** The unique ID for a `ConfigurableProductOptionsValues` object */
  uid?: Maybe<Scalars['ID']>;
  /** Indicates whether to use the default_label */
  use_default_value?: Maybe<Scalars['Boolean']>;
  /**
   * A unique index number assigned to the configurable product option
   * @deprecated Use `uid` instead
   */
  value_index?: Maybe<Scalars['Int']>;
};

export type SwatchDataInterface = {
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>;
};

/** Metadata corresponding to the configurable options selection. */
export type ConfigurableProductOptionsSelection = {
  /** Configurable options available for further selection based on current selection. */
  configurable_options?: Maybe<Array<Maybe<ConfigurableProductOption>>>;
  /** Product images and videos corresponding to the specified configurable options selection. */
  media_gallery?: Maybe<Array<Maybe<MediaGalleryInterface>>>;
  /** Configurable options available for further selection based on current selection. */
  options_available_for_selection?: Maybe<Array<Maybe<ConfigurableOptionAvailableForSelection>>>;
  /** Variant represented by the specified configurable options selection. It is expected to be null, until selections are made for each configurable option. */
  variant?: Maybe<SimpleProduct>;
};

export type ConfigurableProductOption = {
  attribute_code: Scalars['String'];
  label: Scalars['String'];
  uid: Scalars['ID'];
  values?: Maybe<Array<Maybe<ConfigurableProductOptionValue>>>;
};

export type ConfigurableProductOptionValue = {
  is_available: Scalars['Boolean'];
  is_use_default: Scalars['Boolean'];
  label: Scalars['String'];
  swatch?: Maybe<SwatchDataInterface>;
  uid: Scalars['ID'];
};

/** Configurable option available for further selection based on current selection. */
export type ConfigurableOptionAvailableForSelection = {
  /** Attribute code that uniquely identifies configurable option. */
  attribute_code: Scalars['String'];
  /** Configurable option values available for further selection. */
  option_value_uids: Array<Maybe<Scalars['ID']>>;
};

/** An array containing all the simple product variants of a configurable product */
export type ConfigurableVariant = {
  attributes?: Maybe<Array<Maybe<ConfigurableAttributeOption>>>;
  product?: Maybe<SimpleProduct>;
};

/** ConfigurableAttributeOption contains the value_index (and other related information) assigned to a configurable product option */
export type ConfigurableAttributeOption = {
  /** The ID assigned to the attribute */
  code?: Maybe<Scalars['String']>;
  /** A string that describes the configurable attribute option */
  label?: Maybe<Scalars['String']>;
  /** The unique ID for a `ConfigurableAttributeOption` object */
  uid: Scalars['ID'];
  /** A unique index number assigned to the configurable product option */
  value_index?: Maybe<Scalars['Int']>;
};

/** A configurable product wish list item */
export type ConfigurableWishlistItem = WishlistItemInterface & {
  /** The date and time the item was added to the wish list */
  added_at: Scalars['String'];
  /** The SKU of the simple product corresponding to a set of selected configurable options */
  child_sku: Scalars['String'];
  /** An array of selected configurable options */
  configurable_options?: Maybe<Array<Maybe<SelectedConfigurableOption>>>;
  /** Custom options selected for the wish list item */
  customizable_options: Array<Maybe<SelectedCustomizableOption>>;
  /** The description of the item */
  description?: Maybe<Scalars['String']>;
  /** The unique ID for a `WishlistItemInterface` object */
  id: Scalars['ID'];
  /** Product details of the wish list item */
  product?: Maybe<ProductInterface>;
  /** The quantity of this wish list item */
  quantity: Scalars['Float'];
};

/** Deprecated: use type `PaypalExpressTokenOutput` instead */
export type PaypalExpressToken = {
  /**
   * A set of URLs that allow the buyer to authorize payment and adjust checkout details
   * @deprecated Use field `paypal_urls` of type `PaypalExpressTokenOutput` instead
   */
  paypal_urls?: Maybe<PaypalExpressUrlList>;
  /**
   * The token returned by PayPal
   * @deprecated Use field `token` of type `PaypalExpressTokenOutput` instead
   */
  token?: Maybe<Scalars['String']>;
};

/** Contains the secure information used to authorize transaction. Applies to Payflow Pro and Payments Pro payment methods. */
export type PayflowProToken = {
  response_message: Scalars['String'];
  result: Scalars['Int'];
  result_code: Scalars['Int'];
  secure_token: Scalars['String'];
  secure_token_id: Scalars['String'];
};

export type OrderItem = OrderItemInterface & {
  /** The final discount information for the product */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The entered option for the base product, such as a logo or image */
  entered_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The unique ID for a `OrderItemInterface` object */
  id: Scalars['ID'];
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price of the base product, including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The type of product, such as simple, configurable, etc. */
  product_type?: Maybe<Scalars['String']>;
  /** URL key of the base product */
  product_url_key?: Maybe<Scalars['String']>;
  /** The number of canceled items */
  quantity_canceled?: Maybe<Scalars['Float']>;
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
  /** The number of units ordered for this item */
  quantity_ordered?: Maybe<Scalars['Float']>;
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
  /** The number of returned items */
  quantity_returned?: Maybe<Scalars['Float']>;
  /** The number of shipped items */
  quantity_shipped?: Maybe<Scalars['Float']>;
  /** The selected options for the base product, such as color or size */
  selected_options?: Maybe<Array<Maybe<OrderItemOption>>>;
  /** The status of the order item */
  status?: Maybe<Scalars['String']>;
};

export type InvoiceItem = InvoiceItemInterface & {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `InvoiceItemInterface` object */
  id: Scalars['ID'];
  /** Contains details about an individual order item */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product including selected options */
  product_sale_price: Money;
  /** The SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of invoiced items */
  quantity_invoiced?: Maybe<Scalars['Float']>;
};

export type ShipmentItem = ShipmentItemInterface & {
  /** The unique ID for a `ShipmentItemInterface` object */
  id: Scalars['ID'];
  /** Associated order item */
  order_item?: Maybe<OrderItemInterface>;
  /** Name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** Sale price for the base product */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** Number of shipped items */
  quantity_shipped: Scalars['Float'];
};

export type CreditMemoItem = CreditMemoItemInterface & {
  /** Contains information about the final discount amount for the base product, including discounts on options */
  discounts?: Maybe<Array<Maybe<Discount>>>;
  /** The unique ID for a `CreditMemoItemInterface` object */
  id: Scalars['ID'];
  /** The order item the credit memo is applied to */
  order_item?: Maybe<OrderItemInterface>;
  /** The name of the base product */
  product_name?: Maybe<Scalars['String']>;
  /** The sale price for the base product, including selected options */
  product_sale_price: Money;
  /** SKU of the base product */
  product_sku: Scalars['String'];
  /** The number of refunded items */
  quantity_refunded?: Maybe<Scalars['Float']>;
};

export type SwatchLayerFilterItemInterface = {
  /** Data required to render swatch filter item */
  swatch_data?: Maybe<SwatchData>;
};

export type SwatchData = {
  /** Type of swatch filter item: 1 - text, 2 - image */
  type?: Maybe<Scalars['String']>;
  /** Value for swatch item (text or image link) */
  value?: Maybe<Scalars['String']>;
};

export type SwatchLayerFilterItem = LayerFilterItemInterface & SwatchLayerFilterItemInterface & {
  /**
   * Count of items by filter.
   * @deprecated Use AggregationOption.count instead.
   */
  items_count?: Maybe<Scalars['Int']>;
  /**
   * Filter label.
   * @deprecated Use AggregationOption.label instead.
   */
  label?: Maybe<Scalars['String']>;
  /** Data required to render swatch filter item */
  swatch_data?: Maybe<SwatchData>;
  /**
   * Value for filter request variable to be used in query.
   * @deprecated Use AggregationOption.value instead.
   */
  value_string?: Maybe<Scalars['String']>;
};

export type ImageSwatchData = SwatchDataInterface & {
  /** Thumbnail swatch image URL */
  thumbnail?: Maybe<Scalars['String']>;
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>;
};

export type TextSwatchData = SwatchDataInterface & {
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>;
};

export type ColorSwatchData = SwatchDataInterface & {
  /** Value of swatch item (HEX color code, image link or textual value) */
  value?: Maybe<Scalars['String']>;
};

    }
    export type QueryM2Sdk = {
  /** Get a list of available store views and their config information. **/
  availableStores: InContextSdkMethod<M2Types.Query['availableStores'], M2Types.QueryavailableStoresArgs, MeshContext>,
  /** Returns information about shopping cart **/
  cart: InContextSdkMethod<M2Types.Query['cart'], M2Types.QuerycartArgs, MeshContext>,
  /** null **/
  categories: InContextSdkMethod<M2Types.Query['categories'], M2Types.QuerycategoriesArgs, MeshContext>,
  /** The category query searches for categories that match the criteria specified in the search and filter attributes. **/
  category: InContextSdkMethod<M2Types.Query['category'], M2Types.QuerycategoryArgs, MeshContext>,
  /** Returns an array of categories based on the specified filters. **/
  categoryList: InContextSdkMethod<M2Types.Query['categoryList'], M2Types.QuerycategoryListArgs, MeshContext>,
  /** Retrieves an array of configuration data for the chat widget. **/
  chatData: InContextSdkMethod<M2Types.Query['chatData'], {}, MeshContext>,
  /** The Checkout Agreements information **/
  checkoutAgreements: InContextSdkMethod<M2Types.Query['checkoutAgreements'], {}, MeshContext>,
  /** The CMS block query returns information about CMS blocks **/
  cmsBlocks: InContextSdkMethod<M2Types.Query['cmsBlocks'], M2Types.QuerycmsBlocksArgs, MeshContext>,
  /** The CMS page query returns information about a CMS page **/
  cmsPage: InContextSdkMethod<M2Types.Query['cmsPage'], M2Types.QuerycmsPageArgs, MeshContext>,
  /** Return products that have been added to the specified compare list **/
  compareList: InContextSdkMethod<M2Types.Query['compareList'], M2Types.QuerycompareListArgs, MeshContext>,
  /** The countries query provides information for all countries. **/
  countries: InContextSdkMethod<M2Types.Query['countries'], {}, MeshContext>,
  /** The countries query provides information for a single country. **/
  country: InContextSdkMethod<M2Types.Query['country'], M2Types.QuerycountryArgs, MeshContext>,
  /** The currency query returns information about store currency. **/
  currency: InContextSdkMethod<M2Types.Query['currency'], {}, MeshContext>,
  /** The customAttributeMetadata query returns the attribute type, given an attribute code and entity type **/
  customAttributeMetadata: InContextSdkMethod<M2Types.Query['customAttributeMetadata'], M2Types.QuerycustomAttributeMetadataArgs, MeshContext>,
  /** The customer query returns information about a customer account **/
  customer: InContextSdkMethod<M2Types.Query['customer'], {}, MeshContext>,
  /** Returns information about the customer shopping cart **/
  customerCart: InContextSdkMethod<M2Types.Query['customerCart'], {}, MeshContext>,
  /** The query returns the contents of a customer's downloadable products **/
  customerDownloadableProducts: InContextSdkMethod<M2Types.Query['customerDownloadableProducts'], {}, MeshContext>,
  /** null **/
  customerOrders: InContextSdkMethod<M2Types.Query['customerOrders'], {}, MeshContext>,
  /** Return a list of customer payment tokens **/
  customerPaymentTokens: InContextSdkMethod<M2Types.Query['customerPaymentTokens'], {}, MeshContext>,
  /** Returns status of Easy Email Capture for Checkout. **/
  emailCaptureCheckout: InContextSdkMethod<M2Types.Query['emailCaptureCheckout'], {}, MeshContext>,
  /** Returns status of Easy Email Capture for Newsletter. **/
  emailCaptureNewsletter: InContextSdkMethod<M2Types.Query['emailCaptureNewsletter'], {}, MeshContext>,
  /** Retrieve secure PayPal url for Payments Pro Hosted Solution transaction. **/
  getHostedProUrl: InContextSdkMethod<M2Types.Query['getHostedProUrl'], M2Types.QuerygetHostedProUrlArgs, MeshContext>,
  /** Retrieve payment credentials for transaction. Use this query for Payflow Link and Payments Advanced payment methods. **/
  getPayflowLinkToken: InContextSdkMethod<M2Types.Query['getPayflowLinkToken'], M2Types.QuerygetPayflowLinkTokenArgs, MeshContext>,
  /** null **/
  isEmailAvailable: InContextSdkMethod<M2Types.Query['isEmailAvailable'], M2Types.QueryisEmailAvailableArgs, MeshContext>,
  /** null **/
  mollieCustomerOrder: InContextSdkMethod<M2Types.Query['mollieCustomerOrder'], M2Types.QuerymollieCustomerOrderArgs, MeshContext>,
  /** null **/
  molliePaymentMethods: InContextSdkMethod<M2Types.Query['molliePaymentMethods'], M2Types.QuerymolliePaymentMethodsArgs, MeshContext>,
  /** Retrieves information about an order by order id. **/
  orderData: InContextSdkMethod<M2Types.Query['orderData'], M2Types.QueryorderDataArgs, MeshContext>,
  /** The pickup locations query searches for locations that match the search request requirements. **/
  pickupLocations: InContextSdkMethod<M2Types.Query['pickupLocations'], M2Types.QuerypickupLocationsArgs, MeshContext>,
  /** Retrieves metadata required by clients to render the Reviews section. **/
  productReviewRatingsMetadata: InContextSdkMethod<M2Types.Query['productReviewRatingsMetadata'], {}, MeshContext>,
  /** The products query searches for products that match the criteria specified in the search and filter attributes. **/
  products: InContextSdkMethod<M2Types.Query['products'], M2Types.QueryproductsArgs, MeshContext>,
  /** Return the full details for a specified product, category, or CMS page given the specified url_key, appended by the url_suffix, if one exists **/
  route: InContextSdkMethod<M2Types.Query['route'], M2Types.QueryrouteArgs, MeshContext>,
  /** The store config query **/
  storeConfig: InContextSdkMethod<M2Types.Query['storeConfig'], {}, MeshContext>,
  /** Retrieves an array of configuration data for different types of tracking. **/
  trackingData: InContextSdkMethod<M2Types.Query['trackingData'], {}, MeshContext>,
  /** The urlResolver query returns the relative URL for a specified product, category or CMS page, using as input a url_key appended by the url_suffix, if one exists **/
  urlResolver: InContextSdkMethod<M2Types.Query['urlResolver'], M2Types.QueryurlResolverArgs, MeshContext>,
  /** The wishlist query returns the contents of a customer's wish list **/
  wishlist: InContextSdkMethod<M2Types.Query['wishlist'], {}, MeshContext>
};

export type MutationM2Sdk = {
  /** null **/
  addBundleProductsToCart: InContextSdkMethod<M2Types.Mutation['addBundleProductsToCart'], M2Types.MutationaddBundleProductsToCartArgs, MeshContext>,
  /** null **/
  addConfigurableProductsToCart: InContextSdkMethod<M2Types.Mutation['addConfigurableProductsToCart'], M2Types.MutationaddConfigurableProductsToCartArgs, MeshContext>,
  /** null **/
  addDownloadableProductsToCart: InContextSdkMethod<M2Types.Mutation['addDownloadableProductsToCart'], M2Types.MutationaddDownloadableProductsToCartArgs, MeshContext>,
  /** Add any type of product to the cart **/
  addProductsToCart: InContextSdkMethod<M2Types.Mutation['addProductsToCart'], M2Types.MutationaddProductsToCartArgs, MeshContext>,
  /** Add products to the specified compare list **/
  addProductsToCompareList: InContextSdkMethod<M2Types.Mutation['addProductsToCompareList'], M2Types.MutationaddProductsToCompareListArgs, MeshContext>,
  /** Adds one or more products to the specified wish list. This mutation supports all product types **/
  addProductsToWishlist: InContextSdkMethod<M2Types.Mutation['addProductsToWishlist'], M2Types.MutationaddProductsToWishlistArgs, MeshContext>,
  /** null **/
  addSimpleProductsToCart: InContextSdkMethod<M2Types.Mutation['addSimpleProductsToCart'], M2Types.MutationaddSimpleProductsToCartArgs, MeshContext>,
  /** null **/
  addVirtualProductsToCart: InContextSdkMethod<M2Types.Mutation['addVirtualProductsToCart'], M2Types.MutationaddVirtualProductsToCartArgs, MeshContext>,
  /** Add items in the specified wishlist to the customer's cart **/
  addWishlistItemsToCart: InContextSdkMethod<M2Types.Mutation['addWishlistItemsToCart'], M2Types.MutationaddWishlistItemsToCartArgs, MeshContext>,
  /** null **/
  applyCouponToCart: InContextSdkMethod<M2Types.Mutation['applyCouponToCart'], M2Types.MutationapplyCouponToCartArgs, MeshContext>,
  /** Assign the specified compare list to the logged in customer **/
  assignCompareListToCustomer: InContextSdkMethod<M2Types.Mutation['assignCompareListToCustomer'], M2Types.MutationassignCompareListToCustomerArgs, MeshContext>,
  /** Changes the password for the logged-in customer **/
  changeCustomerPassword: InContextSdkMethod<M2Types.Mutation['changeCustomerPassword'], M2Types.MutationchangeCustomerPasswordArgs, MeshContext>,
  /** Creates Client Token for Braintree Javascript SDK initialization. **/
  createBraintreeClientToken: InContextSdkMethod<M2Types.Mutation['createBraintreeClientToken'], {}, MeshContext>,
  /** Creates a new compare list. The compare list is saved for logged in customers **/
  createCompareList: InContextSdkMethod<M2Types.Mutation['createCompareList'], M2Types.MutationcreateCompareListArgs, MeshContext>,
  /** Create customer account **/
  createCustomer: InContextSdkMethod<M2Types.Mutation['createCustomer'], M2Types.MutationcreateCustomerArgs, MeshContext>,
  /** Create customer address **/
  createCustomerAddress: InContextSdkMethod<M2Types.Mutation['createCustomerAddress'], M2Types.MutationcreateCustomerAddressArgs, MeshContext>,
  /** Create customer account **/
  createCustomerV2: InContextSdkMethod<M2Types.Mutation['createCustomerV2'], M2Types.MutationcreateCustomerV2Args, MeshContext>,
  /** Creates an empty shopping cart for a guest or logged in user **/
  createEmptyCart: InContextSdkMethod<M2Types.Mutation['createEmptyCart'], M2Types.MutationcreateEmptyCartArgs, MeshContext>,
  /** Creates a Klarna Payments Session. **/
  createKlarnaPaymentsSession: InContextSdkMethod<M2Types.Mutation['createKlarnaPaymentsSession'], M2Types.MutationcreateKlarnaPaymentsSessionArgs, MeshContext>,
  /** null **/
  createMollieTransaction: InContextSdkMethod<M2Types.Mutation['createMollieTransaction'], M2Types.MutationcreateMollieTransactionArgs, MeshContext>,
  /** Initiates a transaction and receives a token. Use this mutation for Payflow Pro and Payments Pro payment methods **/
  createPayflowProToken: InContextSdkMethod<M2Types.Mutation['createPayflowProToken'], M2Types.MutationcreatePayflowProTokenArgs, MeshContext>,
  /** Initiates an Express Checkout transaction and receives a token. Use this mutation for Express Checkout and Payments Standard payment methods. **/
  createPaypalExpressToken: InContextSdkMethod<M2Types.Mutation['createPaypalExpressToken'], M2Types.MutationcreatePaypalExpressTokenArgs, MeshContext>,
  /** Creates a product review for the specified SKU **/
  createProductReview: InContextSdkMethod<M2Types.Mutation['createProductReview'], M2Types.MutationcreateProductReviewArgs, MeshContext>,
  /** Delete the specified compare list **/
  deleteCompareList: InContextSdkMethod<M2Types.Mutation['deleteCompareList'], M2Types.MutationdeleteCompareListArgs, MeshContext>,
  /** Delete customer address **/
  deleteCustomerAddress: InContextSdkMethod<M2Types.Mutation['deleteCustomerAddress'], M2Types.MutationdeleteCustomerAddressArgs, MeshContext>,
  /** Delete a customer payment token **/
  deletePaymentToken: InContextSdkMethod<M2Types.Mutation['deletePaymentToken'], M2Types.MutationdeletePaymentTokenArgs, MeshContext>,
  /** Retrieve the customer token **/
  generateCustomerToken: InContextSdkMethod<M2Types.Mutation['generateCustomerToken'], M2Types.MutationgenerateCustomerTokenArgs, MeshContext>,
  /** Request a customer token so that an administrator can perform remote shopping assistance **/
  generateCustomerTokenAsAdmin: InContextSdkMethod<M2Types.Mutation['generateCustomerTokenAsAdmin'], M2Types.MutationgenerateCustomerTokenAsAdminArgs, MeshContext>,
  /** Handles payment response and saves payment in Quote. Use this mutations for Payflow Pro and Payments Pro payment methods. **/
  handlePayflowProResponse: InContextSdkMethod<M2Types.Mutation['handlePayflowProResponse'], M2Types.MutationhandlePayflowProResponseArgs, MeshContext>,
  /** Merges the source cart into the destination cart **/
  mergeCarts: InContextSdkMethod<M2Types.Mutation['mergeCarts'], M2Types.MutationmergeCartsArgs, MeshContext>,
  /** null **/
  mollieProcessTransaction: InContextSdkMethod<M2Types.Mutation['mollieProcessTransaction'], M2Types.MutationmollieProcessTransactionArgs, MeshContext>,
  /** null **/
  mollieRestoreCart: InContextSdkMethod<M2Types.Mutation['mollieRestoreCart'], M2Types.MutationmollieRestoreCartArgs, MeshContext>,
  /** null **/
  placeOrder: InContextSdkMethod<M2Types.Mutation['placeOrder'], M2Types.MutationplaceOrderArgs, MeshContext>,
  /** null **/
  removeCouponFromCart: InContextSdkMethod<M2Types.Mutation['removeCouponFromCart'], M2Types.MutationremoveCouponFromCartArgs, MeshContext>,
  /** null **/
  removeItemFromCart: InContextSdkMethod<M2Types.Mutation['removeItemFromCart'], M2Types.MutationremoveItemFromCartArgs, MeshContext>,
  /** Remove products from the specified compare list **/
  removeProductsFromCompareList: InContextSdkMethod<M2Types.Mutation['removeProductsFromCompareList'], M2Types.MutationremoveProductsFromCompareListArgs, MeshContext>,
  /** Removes one or more products from the specified wish list **/
  removeProductsFromWishlist: InContextSdkMethod<M2Types.Mutation['removeProductsFromWishlist'], M2Types.MutationremoveProductsFromWishlistArgs, MeshContext>,
  /** Adds all products from a customer's previous order to the cart. **/
  reorderItems: InContextSdkMethod<M2Types.Mutation['reorderItems'], M2Types.MutationreorderItemsArgs, MeshContext>,
  /** Request an email with a reset password token for the registered customer identified by the specified email. **/
  requestPasswordResetEmail: InContextSdkMethod<M2Types.Mutation['requestPasswordResetEmail'], M2Types.MutationrequestPasswordResetEmailArgs, MeshContext>,
  /** Reset a customer's password using the reset password token that the customer received in an email after requesting it using requestPasswordResetEmail. **/
  resetPassword: InContextSdkMethod<M2Types.Mutation['resetPassword'], M2Types.MutationresetPasswordArgs, MeshContext>,
  /** Revoke the customer token **/
  revokeCustomerToken: InContextSdkMethod<M2Types.Mutation['revokeCustomerToken'], {}, MeshContext>,
  /** Recommends Product by Sending Single/Multiple Email **/
  sendEmailToFriend: InContextSdkMethod<M2Types.Mutation['sendEmailToFriend'], M2Types.MutationsendEmailToFriendArgs, MeshContext>,
  /** null **/
  setBillingAddressOnCart: InContextSdkMethod<M2Types.Mutation['setBillingAddressOnCart'], M2Types.MutationsetBillingAddressOnCartArgs, MeshContext>,
  /** null **/
  setGuestEmailOnCart: InContextSdkMethod<M2Types.Mutation['setGuestEmailOnCart'], M2Types.MutationsetGuestEmailOnCartArgs, MeshContext>,
  /** null **/
  setPaymentMethodAndPlaceOrder: InContextSdkMethod<M2Types.Mutation['setPaymentMethodAndPlaceOrder'], M2Types.MutationsetPaymentMethodAndPlaceOrderArgs, MeshContext>,
  /** null **/
  setPaymentMethodOnCart: InContextSdkMethod<M2Types.Mutation['setPaymentMethodOnCart'], M2Types.MutationsetPaymentMethodOnCartArgs, MeshContext>,
  /** null **/
  setShippingAddressesOnCart: InContextSdkMethod<M2Types.Mutation['setShippingAddressesOnCart'], M2Types.MutationsetShippingAddressesOnCartArgs, MeshContext>,
  /** null **/
  setShippingMethodsOnCart: InContextSdkMethod<M2Types.Mutation['setShippingMethodsOnCart'], M2Types.MutationsetShippingMethodsOnCartArgs, MeshContext>,
  /** Subscribes the specified email to a newsletter **/
  subscribeEmailToNewsletter: InContextSdkMethod<M2Types.Mutation['subscribeEmailToNewsletter'], M2Types.MutationsubscribeEmailToNewsletterArgs, MeshContext>,
  /** null **/
  updateCartItems: InContextSdkMethod<M2Types.Mutation['updateCartItems'], M2Types.MutationupdateCartItemsArgs, MeshContext>,
  /** Sends chat profile data to Engagement Cloud. **/
  updateChatProfile: InContextSdkMethod<M2Types.Mutation['updateChatProfile'], M2Types.MutationupdateChatProfileArgs, MeshContext>,
  /** Deprecated. Use UpdateCustomerV2 instead. **/
  updateCustomer: InContextSdkMethod<M2Types.Mutation['updateCustomer'], M2Types.MutationupdateCustomerArgs, MeshContext>,
  /** Update customer address **/
  updateCustomerAddress: InContextSdkMethod<M2Types.Mutation['updateCustomerAddress'], M2Types.MutationupdateCustomerAddressArgs, MeshContext>,
  /** null **/
  updateCustomerEmail: InContextSdkMethod<M2Types.Mutation['updateCustomerEmail'], M2Types.MutationupdateCustomerEmailArgs, MeshContext>,
  /** Update the customer's personal information **/
  updateCustomerV2: InContextSdkMethod<M2Types.Mutation['updateCustomerV2'], M2Types.MutationupdateCustomerV2Args, MeshContext>,
  /** Updates one or more products in the specified wish list **/
  updateProductsInWishlist: InContextSdkMethod<M2Types.Mutation['updateProductsInWishlist'], M2Types.MutationupdateProductsInWishlistArgs, MeshContext>,
  /** Updates the email address of a quote. **/
  updateQuoteEmail: InContextSdkMethod<M2Types.Mutation['updateQuoteEmail'], M2Types.MutationupdateQuoteEmailArgs, MeshContext>
};

export type SubscriptionM2Sdk = {

};

export type GraphcmsContext = {
      ["graphcms"]: { Query: QueryGraphcmsSdk, Mutation: MutationGraphcmsSdk, Subscription: SubscriptionGraphcmsSdk },
    };

export type M2Context = {
      ["m2"]: { Query: QueryM2Sdk, Mutation: MutationM2Sdk, Subscription: SubscriptionM2Sdk },
    };

export type MeshContext = GraphcmsContext & M2Context & BaseMeshContext;


import { getMesh } from '@graphql-mesh/runtime';
import { MeshStore, FsStoreStorageAdapter } from '@graphql-mesh/store';
import { path as pathModule } from '@graphql-mesh/cross-helpers';
import { fileURLToPath } from '@graphql-mesh/utils';
import * as ExternalModule_0 from '@graphql-mesh/cache-inmemory-lru';
import * as ExternalModule_1 from '@graphql-mesh/graphql';
import * as ExternalModule_2 from '@graphql-mesh/merger-stitching';
import * as ExternalModule_3 from '@graphql-mesh/transform-filter-schema';
import * as ExternalModule_4 from './sources/graphcms/introspectionSchema';
import * as ExternalModule_5 from './sources/m2/introspectionSchema';

const importedModules: Record<string, any> = {
  // @ts-ignore
  ["@graphql-mesh/cache-inmemory-lru"]: ExternalModule_0,
  // @ts-ignore
  ["@graphql-mesh/graphql"]: ExternalModule_1,
  // @ts-ignore
  ["@graphql-mesh/merger-stitching"]: ExternalModule_2,
  // @ts-ignore
  ["@graphql-mesh/transform-filter-schema"]: ExternalModule_3,
  // @ts-ignore
  [".mesh/sources/graphcms/introspectionSchema"]: ExternalModule_4,
  // @ts-ignore
  [".mesh/sources/m2/introspectionSchema"]: ExternalModule_5
};

const baseDir = pathModule.join(__dirname, '..');

const importFn = (moduleId: string) => {
  const relativeModuleId = (pathModule.isAbsolute(moduleId) ? pathModule.relative(baseDir, moduleId) : moduleId).split('\\').join('/').replace(baseDir + '/', '');
  if (!(relativeModuleId in importedModules)) {
    throw new Error(`Cannot find module '${relativeModuleId}'.`);
  }
  return Promise.resolve(importedModules[relativeModuleId]);
};

const rootStore = new MeshStore('.mesh', new FsStoreStorageAdapter({
  cwd: baseDir,
  importFn,
  fileType: 'ts',
}), {
  readonly: true,
  validate: false
});

import { GetMeshOptions } from '@graphql-mesh/runtime';
import { YamlConfig } from '@graphql-mesh/types';
import { parse } from 'graphql';
import { PubSub } from '@graphql-mesh/utils';
import MeshCache from '@graphql-mesh/cache-inmemory-lru';
import { DefaultLogger } from '@graphql-mesh/utils';
import GraphqlHandler from '@graphql-mesh/graphql'
import StitchingMerger from '@graphql-mesh/merger-stitching';
import FilterSchemaTransform from '@graphql-mesh/transform-filter-schema';
import { resolveAdditionalResolvers } from '@graphql-mesh/utils';
import { parseWithCache } from '@graphql-mesh/utils';
export const rawConfig: YamlConfig.Config = {"sources":[{"name":"graphcms","handler":{"graphql":{"endpoint":"https://api-eu-central-1.graphcms.com/v2/ckhx7xadya6xs01yxdujt8i80/master"}},"transforms":[{"filterSchema":{"mode":"bare","filters":["Mutation.none"]}}]},{"name":"m2","handler":{"graphql":{"endpoint":"https://backend.reachdigital.dev/graphql","schemaHeaders":{"Store":"{context.headers.store}","Authorization":"{context.headers.authorization}"},"operationHeaders":{"Store":"{context.headers.store}","Authorization":"{context.headers.authorization}","X-ReCaptcha":"{context.headers['x-recaptcha']}","Preview-Version":"{context.headers['preview-version']}","Content-Currency":"{context.headers['content-currency']}"}}}}],"additionalResolvers":[],"additionalTypeDefs":["../../**/*.graphqls","../../packages/magento-*/**/*.graphqls","../../packagesDev/**/*.graphqls"]} as any
export async function getMeshOptions(): Promise<GetMeshOptions> {
const pubsub = new PubSub();
const cache = new (MeshCache as any)({
      ...(rawConfig.cache || {}),
      importFn,
      store: rootStore.child('cache'),
      pubsub,
    } as any)
const sourcesStore = rootStore.child('sources');
const logger = new DefaultLogger('🕸️');
const sources = [];
const transforms = [];
const graphcmsTransforms = [];
const m2Transforms = [];
const graphcmsHandler = new GraphqlHandler({
              name: rawConfig.sources[0].name,
              config: rawConfig.sources[0].handler["graphql"],
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[0].name),
              logger: logger.child(rawConfig.sources[0].name),
              importFn
            });
const m2Handler = new GraphqlHandler({
              name: rawConfig.sources[1].name,
              config: rawConfig.sources[1].handler["graphql"],
              baseDir,
              cache,
              pubsub,
              store: sourcesStore.child(rawConfig.sources[1].name),
              logger: logger.child(rawConfig.sources[1].name),
              importFn
            });
sources.push({
          name: 'm2',
          handler: m2Handler,
          transforms: m2Transforms
        })
const merger = new(StitchingMerger as any)({
        cache,
        pubsub,
        logger: logger.child('StitchingMerger'),
        store: rootStore.child('stitchingMerger')
      })
graphcmsTransforms.push(
                new FilterSchemaTransform({
                  apiName: rawConfig.sources[0].name,
                  config: rawConfig.sources[0].transforms[0]["filterSchema"],
                  baseDir,
                  cache,
                  pubsub,
                  importFn
                })
              );
sources.push({
          name: 'graphcms',
          handler: graphcmsHandler,
          transforms: graphcmsTransforms
        })
const additionalTypeDefs = [parse("\"\"\"\nDefines wheter a Fragment can be injected\n\n```graphql\nfragment MyInjectableFragment on Model @injectable {\n  id\n}\n```\n\"\"\"\ndirective @injectable on FRAGMENT_DEFINITION\n\n\"\"\"\nDefines whether a Fragment injects into an @injectable\n\n```graphql\nfragment MyFragment on Model @inject(into [\"MyInjectableFragment\"]) {\n  field\n}\n```\n\"\"\"\ndirective @inject(into: [String!]!) on FRAGMENT_DEFINITION"),,parse("extend type Query {\n  currentCartId: CurrentCartId\n}\n\ntype CurrentCartId {\n  id: String\n}\n\ninput RegisterCartIdInput {\n  cart_id: String!\n}"),,parse("extend type Query {\n  customerToken: CustomerToken\n}\n\nextend type CustomerToken {\n  createdAt: String\n  valid: Boolean\n}"),,parse("extend type Query {\n  currentCartId: CurrentCartId\n}\n\ntype CurrentCartId {\n  id: String\n}\n\ninput RegisterCartIdInput {\n  cart_id: String!\n}"),,parse("extend type Query {\n  currentCartId: CurrentCartId\n}\n\ntype CurrentCartId {\n  id: String\n}\n\ninput RegisterCartIdInput {\n  cart_id: String!\n}"),,parse("extend type Query {\n  customerToken: CustomerToken\n}\n\nextend type CustomerToken {\n  createdAt: String\n  valid: Boolean\n}"),,parse("extend type Query {\n  customerToken: CustomerToken\n}\n\nextend type CustomerToken {\n  createdAt: String\n  valid: Boolean\n}"),,parse("\"\"\"\nDefines wheter a Fragment can be injected\n\n```graphql\nfragment MyInjectableFragment on Model @injectable {\n  id\n}\n```\n\"\"\"\ndirective @injectable on FRAGMENT_DEFINITION\n\n\"\"\"\nDefines whether a Fragment injects into an @injectable\n\n```graphql\nfragment MyFragment on Model @inject(into [\"MyInjectableFragment\"]) {\n  field\n}\n```\n\"\"\"\ndirective @inject(into: [String!]!) on FRAGMENT_DEFINITION"),,parse("\"\"\"\nDefines wheter a Fragment can be injected\n\n```graphql\nfragment MyInjectableFragment on Model @injectable {\n  id\n}\n```\n\"\"\"\ndirective @injectable on FRAGMENT_DEFINITION\n\n\"\"\"\nDefines whether a Fragment injects into an @injectable\n\n```graphql\nfragment MyFragment on Model @inject(into [\"MyInjectableFragment\"]) {\n  field\n}\n```\n\"\"\"\ndirective @inject(into: [String!]!) on FRAGMENT_DEFINITION"),] as any[];
const additionalResolversRawConfig = [];
const additionalResolvers = await resolveAdditionalResolvers(
      baseDir,
      additionalResolversRawConfig,
      importFn,
      pubsub
  )
const liveQueryInvalidations = rawConfig.liveQueryInvalidations;
const additionalEnvelopPlugins = [];
const documents = documentsInSDL.map((documentSdl: string, i: number) => ({
              rawSDL: documentSdl,
              document: parseWithCache(documentSdl),
              location: `document_${i}.graphql`,
            }))

  return {
    sources,
    transforms,
    additionalTypeDefs,
    additionalResolvers,
    cache,
    pubsub,
    merger,
    logger,
    liveQueryInvalidations,
    additionalEnvelopPlugins,
    documents,
  };
}

export const documentsInSDL = /*#__PURE__*/ [];

export async function getBuiltMesh(): Promise<MeshInstance<MeshContext>> {
  const meshConfig = await getMeshOptions();
  return getMesh<MeshContext>(meshConfig);
}

export async function getMeshSDK<TGlobalContext = any, TOperationContext = any>(globalContext?: TGlobalContext) {
  const { sdkRequesterFactory } = await getBuiltMesh();
  return getSdk<TOperationContext>(sdkRequesterFactory(globalContext));
}

export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
export function getSdk<C>(requester: Requester<C>) {
  return {

  };
}
export type Sdk = ReturnType<typeof getSdk>;