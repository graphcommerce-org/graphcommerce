"""
The @client directive allows you to resolve client-only data alongside your server data. These fields are not sent to the GraphQL server.
"""
directive @client on FIELD

"""
The @connection directive allows you to specify a custom cache key for paginated results. For more information, see this section on the [@connection directive](https://www.apollographql.com/docs/react/caching/advanced-topics/#the-connection-directive).
"""
directive @connection(key: String, filter: [String]) on FIELD

"""
This directive enables your queries to receive data for specific fields incrementally, instead of receiving all field data at the same time. This is helpful whenever some fields in a query take much longer to resolve than others.
"""
directive @defer(if: Boolean! = true, label: String) on FRAGMENT_SPREAD | INLINE_FRAGMENT

# """
# Directs the executor to stream plural fields when the `if` argument is true or undefined.
# """
# directive @stream(if: Boolean! = true, label: String, initialCount: Int! = 0) on FIELD

directive @export(exportName: String!) on FIELD

"""
The @nonreactive directive can be used to mark query fields or fragment spreads and is used to indicate that changes to the data contained within the subtrees marked @nonreactive should not trigger rerendering.
"""
directive @nonreactive on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT
