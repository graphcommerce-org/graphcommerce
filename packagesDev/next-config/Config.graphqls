"""
# GraphCommerce configuration system

Global GraphCommerce configuration can be configured in your `graphcommerce.config.js` file
in the root of your project and are automatically validated on startup.

## Configuring with the configuration file.

The configuration file is a javascript file that exports a `GraphCommerceConfig` object. See graphcommerce.config.js.example for an example.

## Using configuration

Configuration can be accessed in your project with the `import.meta.graphCommerce` object.

```tsx
import { storefrontAll, storefrontConfig, storefrontConfigDefault, useStorefrontConfig } from '@graphcommerce/next-ui'

// Accessing a global value
const globalConf = import.meta.graphCommerce.cartDisplayPricesInclTax

function MyComponent() {
  // Configuration configured per storefront locale.
  const scopedConfig = useStorefrontConfig().cartDisplayPricesInclTax

  // Creating a fallback system
  const scopedConfigWithFallback = scopedConfig ?? globalConf

  // Or as single line
  const scopedConfigWithFallback2 =
    useStorefrontConfig().cartDisplayPricesInclTax ?? import.meta.graphCommerce.cartDisplayPricesInclTax

  return <div>{googleRecaptchaKey}</div>
}
```

You can also use the configuration in your `.meshrc.yml` by accessing
`{graphCommerce.myField}`

```yml
endpoint: '{graphCommerce.magentoEndpoint}'
```

## Environment variables to override configuration

Configuration values can be overwriten by environment variables, with the following rules:
- Convert from camelCase to `SCREAMING_SNAKE_CASE`
- Prefix with `GC_`
- Arrays can be indexed with `_0`, `_1`, `_2`, etc.
- Objects can be accessed with `_<key>`.

Examples:
- `limitSsg` -> `GC_LIMIT_SSG="1"`
- `storefront[0].locale` -> `GC_STOREFRONT_0_LOCALE="en"`
- `debug.pluginStatus` -> `GC_DEBUG_PLUGIN_STATUS="1"`


## Exporting current configuration to environment variables

You can export configuration by running `yarn graphcommerce export-config`

## Extending the configuration in your  project

Create a graphql/Config.graphqls file in your project and extend the GraphCommerceConfig, GraphCommerceStorefrontConfig inputs to add configuration.

```graphql
extend input GraphCommerceConfig {
  myConfig: String # or Boolean, or Int, or Float, make required with `!`
}
extend input GraphCommerceStorefrontConfig {
  myField: Boolean
}
```

## All configuration values

Below is a list of all possible configurations that can be set by GraphCommerce.
"""
input GraphCommerceConfig {
  """
  All storefront configuration for the project
  """
  storefront: [GraphCommerceStorefrontConfig!]!

  """
  Limit the static generation of SSG when building
  """
  limitSsg: Boolean

  """
  Allow the site to be indexed by search engines.
  If false, the robots.txt file will be set to disallow all.
  """
  robotsAllow: Boolean

  """
  The canonical base URL is used for SEO purposes.

  Examples:
  - https://example.com
  - https://example.com/en
  - https://example.com/en-US
  """
  canonicalBaseUrl: String!

  """
  To enable next.js' preview mode, configure the secret you'd like to use.
  """
  previewSecret: String

  """
  Debug configuration for GraphCommerce
  """
  debug: GraphCommerceDebugConfig
}

"""
All storefront configuration for the project
"""
input GraphCommerceStorefrontConfig {
  """
  There can only be one entry with defaultLocale set to true.
  - If there are more, the first one is used.
  - If there is none, the first entry is used.
  """
  defaultLocale: Boolean

  """
  Domain configuration, must be a domain https://tools.ietf.org/html/rfc3986
  """
  domain: String

  """
  Must be a locale string https://www.unicode.org/reports/tr35/tr35-59/tr35.html#Identifiers

  Note that underscores (`_`) as separators are currently not supported.
  """
  locale: String!

  # """
  # Allow the site to be indexed by search engines.
  # If false, the robots.txt file will be set to disallow all.
  # """
  # robotsAllow: Boolean

  """
  The canonical base URL is used for SEO purposes.

  Examples:
  - https://example.com
  - https://example.com/en
  - https://example.com/en-US
  """
  canonicalBaseUrl: String
}

"""
Debug configuration for GraphCommerce
"""
input GraphCommerceDebugConfig {
  """
  When updating packages it can happen that the same package is included with different versions in the same project.

  Issues that this can cause are:
  - The same package is included multiple times in the bundle, increasing the bundle size.
  - The Typescript types of the package are not compatible with each other, causing Typescript errors.
  """
  webpackDuplicatesPlugin: Boolean

  """
  Cyclic dependencies can cause memory issues and other strange bugs.
  This plugin will warn you when it detects a cyclic dependency.

  When running into memory issues, it can be useful to enable this plugin.
  """
  webpackCircularDependencyPlugin: Boolean

  """
  Reports which plugins are enabled or disabled.
  """
  pluginStatus: Boolean
}
